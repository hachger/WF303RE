
WF303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a110  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800a2a4  0800a2a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a444  0800a444  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a444  0800a444  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a444  0800a444  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a444  0800a444  0001a444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a448  0800a448  0001a448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a44c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00001c40  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001c4c  20001c4c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a35  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002842  00000000  00000000  00034a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  000372b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb8  00000000  00000000  00038358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021955  00000000  00000000  00039310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001571d  00000000  00000000  0005ac65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2c34  00000000  00000000  00070382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142fb6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046a0  00000000  00000000  00143008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800a28c 	.word	0x0800a28c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800a28c 	.word	0x0800a28c

080001d4 <ESP01Init>:
static ESP01STATE lastESP01STATE = ESP01WIFIDISCONNECTED;

static int aux = 0;


void ESP01Init(ESP01GpioWriteCH_EN *aESP01GpioWriteCH_EN, ESP01OnUDPData *aESP01OnUDPData){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
	doESP01GpioWriteCH_EN = aESP01GpioWriteCH_EN;
 80001de:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <ESP01Init+0x24>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	6013      	str	r3, [r2, #0]
	doESP01OnUDPData = aESP01OnUDPData;
 80001e4:	4a05      	ldr	r2, [pc, #20]	; (80001fc <ESP01Init+0x28>)
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	6013      	str	r3, [r2, #0]
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	200004c4 	.word	0x200004c4
 80001fc:	200004c8 	.word	0x200004c8

08000200 <ESP01SetWIFI>:

uint8_t ESP01SetWIFI(char *aSSID, char *aPASSWORD){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
	strncpy(SSID, aSSID, 48);
 800020a:	2230      	movs	r2, #48	; 0x30
 800020c:	6879      	ldr	r1, [r7, #4]
 800020e:	4809      	ldr	r0, [pc, #36]	; (8000234 <ESP01SetWIFI+0x34>)
 8000210:	f00a f828 	bl	800a264 <strncpy>
	strncpy(PASSWORD, aPASSWORD, 32);
 8000214:	2220      	movs	r2, #32
 8000216:	6839      	ldr	r1, [r7, #0]
 8000218:	4807      	ldr	r0, [pc, #28]	; (8000238 <ESP01SetWIFI+0x38>)
 800021a:	f00a f823 	bl	800a264 <strncpy>

	ESP01TASKSTATE = STESP01ATAT;
 800021e:	4b07      	ldr	r3, [pc, #28]	; (800023c <ESP01SetWIFI+0x3c>)
 8000220:	2201      	movs	r2, #1
 8000222:	701a      	strb	r2, [r3, #0]
	lastESP01STATE = ESP01WIFICONNECTING;
 8000224:	4b06      	ldr	r3, [pc, #24]	; (8000240 <ESP01SetWIFI+0x40>)
 8000226:	2201      	movs	r2, #1
 8000228:	701a      	strb	r2, [r3, #0]

	return 1;
 800022a:	2301      	movs	r3, #1
}
 800022c:	4618      	mov	r0, r3
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	200004d8 	.word	0x200004d8
 8000238:	20000508 	.word	0x20000508
 800023c:	20000546 	.word	0x20000546
 8000240:	20000547 	.word	0x20000547

08000244 <ESP01ConnectUDP>:

uint8_t ESP01ConnectUDP(char *aRemoteIP, uint16_t aRemotePort, uint16_t aLocalPort){
 8000244:	b580      	push	{r7, lr}
 8000246:	b086      	sub	sp, #24
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	460b      	mov	r3, r1
 800024e:	807b      	strh	r3, [r7, #2]
 8000250:	4613      	mov	r3, r2
 8000252:	803b      	strh	r3, [r7, #0]
	char str[5];

	strncpy(RemoteIP, aRemoteIP, 16);
 8000254:	2210      	movs	r2, #16
 8000256:	6879      	ldr	r1, [r7, #4]
 8000258:	4883      	ldr	r0, [pc, #524]	; (8000468 <ESP01ConnectUDP+0x224>)
 800025a:	f00a f803 	bl	800a264 <strncpy>
    RemoteIP[15] = '\0';
 800025e:	4b82      	ldr	r3, [pc, #520]	; (8000468 <ESP01ConnectUDP+0x224>)
 8000260:	2200      	movs	r2, #0
 8000262:	73da      	strb	r2, [r3, #15]

	str[4] = aRemotePort%10 + 0x30;
 8000264:	887a      	ldrh	r2, [r7, #2]
 8000266:	4b81      	ldr	r3, [pc, #516]	; (800046c <ESP01ConnectUDP+0x228>)
 8000268:	fba3 1302 	umull	r1, r3, r3, r2
 800026c:	08d9      	lsrs	r1, r3, #3
 800026e:	460b      	mov	r3, r1
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	440b      	add	r3, r1
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	1ad3      	subs	r3, r2, r3
 8000278:	b29b      	uxth	r3, r3
 800027a:	b2db      	uxtb	r3, r3
 800027c:	3330      	adds	r3, #48	; 0x30
 800027e:	b2db      	uxtb	r3, r3
 8000280:	733b      	strb	r3, [r7, #12]
	aRemotePort /= 10;
 8000282:	887b      	ldrh	r3, [r7, #2]
 8000284:	4a79      	ldr	r2, [pc, #484]	; (800046c <ESP01ConnectUDP+0x228>)
 8000286:	fba2 2303 	umull	r2, r3, r2, r3
 800028a:	08db      	lsrs	r3, r3, #3
 800028c:	807b      	strh	r3, [r7, #2]
	str[3] = aRemotePort%10 + 0x30;
 800028e:	887a      	ldrh	r2, [r7, #2]
 8000290:	4b76      	ldr	r3, [pc, #472]	; (800046c <ESP01ConnectUDP+0x228>)
 8000292:	fba3 1302 	umull	r1, r3, r3, r2
 8000296:	08d9      	lsrs	r1, r3, #3
 8000298:	460b      	mov	r3, r1
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	440b      	add	r3, r1
 800029e:	005b      	lsls	r3, r3, #1
 80002a0:	1ad3      	subs	r3, r2, r3
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	3330      	adds	r3, #48	; 0x30
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	72fb      	strb	r3, [r7, #11]
	aRemotePort /= 10;
 80002ac:	887b      	ldrh	r3, [r7, #2]
 80002ae:	4a6f      	ldr	r2, [pc, #444]	; (800046c <ESP01ConnectUDP+0x228>)
 80002b0:	fba2 2303 	umull	r2, r3, r2, r3
 80002b4:	08db      	lsrs	r3, r3, #3
 80002b6:	807b      	strh	r3, [r7, #2]
	str[2] = aRemotePort%10 + 0x30;
 80002b8:	887a      	ldrh	r2, [r7, #2]
 80002ba:	4b6c      	ldr	r3, [pc, #432]	; (800046c <ESP01ConnectUDP+0x228>)
 80002bc:	fba3 1302 	umull	r1, r3, r3, r2
 80002c0:	08d9      	lsrs	r1, r3, #3
 80002c2:	460b      	mov	r3, r1
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	440b      	add	r3, r1
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	1ad3      	subs	r3, r2, r3
 80002cc:	b29b      	uxth	r3, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	3330      	adds	r3, #48	; 0x30
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	72bb      	strb	r3, [r7, #10]
	aRemotePort /= 10;
 80002d6:	887b      	ldrh	r3, [r7, #2]
 80002d8:	4a64      	ldr	r2, [pc, #400]	; (800046c <ESP01ConnectUDP+0x228>)
 80002da:	fba2 2303 	umull	r2, r3, r2, r3
 80002de:	08db      	lsrs	r3, r3, #3
 80002e0:	807b      	strh	r3, [r7, #2]
	str[1] = aRemotePort%10 + 0x30;
 80002e2:	887a      	ldrh	r2, [r7, #2]
 80002e4:	4b61      	ldr	r3, [pc, #388]	; (800046c <ESP01ConnectUDP+0x228>)
 80002e6:	fba3 1302 	umull	r1, r3, r3, r2
 80002ea:	08d9      	lsrs	r1, r3, #3
 80002ec:	460b      	mov	r3, r1
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	440b      	add	r3, r1
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	1ad3      	subs	r3, r2, r3
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	3330      	adds	r3, #48	; 0x30
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	727b      	strb	r3, [r7, #9]
	aRemotePort /= 10;
 8000300:	887b      	ldrh	r3, [r7, #2]
 8000302:	4a5a      	ldr	r2, [pc, #360]	; (800046c <ESP01ConnectUDP+0x228>)
 8000304:	fba2 2303 	umull	r2, r3, r2, r3
 8000308:	08db      	lsrs	r3, r3, #3
 800030a:	807b      	strh	r3, [r7, #2]
	str[0] = aRemotePort + 0x30;
 800030c:	887b      	ldrh	r3, [r7, #2]
 800030e:	b2db      	uxtb	r3, r3
 8000310:	3330      	adds	r3, #48	; 0x30
 8000312:	b2db      	uxtb	r3, r3
 8000314:	723b      	strb	r3, [r7, #8]

	int i = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]
	int j = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	613b      	str	r3, [r7, #16]
	while(str[i] == '0')
 800031e:	e002      	b.n	8000326 <ESP01ConnectUDP+0xe2>
		i++;
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	3301      	adds	r3, #1
 8000324:	617b      	str	r3, [r7, #20]
	while(str[i] == '0')
 8000326:	f107 0208 	add.w	r2, r7, #8
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	4413      	add	r3, r2
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b30      	cmp	r3, #48	; 0x30
 8000332:	d0f5      	beq.n	8000320 <ESP01ConnectUDP+0xdc>
	while(i < 5)
 8000334:	e00b      	b.n	800034e <ESP01ConnectUDP+0x10a>
		RemotePort[j++] = str[i++];
 8000336:	697a      	ldr	r2, [r7, #20]
 8000338:	1c53      	adds	r3, r2, #1
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	693b      	ldr	r3, [r7, #16]
 800033e:	1c59      	adds	r1, r3, #1
 8000340:	6139      	str	r1, [r7, #16]
 8000342:	3218      	adds	r2, #24
 8000344:	443a      	add	r2, r7
 8000346:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 800034a:	4a49      	ldr	r2, [pc, #292]	; (8000470 <ESP01ConnectUDP+0x22c>)
 800034c:	54d1      	strb	r1, [r2, r3]
	while(i < 5)
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	2b04      	cmp	r3, #4
 8000352:	ddf0      	ble.n	8000336 <ESP01ConnectUDP+0xf2>
	RemotePort[j] = '\0';
 8000354:	4a46      	ldr	r2, [pc, #280]	; (8000470 <ESP01ConnectUDP+0x22c>)
 8000356:	693b      	ldr	r3, [r7, #16]
 8000358:	4413      	add	r3, r2
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]

	str[4] = aLocalPort%10 + 0x30;
 800035e:	883a      	ldrh	r2, [r7, #0]
 8000360:	4b42      	ldr	r3, [pc, #264]	; (800046c <ESP01ConnectUDP+0x228>)
 8000362:	fba3 1302 	umull	r1, r3, r3, r2
 8000366:	08d9      	lsrs	r1, r3, #3
 8000368:	460b      	mov	r3, r1
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	440b      	add	r3, r1
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	1ad3      	subs	r3, r2, r3
 8000372:	b29b      	uxth	r3, r3
 8000374:	b2db      	uxtb	r3, r3
 8000376:	3330      	adds	r3, #48	; 0x30
 8000378:	b2db      	uxtb	r3, r3
 800037a:	733b      	strb	r3, [r7, #12]
	aLocalPort /= 10;
 800037c:	883b      	ldrh	r3, [r7, #0]
 800037e:	4a3b      	ldr	r2, [pc, #236]	; (800046c <ESP01ConnectUDP+0x228>)
 8000380:	fba2 2303 	umull	r2, r3, r2, r3
 8000384:	08db      	lsrs	r3, r3, #3
 8000386:	803b      	strh	r3, [r7, #0]
	str[3] = aLocalPort%10 + 0x30;
 8000388:	883a      	ldrh	r2, [r7, #0]
 800038a:	4b38      	ldr	r3, [pc, #224]	; (800046c <ESP01ConnectUDP+0x228>)
 800038c:	fba3 1302 	umull	r1, r3, r3, r2
 8000390:	08d9      	lsrs	r1, r3, #3
 8000392:	460b      	mov	r3, r1
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	440b      	add	r3, r1
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	1ad3      	subs	r3, r2, r3
 800039c:	b29b      	uxth	r3, r3
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	3330      	adds	r3, #48	; 0x30
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	72fb      	strb	r3, [r7, #11]
	aLocalPort /= 10;
 80003a6:	883b      	ldrh	r3, [r7, #0]
 80003a8:	4a30      	ldr	r2, [pc, #192]	; (800046c <ESP01ConnectUDP+0x228>)
 80003aa:	fba2 2303 	umull	r2, r3, r2, r3
 80003ae:	08db      	lsrs	r3, r3, #3
 80003b0:	803b      	strh	r3, [r7, #0]
	str[2] = aLocalPort%10 + 0x30;
 80003b2:	883a      	ldrh	r2, [r7, #0]
 80003b4:	4b2d      	ldr	r3, [pc, #180]	; (800046c <ESP01ConnectUDP+0x228>)
 80003b6:	fba3 1302 	umull	r1, r3, r3, r2
 80003ba:	08d9      	lsrs	r1, r3, #3
 80003bc:	460b      	mov	r3, r1
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	440b      	add	r3, r1
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	1ad3      	subs	r3, r2, r3
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	3330      	adds	r3, #48	; 0x30
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	72bb      	strb	r3, [r7, #10]
	aLocalPort /= 10;
 80003d0:	883b      	ldrh	r3, [r7, #0]
 80003d2:	4a26      	ldr	r2, [pc, #152]	; (800046c <ESP01ConnectUDP+0x228>)
 80003d4:	fba2 2303 	umull	r2, r3, r2, r3
 80003d8:	08db      	lsrs	r3, r3, #3
 80003da:	803b      	strh	r3, [r7, #0]
	str[1] = aLocalPort%10 + 0x30;
 80003dc:	883a      	ldrh	r2, [r7, #0]
 80003de:	4b23      	ldr	r3, [pc, #140]	; (800046c <ESP01ConnectUDP+0x228>)
 80003e0:	fba3 1302 	umull	r1, r3, r3, r2
 80003e4:	08d9      	lsrs	r1, r3, #3
 80003e6:	460b      	mov	r3, r1
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	440b      	add	r3, r1
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	1ad3      	subs	r3, r2, r3
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	3330      	adds	r3, #48	; 0x30
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	727b      	strb	r3, [r7, #9]
	aLocalPort /= 10;
 80003fa:	883b      	ldrh	r3, [r7, #0]
 80003fc:	4a1b      	ldr	r2, [pc, #108]	; (800046c <ESP01ConnectUDP+0x228>)
 80003fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000402:	08db      	lsrs	r3, r3, #3
 8000404:	803b      	strh	r3, [r7, #0]
	str[0] = aLocalPort + 0x30;
 8000406:	883b      	ldrh	r3, [r7, #0]
 8000408:	b2db      	uxtb	r3, r3
 800040a:	3330      	adds	r3, #48	; 0x30
 800040c:	b2db      	uxtb	r3, r3
 800040e:	723b      	strb	r3, [r7, #8]

	while(str[i] == '0')
 8000410:	e002      	b.n	8000418 <ESP01ConnectUDP+0x1d4>
		i++;
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	3301      	adds	r3, #1
 8000416:	617b      	str	r3, [r7, #20]
	while(str[i] == '0')
 8000418:	f107 0208 	add.w	r2, r7, #8
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	4413      	add	r3, r2
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b30      	cmp	r3, #48	; 0x30
 8000424:	d0f5      	beq.n	8000412 <ESP01ConnectUDP+0x1ce>
	while(i < 5)
 8000426:	e00b      	b.n	8000440 <ESP01ConnectUDP+0x1fc>
		LocalPort[j++] = str[i++];
 8000428:	697a      	ldr	r2, [r7, #20]
 800042a:	1c53      	adds	r3, r2, #1
 800042c:	617b      	str	r3, [r7, #20]
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	1c59      	adds	r1, r3, #1
 8000432:	6139      	str	r1, [r7, #16]
 8000434:	3218      	adds	r2, #24
 8000436:	443a      	add	r2, r7
 8000438:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 800043c:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <ESP01ConnectUDP+0x230>)
 800043e:	54d1      	strb	r1, [r2, r3]
	while(i < 5)
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	2b04      	cmp	r3, #4
 8000444:	ddf0      	ble.n	8000428 <ESP01ConnectUDP+0x1e4>
	LocalPort[j] = '\0';
 8000446:	4a0b      	ldr	r2, [pc, #44]	; (8000474 <ESP01ConnectUDP+0x230>)
 8000448:	693b      	ldr	r3, [r7, #16]
 800044a:	4413      	add	r3, r2
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]


    ESP01TASKSTATE = STESP01ATCLOSE;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <ESP01ConnectUDP+0x234>)
 8000452:	2205      	movs	r2, #5
 8000454:	701a      	strb	r2, [r3, #0]
    lastESP01STATE = ESP01UDPBUSY;
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <ESP01ConnectUDP+0x238>)
 8000458:	2204      	movs	r2, #4
 800045a:	701a      	strb	r2, [r3, #0]

    return 1;
 800045c:	2301      	movs	r3, #1
}
 800045e:	4618      	mov	r0, r3
 8000460:	3718      	adds	r7, #24
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000528 	.word	0x20000528
 800046c:	cccccccd 	.word	0xcccccccd
 8000470:	20000538 	.word	0x20000538
 8000474:	20000540 	.word	0x20000540
 8000478:	20000546 	.word	0x20000546
 800047c:	20000547 	.word	0x20000547

08000480 <ESP01SetRxByte>:

void ESP01SetRxByte(uint8_t value){
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]
	bufRX[iRXw++] = value;
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <ESP01SetRxByte+0x3c>)
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	1c5a      	adds	r2, r3, #1
 8000490:	b291      	uxth	r1, r2
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <ESP01SetRxByte+0x3c>)
 8000494:	8011      	strh	r1, [r2, #0]
 8000496:	4619      	mov	r1, r3
 8000498:	4a09      	ldr	r2, [pc, #36]	; (80004c0 <ESP01SetRxByte+0x40>)
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	5453      	strb	r3, [r2, r1]
	if(iRXw == SIZEBUFRX)
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <ESP01SetRxByte+0x3c>)
 80004a0:	881b      	ldrh	r3, [r3, #0]
 80004a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004a6:	d102      	bne.n	80004ae <ESP01SetRxByte+0x2e>
		iRXw = 0;
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <ESP01SetRxByte+0x3c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	801a      	strh	r2, [r3, #0]
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	2000022a 	.word	0x2000022a
 80004c0:	20000028 	.word	0x20000028

080004c4 <ESP01HasByteToTx>:

uint8_t ESP01HasByteToTx(){
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	if(WAITINGSYMBOL)
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <ESP01HasByteToTx+0x2c>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <ESP01HasByteToTx+0x10>
		return 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	e008      	b.n	80004e6 <ESP01HasByteToTx+0x22>
	if(iTXr != iTXw)
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <ESP01HasByteToTx+0x30>)
 80004d6:	881a      	ldrh	r2, [r3, #0]
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <ESP01HasByteToTx+0x34>)
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d001      	beq.n	80004e4 <ESP01HasByteToTx+0x20>
		return 1;
 80004e0:	2301      	movs	r3, #1
 80004e2:	e000      	b.n	80004e6 <ESP01HasByteToTx+0x22>
	return 0;
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	200004c2 	.word	0x200004c2
 80004f4:	2000043a 	.word	0x2000043a
 80004f8:	20000438 	.word	0x20000438

080004fc <ESP01GetTxByte>:


uint8_t ESP01GetTxByte(uint8_t *value){
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	*value = bufTX[iTXr++];
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <ESP01GetTxByte+0x50>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	1c5a      	adds	r2, r3, #1
 800050a:	b291      	uxth	r1, r2
 800050c:	4a0f      	ldr	r2, [pc, #60]	; (800054c <ESP01GetTxByte+0x50>)
 800050e:	8011      	strh	r1, [r2, #0]
 8000510:	461a      	mov	r2, r3
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <ESP01GetTxByte+0x54>)
 8000514:	5c9a      	ldrb	r2, [r3, r2]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	701a      	strb	r2, [r3, #0]
	if(iTXr == SIZEBUFTX)
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <ESP01GetTxByte+0x50>)
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000522:	d102      	bne.n	800052a <ESP01GetTxByte+0x2e>
		iTXr = 0;
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <ESP01GetTxByte+0x50>)
 8000526:	2200      	movs	r2, #0
 8000528:	801a      	strh	r2, [r3, #0]

	if(iTXr == iTXw)
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <ESP01GetTxByte+0x50>)
 800052c:	881a      	ldrh	r2, [r3, #0]
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <ESP01GetTxByte+0x58>)
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	429a      	cmp	r2, r3
 8000534:	d102      	bne.n	800053c <ESP01GetTxByte+0x40>
		lastESP01STATE = ESP01UDPREADY;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <ESP01GetTxByte+0x5c>)
 8000538:	2203      	movs	r2, #3
 800053a:	701a      	strb	r2, [r3, #0]

	return 1;
 800053c:	2301      	movs	r3, #1
}
 800053e:	4618      	mov	r0, r3
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	2000043a 	.word	0x2000043a
 8000550:	20000238 	.word	0x20000238
 8000554:	20000438 	.word	0x20000438
 8000558:	20000547 	.word	0x20000547

0800055c <ESP01SendUDPData>:

uint8_t ESP01SendUDPData(uint8_t *buf, uint16_t dataLength, uint16_t bufSize){
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	807b      	strh	r3, [r7, #2]
 8000568:	4613      	mov	r3, r2
 800056a:	803b      	strh	r3, [r7, #0]
	char str[3];

	if(dataLength > (SIZEBUFTX - 16))
 800056c:	887b      	ldrh	r3, [r7, #2]
 800056e:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8000572:	d901      	bls.n	8000578 <ESP01SendUDPData+0x1c>
		return 0;
 8000574:	2300      	movs	r3, #0
 8000576:	e0a0      	b.n	80006ba <ESP01SendUDPData+0x15e>

	if(lastESP01STATE != ESP01UDPREADY)
 8000578:	4b52      	ldr	r3, [pc, #328]	; (80006c4 <ESP01SendUDPData+0x168>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b03      	cmp	r3, #3
 800057e:	d001      	beq.n	8000584 <ESP01SendUDPData+0x28>
		return 0;
 8000580:	2300      	movs	r3, #0
 8000582:	e09a      	b.n	80006ba <ESP01SendUDPData+0x15e>

	ESP01PutAT(_ATCIPSEND);
 8000584:	4850      	ldr	r0, [pc, #320]	; (80006c8 <ESP01SendUDPData+0x16c>)
 8000586:	f000 f90b 	bl	80007a0 <ESP01PutAT>

	aux = dataLength;
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	4a4f      	ldr	r2, [pc, #316]	; (80006cc <ESP01SendUDPData+0x170>)
 800058e:	6013      	str	r3, [r2, #0]
	str[2] = aux%10 + 0x30;
 8000590:	4b4e      	ldr	r3, [pc, #312]	; (80006cc <ESP01SendUDPData+0x170>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b4e      	ldr	r3, [pc, #312]	; (80006d0 <ESP01SendUDPData+0x174>)
 8000596:	fb83 1302 	smull	r1, r3, r3, r2
 800059a:	1099      	asrs	r1, r3, #2
 800059c:	17d3      	asrs	r3, r2, #31
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	460b      	mov	r3, r1
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	440b      	add	r3, r1
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	1ad1      	subs	r1, r2, r3
 80005aa:	b2cb      	uxtb	r3, r1
 80005ac:	3330      	adds	r3, #48	; 0x30
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	72bb      	strb	r3, [r7, #10]
	aux /= 10;
 80005b2:	4b46      	ldr	r3, [pc, #280]	; (80006cc <ESP01SendUDPData+0x170>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a46      	ldr	r2, [pc, #280]	; (80006d0 <ESP01SendUDPData+0x174>)
 80005b8:	fb82 1203 	smull	r1, r2, r2, r3
 80005bc:	1092      	asrs	r2, r2, #2
 80005be:	17db      	asrs	r3, r3, #31
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	4a42      	ldr	r2, [pc, #264]	; (80006cc <ESP01SendUDPData+0x170>)
 80005c4:	6013      	str	r3, [r2, #0]
	str[1] = aux%10 + 0x30;
 80005c6:	4b41      	ldr	r3, [pc, #260]	; (80006cc <ESP01SendUDPData+0x170>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	4b41      	ldr	r3, [pc, #260]	; (80006d0 <ESP01SendUDPData+0x174>)
 80005cc:	fb83 1302 	smull	r1, r3, r3, r2
 80005d0:	1099      	asrs	r1, r3, #2
 80005d2:	17d3      	asrs	r3, r2, #31
 80005d4:	1ac9      	subs	r1, r1, r3
 80005d6:	460b      	mov	r3, r1
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	440b      	add	r3, r1
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	1ad1      	subs	r1, r2, r3
 80005e0:	b2cb      	uxtb	r3, r1
 80005e2:	3330      	adds	r3, #48	; 0x30
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	727b      	strb	r3, [r7, #9]
	aux /= 10;
 80005e8:	4b38      	ldr	r3, [pc, #224]	; (80006cc <ESP01SendUDPData+0x170>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <ESP01SendUDPData+0x174>)
 80005ee:	fb82 1203 	smull	r1, r2, r2, r3
 80005f2:	1092      	asrs	r2, r2, #2
 80005f4:	17db      	asrs	r3, r3, #31
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	4a34      	ldr	r2, [pc, #208]	; (80006cc <ESP01SendUDPData+0x170>)
 80005fa:	6013      	str	r3, [r2, #0]
	str[0] = aux%10 + 0x30;
 80005fc:	4b33      	ldr	r3, [pc, #204]	; (80006cc <ESP01SendUDPData+0x170>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <ESP01SendUDPData+0x174>)
 8000602:	fb83 1302 	smull	r1, r3, r3, r2
 8000606:	1099      	asrs	r1, r3, #2
 8000608:	17d3      	asrs	r3, r2, #31
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	460b      	mov	r3, r1
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	440b      	add	r3, r1
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	1ad1      	subs	r1, r2, r3
 8000616:	b2cb      	uxtb	r3, r1
 8000618:	3330      	adds	r3, #48	; 0x30
 800061a:	b2db      	uxtb	r3, r3
 800061c:	723b      	strb	r3, [r7, #8]

	ESP01PutByteOnTx(str[0]);
 800061e:	7a3b      	ldrb	r3, [r7, #8]
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f8eb 	bl	80007fc <ESP01PutByteOnTx>
	ESP01PutByteOnTx(str[1]);
 8000626:	7a7b      	ldrb	r3, [r7, #9]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f8e7 	bl	80007fc <ESP01PutByteOnTx>
	ESP01PutByteOnTx(str[2]);
 800062e:	7abb      	ldrb	r3, [r7, #10]
 8000630:	4618      	mov	r0, r3
 8000632:	f000 f8e3 	bl	80007fc <ESP01PutByteOnTx>
	ESP01PutByteOnTx('\r');
 8000636:	200d      	movs	r0, #13
 8000638:	f000 f8e0 	bl	80007fc <ESP01PutByteOnTx>
	ESP01PutByteOnTx('\n');
 800063c:	200a      	movs	r0, #10
 800063e:	f000 f8dd 	bl	80007fc <ESP01PutByteOnTx>
	ESP01PutByteOnTx('>');
 8000642:	203e      	movs	r0, #62	; 0x3e
 8000644:	f000 f8da 	bl	80007fc <ESP01PutByteOnTx>

	for(uint16_t i=0, j=0; i<dataLength; i++){
 8000648:	2300      	movs	r3, #0
 800064a:	81fb      	strh	r3, [r7, #14]
 800064c:	2300      	movs	r3, #0
 800064e:	81bb      	strh	r3, [r7, #12]
 8000650:	e025      	b.n	800069e <ESP01SendUDPData+0x142>
		bufTX[iTXw++] = buf[j++];
 8000652:	89bb      	ldrh	r3, [r7, #12]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	81ba      	strh	r2, [r7, #12]
 8000658:	461a      	mov	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	441a      	add	r2, r3
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <ESP01SendUDPData+0x178>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	1c59      	adds	r1, r3, #1
 8000664:	b288      	uxth	r0, r1
 8000666:	491b      	ldr	r1, [pc, #108]	; (80006d4 <ESP01SendUDPData+0x178>)
 8000668:	8008      	strh	r0, [r1, #0]
 800066a:	4619      	mov	r1, r3
 800066c:	7812      	ldrb	r2, [r2, #0]
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <ESP01SendUDPData+0x17c>)
 8000670:	545a      	strb	r2, [r3, r1]
		if(iTXw == SIZEBUFTX)
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <ESP01SendUDPData+0x178>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800067a:	d102      	bne.n	8000682 <ESP01SendUDPData+0x126>
			iTXw = 0;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <ESP01SendUDPData+0x178>)
 800067e:	2200      	movs	r2, #0
 8000680:	801a      	strh	r2, [r3, #0]
		if((buf+j) == (buf+bufSize)){
 8000682:	89ba      	ldrh	r2, [r7, #12]
 8000684:	883b      	ldrh	r3, [r7, #0]
 8000686:	429a      	cmp	r2, r3
 8000688:	d106      	bne.n	8000698 <ESP01SendUDPData+0x13c>
			buf = buf-bufSize;
 800068a:	883b      	ldrh	r3, [r7, #0]
 800068c:	425b      	negs	r3, r3
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
			j = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	81bb      	strh	r3, [r7, #12]
	for(uint16_t i=0, j=0; i<dataLength; i++){
 8000698:	89fb      	ldrh	r3, [r7, #14]
 800069a:	3301      	adds	r3, #1
 800069c:	81fb      	strh	r3, [r7, #14]
 800069e:	89fa      	ldrh	r2, [r7, #14]
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d3d5      	bcc.n	8000652 <ESP01SendUDPData+0xf6>
		}
	}

	NEEDWAITSYMBOL = 1;
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <ESP01SendUDPData+0x180>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
	WAITINGSYMBOL = 0;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <ESP01SendUDPData+0x184>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]

	lastESP01STATE = ESP01UDPBUSY;
 80006b2:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <ESP01SendUDPData+0x168>)
 80006b4:	2204      	movs	r2, #4
 80006b6:	701a      	strb	r2, [r3, #0]

	return 1;
 80006b8:	2301      	movs	r3, #1
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000547 	.word	0x20000547
 80006c8:	0800a384 	.word	0x0800a384
 80006cc:	20000548 	.word	0x20000548
 80006d0:	66666667 	.word	0x66666667
 80006d4:	20000438 	.word	0x20000438
 80006d8:	20000238 	.word	0x20000238
 80006dc:	200004c1 	.word	0x200004c1
 80006e0:	200004c2 	.word	0x200004c2

080006e4 <ESP01Task>:


void ESP01Task(){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

	if(SSID[0]=='\0' && ESP01TASKSTATE!=STESP01IDLE)
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <ESP01Task+0x34>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d106      	bne.n	80006fe <ESP01Task+0x1a>
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <ESP01Task+0x38>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <ESP01Task+0x1a>
		ESP01TASKSTATE = STESP01IDLE;
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <ESP01Task+0x38>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]

	if(iRXw != iRXr)
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <ESP01Task+0x3c>)
 8000700:	881a      	ldrh	r2, [r3, #0]
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <ESP01Task+0x40>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	429a      	cmp	r2, r3
 8000708:	d001      	beq.n	800070e <ESP01Task+0x2a>
		ESP01DecodeAT();
 800070a:	f000 fa51 	bl	8000bb0 <ESP01DecodeAT>

	ESP01DoWifi();
 800070e:	f000 f897 	bl	8000840 <ESP01DoWifi>

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200004d8 	.word	0x200004d8
 800071c:	20000546 	.word	0x20000546
 8000720:	2000022a 	.word	0x2000022a
 8000724:	2000022c 	.word	0x2000022c

08000728 <ESP01AttachOnWIFIConnected>:
		if(!timeOut)
			header = 0;
	}
}

void ESP01AttachOnWIFIConnected(ESP01OnWIFIConnected *aESP01OnWIFIConnected){
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	doESP01WIFIConnected = aESP01OnWIFIConnected;
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <ESP01AttachOnWIFIConnected+0x1c>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6013      	str	r3, [r2, #0]
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	200004cc 	.word	0x200004cc

08000748 <ESP01AttachOnWIFIDisconnected>:

void ESP01AttachOnWIFIDisconnected(ESP01OnWIFIDisconnected *aESP01OnWIFIDisconnected){
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	doESP01WIFIDisconnected = aESP01OnWIFIDisconnected;
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <ESP01AttachOnWIFIDisconnected+0x1c>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	200004d0 	.word	0x200004d0

08000768 <ESP01AttachOnUDPReady>:

void ESP01AttachOnUDPReady(ESP01OnUDPReady *aESP01UDPReady){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	doESP01UDPReady = aESP01UDPReady;
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <ESP01AttachOnUDPReady+0x1c>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	200004d4 	.word	0x200004d4

08000788 <ESP01GetLastSTATE>:

ESP01STATE ESP01GetLastSTATE(){
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
	return lastESP01STATE;
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <ESP01GetLastSTATE+0x14>)
 800078e:	781b      	ldrb	r3, [r3, #0]
}
 8000790:	4618      	mov	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000547 	.word	0x20000547

080007a0 <ESP01PutAT>:


static void ESP01PutAT(const char *atCMD){
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	int i=0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]

	while(atCMD[i]){
 80007ac:	e014      	b.n	80007d8 <ESP01PutAT+0x38>
		bufTX[iTXw++] = atCMD[i];
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	441a      	add	r2, r3
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <ESP01PutAT+0x54>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	1c59      	adds	r1, r3, #1
 80007ba:	b288      	uxth	r0, r1
 80007bc:	490d      	ldr	r1, [pc, #52]	; (80007f4 <ESP01PutAT+0x54>)
 80007be:	8008      	strh	r0, [r1, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <ESP01PutAT+0x58>)
 80007c6:	545a      	strb	r2, [r3, r1]
		if(iTXw == SIZEBUFTX)
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <ESP01PutAT+0x54>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007d0:	d102      	bne.n	80007d8 <ESP01PutAT+0x38>
			iTXw = 0;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <ESP01PutAT+0x54>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	801a      	strh	r2, [r3, #0]
	while(atCMD[i]){
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1e4      	bne.n	80007ae <ESP01PutAT+0xe>
	}
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000438 	.word	0x20000438
 80007f8:	20000238 	.word	0x20000238

080007fc <ESP01PutByteOnTx>:

static void ESP01PutByteOnTx(uint8_t value){
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
	bufTX[iTXw++] = value;
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <ESP01PutByteOnTx+0x3c>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	b291      	uxth	r1, r2
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <ESP01PutByteOnTx+0x3c>)
 8000810:	8011      	strh	r1, [r2, #0]
 8000812:	4619      	mov	r1, r3
 8000814:	4a09      	ldr	r2, [pc, #36]	; (800083c <ESP01PutByteOnTx+0x40>)
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	5453      	strb	r3, [r2, r1]
	if(iTXw == SIZEBUFTX)
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <ESP01PutByteOnTx+0x3c>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000822:	d102      	bne.n	800082a <ESP01PutByteOnTx+0x2e>
		iTXw = 0;
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <ESP01PutByteOnTx+0x3c>)
 8000826:	2200      	movs	r2, #0
 8000828:	801a      	strh	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000438 	.word	0x20000438
 800083c:	20000238 	.word	0x20000238

08000840 <ESP01DoWifi>:

static void ESP01DoWifi(){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	if(timeOutResponse || ESP01TASKSTATE==STESP01IDLE)
 8000844:	4ba2      	ldr	r3, [pc, #648]	; (8000ad0 <ESP01DoWifi+0x290>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	f040 817a 	bne.w	8000b42 <ESP01DoWifi+0x302>
 800084e:	4ba1      	ldr	r3, [pc, #644]	; (8000ad4 <ESP01DoWifi+0x294>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	f000 8175 	beq.w	8000b42 <ESP01DoWifi+0x302>
		return;

	switch(ESP01TASKSTATE){
 8000858:	4b9e      	ldr	r3, [pc, #632]	; (8000ad4 <ESP01DoWifi+0x294>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	3b01      	subs	r3, #1
 800085e:	2b08      	cmp	r3, #8
 8000860:	f200 816b 	bhi.w	8000b3a <ESP01DoWifi+0x2fa>
 8000864:	a201      	add	r2, pc, #4	; (adr r2, 800086c <ESP01DoWifi+0x2c>)
 8000866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086a:	bf00      	nop
 800086c:	08000891 	.word	0x08000891
 8000870:	08000915 	.word	0x08000915
 8000874:	08000937 	.word	0x08000937
 8000878:	080009df 	.word	0x080009df
 800087c:	08000923 	.word	0x08000923
 8000880:	080009ed 	.word	0x080009ed
 8000884:	08000b47 	.word	0x08000b47
 8000888:	080008f1 	.word	0x080008f1
 800088c:	08000907 	.word	0x08000907
	case STESP01ATAT:
		WAITINGSYMBOL = 0;
 8000890:	4b91      	ldr	r3, [pc, #580]	; (8000ad8 <ESP01DoWifi+0x298>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
		NEEDWAITSYMBOL = 0;
 8000896:	4b91      	ldr	r3, [pc, #580]	; (8000adc <ESP01DoWifi+0x29c>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
		if(triesAT){
 800089c:	4b90      	ldr	r3, [pc, #576]	; (8000ae0 <ESP01DoWifi+0x2a0>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d01b      	beq.n	80008dc <ESP01DoWifi+0x9c>
			triesAT--;
 80008a4:	4b8e      	ldr	r3, [pc, #568]	; (8000ae0 <ESP01DoWifi+0x2a0>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b8c      	ldr	r3, [pc, #560]	; (8000ae0 <ESP01DoWifi+0x2a0>)
 80008ae:	701a      	strb	r2, [r3, #0]
			if(!triesAT){
 80008b0:	4b8b      	ldr	r3, [pc, #556]	; (8000ae0 <ESP01DoWifi+0x2a0>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d10a      	bne.n	80008ce <ESP01DoWifi+0x8e>
				ESP01TASKSTATE = STESP01HARDRESET;
 80008b8:	4b86      	ldr	r3, [pc, #536]	; (8000ad4 <ESP01DoWifi+0x294>)
 80008ba:	2208      	movs	r2, #8
 80008bc:	701a      	strb	r2, [r3, #0]
				doESP01GpioWriteCH_EN(0);
 80008be:	4b89      	ldr	r3, [pc, #548]	; (8000ae4 <ESP01DoWifi+0x2a4>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2000      	movs	r0, #0
 80008c4:	4798      	blx	r3
				timeOutResponse = 100;
 80008c6:	4b82      	ldr	r3, [pc, #520]	; (8000ad0 <ESP01DoWifi+0x290>)
 80008c8:	2264      	movs	r2, #100	; 0x64
 80008ca:	601a      	str	r2, [r3, #0]
		else{
			ESP01PutAT(_AT);
			timeOutResponse = 10;
			triesAT = 5;
		}
		break;
 80008cc:	e13c      	b.n	8000b48 <ESP01DoWifi+0x308>
				ESP01PutAT(_AT);
 80008ce:	4886      	ldr	r0, [pc, #536]	; (8000ae8 <ESP01DoWifi+0x2a8>)
 80008d0:	f7ff ff66 	bl	80007a0 <ESP01PutAT>
				timeOutResponse = 10;
 80008d4:	4b7e      	ldr	r3, [pc, #504]	; (8000ad0 <ESP01DoWifi+0x290>)
 80008d6:	220a      	movs	r2, #10
 80008d8:	601a      	str	r2, [r3, #0]
		break;
 80008da:	e135      	b.n	8000b48 <ESP01DoWifi+0x308>
			ESP01PutAT(_AT);
 80008dc:	4882      	ldr	r0, [pc, #520]	; (8000ae8 <ESP01DoWifi+0x2a8>)
 80008de:	f7ff ff5f 	bl	80007a0 <ESP01PutAT>
			timeOutResponse = 10;
 80008e2:	4b7b      	ldr	r3, [pc, #492]	; (8000ad0 <ESP01DoWifi+0x290>)
 80008e4:	220a      	movs	r2, #10
 80008e6:	601a      	str	r2, [r3, #0]
			triesAT = 5;
 80008e8:	4b7d      	ldr	r3, [pc, #500]	; (8000ae0 <ESP01DoWifi+0x2a0>)
 80008ea:	2205      	movs	r2, #5
 80008ec:	701a      	strb	r2, [r3, #0]
		break;
 80008ee:	e12b      	b.n	8000b48 <ESP01DoWifi+0x308>
	case STESP01HARDRESET:
		doESP01GpioWriteCH_EN(1);
 80008f0:	4b7c      	ldr	r3, [pc, #496]	; (8000ae4 <ESP01DoWifi+0x2a4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2001      	movs	r0, #1
 80008f6:	4798      	blx	r3
		ESP01TASKSTATE = STESP01ATAT;
 80008f8:	4b76      	ldr	r3, [pc, #472]	; (8000ad4 <ESP01DoWifi+0x294>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
		timeOutResponse = 100;
 80008fe:	4b74      	ldr	r3, [pc, #464]	; (8000ad0 <ESP01DoWifi+0x290>)
 8000900:	2264      	movs	r2, #100	; 0x64
 8000902:	601a      	str	r2, [r3, #0]
		break;
 8000904:	e120      	b.n	8000b48 <ESP01DoWifi+0x308>
	case STESP01ATCWMODE:
		ESP01PutAT(_ATCWMODE);
 8000906:	4879      	ldr	r0, [pc, #484]	; (8000aec <ESP01DoWifi+0x2ac>)
 8000908:	f7ff ff4a 	bl	80007a0 <ESP01PutAT>
		timeOutResponse = 10;
 800090c:	4b70      	ldr	r3, [pc, #448]	; (8000ad0 <ESP01DoWifi+0x290>)
 800090e:	220a      	movs	r2, #10
 8000910:	601a      	str	r2, [r3, #0]
		break;
 8000912:	e119      	b.n	8000b48 <ESP01DoWifi+0x308>
	case STESP01ATCIPMUX:
		ESP01PutAT(_ATCIPMUX);
 8000914:	4876      	ldr	r0, [pc, #472]	; (8000af0 <ESP01DoWifi+0x2b0>)
 8000916:	f7ff ff43 	bl	80007a0 <ESP01PutAT>
		timeOutResponse = 5;
 800091a:	4b6d      	ldr	r3, [pc, #436]	; (8000ad0 <ESP01DoWifi+0x290>)
 800091c:	2205      	movs	r2, #5
 800091e:	601a      	str	r2, [r3, #0]
		break;
 8000920:	e112      	b.n	8000b48 <ESP01DoWifi+0x308>
	case STESP01ATCLOSE:
		lastESP01STATE = ESP01WIFIDISCONNECTED;
 8000922:	4b74      	ldr	r3, [pc, #464]	; (8000af4 <ESP01DoWifi+0x2b4>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
		ESP01PutAT(_ATCIPCLOSE);
 8000928:	4873      	ldr	r0, [pc, #460]	; (8000af8 <ESP01DoWifi+0x2b8>)
 800092a:	f7ff ff39 	bl	80007a0 <ESP01PutAT>
		timeOutResponse = 10;
 800092e:	4b68      	ldr	r3, [pc, #416]	; (8000ad0 <ESP01DoWifi+0x290>)
 8000930:	220a      	movs	r2, #10
 8000932:	601a      	str	r2, [r3, #0]
		break;
 8000934:	e108      	b.n	8000b48 <ESP01DoWifi+0x308>
	case STESP01ATCWJAP://"SSID","SSIDPass"
		ESP01PutAT(_ATCWJAP);
 8000936:	4871      	ldr	r0, [pc, #452]	; (8000afc <ESP01DoWifi+0x2bc>)
 8000938:	f7ff ff32 	bl	80007a0 <ESP01PutAT>
		ESP01PutByteOnTx('"');
 800093c:	2022      	movs	r0, #34	; 0x22
 800093e:	f7ff ff5d 	bl	80007fc <ESP01PutByteOnTx>
		for(aux=0; aux<48; aux++){
 8000942:	4b6f      	ldr	r3, [pc, #444]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	e011      	b.n	800096e <ESP01DoWifi+0x12e>
			if(SSID[aux]=='\0')
 800094a:	4b6d      	ldr	r3, [pc, #436]	; (8000b00 <ESP01DoWifi+0x2c0>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a6d      	ldr	r2, [pc, #436]	; (8000b04 <ESP01DoWifi+0x2c4>)
 8000950:	5cd3      	ldrb	r3, [r2, r3]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d010      	beq.n	8000978 <ESP01DoWifi+0x138>
				break;
			ESP01PutByteOnTx(SSID[aux]);
 8000956:	4b6a      	ldr	r3, [pc, #424]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a6a      	ldr	r2, [pc, #424]	; (8000b04 <ESP01DoWifi+0x2c4>)
 800095c:	5cd3      	ldrb	r3, [r2, r3]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff4c 	bl	80007fc <ESP01PutByteOnTx>
		for(aux=0; aux<48; aux++){
 8000964:	4b66      	ldr	r3, [pc, #408]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	4a65      	ldr	r2, [pc, #404]	; (8000b00 <ESP01DoWifi+0x2c0>)
 800096c:	6013      	str	r3, [r2, #0]
 800096e:	4b64      	ldr	r3, [pc, #400]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b2f      	cmp	r3, #47	; 0x2f
 8000974:	dde9      	ble.n	800094a <ESP01DoWifi+0x10a>
 8000976:	e000      	b.n	800097a <ESP01DoWifi+0x13a>
				break;
 8000978:	bf00      	nop
		}
		ESP01PutByteOnTx('"');
 800097a:	2022      	movs	r0, #34	; 0x22
 800097c:	f7ff ff3e 	bl	80007fc <ESP01PutByteOnTx>
		ESP01PutByteOnTx(',');
 8000980:	202c      	movs	r0, #44	; 0x2c
 8000982:	f7ff ff3b 	bl	80007fc <ESP01PutByteOnTx>
		ESP01PutByteOnTx('"');
 8000986:	2022      	movs	r0, #34	; 0x22
 8000988:	f7ff ff38 	bl	80007fc <ESP01PutByteOnTx>
		for(aux=0; aux<32; aux++){
 800098c:	4b5c      	ldr	r3, [pc, #368]	; (8000b00 <ESP01DoWifi+0x2c0>)
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	e011      	b.n	80009b8 <ESP01DoWifi+0x178>
			if(PASSWORD[aux]=='\0')
 8000994:	4b5a      	ldr	r3, [pc, #360]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a5b      	ldr	r2, [pc, #364]	; (8000b08 <ESP01DoWifi+0x2c8>)
 800099a:	5cd3      	ldrb	r3, [r2, r3]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d010      	beq.n	80009c2 <ESP01DoWifi+0x182>
				break;
			ESP01PutByteOnTx(PASSWORD[aux]);
 80009a0:	4b57      	ldr	r3, [pc, #348]	; (8000b00 <ESP01DoWifi+0x2c0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a58      	ldr	r2, [pc, #352]	; (8000b08 <ESP01DoWifi+0x2c8>)
 80009a6:	5cd3      	ldrb	r3, [r2, r3]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff27 	bl	80007fc <ESP01PutByteOnTx>
		for(aux=0; aux<32; aux++){
 80009ae:	4b54      	ldr	r3, [pc, #336]	; (8000b00 <ESP01DoWifi+0x2c0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	4a52      	ldr	r2, [pc, #328]	; (8000b00 <ESP01DoWifi+0x2c0>)
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b51      	ldr	r3, [pc, #324]	; (8000b00 <ESP01DoWifi+0x2c0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b1f      	cmp	r3, #31
 80009be:	dde9      	ble.n	8000994 <ESP01DoWifi+0x154>
 80009c0:	e000      	b.n	80009c4 <ESP01DoWifi+0x184>
				break;
 80009c2:	bf00      	nop
		}
		ESP01PutByteOnTx('"');
 80009c4:	2022      	movs	r0, #34	; 0x22
 80009c6:	f7ff ff19 	bl	80007fc <ESP01PutByteOnTx>
		ESP01PutByteOnTx('\r');
 80009ca:	200d      	movs	r0, #13
 80009cc:	f7ff ff16 	bl	80007fc <ESP01PutByteOnTx>
		ESP01PutByteOnTx('\n');
 80009d0:	200a      	movs	r0, #10
 80009d2:	f7ff ff13 	bl	80007fc <ESP01PutByteOnTx>
		timeOutResponse = 100;
 80009d6:	4b3e      	ldr	r3, [pc, #248]	; (8000ad0 <ESP01DoWifi+0x290>)
 80009d8:	2264      	movs	r2, #100	; 0x64
 80009da:	601a      	str	r2, [r3, #0]
		break;
 80009dc:	e0b4      	b.n	8000b48 <ESP01DoWifi+0x308>
	case STESP01ATCIFSR:
		ESP01PutAT(_ATCIFSR);
 80009de:	484b      	ldr	r0, [pc, #300]	; (8000b0c <ESP01DoWifi+0x2cc>)
 80009e0:	f7ff fede 	bl	80007a0 <ESP01PutAT>
		timeOutResponse = 10;
 80009e4:	4b3a      	ldr	r3, [pc, #232]	; (8000ad0 <ESP01DoWifi+0x290>)
 80009e6:	220a      	movs	r2, #10
 80009e8:	601a      	str	r2, [r3, #0]
		break;
 80009ea:	e0ad      	b.n	8000b48 <ESP01DoWifi+0x308>
	case STESP01ATCIPSTART:
		lastESP01STATE = ESP01UDPBUSY;
 80009ec:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <ESP01DoWifi+0x2b4>)
 80009ee:	2204      	movs	r2, #4
 80009f0:	701a      	strb	r2, [r3, #0]
		ESP01PutAT(_ATCIPSTART);
 80009f2:	4847      	ldr	r0, [pc, #284]	; (8000b10 <ESP01DoWifi+0x2d0>)
 80009f4:	f7ff fed4 	bl	80007a0 <ESP01PutAT>
		ESP01PutByteOnTx('"');
 80009f8:	2022      	movs	r0, #34	; 0x22
 80009fa:	f7ff feff 	bl	80007fc <ESP01PutByteOnTx>
		ESP01PutAT(_UDP);
 80009fe:	4845      	ldr	r0, [pc, #276]	; (8000b14 <ESP01DoWifi+0x2d4>)
 8000a00:	f7ff fece 	bl	80007a0 <ESP01PutAT>
		ESP01PutByteOnTx('"');
 8000a04:	2022      	movs	r0, #34	; 0x22
 8000a06:	f7ff fef9 	bl	80007fc <ESP01PutByteOnTx>
		ESP01PutByteOnTx(',');
 8000a0a:	202c      	movs	r0, #44	; 0x2c
 8000a0c:	f7ff fef6 	bl	80007fc <ESP01PutByteOnTx>
		ESP01PutByteOnTx('"');
 8000a10:	2022      	movs	r0, #34	; 0x22
 8000a12:	f7ff fef3 	bl	80007fc <ESP01PutByteOnTx>
		for(aux=0; aux<16; aux++){
 8000a16:	4b3a      	ldr	r3, [pc, #232]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	e011      	b.n	8000a42 <ESP01DoWifi+0x202>
			if(RemoteIP[aux] == '\0')
 8000a1e:	4b38      	ldr	r3, [pc, #224]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a3d      	ldr	r2, [pc, #244]	; (8000b18 <ESP01DoWifi+0x2d8>)
 8000a24:	5cd3      	ldrb	r3, [r2, r3]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d010      	beq.n	8000a4c <ESP01DoWifi+0x20c>
				break;
			ESP01PutByteOnTx(RemoteIP[aux]);
 8000a2a:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a3a      	ldr	r2, [pc, #232]	; (8000b18 <ESP01DoWifi+0x2d8>)
 8000a30:	5cd3      	ldrb	r3, [r2, r3]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fee2 	bl	80007fc <ESP01PutByteOnTx>
		for(aux=0; aux<16; aux++){
 8000a38:	4b31      	ldr	r3, [pc, #196]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4a30      	ldr	r2, [pc, #192]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000a40:	6013      	str	r3, [r2, #0]
 8000a42:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b0f      	cmp	r3, #15
 8000a48:	dde9      	ble.n	8000a1e <ESP01DoWifi+0x1de>
 8000a4a:	e000      	b.n	8000a4e <ESP01DoWifi+0x20e>
				break;
 8000a4c:	bf00      	nop
		}
		ESP01PutByteOnTx('"');
 8000a4e:	2022      	movs	r0, #34	; 0x22
 8000a50:	f7ff fed4 	bl	80007fc <ESP01PutByteOnTx>
		ESP01PutByteOnTx(',');
 8000a54:	202c      	movs	r0, #44	; 0x2c
 8000a56:	f7ff fed1 	bl	80007fc <ESP01PutByteOnTx>
		for(aux=0; aux<6; aux++){
 8000a5a:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	e011      	b.n	8000a86 <ESP01DoWifi+0x246>
			if(RemotePort[aux] == '\0')
 8000a62:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a2d      	ldr	r2, [pc, #180]	; (8000b1c <ESP01DoWifi+0x2dc>)
 8000a68:	5cd3      	ldrb	r3, [r2, r3]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d010      	beq.n	8000a90 <ESP01DoWifi+0x250>
				break;
			ESP01PutByteOnTx(RemotePort[aux]);
 8000a6e:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a2a      	ldr	r2, [pc, #168]	; (8000b1c <ESP01DoWifi+0x2dc>)
 8000a74:	5cd3      	ldrb	r3, [r2, r3]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fec0 	bl	80007fc <ESP01PutByteOnTx>
		for(aux=0; aux<6; aux++){
 8000a7c:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	4a1f      	ldr	r2, [pc, #124]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b05      	cmp	r3, #5
 8000a8c:	dde9      	ble.n	8000a62 <ESP01DoWifi+0x222>
 8000a8e:	e000      	b.n	8000a92 <ESP01DoWifi+0x252>
				break;
 8000a90:	bf00      	nop
		}
		ESP01PutByteOnTx(',');
 8000a92:	202c      	movs	r0, #44	; 0x2c
 8000a94:	f7ff feb2 	bl	80007fc <ESP01PutByteOnTx>
		for(aux=0; aux<6; aux++){
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	e011      	b.n	8000ac4 <ESP01DoWifi+0x284>
			if(LocalPort[aux] == '\0')
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a1e      	ldr	r2, [pc, #120]	; (8000b20 <ESP01DoWifi+0x2e0>)
 8000aa6:	5cd3      	ldrb	r3, [r2, r3]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d03b      	beq.n	8000b24 <ESP01DoWifi+0x2e4>
				break;
			ESP01PutByteOnTx(LocalPort[aux]);
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	; (8000b20 <ESP01DoWifi+0x2e0>)
 8000ab2:	5cd3      	ldrb	r3, [r2, r3]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fea1 	bl	80007fc <ESP01PutByteOnTx>
		for(aux=0; aux<6; aux++){
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <ESP01DoWifi+0x2c0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b05      	cmp	r3, #5
 8000aca:	dde9      	ble.n	8000aa0 <ESP01DoWifi+0x260>
 8000acc:	e02b      	b.n	8000b26 <ESP01DoWifi+0x2e6>
 8000ace:	bf00      	nop
 8000ad0:	200004bc 	.word	0x200004bc
 8000ad4:	20000546 	.word	0x20000546
 8000ad8:	200004c2 	.word	0x200004c2
 8000adc:	200004c1 	.word	0x200004c1
 8000ae0:	200004c0 	.word	0x200004c0
 8000ae4:	200004c4 	.word	0x200004c4
 8000ae8:	0800a36c 	.word	0x0800a36c
 8000aec:	0800a3a0 	.word	0x0800a3a0
 8000af0:	0800a374 	.word	0x0800a374
 8000af4:	20000547 	.word	0x20000547
 8000af8:	0800a390 	.word	0x0800a390
 8000afc:	0800a3c4 	.word	0x0800a3c4
 8000b00:	20000548 	.word	0x20000548
 8000b04:	200004d8 	.word	0x200004d8
 8000b08:	20000508 	.word	0x20000508
 8000b0c:	0800a3d0 	.word	0x0800a3d0
 8000b10:	0800a3b4 	.word	0x0800a3b4
 8000b14:	0800a2f0 	.word	0x0800a2f0
 8000b18:	20000528 	.word	0x20000528
 8000b1c:	20000538 	.word	0x20000538
 8000b20:	20000540 	.word	0x20000540
				break;
 8000b24:	bf00      	nop
		}
		ESP01PutByteOnTx('\r');
 8000b26:	200d      	movs	r0, #13
 8000b28:	f7ff fe68 	bl	80007fc <ESP01PutByteOnTx>
		ESP01PutByteOnTx('\n');
 8000b2c:	200a      	movs	r0, #10
 8000b2e:	f7ff fe65 	bl	80007fc <ESP01PutByteOnTx>
		timeOutResponse = 50;
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <ESP01DoWifi+0x30c>)
 8000b34:	2232      	movs	r2, #50	; 0x32
 8000b36:	601a      	str	r2, [r3, #0]
		break;
 8000b38:	e006      	b.n	8000b48 <ESP01DoWifi+0x308>
	case STESP01ATCONNECTED:
		break;
	default:
		ESP01TASKSTATE = STESP01ATAT;
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <ESP01DoWifi+0x310>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	e002      	b.n	8000b48 <ESP01DoWifi+0x308>
		return;
 8000b42:	bf00      	nop
 8000b44:	e000      	b.n	8000b48 <ESP01DoWifi+0x308>
		break;
 8000b46:	bf00      	nop
	}

}
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200004bc 	.word	0x200004bc
 8000b50:	20000546 	.word	0x20000546

08000b54 <CmpResponse>:


static uint8_t CmpResponse(const char *str, uint16_t index, uint8_t n){
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
 8000b60:	4613      	mov	r3, r2
 8000b62:	707b      	strb	r3, [r7, #1]
	uint8_t j;

	for(j=0; j<n; j++){
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	e014      	b.n	8000b94 <CmpResponse+0x40>
		if(str[j] != bufRX[index])
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	490d      	ldr	r1, [pc, #52]	; (8000bac <CmpResponse+0x58>)
 8000b76:	5ccb      	ldrb	r3, [r1, r3]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d001      	beq.n	8000b80 <CmpResponse+0x2c>
			return 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e00e      	b.n	8000b9e <CmpResponse+0x4a>
		index++;
 8000b80:	887b      	ldrh	r3, [r7, #2]
 8000b82:	3301      	adds	r3, #1
 8000b84:	807b      	strh	r3, [r7, #2]
		index &= (SIZEBUFRX - 1);
 8000b86:	887b      	ldrh	r3, [r7, #2]
 8000b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b8c:	807b      	strh	r3, [r7, #2]
	for(j=0; j<n; j++){
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
 8000b90:	3301      	adds	r3, #1
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	7bfa      	ldrb	r2, [r7, #15]
 8000b96:	787b      	ldrb	r3, [r7, #1]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d3e6      	bcc.n	8000b6a <CmpResponse+0x16>
	}
	return 1;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000028 	.word	0x20000028

08000bb0 <ESP01DecodeAT>:


static void ESP01DecodeAT(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
	uint16_t index;

	index = iRXw;
 8000bb6:	4b8f      	ldr	r3, [pc, #572]	; (8000df4 <ESP01DecodeAT+0x244>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	80fb      	strh	r3, [r7, #6]
	index &= (SIZEBUFRX - 1);
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bc2:	80fb      	strh	r3, [r7, #6]

	while(iRXr != index){
 8000bc4:	e35e      	b.n	8001284 <ESP01DecodeAT+0x6d4>
		switch(header){
 8000bc6:	4b8c      	ldr	r3, [pc, #560]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b32      	cmp	r3, #50	; 0x32
 8000bcc:	f200 8357 	bhi.w	800127e <ESP01DecodeAT+0x6ce>
 8000bd0:	a201      	add	r2, pc, #4	; (adr r2, 8000bd8 <ESP01DecodeAT+0x28>)
 8000bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd6:	bf00      	nop
 8000bd8:	08000ca5 	.word	0x08000ca5
 8000bdc:	08000d65 	.word	0x08000d65
 8000be0:	08000d83 	.word	0x08000d83
 8000be4:	0800127f 	.word	0x0800127f
 8000be8:	0800127f 	.word	0x0800127f
 8000bec:	0800127f 	.word	0x0800127f
 8000bf0:	0800127f 	.word	0x0800127f
 8000bf4:	0800127f 	.word	0x0800127f
 8000bf8:	0800127f 	.word	0x0800127f
 8000bfc:	0800127f 	.word	0x0800127f
 8000c00:	08000d9b 	.word	0x08000d9b
 8000c04:	08000db9 	.word	0x08000db9
 8000c08:	08000dd7 	.word	0x08000dd7
 8000c0c:	08000e15 	.word	0x08000e15
 8000c10:	0800127f 	.word	0x0800127f
 8000c14:	0800127f 	.word	0x0800127f
 8000c18:	0800127f 	.word	0x0800127f
 8000c1c:	0800127f 	.word	0x0800127f
 8000c20:	0800127f 	.word	0x0800127f
 8000c24:	0800127f 	.word	0x0800127f
 8000c28:	08000ebf 	.word	0x08000ebf
 8000c2c:	08000edd 	.word	0x08000edd
 8000c30:	0800127f 	.word	0x0800127f
 8000c34:	0800127f 	.word	0x0800127f
 8000c38:	0800127f 	.word	0x0800127f
 8000c3c:	0800127f 	.word	0x0800127f
 8000c40:	0800127f 	.word	0x0800127f
 8000c44:	0800127f 	.word	0x0800127f
 8000c48:	0800127f 	.word	0x0800127f
 8000c4c:	0800127f 	.word	0x0800127f
 8000c50:	08000ef5 	.word	0x08000ef5
 8000c54:	0800127f 	.word	0x0800127f
 8000c58:	0800127f 	.word	0x0800127f
 8000c5c:	0800127f 	.word	0x0800127f
 8000c60:	0800127f 	.word	0x0800127f
 8000c64:	0800127f 	.word	0x0800127f
 8000c68:	0800127f 	.word	0x0800127f
 8000c6c:	0800127f 	.word	0x0800127f
 8000c70:	0800127f 	.word	0x0800127f
 8000c74:	0800127f 	.word	0x0800127f
 8000c78:	08000f63 	.word	0x08000f63
 8000c7c:	08000f81 	.word	0x08000f81
 8000c80:	08000fa7 	.word	0x08000fa7
 8000c84:	08001057 	.word	0x08001057
 8000c88:	08001075 	.word	0x08001075
 8000c8c:	080010dd 	.word	0x080010dd
 8000c90:	080010fb 	.word	0x080010fb
 8000c94:	0800111f 	.word	0x0800111f
 8000c98:	08001173 	.word	0x08001173
 8000c9c:	0800127f 	.word	0x0800127f
 8000ca0:	080011d1 	.word	0x080011d1
			case 0:
				if(bufRX[iRXr] == 'A')
 8000ca4:	4b55      	ldr	r3, [pc, #340]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b55      	ldr	r3, [pc, #340]	; (8000e00 <ESP01DecodeAT+0x250>)
 8000cac:	5c9b      	ldrb	r3, [r3, r2]
 8000cae:	2b41      	cmp	r3, #65	; 0x41
 8000cb0:	d102      	bne.n	8000cb8 <ESP01DecodeAT+0x108>
					header = 1;
 8000cb2:	4b51      	ldr	r3, [pc, #324]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
				if(bufRX[iRXr] == 'W'){
 8000cb8:	4b50      	ldr	r3, [pc, #320]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b50      	ldr	r3, [pc, #320]	; (8000e00 <ESP01DecodeAT+0x250>)
 8000cc0:	5c9b      	ldrb	r3, [r3, r2]
 8000cc2:	2b57      	cmp	r3, #87	; 0x57
 8000cc4:	d106      	bne.n	8000cd4 <ESP01DecodeAT+0x124>
					header = 10;
 8000cc6:	4b4c      	ldr	r3, [pc, #304]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000cc8:	220a      	movs	r2, #10
 8000cca:	701a      	strb	r2, [r3, #0]
					iResponse = iRXr;
 8000ccc:	4b4b      	ldr	r3, [pc, #300]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000cce:	881a      	ldrh	r2, [r3, #0]
 8000cd0:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <ESP01DecodeAT+0x254>)
 8000cd2:	801a      	strh	r2, [r3, #0]
				}
				if(bufRX[iRXr] == 'l')
 8000cd4:	4b49      	ldr	r3, [pc, #292]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b49      	ldr	r3, [pc, #292]	; (8000e00 <ESP01DecodeAT+0x250>)
 8000cdc:	5c9b      	ldrb	r3, [r3, r2]
 8000cde:	2b6c      	cmp	r3, #108	; 0x6c
 8000ce0:	d102      	bne.n	8000ce8 <ESP01DecodeAT+0x138>
					header = 20;
 8000ce2:	4b45      	ldr	r3, [pc, #276]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000ce4:	2214      	movs	r2, #20
 8000ce6:	701a      	strb	r2, [r3, #0]
				if(bufRX[iRXr] == '+'){
 8000ce8:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b44      	ldr	r3, [pc, #272]	; (8000e00 <ESP01DecodeAT+0x250>)
 8000cf0:	5c9b      	ldrb	r3, [r3, r2]
 8000cf2:	2b2b      	cmp	r3, #43	; 0x2b
 8000cf4:	d106      	bne.n	8000d04 <ESP01DecodeAT+0x154>
					header = 30;
 8000cf6:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000cf8:	221e      	movs	r2, #30
 8000cfa:	701a      	strb	r2, [r3, #0]
					iResponse = iRXr;
 8000cfc:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000cfe:	881a      	ldrh	r2, [r3, #0]
 8000d00:	4b40      	ldr	r3, [pc, #256]	; (8000e04 <ESP01DecodeAT+0x254>)
 8000d02:	801a      	strh	r2, [r3, #0]
				}
				if(bufRX[iRXr] == '\r')
 8000d04:	4b3d      	ldr	r3, [pc, #244]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b3d      	ldr	r3, [pc, #244]	; (8000e00 <ESP01DecodeAT+0x250>)
 8000d0c:	5c9b      	ldrb	r3, [r3, r2]
 8000d0e:	2b0d      	cmp	r3, #13
 8000d10:	d102      	bne.n	8000d18 <ESP01DecodeAT+0x168>
					header = 40;
 8000d12:	4b39      	ldr	r3, [pc, #228]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000d14:	2228      	movs	r2, #40	; 0x28
 8000d16:	701a      	strb	r2, [r3, #0]
				if(bufRX[iRXr]=='C' || bufRX[iRXr]=='D'){
 8000d18:	4b38      	ldr	r3, [pc, #224]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b38      	ldr	r3, [pc, #224]	; (8000e00 <ESP01DecodeAT+0x250>)
 8000d20:	5c9b      	ldrb	r3, [r3, r2]
 8000d22:	2b43      	cmp	r3, #67	; 0x43
 8000d24:	d006      	beq.n	8000d34 <ESP01DecodeAT+0x184>
 8000d26:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b34      	ldr	r3, [pc, #208]	; (8000e00 <ESP01DecodeAT+0x250>)
 8000d2e:	5c9b      	ldrb	r3, [r3, r2]
 8000d30:	2b44      	cmp	r3, #68	; 0x44
 8000d32:	d106      	bne.n	8000d42 <ESP01DecodeAT+0x192>
					header = 50;
 8000d34:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000d36:	2232      	movs	r2, #50	; 0x32
 8000d38:	701a      	strb	r2, [r3, #0]
					iResponse = iRXr;
 8000d3a:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000d3c:	881a      	ldrh	r2, [r3, #0]
 8000d3e:	4b31      	ldr	r3, [pc, #196]	; (8000e04 <ESP01DecodeAT+0x254>)
 8000d40:	801a      	strh	r2, [r3, #0]
				}
				if(bufRX[iRXr] == '>'){
 8000d42:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <ESP01DecodeAT+0x250>)
 8000d4a:	5c9b      	ldrb	r3, [r3, r2]
 8000d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8000d4e:	d105      	bne.n	8000d5c <ESP01DecodeAT+0x1ac>
					timeOutSymbol = 0;
 8000d50:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <ESP01DecodeAT+0x258>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
					WAITINGSYMBOL = 0;
 8000d56:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <ESP01DecodeAT+0x25c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
				}
				timeOut = 100;
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <ESP01DecodeAT+0x260>)
 8000d5e:	2264      	movs	r2, #100	; 0x64
 8000d60:	701a      	strb	r2, [r3, #0]
				break;
 8000d62:	e28f      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 1:
				if(bufRX[iRXr] == 'T')
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <ESP01DecodeAT+0x250>)
 8000d6c:	5c9b      	ldrb	r3, [r3, r2]
 8000d6e:	2b54      	cmp	r3, #84	; 0x54
 8000d70:	d103      	bne.n	8000d7a <ESP01DecodeAT+0x1ca>
					header = 2;
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	701a      	strb	r2, [r3, #0]
 8000d78:	e284      	b.n	8001284 <ESP01DecodeAT+0x6d4>
				else
					header = 0;
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
				break;
 8000d80:	e280      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 2:
				if(bufRX[iRXr] == '\n')
 8000d82:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <ESP01DecodeAT+0x250>)
 8000d8a:	5c9b      	ldrb	r3, [r3, r2]
 8000d8c:	2b0a      	cmp	r3, #10
 8000d8e:	f040 8279 	bne.w	8001284 <ESP01DecodeAT+0x6d4>
					header = 0;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
				break;
 8000d98:	e274      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 10:
				if(bufRX[iRXr] == 'I')
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <ESP01DecodeAT+0x250>)
 8000da2:	5c9b      	ldrb	r3, [r3, r2]
 8000da4:	2b49      	cmp	r3, #73	; 0x49
 8000da6:	d103      	bne.n	8000db0 <ESP01DecodeAT+0x200>
					header = 11;
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000daa:	220b      	movs	r2, #11
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	e269      	b.n	8001284 <ESP01DecodeAT+0x6d4>
				else
					header = 0;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
				break;
 8000db6:	e265      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 11:
				if(bufRX[iRXr] == 'F')
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <ESP01DecodeAT+0x250>)
 8000dc0:	5c9b      	ldrb	r3, [r3, r2]
 8000dc2:	2b46      	cmp	r3, #70	; 0x46
 8000dc4:	d103      	bne.n	8000dce <ESP01DecodeAT+0x21e>
					header = 12;
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000dc8:	220c      	movs	r2, #12
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	e25a      	b.n	8001284 <ESP01DecodeAT+0x6d4>
				else
					header = 0;
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
				break;
 8000dd4:	e256      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 12:
				if(bufRX[iRXr] == 'I')
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <ESP01DecodeAT+0x24c>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <ESP01DecodeAT+0x250>)
 8000dde:	5c9b      	ldrb	r3, [r3, r2]
 8000de0:	2b49      	cmp	r3, #73	; 0x49
 8000de2:	d103      	bne.n	8000dec <ESP01DecodeAT+0x23c>
					header = 13;
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000de6:	220d      	movs	r2, #13
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e24b      	b.n	8001284 <ESP01DecodeAT+0x6d4>
				else
					header = 21;
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <ESP01DecodeAT+0x248>)
 8000dee:	2215      	movs	r2, #21
 8000df0:	701a      	strb	r2, [r3, #0]
				break;
 8000df2:	e247      	b.n	8001284 <ESP01DecodeAT+0x6d4>
 8000df4:	2000022a 	.word	0x2000022a
 8000df8:	20000228 	.word	0x20000228
 8000dfc:	2000022c 	.word	0x2000022c
 8000e00:	20000028 	.word	0x20000028
 8000e04:	2000022e 	.word	0x2000022e
 8000e08:	200004c3 	.word	0x200004c3
 8000e0c:	200004c2 	.word	0x200004c2
 8000e10:	20000229 	.word	0x20000229
			case 13:
				if(bufRX[iRXr] == '\n'){
 8000e14:	4b9f      	ldr	r3, [pc, #636]	; (8001094 <ESP01DecodeAT+0x4e4>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b9f      	ldr	r3, [pc, #636]	; (8001098 <ESP01DecodeAT+0x4e8>)
 8000e1c:	5c9b      	ldrb	r3, [r3, r2]
 8000e1e:	2b0a      	cmp	r3, #10
 8000e20:	f040 8230 	bne.w	8001284 <ESP01DecodeAT+0x6d4>
					header = 0;
 8000e24:	4b9d      	ldr	r3, [pc, #628]	; (800109c <ESP01DecodeAT+0x4ec>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
					if(CmpResponse(_WIFIGotIP, iResponse, 11)==1){
 8000e2a:	4b9d      	ldr	r3, [pc, #628]	; (80010a0 <ESP01DecodeAT+0x4f0>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	220b      	movs	r2, #11
 8000e30:	4619      	mov	r1, r3
 8000e32:	489c      	ldr	r0, [pc, #624]	; (80010a4 <ESP01DecodeAT+0x4f4>)
 8000e34:	f7ff fe8e 	bl	8000b54 <CmpResponse>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d109      	bne.n	8000e52 <ESP01DecodeAT+0x2a2>
						if(ESP01TASKSTATE == STESP01ATCWJAP){
 8000e3e:	4b9a      	ldr	r3, [pc, #616]	; (80010a8 <ESP01DecodeAT+0x4f8>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d105      	bne.n	8000e52 <ESP01DecodeAT+0x2a2>
							ESP01TASKSTATE = STESP01ATCIFSR;
 8000e46:	4b98      	ldr	r3, [pc, #608]	; (80010a8 <ESP01DecodeAT+0x4f8>)
 8000e48:	2204      	movs	r2, #4
 8000e4a:	701a      	strb	r2, [r3, #0]
							timeOutResponse = 20;
 8000e4c:	4b97      	ldr	r3, [pc, #604]	; (80010ac <ESP01DecodeAT+0x4fc>)
 8000e4e:	2214      	movs	r2, #20
 8000e50:	601a      	str	r2, [r3, #0]
						}
					}
					if(CmpResponse(_WIFIDisconnected, iResponse, 17)==1){
 8000e52:	4b93      	ldr	r3, [pc, #588]	; (80010a0 <ESP01DecodeAT+0x4f0>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	2211      	movs	r2, #17
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4895      	ldr	r0, [pc, #596]	; (80010b0 <ESP01DecodeAT+0x500>)
 8000e5c:	f7ff fe7a 	bl	8000b54 <CmpResponse>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d10c      	bne.n	8000e80 <ESP01DecodeAT+0x2d0>
						ESP01TASKSTATE = STESP01ATAT;
 8000e66:	4b90      	ldr	r3, [pc, #576]	; (80010a8 <ESP01DecodeAT+0x4f8>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
						lastESP01STATE =  ESP01WIFIDISCONNECTED;
 8000e6c:	4b91      	ldr	r3, [pc, #580]	; (80010b4 <ESP01DecodeAT+0x504>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
						if(doESP01WIFIDisconnected)
 8000e72:	4b91      	ldr	r3, [pc, #580]	; (80010b8 <ESP01DecodeAT+0x508>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d002      	beq.n	8000e80 <ESP01DecodeAT+0x2d0>
							doESP01WIFIDisconnected();
 8000e7a:	4b8f      	ldr	r3, [pc, #572]	; (80010b8 <ESP01DecodeAT+0x508>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4798      	blx	r3
					}
					if(CmpResponse(_WIFIDisconnect, iResponse, 15)==1){
 8000e80:	4b87      	ldr	r3, [pc, #540]	; (80010a0 <ESP01DecodeAT+0x4f0>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	220f      	movs	r2, #15
 8000e86:	4619      	mov	r1, r3
 8000e88:	488c      	ldr	r0, [pc, #560]	; (80010bc <ESP01DecodeAT+0x50c>)
 8000e8a:	f7ff fe63 	bl	8000b54 <CmpResponse>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	f040 81f7 	bne.w	8001284 <ESP01DecodeAT+0x6d4>
						if(ESP01TASKSTATE != STESP01ATCWJAP){
 8000e96:	4b84      	ldr	r3, [pc, #528]	; (80010a8 <ESP01DecodeAT+0x4f8>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	f000 81f2 	beq.w	8001284 <ESP01DecodeAT+0x6d4>
							ESP01TASKSTATE = STESP01ATAT;
 8000ea0:	4b81      	ldr	r3, [pc, #516]	; (80010a8 <ESP01DecodeAT+0x4f8>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
							lastESP01STATE = ESP01WIFIDISCONNECTED;
 8000ea6:	4b83      	ldr	r3, [pc, #524]	; (80010b4 <ESP01DecodeAT+0x504>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
							if(doESP01WIFIDisconnected)
 8000eac:	4b82      	ldr	r3, [pc, #520]	; (80010b8 <ESP01DecodeAT+0x508>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 81e7 	beq.w	8001284 <ESP01DecodeAT+0x6d4>
								doESP01WIFIDisconnected();
 8000eb6:	4b80      	ldr	r3, [pc, #512]	; (80010b8 <ESP01DecodeAT+0x508>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4798      	blx	r3
						}
					}
				}
				break;
 8000ebc:	e1e2      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 20:
				if(bufRX[iRXr] == 'i')
 8000ebe:	4b75      	ldr	r3, [pc, #468]	; (8001094 <ESP01DecodeAT+0x4e4>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b74      	ldr	r3, [pc, #464]	; (8001098 <ESP01DecodeAT+0x4e8>)
 8000ec6:	5c9b      	ldrb	r3, [r3, r2]
 8000ec8:	2b69      	cmp	r3, #105	; 0x69
 8000eca:	d103      	bne.n	8000ed4 <ESP01DecodeAT+0x324>
					header = 21;
 8000ecc:	4b73      	ldr	r3, [pc, #460]	; (800109c <ESP01DecodeAT+0x4ec>)
 8000ece:	2215      	movs	r2, #21
 8000ed0:	701a      	strb	r2, [r3, #0]
 8000ed2:	e1d7      	b.n	8001284 <ESP01DecodeAT+0x6d4>
				else
					header = 0;
 8000ed4:	4b71      	ldr	r3, [pc, #452]	; (800109c <ESP01DecodeAT+0x4ec>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
				break;
 8000eda:	e1d3      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 21:
				if(bufRX[iRXr] == '\n')
 8000edc:	4b6d      	ldr	r3, [pc, #436]	; (8001094 <ESP01DecodeAT+0x4e4>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b6d      	ldr	r3, [pc, #436]	; (8001098 <ESP01DecodeAT+0x4e8>)
 8000ee4:	5c9b      	ldrb	r3, [r3, r2]
 8000ee6:	2b0a      	cmp	r3, #10
 8000ee8:	f040 81cc 	bne.w	8001284 <ESP01DecodeAT+0x6d4>
					header = 0;
 8000eec:	4b6b      	ldr	r3, [pc, #428]	; (800109c <ESP01DecodeAT+0x4ec>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
				break;
 8000ef2:	e1c7      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 30:
				if(bufRX[iRXr] == '\n'){
 8000ef4:	4b67      	ldr	r3, [pc, #412]	; (8001094 <ESP01DecodeAT+0x4e4>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b67      	ldr	r3, [pc, #412]	; (8001098 <ESP01DecodeAT+0x4e8>)
 8000efc:	5c9b      	ldrb	r3, [r3, r2]
 8000efe:	2b0a      	cmp	r3, #10
 8000f00:	f040 81c0 	bne.w	8001284 <ESP01DecodeAT+0x6d4>
					header = 0;
 8000f04:	4b65      	ldr	r3, [pc, #404]	; (800109c <ESP01DecodeAT+0x4ec>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
					if(ESP01TASKSTATE  == STESP01ATCIFSR){
 8000f0a:	4b67      	ldr	r3, [pc, #412]	; (80010a8 <ESP01DecodeAT+0x4f8>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	f040 81b8 	bne.w	8001284 <ESP01DecodeAT+0x6d4>
						if(CmpResponse(_CIFSRSTAIP, iResponse, 12) == 1){
 8000f14:	4b62      	ldr	r3, [pc, #392]	; (80010a0 <ESP01DecodeAT+0x4f0>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	220c      	movs	r2, #12
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4868      	ldr	r0, [pc, #416]	; (80010c0 <ESP01DecodeAT+0x510>)
 8000f1e:	f7ff fe19 	bl	8000b54 <CmpResponse>
						}
						if(CmpResponse(_CIFSRSTAMAC, iResponse, 13) == 1){
 8000f22:	4b5f      	ldr	r3, [pc, #380]	; (80010a0 <ESP01DecodeAT+0x4f0>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	220d      	movs	r2, #13
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4866      	ldr	r0, [pc, #408]	; (80010c4 <ESP01DecodeAT+0x514>)
 8000f2c:	f7ff fe12 	bl	8000b54 <CmpResponse>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	f040 81a6 	bne.w	8001284 <ESP01DecodeAT+0x6d4>
							ESP01TASKSTATE = STESP01ATCLOSE;
 8000f38:	4b5b      	ldr	r3, [pc, #364]	; (80010a8 <ESP01DecodeAT+0x4f8>)
 8000f3a:	2205      	movs	r2, #5
 8000f3c:	701a      	strb	r2, [r3, #0]
							timeOutResponse = 0;
 8000f3e:	4b5b      	ldr	r3, [pc, #364]	; (80010ac <ESP01DecodeAT+0x4fc>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
							lastESP01STATE = ESP01WIFICONNECTED;
 8000f44:	4b5b      	ldr	r3, [pc, #364]	; (80010b4 <ESP01DecodeAT+0x504>)
 8000f46:	2202      	movs	r2, #2
 8000f48:	701a      	strb	r2, [r3, #0]
							triesAT = 0;
 8000f4a:	4b5f      	ldr	r3, [pc, #380]	; (80010c8 <ESP01DecodeAT+0x518>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
							if(doESP01WIFIConnected)
 8000f50:	4b5e      	ldr	r3, [pc, #376]	; (80010cc <ESP01DecodeAT+0x51c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 8195 	beq.w	8001284 <ESP01DecodeAT+0x6d4>
								doESP01WIFIConnected();
 8000f5a:	4b5c      	ldr	r3, [pc, #368]	; (80010cc <ESP01DecodeAT+0x51c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4798      	blx	r3
						}
					}
				}
				break;
 8000f60:	e190      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 40:
				if(bufRX[iRXr] == '\n')
 8000f62:	4b4c      	ldr	r3, [pc, #304]	; (8001094 <ESP01DecodeAT+0x4e4>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b4b      	ldr	r3, [pc, #300]	; (8001098 <ESP01DecodeAT+0x4e8>)
 8000f6a:	5c9b      	ldrb	r3, [r3, r2]
 8000f6c:	2b0a      	cmp	r3, #10
 8000f6e:	d103      	bne.n	8000f78 <ESP01DecodeAT+0x3c8>
					header = 41;
 8000f70:	4b4a      	ldr	r3, [pc, #296]	; (800109c <ESP01DecodeAT+0x4ec>)
 8000f72:	2229      	movs	r2, #41	; 0x29
 8000f74:	701a      	strb	r2, [r3, #0]
 8000f76:	e185      	b.n	8001284 <ESP01DecodeAT+0x6d4>
				else
					header = 0;
 8000f78:	4b48      	ldr	r3, [pc, #288]	; (800109c <ESP01DecodeAT+0x4ec>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
				break;
 8000f7e:	e181      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 41:
				if(bufRX[iRXr] == '+')
 8000f80:	4b44      	ldr	r3, [pc, #272]	; (8001094 <ESP01DecodeAT+0x4e4>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b44      	ldr	r3, [pc, #272]	; (8001098 <ESP01DecodeAT+0x4e8>)
 8000f88:	5c9b      	ldrb	r3, [r3, r2]
 8000f8a:	2b2b      	cmp	r3, #43	; 0x2b
 8000f8c:	d103      	bne.n	8000f96 <ESP01DecodeAT+0x3e6>
					header = 43;
 8000f8e:	4b43      	ldr	r3, [pc, #268]	; (800109c <ESP01DecodeAT+0x4ec>)
 8000f90:	222b      	movs	r2, #43	; 0x2b
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	e176      	b.n	8001284 <ESP01DecodeAT+0x6d4>
				else{
					header = 42;
 8000f96:	4b41      	ldr	r3, [pc, #260]	; (800109c <ESP01DecodeAT+0x4ec>)
 8000f98:	222a      	movs	r2, #42	; 0x2a
 8000f9a:	701a      	strb	r2, [r3, #0]
					iResponse = iRXr;
 8000f9c:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <ESP01DecodeAT+0x4e4>)
 8000f9e:	881a      	ldrh	r2, [r3, #0]
 8000fa0:	4b3f      	ldr	r3, [pc, #252]	; (80010a0 <ESP01DecodeAT+0x4f0>)
 8000fa2:	801a      	strh	r2, [r3, #0]
				}
				break;
 8000fa4:	e16e      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 42:
				if(bufRX[iRXr] == '\n'){
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	; (8001094 <ESP01DecodeAT+0x4e4>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <ESP01DecodeAT+0x4e8>)
 8000fae:	5c9b      	ldrb	r3, [r3, r2]
 8000fb0:	2b0a      	cmp	r3, #10
 8000fb2:	f040 8167 	bne.w	8001284 <ESP01DecodeAT+0x6d4>
					header = 0;
 8000fb6:	4b39      	ldr	r3, [pc, #228]	; (800109c <ESP01DecodeAT+0x4ec>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
					if(CmpResponse(_OK, iResponse, 2) == 1){
 8000fbc:	4b38      	ldr	r3, [pc, #224]	; (80010a0 <ESP01DecodeAT+0x4f0>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4842      	ldr	r0, [pc, #264]	; (80010d0 <ESP01DecodeAT+0x520>)
 8000fc6:	f7ff fdc5 	bl	8000b54 <CmpResponse>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d11d      	bne.n	800100c <ESP01DecodeAT+0x45c>
						if(ESP01TASKSTATE == STESP01ATAT){
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <ESP01DecodeAT+0x4f8>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d105      	bne.n	8000fe4 <ESP01DecodeAT+0x434>
							ESP01TASKSTATE = STESP01ATCWMODE;
 8000fd8:	4b33      	ldr	r3, [pc, #204]	; (80010a8 <ESP01DecodeAT+0x4f8>)
 8000fda:	2209      	movs	r2, #9
 8000fdc:	701a      	strb	r2, [r3, #0]
							timeOutResponse = 0;
 8000fde:	4b33      	ldr	r3, [pc, #204]	; (80010ac <ESP01DecodeAT+0x4fc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
						}
						if(ESP01TASKSTATE == STESP01ATCWMODE){
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <ESP01DecodeAT+0x4f8>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b09      	cmp	r3, #9
 8000fea:	d105      	bne.n	8000ff8 <ESP01DecodeAT+0x448>
							timeOutResponse = 0;
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <ESP01DecodeAT+0x4fc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
							ESP01TASKSTATE = STESP01ATCIPMUX;
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <ESP01DecodeAT+0x4f8>)
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	701a      	strb	r2, [r3, #0]
						}
						if(ESP01TASKSTATE == STESP01ATCIPMUX){
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <ESP01DecodeAT+0x4f8>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d105      	bne.n	800100c <ESP01DecodeAT+0x45c>
							ESP01TASKSTATE = STESP01ATCLOSE;
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <ESP01DecodeAT+0x4f8>)
 8001002:	2205      	movs	r2, #5
 8001004:	701a      	strb	r2, [r3, #0]
							timeOutResponse = 0;
 8001006:	4b29      	ldr	r3, [pc, #164]	; (80010ac <ESP01DecodeAT+0x4fc>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
						}
					}
					if(CmpResponse(_BUSY, iResponse, 4) == 1){
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <ESP01DecodeAT+0x4f0>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	2204      	movs	r2, #4
 8001012:	4619      	mov	r1, r3
 8001014:	482f      	ldr	r0, [pc, #188]	; (80010d4 <ESP01DecodeAT+0x524>)
 8001016:	f7ff fd9d 	bl	8000b54 <CmpResponse>
 800101a:	4603      	mov	r3, r0
 800101c:	2b01      	cmp	r3, #1
 800101e:	d10b      	bne.n	8001038 <ESP01DecodeAT+0x488>
						ESP01TASKSTATE = STESP01ATAT;
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <ESP01DecodeAT+0x4f8>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
						triesAT = 1;
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <ESP01DecodeAT+0x518>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
						lastESP01STATE = ESP01WIFIDISCONNECTED;
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <ESP01DecodeAT+0x504>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
						timeOutResponse = 0;
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <ESP01DecodeAT+0x4fc>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
					}
					if(CmpResponse(_SENDOK, iResponse, 7) == 1){
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <ESP01DecodeAT+0x4f0>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	2207      	movs	r2, #7
 800103e:	4619      	mov	r1, r3
 8001040:	4825      	ldr	r0, [pc, #148]	; (80010d8 <ESP01DecodeAT+0x528>)
 8001042:	f7ff fd87 	bl	8000b54 <CmpResponse>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	f040 811b 	bne.w	8001284 <ESP01DecodeAT+0x6d4>
						timeOutResponse = 0;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <ESP01DecodeAT+0x4fc>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
					}
				}
				break;
 8001054:	e116      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 43:
				if(bufRX[iRXr] == 'I')
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <ESP01DecodeAT+0x4e4>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <ESP01DecodeAT+0x4e8>)
 800105e:	5c9b      	ldrb	r3, [r3, r2]
 8001060:	2b49      	cmp	r3, #73	; 0x49
 8001062:	d103      	bne.n	800106c <ESP01DecodeAT+0x4bc>
					header = 44;
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <ESP01DecodeAT+0x4ec>)
 8001066:	222c      	movs	r2, #44	; 0x2c
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	e10b      	b.n	8001284 <ESP01DecodeAT+0x6d4>
				else
					header = 42;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <ESP01DecodeAT+0x4ec>)
 800106e:	222a      	movs	r2, #42	; 0x2a
 8001070:	701a      	strb	r2, [r3, #0]
				break;
 8001072:	e107      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 44:
				if(bufRX[iRXr] == 'P')
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <ESP01DecodeAT+0x4e4>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <ESP01DecodeAT+0x4e8>)
 800107c:	5c9b      	ldrb	r3, [r3, r2]
 800107e:	2b50      	cmp	r3, #80	; 0x50
 8001080:	d103      	bne.n	800108a <ESP01DecodeAT+0x4da>
					header = 45;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <ESP01DecodeAT+0x4ec>)
 8001084:	222d      	movs	r2, #45	; 0x2d
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e0fc      	b.n	8001284 <ESP01DecodeAT+0x6d4>
				else
					header = 42;
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <ESP01DecodeAT+0x4ec>)
 800108c:	222a      	movs	r2, #42	; 0x2a
 800108e:	701a      	strb	r2, [r3, #0]
				break;
 8001090:	e0f8      	b.n	8001284 <ESP01DecodeAT+0x6d4>
 8001092:	bf00      	nop
 8001094:	2000022c 	.word	0x2000022c
 8001098:	20000028 	.word	0x20000028
 800109c:	20000228 	.word	0x20000228
 80010a0:	2000022e 	.word	0x2000022e
 80010a4:	0800a2f4 	.word	0x0800a2f4
 80010a8:	20000546 	.word	0x20000546
 80010ac:	200004bc 	.word	0x200004bc
 80010b0:	0800a304 	.word	0x0800a304
 80010b4:	20000547 	.word	0x20000547
 80010b8:	200004d0 	.word	0x200004d0
 80010bc:	0800a318 	.word	0x0800a318
 80010c0:	0800a3dc 	.word	0x0800a3dc
 80010c4:	0800a3ec 	.word	0x0800a3ec
 80010c8:	200004c0 	.word	0x200004c0
 80010cc:	200004cc 	.word	0x200004cc
 80010d0:	0800a32c 	.word	0x0800a32c
 80010d4:	0800a360 	.word	0x0800a360
 80010d8:	0800a354 	.word	0x0800a354
			case 45:
				if(bufRX[iRXr] == 'D')
 80010dc:	4b6f      	ldr	r3, [pc, #444]	; (800129c <ESP01DecodeAT+0x6ec>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b6f      	ldr	r3, [pc, #444]	; (80012a0 <ESP01DecodeAT+0x6f0>)
 80010e4:	5c9b      	ldrb	r3, [r3, r2]
 80010e6:	2b44      	cmp	r3, #68	; 0x44
 80010e8:	d103      	bne.n	80010f2 <ESP01DecodeAT+0x542>
					header = 46;
 80010ea:	4b6e      	ldr	r3, [pc, #440]	; (80012a4 <ESP01DecodeAT+0x6f4>)
 80010ec:	222e      	movs	r2, #46	; 0x2e
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	e0c8      	b.n	8001284 <ESP01DecodeAT+0x6d4>
				else
					header = 42;
 80010f2:	4b6c      	ldr	r3, [pc, #432]	; (80012a4 <ESP01DecodeAT+0x6f4>)
 80010f4:	222a      	movs	r2, #42	; 0x2a
 80010f6:	701a      	strb	r2, [r3, #0]
				break;
 80010f8:	e0c4      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 46:
				if(bufRX[iRXr] == ','){
 80010fa:	4b68      	ldr	r3, [pc, #416]	; (800129c <ESP01DecodeAT+0x6ec>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <ESP01DecodeAT+0x6f0>)
 8001102:	5c9b      	ldrb	r3, [r3, r2]
 8001104:	2b2c      	cmp	r3, #44	; 0x2c
 8001106:	d106      	bne.n	8001116 <ESP01DecodeAT+0x566>
					header = 47;
 8001108:	4b66      	ldr	r3, [pc, #408]	; (80012a4 <ESP01DecodeAT+0x6f4>)
 800110a:	222f      	movs	r2, #47	; 0x2f
 800110c:	701a      	strb	r2, [r3, #0]
					ipdBytes = 0;
 800110e:	4b66      	ldr	r3, [pc, #408]	; (80012a8 <ESP01DecodeAT+0x6f8>)
 8001110:	2200      	movs	r2, #0
 8001112:	801a      	strh	r2, [r3, #0]
 8001114:	e0b6      	b.n	8001284 <ESP01DecodeAT+0x6d4>
				}
				else
					header = 42;
 8001116:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <ESP01DecodeAT+0x6f4>)
 8001118:	222a      	movs	r2, #42	; 0x2a
 800111a:	701a      	strb	r2, [r3, #0]
				break;
 800111c:	e0b2      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 47:
				if(bufRX[iRXr] == ':')
 800111e:	4b5f      	ldr	r3, [pc, #380]	; (800129c <ESP01DecodeAT+0x6ec>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4b5e      	ldr	r3, [pc, #376]	; (80012a0 <ESP01DecodeAT+0x6f0>)
 8001126:	5c9b      	ldrb	r3, [r3, r2]
 8001128:	2b3a      	cmp	r3, #58	; 0x3a
 800112a:	d103      	bne.n	8001134 <ESP01DecodeAT+0x584>
					header = 48;
 800112c:	4b5d      	ldr	r3, [pc, #372]	; (80012a4 <ESP01DecodeAT+0x6f4>)
 800112e:	2230      	movs	r2, #48	; 0x30
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e0a7      	b.n	8001284 <ESP01DecodeAT+0x6d4>
				else{
					ipdBytes *= 10;
 8001134:	4b5c      	ldr	r3, [pc, #368]	; (80012a8 <ESP01DecodeAT+0x6f8>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4413      	add	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	b29a      	uxth	r2, r3
 8001142:	4b59      	ldr	r3, [pc, #356]	; (80012a8 <ESP01DecodeAT+0x6f8>)
 8001144:	801a      	strh	r2, [r3, #0]
					ipdBytes += (bufRX[iRXr] - 0x30);
 8001146:	4b55      	ldr	r3, [pc, #340]	; (800129c <ESP01DecodeAT+0x6ec>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <ESP01DecodeAT+0x6f0>)
 800114e:	5c9b      	ldrb	r3, [r3, r2]
 8001150:	b29a      	uxth	r2, r3
 8001152:	4b55      	ldr	r3, [pc, #340]	; (80012a8 <ESP01DecodeAT+0x6f8>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	b29b      	uxth	r3, r3
 800115a:	3b30      	subs	r3, #48	; 0x30
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b52      	ldr	r3, [pc, #328]	; (80012a8 <ESP01DecodeAT+0x6f8>)
 8001160:	801a      	strh	r2, [r3, #0]
					nBytesDatagram = ipdBytes;
 8001162:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <ESP01DecodeAT+0x6f8>)
 8001164:	881a      	ldrh	r2, [r3, #0]
 8001166:	4b51      	ldr	r3, [pc, #324]	; (80012ac <ESP01DecodeAT+0x6fc>)
 8001168:	801a      	strh	r2, [r3, #0]
					iBufDatagram = 0;
 800116a:	4b51      	ldr	r3, [pc, #324]	; (80012b0 <ESP01DecodeAT+0x700>)
 800116c:	2200      	movs	r2, #0
 800116e:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001170:	e088      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 48:
				ipdBytes--;
 8001172:	4b4d      	ldr	r3, [pc, #308]	; (80012a8 <ESP01DecodeAT+0x6f8>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	3b01      	subs	r3, #1
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b4b      	ldr	r3, [pc, #300]	; (80012a8 <ESP01DecodeAT+0x6f8>)
 800117c:	801a      	strh	r2, [r3, #0]
				if(ipdBytes == 0){
 800117e:	4b4a      	ldr	r3, [pc, #296]	; (80012a8 <ESP01DecodeAT+0x6f8>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10e      	bne.n	80011a4 <ESP01DecodeAT+0x5f4>
					header = 0;
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <ESP01DecodeAT+0x6f4>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
					if(doESP01OnUDPData != NULL)
 800118c:	4b49      	ldr	r3, [pc, #292]	; (80012b4 <ESP01DecodeAT+0x704>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d077      	beq.n	8001284 <ESP01DecodeAT+0x6d4>
						doESP01OnUDPData(bufDatagram, nBytesDatagram);
 8001194:	4b47      	ldr	r3, [pc, #284]	; (80012b4 <ESP01DecodeAT+0x704>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a44      	ldr	r2, [pc, #272]	; (80012ac <ESP01DecodeAT+0x6fc>)
 800119a:	8812      	ldrh	r2, [r2, #0]
 800119c:	4611      	mov	r1, r2
 800119e:	4846      	ldr	r0, [pc, #280]	; (80012b8 <ESP01DecodeAT+0x708>)
 80011a0:	4798      	blx	r3
 80011a2:	e06f      	b.n	8001284 <ESP01DecodeAT+0x6d4>
				}
				else{
					bufDatagram[iBufDatagram++] = bufRX[iRXr];
 80011a4:	4b3d      	ldr	r3, [pc, #244]	; (800129c <ESP01DecodeAT+0x6ec>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <ESP01DecodeAT+0x700>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	b290      	uxth	r0, r2
 80011b2:	4a3f      	ldr	r2, [pc, #252]	; (80012b0 <ESP01DecodeAT+0x700>)
 80011b4:	8010      	strh	r0, [r2, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <ESP01DecodeAT+0x6f0>)
 80011ba:	5c59      	ldrb	r1, [r3, r1]
 80011bc:	4b3e      	ldr	r3, [pc, #248]	; (80012b8 <ESP01DecodeAT+0x708>)
 80011be:	5499      	strb	r1, [r3, r2]
					if(iBufDatagram == SIZEBUFDATAGRAM)
 80011c0:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <ESP01DecodeAT+0x700>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	2b80      	cmp	r3, #128	; 0x80
 80011c6:	d15d      	bne.n	8001284 <ESP01DecodeAT+0x6d4>
						iBufDatagram = 0;
 80011c8:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <ESP01DecodeAT+0x700>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	801a      	strh	r2, [r3, #0]
				}
				break;
 80011ce:	e059      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			case 50:
				if(bufRX[iRXr] == '\n'){
 80011d0:	4b32      	ldr	r3, [pc, #200]	; (800129c <ESP01DecodeAT+0x6ec>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <ESP01DecodeAT+0x6f0>)
 80011d8:	5c9b      	ldrb	r3, [r3, r2]
 80011da:	2b0a      	cmp	r3, #10
 80011dc:	d152      	bne.n	8001284 <ESP01DecodeAT+0x6d4>
					header = 0;
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <ESP01DecodeAT+0x6f4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
					if(CmpResponse(_CONNECT, iResponse, 7) == 1){
 80011e4:	4b35      	ldr	r3, [pc, #212]	; (80012bc <ESP01DecodeAT+0x70c>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	2207      	movs	r2, #7
 80011ea:	4619      	mov	r1, r3
 80011ec:	4834      	ldr	r0, [pc, #208]	; (80012c0 <ESP01DecodeAT+0x710>)
 80011ee:	f7ff fcb1 	bl	8000b54 <CmpResponse>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d113      	bne.n	8001220 <ESP01DecodeAT+0x670>
						if(ESP01TASKSTATE == STESP01ATCIPSTART){
 80011f8:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <ESP01DecodeAT+0x714>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b06      	cmp	r3, #6
 80011fe:	d10f      	bne.n	8001220 <ESP01DecodeAT+0x670>
							ESP01TASKSTATE = STESP01ATCONNECTED;
 8001200:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <ESP01DecodeAT+0x714>)
 8001202:	2207      	movs	r2, #7
 8001204:	701a      	strb	r2, [r3, #0]
							lastESP01STATE = ESP01UDPREADY;
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <ESP01DecodeAT+0x718>)
 8001208:	2203      	movs	r2, #3
 800120a:	701a      	strb	r2, [r3, #0]
							if(doESP01UDPReady)
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <ESP01DecodeAT+0x71c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <ESP01DecodeAT+0x66a>
								doESP01UDPReady();
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <ESP01DecodeAT+0x71c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4798      	blx	r3
							timeOutResponse = 0;
 800121a:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <ESP01DecodeAT+0x720>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
						}
					}
					if(CmpResponse(_DISCONNECTED, iResponse, 12) == 1){
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <ESP01DecodeAT+0x70c>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	220c      	movs	r2, #12
 8001226:	4619      	mov	r1, r3
 8001228:	482a      	ldr	r0, [pc, #168]	; (80012d4 <ESP01DecodeAT+0x724>)
 800122a:	f7ff fc93 	bl	8000b54 <CmpResponse>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d10f      	bne.n	8001254 <ESP01DecodeAT+0x6a4>
						ESP01TASKSTATE = STESP01ATAT;
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <ESP01DecodeAT+0x714>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
						timeOutResponse = 0;
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <ESP01DecodeAT+0x720>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
						lastESP01STATE =  ESP01WIFIDISCONNECTED;
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <ESP01DecodeAT+0x718>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
						if(doESP01WIFIDisconnected)
 8001246:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <ESP01DecodeAT+0x728>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <ESP01DecodeAT+0x6a4>
							doESP01WIFIDisconnected();
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <ESP01DecodeAT+0x728>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4798      	blx	r3
					}
					if(CmpResponse(_CLOSED, iResponse, 6) == 1){
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <ESP01DecodeAT+0x70c>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	2206      	movs	r2, #6
 800125a:	4619      	mov	r1, r3
 800125c:	481f      	ldr	r0, [pc, #124]	; (80012dc <ESP01DecodeAT+0x72c>)
 800125e:	f7ff fc79 	bl	8000b54 <CmpResponse>
 8001262:	4603      	mov	r3, r0
 8001264:	2b01      	cmp	r3, #1
 8001266:	d10d      	bne.n	8001284 <ESP01DecodeAT+0x6d4>
						if(ESP01TASKSTATE == STESP01ATCLOSE){
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <ESP01DecodeAT+0x714>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b05      	cmp	r3, #5
 800126e:	d109      	bne.n	8001284 <ESP01DecodeAT+0x6d4>
							ESP01TASKSTATE = STESP01ATCIPSTART;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <ESP01DecodeAT+0x714>)
 8001272:	2206      	movs	r2, #6
 8001274:	701a      	strb	r2, [r3, #0]
							timeOutResponse = 0;
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <ESP01DecodeAT+0x720>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
						}
					}
				}
				break;
 800127c:	e002      	b.n	8001284 <ESP01DecodeAT+0x6d4>
			default:
				header = 0;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <ESP01DecodeAT+0x6f4>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
	while(iRXr != index){
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <ESP01DecodeAT+0x6ec>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	88fa      	ldrh	r2, [r7, #6]
 800128a:	429a      	cmp	r2, r3
 800128c:	f47f ac9b 	bne.w	8000bc6 <ESP01DecodeAT+0x16>
		}
	}
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000022c 	.word	0x2000022c
 80012a0:	20000028 	.word	0x20000028
 80012a4:	20000228 	.word	0x20000228
 80012a8:	20000230 	.word	0x20000230
 80012ac:	20000232 	.word	0x20000232
 80012b0:	20000234 	.word	0x20000234
 80012b4:	200004c8 	.word	0x200004c8
 80012b8:	2000043c 	.word	0x2000043c
 80012bc:	2000022e 	.word	0x2000022e
 80012c0:	0800a330 	.word	0x0800a330
 80012c4:	20000546 	.word	0x20000546
 80012c8:	20000547 	.word	0x20000547
 80012cc:	200004d4 	.word	0x200004d4
 80012d0:	200004bc 	.word	0x200004bc
 80012d4:	0800a344 	.word	0x0800a344
 80012d8:	200004d0 	.word	0x200004d0
 80012dc:	0800a33c 	.word	0x0800a33c

080012e0 <HAL_ADC_ConvCpltCallback>:
void ESP01UDPReady();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012f0:	f040 8099 	bne.w	8001426 <HAL_ADC_ConvCpltCallback+0x146>
		ADCData[indexADCData][7] = ADC3DataAux;
 80012f4:	4b54      	ldr	r3, [pc, #336]	; (8001448 <HAL_ADC_ConvCpltCallback+0x168>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	4b54      	ldr	r3, [pc, #336]	; (800144c <HAL_ADC_ConvCpltCallback+0x16c>)
 80012fc:	8819      	ldrh	r1, [r3, #0]
 80012fe:	4a54      	ldr	r2, [pc, #336]	; (8001450 <HAL_ADC_ConvCpltCallback+0x170>)
 8001300:	0103      	lsls	r3, r0, #4
 8001302:	4413      	add	r3, r2
 8001304:	330e      	adds	r3, #14
 8001306:	460a      	mov	r2, r1
 8001308:	801a      	strh	r2, [r3, #0]
		sumADCData10ms[0] += ADCData[indexADCData][0];
 800130a:	4b52      	ldr	r3, [pc, #328]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <HAL_ADC_ConvCpltCallback+0x168>)
 8001310:	7812      	ldrb	r2, [r2, #0]
 8001312:	494f      	ldr	r1, [pc, #316]	; (8001450 <HAL_ADC_ConvCpltCallback+0x170>)
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	440a      	add	r2, r1
 8001318:	8812      	ldrh	r2, [r2, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a4d      	ldr	r2, [pc, #308]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 800131e:	6013      	str	r3, [r2, #0]
		sumADCData10ms[1] += ADCData[indexADCData][1];
 8001320:	4b4c      	ldr	r3, [pc, #304]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	4a48      	ldr	r2, [pc, #288]	; (8001448 <HAL_ADC_ConvCpltCallback+0x168>)
 8001326:	7812      	ldrb	r2, [r2, #0]
 8001328:	4949      	ldr	r1, [pc, #292]	; (8001450 <HAL_ADC_ConvCpltCallback+0x170>)
 800132a:	0112      	lsls	r2, r2, #4
 800132c:	440a      	add	r2, r1
 800132e:	3202      	adds	r2, #2
 8001330:	8812      	ldrh	r2, [r2, #0]
 8001332:	4413      	add	r3, r2
 8001334:	4a47      	ldr	r2, [pc, #284]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 8001336:	6053      	str	r3, [r2, #4]
		sumADCData10ms[2] += ADCData[indexADCData][2];
 8001338:	4b46      	ldr	r3, [pc, #280]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	4a42      	ldr	r2, [pc, #264]	; (8001448 <HAL_ADC_ConvCpltCallback+0x168>)
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	4943      	ldr	r1, [pc, #268]	; (8001450 <HAL_ADC_ConvCpltCallback+0x170>)
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	440a      	add	r2, r1
 8001346:	3204      	adds	r2, #4
 8001348:	8812      	ldrh	r2, [r2, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a41      	ldr	r2, [pc, #260]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 800134e:	6093      	str	r3, [r2, #8]
		sumADCData10ms[3] += ADCData[indexADCData][3];
 8001350:	4b40      	ldr	r3, [pc, #256]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	4a3c      	ldr	r2, [pc, #240]	; (8001448 <HAL_ADC_ConvCpltCallback+0x168>)
 8001356:	7812      	ldrb	r2, [r2, #0]
 8001358:	493d      	ldr	r1, [pc, #244]	; (8001450 <HAL_ADC_ConvCpltCallback+0x170>)
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	440a      	add	r2, r1
 800135e:	3206      	adds	r2, #6
 8001360:	8812      	ldrh	r2, [r2, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a3b      	ldr	r2, [pc, #236]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 8001366:	60d3      	str	r3, [r2, #12]
		sumADCData10ms[4] += ADCData[indexADCData][4];
 8001368:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	4a36      	ldr	r2, [pc, #216]	; (8001448 <HAL_ADC_ConvCpltCallback+0x168>)
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	4937      	ldr	r1, [pc, #220]	; (8001450 <HAL_ADC_ConvCpltCallback+0x170>)
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	440a      	add	r2, r1
 8001376:	3208      	adds	r2, #8
 8001378:	8812      	ldrh	r2, [r2, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a35      	ldr	r2, [pc, #212]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 800137e:	6113      	str	r3, [r2, #16]
		sumADCData10ms[5] += ADCData[indexADCData][5];
 8001380:	4b34      	ldr	r3, [pc, #208]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	4a30      	ldr	r2, [pc, #192]	; (8001448 <HAL_ADC_ConvCpltCallback+0x168>)
 8001386:	7812      	ldrb	r2, [r2, #0]
 8001388:	4931      	ldr	r1, [pc, #196]	; (8001450 <HAL_ADC_ConvCpltCallback+0x170>)
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	440a      	add	r2, r1
 800138e:	320a      	adds	r2, #10
 8001390:	8812      	ldrh	r2, [r2, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a2f      	ldr	r2, [pc, #188]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 8001396:	6153      	str	r3, [r2, #20]
		sumADCData10ms[6] += ADCData[indexADCData][6];
 8001398:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a2a      	ldr	r2, [pc, #168]	; (8001448 <HAL_ADC_ConvCpltCallback+0x168>)
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	492b      	ldr	r1, [pc, #172]	; (8001450 <HAL_ADC_ConvCpltCallback+0x170>)
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	440a      	add	r2, r1
 80013a6:	320c      	adds	r2, #12
 80013a8:	8812      	ldrh	r2, [r2, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a29      	ldr	r2, [pc, #164]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 80013ae:	6193      	str	r3, [r2, #24]
		sumADCData10ms[7] += ADCData[indexADCData][7];
 80013b0:	4b28      	ldr	r3, [pc, #160]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	4a24      	ldr	r2, [pc, #144]	; (8001448 <HAL_ADC_ConvCpltCallback+0x168>)
 80013b6:	7812      	ldrb	r2, [r2, #0]
 80013b8:	4925      	ldr	r1, [pc, #148]	; (8001450 <HAL_ADC_ConvCpltCallback+0x170>)
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	440a      	add	r2, r1
 80013be:	320e      	adds	r2, #14
 80013c0:	8812      	ldrh	r2, [r2, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a23      	ldr	r2, [pc, #140]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 80013c6:	61d3      	str	r3, [r2, #28]
		indexADCData++;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <HAL_ADC_ConvCpltCallback+0x168>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <HAL_ADC_ConvCpltCallback+0x168>)
 80013d2:	701a      	strb	r2, [r3, #0]
		indexADCData &= (ADCDATASIZE-1);
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <HAL_ADC_ConvCpltCallback+0x168>)
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_ADC_ConvCpltCallback+0x168>)
 80013da:	701a      	strb	r2, [r3, #0]
		if(timeOutAnalogAux){
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <HAL_ADC_ConvCpltCallback+0x178>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d020      	beq.n	8001426 <HAL_ADC_ConvCpltCallback+0x146>
			timeOutAnalogAux--;
 80013e4:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <HAL_ADC_ConvCpltCallback+0x178>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <HAL_ADC_ConvCpltCallback+0x178>)
 80013ee:	801a      	strh	r2, [r3, #0]
			if(!timeOutAnalogAux){
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_ADC_ConvCpltCallback+0x178>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d116      	bne.n	8001426 <HAL_ADC_ConvCpltCallback+0x146>
				timeOutAnalogAux = timeOutAnalog;
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_ADC_ConvCpltCallback+0x17c>)
 80013fa:	881a      	ldrh	r2, [r3, #0]
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_ADC_ConvCpltCallback+0x178>)
 80013fe:	801a      	strh	r2, [r3, #0]
				iADCDataReady = indexADCData;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_ADC_ConvCpltCallback+0x168>)
 8001402:	781a      	ldrb	r2, [r3, #0]
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_ADC_ConvCpltCallback+0x180>)
 8001406:	701a      	strb	r2, [r3, #0]
				memcpy(sumADCDataLock, sumADCData10ms, sizeof(sumADCDataLock));
 8001408:	4a16      	ldr	r2, [pc, #88]	; (8001464 <HAL_ADC_ConvCpltCallback+0x184>)
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_ADC_ConvCpltCallback+0x174>)
 800140c:	4614      	mov	r4, r2
 800140e:	461d      	mov	r5, r3
 8001410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001414:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001418:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				ANALOGREADY = 1;
 800141c:	4a12      	ldr	r2, [pc, #72]	; (8001468 <HAL_ADC_ConvCpltCallback+0x188>)
 800141e:	7813      	ldrb	r3, [r2, #0]
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	7013      	strb	r3, [r2, #0]
			}
		}
	}
	if(hadc->Instance == ADC3){
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a10      	ldr	r2, [pc, #64]	; (800146c <HAL_ADC_ConvCpltCallback+0x18c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d106      	bne.n	800143e <HAL_ADC_ConvCpltCallback+0x15e>
		ADC3DataAux = HAL_ADC_GetValue(&hadc3);
 8001430:	480f      	ldr	r0, [pc, #60]	; (8001470 <HAL_ADC_ConvCpltCallback+0x190>)
 8001432:	f002 ff07 	bl	8004244 <HAL_ADC_GetValue>
 8001436:	4603      	mov	r3, r0
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <HAL_ADC_ConvCpltCallback+0x16c>)
 800143c:	801a      	strh	r2, [r3, #0]
	}
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bdb0      	pop	{r4, r5, r7, pc}
 8001446:	bf00      	nop
 8001448:	20001be0 	.word	0x20001be0
 800144c:	20001be4 	.word	0x20001be4
 8001450:	20000be0 	.word	0x20000be0
 8001454:	20001be8 	.word	0x20001be8
 8001458:	20001c2a 	.word	0x20001c2a
 800145c:	20001c28 	.word	0x20001c28
 8001460:	20001be2 	.word	0x20001be2
 8001464:	20001c08 	.word	0x20001c08
 8001468:	20000820 	.word	0x20000820
 800146c:	50000400 	.word	0x50000400
 8001470:	200005ec 	.word	0x200005ec

08001474 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
//			memcpy(sumADCDataLock, sumADCData10ms, sizeof(sumADCDataLock));
//			ANALOGREADY = 1;
//		}
//	}

	sumADCData10ms[0] -= ADCData[indexADCData10ms][0];
 800147c:	4b3e      	ldr	r3, [pc, #248]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a3e      	ldr	r2, [pc, #248]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001482:	7812      	ldrb	r2, [r2, #0]
 8001484:	493e      	ldr	r1, [pc, #248]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	440a      	add	r2, r1
 800148a:	8812      	ldrh	r2, [r2, #0]
 800148c:	1a9b      	subs	r3, r3, r2
 800148e:	4a3a      	ldr	r2, [pc, #232]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001490:	6013      	str	r3, [r2, #0]
	sumADCData10ms[1] -= ADCData[indexADCData10ms][1];
 8001492:	4b39      	ldr	r3, [pc, #228]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	4a39      	ldr	r2, [pc, #228]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	4939      	ldr	r1, [pc, #228]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	440a      	add	r2, r1
 80014a0:	3202      	adds	r2, #2
 80014a2:	8812      	ldrh	r2, [r2, #0]
 80014a4:	1a9b      	subs	r3, r3, r2
 80014a6:	4a34      	ldr	r2, [pc, #208]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014a8:	6053      	str	r3, [r2, #4]
	sumADCData10ms[2] -= ADCData[indexADCData10ms][2];
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	4a33      	ldr	r2, [pc, #204]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014b0:	7812      	ldrb	r2, [r2, #0]
 80014b2:	4933      	ldr	r1, [pc, #204]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014b4:	0112      	lsls	r2, r2, #4
 80014b6:	440a      	add	r2, r1
 80014b8:	3204      	adds	r2, #4
 80014ba:	8812      	ldrh	r2, [r2, #0]
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	4a2e      	ldr	r2, [pc, #184]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014c0:	6093      	str	r3, [r2, #8]
	sumADCData10ms[3] -= ADCData[indexADCData10ms][3];
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	4a2d      	ldr	r2, [pc, #180]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014c8:	7812      	ldrb	r2, [r2, #0]
 80014ca:	492d      	ldr	r1, [pc, #180]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	440a      	add	r2, r1
 80014d0:	3206      	adds	r2, #6
 80014d2:	8812      	ldrh	r2, [r2, #0]
 80014d4:	1a9b      	subs	r3, r3, r2
 80014d6:	4a28      	ldr	r2, [pc, #160]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014d8:	60d3      	str	r3, [r2, #12]
	sumADCData10ms[4] -= ADCData[indexADCData10ms][4];
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	4a27      	ldr	r2, [pc, #156]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014e0:	7812      	ldrb	r2, [r2, #0]
 80014e2:	4927      	ldr	r1, [pc, #156]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	440a      	add	r2, r1
 80014e8:	3208      	adds	r2, #8
 80014ea:	8812      	ldrh	r2, [r2, #0]
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	4a22      	ldr	r2, [pc, #136]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014f0:	6113      	str	r3, [r2, #16]
	sumADCData10ms[5] -= ADCData[indexADCData10ms][5];
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	4a21      	ldr	r2, [pc, #132]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	4921      	ldr	r1, [pc, #132]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	440a      	add	r2, r1
 8001500:	320a      	adds	r2, #10
 8001502:	8812      	ldrh	r2, [r2, #0]
 8001504:	1a9b      	subs	r3, r3, r2
 8001506:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001508:	6153      	str	r3, [r2, #20]
	sumADCData10ms[6] -= ADCData[indexADCData10ms][6];
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4a1b      	ldr	r2, [pc, #108]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001510:	7812      	ldrb	r2, [r2, #0]
 8001512:	491b      	ldr	r1, [pc, #108]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	440a      	add	r2, r1
 8001518:	320c      	adds	r2, #12
 800151a:	8812      	ldrh	r2, [r2, #0]
 800151c:	1a9b      	subs	r3, r3, r2
 800151e:	4a16      	ldr	r2, [pc, #88]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001520:	6193      	str	r3, [r2, #24]
	sumADCData10ms[7] -= ADCData[indexADCData10ms][7];
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a15      	ldr	r2, [pc, #84]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	4915      	ldr	r1, [pc, #84]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	440a      	add	r2, r1
 8001530:	320e      	adds	r2, #14
 8001532:	8812      	ldrh	r2, [r2, #0]
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	4a10      	ldr	r2, [pc, #64]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001538:	61d3      	str	r3, [r2, #28]
	indexADCData10ms++;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001544:	701a      	strb	r2, [r3, #0]
	indexADCData10ms &= (ADCDATASIZE - 1);
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001548:	781a      	ldrb	r2, [r3, #0]
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800154c:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc3);
 800154e:	480d      	ldr	r0, [pc, #52]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001550:	f002 fd38 	bl	8003fc4 <HAL_ADC_Start_IT>
	HAL_ADC_Start(&hadc2);
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001556:	f002 fc1f 	bl	8003d98 <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *)&ADCData[indexADCData], 4);
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x118>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001562:	4413      	add	r3, r2
 8001564:	2204      	movs	r2, #4
 8001566:	4619      	mov	r1, r3
 8001568:	4809      	ldr	r0, [pc, #36]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800156a:	f003 f989 	bl	8004880 <HAL_ADCEx_MultiModeStart_DMA>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20001be8 	.word	0x20001be8
 800157c:	20001be1 	.word	0x20001be1
 8001580:	20000be0 	.word	0x20000be0
 8001584:	200005ec 	.word	0x200005ec
 8001588:	2000059c 	.word	0x2000059c
 800158c:	20001be0 	.word	0x20001be0
 8001590:	2000054c 	.word	0x2000054c

08001594 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a3a      	ldr	r2, [pc, #232]	; (800168c <HAL_UART_RxCpltCallback+0xf8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d152      	bne.n	800164c <HAL_UART_RxCpltCallback+0xb8>
		if(ESP01DEBUG){
 80015a6:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <HAL_UART_RxCpltCallback+0xfc>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d033      	beq.n	800161c <HAL_UART_RxCpltCallback+0x88>
			if(RX.buf[RX.iw] == '+'){
 80015b4:	4b37      	ldr	r3, [pc, #220]	; (8001694 <HAL_UART_RxCpltCallback+0x100>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a36      	ldr	r2, [pc, #216]	; (8001694 <HAL_UART_RxCpltCallback+0x100>)
 80015ba:	88d2      	ldrh	r2, [r2, #6]
 80015bc:	4413      	add	r3, r2
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b2b      	cmp	r3, #43	; 0x2b
 80015c2:	d11e      	bne.n	8001602 <HAL_UART_RxCpltCallback+0x6e>
				if(countPlus == 0)
 80015c4:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_UART_RxCpltCallback+0x104>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <HAL_UART_RxCpltCallback+0x3e>
					timeOutPlus = 3;
 80015cc:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_UART_RxCpltCallback+0x108>)
 80015ce:	2203      	movs	r2, #3
 80015d0:	701a      	strb	r2, [r3, #0]
				countPlus++;
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <HAL_UART_RxCpltCallback+0x104>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_UART_RxCpltCallback+0x104>)
 80015dc:	701a      	strb	r2, [r3, #0]
				if(countPlus==3 && timeOutPlus!=0){
 80015de:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_UART_RxCpltCallback+0x104>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d110      	bne.n	8001608 <HAL_UART_RxCpltCallback+0x74>
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <HAL_UART_RxCpltCallback+0x108>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00c      	beq.n	8001608 <HAL_UART_RxCpltCallback+0x74>
					ESP01DEBUG = 0;
 80015ee:	4a28      	ldr	r2, [pc, #160]	; (8001690 <HAL_UART_RxCpltCallback+0xfc>)
 80015f0:	7813      	ldrb	r3, [r2, #0]
 80015f2:	f36f 0382 	bfc	r3, #2, #1
 80015f6:	7013      	strb	r3, [r2, #0]
					ledStatus = LEDIDLE;
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <HAL_UART_RxCpltCallback+0x10c>)
 80015fa:	f04f 4268 	mov.w	r2, #3892314112	; 0xe8000000
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e002      	b.n	8001608 <HAL_UART_RxCpltCallback+0x74>
				}
			}
			else
				countPlus = 0;
 8001602:	4b25      	ldr	r3, [pc, #148]	; (8001698 <HAL_UART_RxCpltCallback+0x104>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]

			PutByteOnTx(&TXESP01, RX.buf[RX.iw]);
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <HAL_UART_RxCpltCallback+0x100>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a21      	ldr	r2, [pc, #132]	; (8001694 <HAL_UART_RxCpltCallback+0x100>)
 800160e:	88d2      	ldrh	r2, [r2, #6]
 8001610:	4413      	add	r3, r2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	4823      	ldr	r0, [pc, #140]	; (80016a4 <HAL_UART_RxCpltCallback+0x110>)
 8001618:	f000 f984 	bl	8001924 <PutByteOnTx>
		}

		RX.iw++;
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_UART_RxCpltCallback+0x100>)
 800161e:	88db      	ldrh	r3, [r3, #6]
 8001620:	3301      	adds	r3, #1
 8001622:	b29a      	uxth	r2, r3
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_UART_RxCpltCallback+0x100>)
 8001626:	80da      	strh	r2, [r3, #6]
		RX.iw &= RX.maskSize;
 8001628:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <HAL_UART_RxCpltCallback+0x100>)
 800162a:	88da      	ldrh	r2, [r3, #6]
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_UART_RxCpltCallback+0x100>)
 800162e:	8a1b      	ldrh	r3, [r3, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_UART_RxCpltCallback+0x100>)
 8001636:	80da      	strh	r2, [r3, #6]
		HAL_UART_Receive_IT(&huart2, &RX.buf[RX.iw], 1);
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <HAL_UART_RxCpltCallback+0x100>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a15      	ldr	r2, [pc, #84]	; (8001694 <HAL_UART_RxCpltCallback+0x100>)
 800163e:	88d2      	ldrh	r2, [r2, #6]
 8001640:	4413      	add	r3, r2
 8001642:	2201      	movs	r2, #1
 8001644:	4619      	mov	r1, r3
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <HAL_UART_RxCpltCallback+0x114>)
 8001648:	f007 fc58 	bl	8008efc <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART3){
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a16      	ldr	r2, [pc, #88]	; (80016ac <HAL_UART_RxCpltCallback+0x118>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d116      	bne.n	8001684 <HAL_UART_RxCpltCallback+0xf0>
		if(ESP01DEBUG){
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_UART_RxCpltCallback+0xfc>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_UART_RxCpltCallback+0xdc>
			PutByteOnTx(&TX, auxDataRXESP01);
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_UART_RxCpltCallback+0x11c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	4812      	ldr	r0, [pc, #72]	; (80016b4 <HAL_UART_RxCpltCallback+0x120>)
 800166c:	f000 f95a 	bl	8001924 <PutByteOnTx>
		}
		ESP01SetRxByte(auxDataRXESP01);
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_UART_RxCpltCallback+0x11c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff03 	bl	8000480 <ESP01SetRxByte>
		HAL_UART_Receive_IT(&huart3, &auxDataRXESP01, 1);
 800167a:	2201      	movs	r2, #1
 800167c:	490c      	ldr	r1, [pc, #48]	; (80016b0 <HAL_UART_RxCpltCallback+0x11c>)
 800167e:	480e      	ldr	r0, [pc, #56]	; (80016b8 <HAL_UART_RxCpltCallback+0x124>)
 8001680:	f007 fc3c 	bl	8008efc <HAL_UART_Receive_IT>
//		RXESP01.iw++;
//		RXESP01.iw &= RXESP01.maskSize;
//		HAL_UART_Receive_IT(&huart3, &RXESP01.buf[RXESP01.iw], 1);
	}
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40004400 	.word	0x40004400
 8001690:	20000820 	.word	0x20000820
 8001694:	2000082c 	.word	0x2000082c
 8001698:	20001c40 	.word	0x20001c40
 800169c:	20001c41 	.word	0x20001c41
 80016a0:	20001c34 	.word	0x20001c34
 80016a4:	20000864 	.word	0x20000864
 80016a8:	20000718 	.word	0x20000718
 80016ac:	40004800 	.word	0x40004800
 80016b0:	20000a58 	.word	0x20000a58
 80016b4:	20000854 	.word	0x20000854
 80016b8:	2000079c 	.word	0x2000079c

080016bc <DecodeHeader>:


void DecodeHeader(_sRx *RX){
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    i = RX->iw;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	88db      	ldrh	r3, [r3, #6]
 80016c8:	73fb      	strb	r3, [r7, #15]

    while(RX->ir != i){
 80016ca:	e0e5      	b.n	8001898 <DecodeHeader+0x1dc>
       switch(RX->header){
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	791b      	ldrb	r3, [r3, #4]
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	f200 80c4 	bhi.w	800185e <DecodeHeader+0x1a2>
 80016d6:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <DecodeHeader+0x20>)
 80016d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016dc:	080016f9 	.word	0x080016f9
 80016e0:	08001719 	.word	0x08001719
 80016e4:	08001745 	.word	0x08001745
 80016e8:	08001771 	.word	0x08001771
 80016ec:	0800179d 	.word	0x0800179d
 80016f0:	080017b7 	.word	0x080017b7
 80016f4:	0800180f 	.word	0x0800180f
        case 0:
            if(RX->buf[RX->ir] == 'U'){
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	8912      	ldrh	r2, [r2, #8]
 8001700:	4413      	add	r3, r2
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b55      	cmp	r3, #85	; 0x55
 8001706:	f040 80ae 	bne.w	8001866 <DecodeHeader+0x1aa>
                RX->header = 1;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	711a      	strb	r2, [r3, #4]
                RX->timeout = 5;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2205      	movs	r2, #5
 8001714:	731a      	strb	r2, [r3, #12]
            }
            break;
 8001716:	e0a6      	b.n	8001866 <DecodeHeader+0x1aa>
        case 1:
            if(RX->buf[RX->ir] == 'N')
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	8912      	ldrh	r2, [r2, #8]
 8001720:	4413      	add	r3, r2
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b4e      	cmp	r3, #78	; 0x4e
 8001726:	d103      	bne.n	8001730 <DecodeHeader+0x74>
                RX->header = 2;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2202      	movs	r2, #2
 800172c:	711a      	strb	r2, [r3, #4]
            else{
                RX->header = 0;
                RX->ir--;
            }
            break;
 800172e:	e09d      	b.n	800186c <DecodeHeader+0x1b0>
                RX->header = 0;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	711a      	strb	r2, [r3, #4]
                RX->ir--;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	891b      	ldrh	r3, [r3, #8]
 800173a:	3b01      	subs	r3, #1
 800173c:	b29a      	uxth	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	811a      	strh	r2, [r3, #8]
            break;
 8001742:	e093      	b.n	800186c <DecodeHeader+0x1b0>
        case 2:
            if(RX->buf[RX->ir] == 'E')
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	8912      	ldrh	r2, [r2, #8]
 800174c:	4413      	add	r3, r2
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b45      	cmp	r3, #69	; 0x45
 8001752:	d103      	bne.n	800175c <DecodeHeader+0xa0>
                RX->header = 3;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2203      	movs	r2, #3
 8001758:	711a      	strb	r2, [r3, #4]
            else{
                RX->header = 0;
                RX->ir--;
            }
            break;
 800175a:	e087      	b.n	800186c <DecodeHeader+0x1b0>
                RX->header = 0;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	711a      	strb	r2, [r3, #4]
                RX->ir--;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	891b      	ldrh	r3, [r3, #8]
 8001766:	3b01      	subs	r3, #1
 8001768:	b29a      	uxth	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	811a      	strh	r2, [r3, #8]
            break;
 800176e:	e07d      	b.n	800186c <DecodeHeader+0x1b0>
        case 3:
            if(RX->buf[RX->ir] == 'R')
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	8912      	ldrh	r2, [r2, #8]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b52      	cmp	r3, #82	; 0x52
 800177e:	d103      	bne.n	8001788 <DecodeHeader+0xcc>
                RX->header = 4;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2204      	movs	r2, #4
 8001784:	711a      	strb	r2, [r3, #4]
            else{
                RX->header = 0;
                RX->ir--;
            }
            break;
 8001786:	e071      	b.n	800186c <DecodeHeader+0x1b0>
                RX->header = 0;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	711a      	strb	r2, [r3, #4]
                RX->ir--;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	891b      	ldrh	r3, [r3, #8]
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	811a      	strh	r2, [r3, #8]
            break;
 800179a:	e067      	b.n	800186c <DecodeHeader+0x1b0>
        case 4:
            RX->nbytes = RX->buf[RX->ir];
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	8912      	ldrh	r2, [r2, #8]
 80017a4:	4413      	add	r3, r2
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	81da      	strh	r2, [r3, #14]
            RX->header = 5;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2205      	movs	r2, #5
 80017b2:	711a      	strb	r2, [r3, #4]
            break;
 80017b4:	e05a      	b.n	800186c <DecodeHeader+0x1b0>
        case 5:
            if(RX->buf[RX->ir] == ':'){
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	8912      	ldrh	r2, [r2, #8]
 80017be:	4413      	add	r3, r2
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b3a      	cmp	r3, #58	; 0x3a
 80017c4:	d119      	bne.n	80017fa <DecodeHeader+0x13e>
                RX->header = 6;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2206      	movs	r2, #6
 80017ca:	711a      	strb	r2, [r3, #4]
                RX->iData = RX->ir + 1;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	891b      	ldrh	r3, [r3, #8]
 80017d0:	3301      	adds	r3, #1
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	815a      	strh	r2, [r3, #10]
                RX->iData &= RX->maskSize;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	895a      	ldrh	r2, [r3, #10]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	8a1b      	ldrh	r3, [r3, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	815a      	strh	r2, [r3, #10]
                RX->cks = 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ RX->nbytes;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	89db      	ldrh	r3, [r3, #14]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	735a      	strb	r2, [r3, #13]
            }
            else{
                RX->header = 0;
                RX->ir--;
            }
            break;
 80017f8:	e038      	b.n	800186c <DecodeHeader+0x1b0>
                RX->header = 0;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	711a      	strb	r2, [r3, #4]
                RX->ir--;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	891b      	ldrh	r3, [r3, #8]
 8001804:	3b01      	subs	r3, #1
 8001806:	b29a      	uxth	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	811a      	strh	r2, [r3, #8]
            break;
 800180c:	e02e      	b.n	800186c <DecodeHeader+0x1b0>
        case 6:
            RX->nbytes--;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	89db      	ldrh	r3, [r3, #14]
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	81da      	strh	r2, [r3, #14]
            if(RX->nbytes > 0){
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	89db      	ldrh	r3, [r3, #14]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00c      	beq.n	800183c <DecodeHeader+0x180>
                RX->cks ^= RX->buf[RX->ir];
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7b5a      	ldrb	r2, [r3, #13]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	8909      	ldrh	r1, [r1, #8]
 800182e:	440b      	add	r3, r1
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4053      	eors	r3, r2
 8001834:	b2da      	uxtb	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	735a      	strb	r2, [r3, #13]
            else{
                RX->header = 0;
                if(RX->cks == RX->buf[RX->ir])
                    RX->ISCMD = 1;
            }
            break;
 800183a:	e016      	b.n	800186a <DecodeHeader+0x1ae>
                RX->header = 0;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	711a      	strb	r2, [r3, #4]
                if(RX->cks == RX->buf[RX->ir])
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7b5a      	ldrb	r2, [r3, #13]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	8909      	ldrh	r1, [r1, #8]
 800184e:	440b      	add	r3, r1
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d109      	bne.n	800186a <DecodeHeader+0x1ae>
                    RX->ISCMD = 1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	749a      	strb	r2, [r3, #18]
            break;
 800185c:	e005      	b.n	800186a <DecodeHeader+0x1ae>
        default:
            RX->header = 0;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	711a      	strb	r2, [r3, #4]
 8001864:	e002      	b.n	800186c <DecodeHeader+0x1b0>
            break;
 8001866:	bf00      	nop
 8001868:	e000      	b.n	800186c <DecodeHeader+0x1b0>
            break;
 800186a:	bf00      	nop
        }

        RX->ir &= RX->maskSize;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	891a      	ldrh	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	8a1b      	ldrh	r3, [r3, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	b29a      	uxth	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	811a      	strh	r2, [r3, #8]
        RX->ir++;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	891b      	ldrh	r3, [r3, #8]
 8001880:	3301      	adds	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	811a      	strh	r2, [r3, #8]
        RX->ir &= RX->maskSize;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	891a      	ldrh	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	8a1b      	ldrh	r3, [r3, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	b29a      	uxth	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	811a      	strh	r2, [r3, #8]
    while(RX->ir != i){
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	891a      	ldrh	r2, [r3, #8]
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f47f af13 	bne.w	80016cc <DecodeHeader+0x10>
    }

}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <PutBufOnTx>:

uint8_t PutBufOnTx(_sTx *TX, uint8_t *buf, uint8_t length){
 80018b4:	b490      	push	{r4, r7}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	4613      	mov	r3, r2
 80018c0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

    for(i=0; i<length; i++){
 80018c2:	2300      	movs	r3, #0
 80018c4:	75fb      	strb	r3, [r7, #23]
 80018c6:	e022      	b.n	800190e <PutBufOnTx+0x5a>
        TX->cks ^= buf[i];
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	7a1a      	ldrb	r2, [r3, #8]
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	68b9      	ldr	r1, [r7, #8]
 80018d0:	440b      	add	r3, r1
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4053      	eors	r3, r2
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	721a      	strb	r2, [r3, #8]
        TX->buf[TX->iw++] = buf[i];
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	441a      	add	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	889b      	ldrh	r3, [r3, #4]
 80018ea:	1c58      	adds	r0, r3, #1
 80018ec:	b284      	uxth	r4, r0
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	8084      	strh	r4, [r0, #4]
 80018f2:	440b      	add	r3, r1
 80018f4:	7812      	ldrb	r2, [r2, #0]
 80018f6:	701a      	strb	r2, [r3, #0]
        TX->iw &= TX->maskSize;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	889a      	ldrh	r2, [r3, #4]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	899b      	ldrh	r3, [r3, #12]
 8001900:	4013      	ands	r3, r2
 8001902:	b29a      	uxth	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	809a      	strh	r2, [r3, #4]
    for(i=0; i<length; i++){
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	3301      	adds	r3, #1
 800190c:	75fb      	strb	r3, [r7, #23]
 800190e:	7dfa      	ldrb	r2, [r7, #23]
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	429a      	cmp	r2, r3
 8001914:	d3d8      	bcc.n	80018c8 <PutBufOnTx+0x14>
    }

    return TX->cks;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	7a1b      	ldrb	r3, [r3, #8]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bc90      	pop	{r4, r7}
 8001922:	4770      	bx	lr

08001924 <PutByteOnTx>:

uint8_t PutByteOnTx(_sTx *TX, uint8_t value){
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	70fb      	strb	r3, [r7, #3]
	TX->cks ^= value;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7a1a      	ldrb	r2, [r3, #8]
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	4053      	eors	r3, r2
 8001938:	b2da      	uxtb	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	721a      	strb	r2, [r3, #8]
	TX->buf[TX->iw++] = value;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	889b      	ldrh	r3, [r3, #4]
 8001946:	1c59      	adds	r1, r3, #1
 8001948:	b288      	uxth	r0, r1
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	8088      	strh	r0, [r1, #4]
 800194e:	4413      	add	r3, r2
 8001950:	78fa      	ldrb	r2, [r7, #3]
 8001952:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	889a      	ldrh	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	899b      	ldrh	r3, [r3, #12]
 800195c:	4013      	ands	r3, r2
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	809a      	strh	r2, [r3, #4]

    return TX->cks;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7a1b      	ldrb	r3, [r3, #8]
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <PutHeaderOnTx>:

uint8_t PutHeaderOnTx(_sTx *TX, uint8_t id, uint8_t lCmd){
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
 8001980:	4613      	mov	r3, r2
 8001982:	70bb      	strb	r3, [r7, #2]
    TX->buf[TX->iw++] = 'U';
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	889b      	ldrh	r3, [r3, #4]
 800198c:	1c59      	adds	r1, r3, #1
 800198e:	b288      	uxth	r0, r1
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	8088      	strh	r0, [r1, #4]
 8001994:	4413      	add	r3, r2
 8001996:	2255      	movs	r2, #85	; 0x55
 8001998:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	889a      	ldrh	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	899b      	ldrh	r3, [r3, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = 'N';
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	889b      	ldrh	r3, [r3, #4]
 80019b2:	1c59      	adds	r1, r3, #1
 80019b4:	b288      	uxth	r0, r1
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	8088      	strh	r0, [r1, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	224e      	movs	r2, #78	; 0x4e
 80019be:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	889a      	ldrh	r2, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	899b      	ldrh	r3, [r3, #12]
 80019c8:	4013      	ands	r3, r2
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = 'E';
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	889b      	ldrh	r3, [r3, #4]
 80019d8:	1c59      	adds	r1, r3, #1
 80019da:	b288      	uxth	r0, r1
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	8088      	strh	r0, [r1, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	2245      	movs	r2, #69	; 0x45
 80019e4:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	889a      	ldrh	r2, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	899b      	ldrh	r3, [r3, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = 'R';
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	889b      	ldrh	r3, [r3, #4]
 80019fe:	1c59      	adds	r1, r3, #1
 8001a00:	b288      	uxth	r0, r1
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	8088      	strh	r0, [r1, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	2252      	movs	r2, #82	; 0x52
 8001a0a:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	889a      	ldrh	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	899b      	ldrh	r3, [r3, #12]
 8001a14:	4013      	ands	r3, r2
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = lCmd + 1;//id + payload + cks
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	889b      	ldrh	r3, [r3, #4]
 8001a24:	1c59      	adds	r1, r3, #1
 8001a26:	b288      	uxth	r0, r1
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	8088      	strh	r0, [r1, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	78ba      	ldrb	r2, [r7, #2]
 8001a30:	3201      	adds	r2, #1
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	889a      	ldrh	r2, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	899b      	ldrh	r3, [r3, #12]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = ':';
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	889b      	ldrh	r3, [r3, #4]
 8001a4e:	1c59      	adds	r1, r3, #1
 8001a50:	b288      	uxth	r0, r1
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	8088      	strh	r0, [r1, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	223a      	movs	r2, #58	; 0x3a
 8001a5a:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	889a      	ldrh	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	899b      	ldrh	r3, [r3, #12]
 8001a64:	4013      	ands	r3, r2
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = id;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	889b      	ldrh	r3, [r3, #4]
 8001a74:	1c59      	adds	r1, r3, #1
 8001a76:	b288      	uxth	r0, r1
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	8088      	strh	r0, [r1, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	78fa      	ldrb	r2, [r7, #3]
 8001a80:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	889a      	ldrh	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	899b      	ldrh	r3, [r3, #12]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	809a      	strh	r2, [r3, #4]

    TX->cks ^= (lCmd + 1);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7a1b      	ldrb	r3, [r3, #8]
 8001a96:	b25a      	sxtb	r2, r3
 8001a98:	78bb      	ldrb	r3, [r7, #2]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	b25b      	sxtb	r3, r3
 8001aa0:	4053      	eors	r3, r2
 8001aa2:	b25b      	sxtb	r3, r3
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	721a      	strb	r2, [r3, #8]
    TX->cks ^= ('U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ id);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7a1a      	ldrb	r2, [r3, #8]
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	4053      	eors	r3, r2
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	721a      	strb	r2, [r3, #8]

    return TX->cks;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7a1b      	ldrb	r3, [r3, #8]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <PutStrOntx>:
//
//    TX->buf[TX->iw++] = cks;
//    TX->iw &= TX->maskSize;
//}

uint8_t PutStrOntx(_sTx *TX, const char *str){
 8001ace:	b490      	push	{r4, r7}
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]

    while(str[i]){
 8001adc:	e022      	b.n	8001b24 <PutStrOntx+0x56>
        TX->cks |= str[i];
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7a1a      	ldrb	r2, [r3, #8]
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	6839      	ldr	r1, [r7, #0]
 8001ae6:	440b      	add	r3, r1
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	721a      	strb	r2, [r3, #8]
    	TX->buf[TX->iw++] = str[i++];
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	73fa      	strb	r2, [r7, #15]
 8001af8:	461a      	mov	r2, r3
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	441a      	add	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6819      	ldr	r1, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	889b      	ldrh	r3, [r3, #4]
 8001b06:	1c58      	adds	r0, r3, #1
 8001b08:	b284      	uxth	r4, r0
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	8084      	strh	r4, [r0, #4]
 8001b0e:	440b      	add	r3, r1
 8001b10:	7812      	ldrb	r2, [r2, #0]
 8001b12:	701a      	strb	r2, [r3, #0]
        TX->iw &= TX->maskSize;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	889a      	ldrh	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	899b      	ldrh	r3, [r3, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	809a      	strh	r2, [r3, #4]
    while(str[i]){
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	4413      	add	r3, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1d6      	bne.n	8001ade <PutStrOntx+0x10>

    }

    return TX->cks;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7a1b      	ldrb	r3, [r3, #8]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc90      	pop	{r4, r7}
 8001b3c:	4770      	bx	lr

08001b3e <GetByteFromRx>:

uint8_t GetByteFromRx(_sRx *RX, int8_t pre, int8_t pos){
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	460b      	mov	r3, r1
 8001b48:	70fb      	strb	r3, [r7, #3]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	70bb      	strb	r3, [r7, #2]
    uint8_t aux;

    RX->iData += pre;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	895a      	ldrh	r2, [r3, #10]
 8001b52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	815a      	strh	r2, [r3, #10]
    RX->iData &= RX->maskSize;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	895a      	ldrh	r2, [r3, #10]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	8a1b      	ldrh	r3, [r3, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	815a      	strh	r2, [r3, #10]
    aux = RX->buf[RX->iData];
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	8952      	ldrh	r2, [r2, #10]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	73fb      	strb	r3, [r7, #15]
    RX->iData += pos;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	895a      	ldrh	r2, [r3, #10]
 8001b82:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	4413      	add	r3, r2
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	815a      	strh	r2, [r3, #10]
    RX->iData &= RX->maskSize;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	895a      	ldrh	r2, [r3, #10]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	8a1b      	ldrh	r3, [r3, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	815a      	strh	r2, [r3, #10]

    return aux;
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <DecodeCmd>:
        RX->iData++;
        RX->iData &= RX->maskSize;
    }
}

void DecodeCmd(_sRx *RX, _sTx *TX){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	RX->ISCMD = 0;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	749a      	strb	r2, [r3, #18]

    TX->cks = 0;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	721a      	strb	r2, [r3, #8]
    switch (RX->buf[RX->iData])
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	8952      	ldrh	r2, [r2, #10]
 8001bce:	4413      	add	r3, r2
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2bf1      	cmp	r3, #241	; 0xf1
 8001bd4:	f000 83ad 	beq.w	8002332 <DecodeCmd+0x782>
 8001bd8:	2bf1      	cmp	r3, #241	; 0xf1
 8001bda:	f300 83b7 	bgt.w	800234c <DecodeCmd+0x79c>
 8001bde:	2bb2      	cmp	r3, #178	; 0xb2
 8001be0:	dc30      	bgt.n	8001c44 <DecodeCmd+0x94>
 8001be2:	2ba0      	cmp	r3, #160	; 0xa0
 8001be4:	f2c0 83b2 	blt.w	800234c <DecodeCmd+0x79c>
 8001be8:	3ba0      	subs	r3, #160	; 0xa0
 8001bea:	2b12      	cmp	r3, #18
 8001bec:	f200 83ae 	bhi.w	800234c <DecodeCmd+0x79c>
 8001bf0:	a201      	add	r2, pc, #4	; (adr r2, 8001bf8 <DecodeCmd+0x48>)
 8001bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf6:	bf00      	nop
 8001bf8:	08001c4d 	.word	0x08001c4d
 8001bfc:	08001ceb 	.word	0x08001ceb
 8001c00:	08001da3 	.word	0x08001da3
 8001c04:	08001e59 	.word	0x08001e59
 8001c08:	08001f43 	.word	0x08001f43
 8001c0c:	0800234d 	.word	0x0800234d
 8001c10:	0800234d 	.word	0x0800234d
 8001c14:	0800234d 	.word	0x0800234d
 8001c18:	0800234d 	.word	0x0800234d
 8001c1c:	0800234d 	.word	0x0800234d
 8001c20:	0800234d 	.word	0x0800234d
 8001c24:	0800234d 	.word	0x0800234d
 8001c28:	0800234d 	.word	0x0800234d
 8001c2c:	0800234d 	.word	0x0800234d
 8001c30:	0800234d 	.word	0x0800234d
 8001c34:	0800234d 	.word	0x0800234d
 8001c38:	08002109 	.word	0x08002109
 8001c3c:	08002123 	.word	0x08002123
 8001c40:	080021f5 	.word	0x080021f5
 8001c44:	2bf0      	cmp	r3, #240	; 0xf0
 8001c46:	f000 8364 	beq.w	8002312 <DecodeCmd+0x762>
 8001c4a:	e37f      	b.n	800234c <DecodeCmd+0x79c>
    {
    case 0xA0://READ LAST ANALOG INPUTS
		ledStatus = LEDIDLE;
 8001c4c:	4b76      	ldr	r3, [pc, #472]	; (8001e28 <DecodeCmd+0x278>)
 8001c4e:	f04f 4268 	mov.w	r2, #3892314112	; 0xe8000000
 8001c52:	601a      	str	r2, [r3, #0]
		w.u8[0] = indexADCData;
 8001c54:	4b75      	ldr	r3, [pc, #468]	; (8001e2c <DecodeCmd+0x27c>)
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	4b75      	ldr	r3, [pc, #468]	; (8001e30 <DecodeCmd+0x280>)
 8001c5a:	701a      	strb	r2, [r3, #0]
		w.u8[0]--;
 8001c5c:	4b74      	ldr	r3, [pc, #464]	; (8001e30 <DecodeCmd+0x280>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	4b72      	ldr	r3, [pc, #456]	; (8001e30 <DecodeCmd+0x280>)
 8001c66:	701a      	strb	r2, [r3, #0]
		w.u8[0] &= (ADCDATASIZE - 1);
 8001c68:	4b71      	ldr	r3, [pc, #452]	; (8001e30 <DecodeCmd+0x280>)
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	4b70      	ldr	r3, [pc, #448]	; (8001e30 <DecodeCmd+0x280>)
 8001c6e:	701a      	strb	r2, [r3, #0]
		PutHeaderOnTx(TX, 0xA0, 2*16+1);
 8001c70:	2221      	movs	r2, #33	; 0x21
 8001c72:	21a0      	movs	r1, #160	; 0xa0
 8001c74:	6838      	ldr	r0, [r7, #0]
 8001c76:	f7ff fe7d 	bl	8001974 <PutHeaderOnTx>
		PutBufOnTx(TX, (uint8_t *)&ADCData[w.u8[0]], 16);
 8001c7a:	4b6d      	ldr	r3, [pc, #436]	; (8001e30 <DecodeCmd+0x280>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	4a6c      	ldr	r2, [pc, #432]	; (8001e34 <DecodeCmd+0x284>)
 8001c82:	4413      	add	r3, r2
 8001c84:	2210      	movs	r2, #16
 8001c86:	4619      	mov	r1, r3
 8001c88:	6838      	ldr	r0, [r7, #0]
 8001c8a:	f7ff fe13 	bl	80018b4 <PutBufOnTx>
		for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 8001c8e:	4b68      	ldr	r3, [pc, #416]	; (8001e30 <DecodeCmd+0x280>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	709a      	strb	r2, [r3, #2]
 8001c94:	e01e      	b.n	8001cd4 <DecodeCmd+0x124>
			w.u16[0] = sumADCData10ms[w.u8[2]]/40;
 8001c96:	4b66      	ldr	r3, [pc, #408]	; (8001e30 <DecodeCmd+0x280>)
 8001c98:	789b      	ldrb	r3, [r3, #2]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b66      	ldr	r3, [pc, #408]	; (8001e38 <DecodeCmd+0x288>)
 8001c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca2:	4a66      	ldr	r2, [pc, #408]	; (8001e3c <DecodeCmd+0x28c>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b60      	ldr	r3, [pc, #384]	; (8001e30 <DecodeCmd+0x280>)
 8001cae:	801a      	strh	r2, [r3, #0]
			PutByteOnTx(TX, w.u8[0]);
 8001cb0:	4b5f      	ldr	r3, [pc, #380]	; (8001e30 <DecodeCmd+0x280>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	6838      	ldr	r0, [r7, #0]
 8001cb8:	f7ff fe34 	bl	8001924 <PutByteOnTx>
			PutByteOnTx(TX, w.u8[1]);
 8001cbc:	4b5c      	ldr	r3, [pc, #368]	; (8001e30 <DecodeCmd+0x280>)
 8001cbe:	785b      	ldrb	r3, [r3, #1]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	6838      	ldr	r0, [r7, #0]
 8001cc4:	f7ff fe2e 	bl	8001924 <PutByteOnTx>
		for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 8001cc8:	4b59      	ldr	r3, [pc, #356]	; (8001e30 <DecodeCmd+0x280>)
 8001cca:	789b      	ldrb	r3, [r3, #2]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	4b57      	ldr	r3, [pc, #348]	; (8001e30 <DecodeCmd+0x280>)
 8001cd2:	709a      	strb	r2, [r3, #2]
 8001cd4:	4b56      	ldr	r3, [pc, #344]	; (8001e30 <DecodeCmd+0x280>)
 8001cd6:	789b      	ldrb	r3, [r3, #2]
 8001cd8:	2b07      	cmp	r3, #7
 8001cda:	d9dc      	bls.n	8001c96 <DecodeCmd+0xe6>
		}
		PutByteOnTx(TX, TX->cks);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	7a1b      	ldrb	r3, [r3, #8]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	6838      	ldr	r0, [r7, #0]
 8001ce4:	f7ff fe1e 	bl	8001924 <PutByteOnTx>
        break;
 8001ce8:	e346      	b.n	8002378 <DecodeCmd+0x7c8>
    case 0xA1://READ Continuous every Nx10ms Nx5 Samples and Average
    	w.u8[0] =  GetByteFromRx(RX, 1, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2101      	movs	r1, #1
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ff25 	bl	8001b3e <GetByteFromRx>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b4d      	ldr	r3, [pc, #308]	; (8001e30 <DecodeCmd+0x280>)
 8001cfa:	701a      	strb	r2, [r3, #0]
    	if(w.u8[0] != 0){
 8001cfc:	4b4c      	ldr	r3, [pc, #304]	; (8001e30 <DecodeCmd+0x280>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d034      	beq.n	8001d6e <DecodeCmd+0x1be>
    		w.u8[0] /= 10;
 8001d04:	4b4a      	ldr	r3, [pc, #296]	; (8001e30 <DecodeCmd+0x280>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4a4c      	ldr	r2, [pc, #304]	; (8001e3c <DecodeCmd+0x28c>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	08db      	lsrs	r3, r3, #3
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b47      	ldr	r3, [pc, #284]	; (8001e30 <DecodeCmd+0x280>)
 8001d14:	701a      	strb	r2, [r3, #0]
    		if(w.u8[0] == 0)
 8001d16:	4b46      	ldr	r3, [pc, #280]	; (8001e30 <DecodeCmd+0x280>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d102      	bne.n	8001d24 <DecodeCmd+0x174>
    			w.u8[0] = 1;
 8001d1e:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <DecodeCmd+0x280>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
    		if(w.u8[0] > 6)
 8001d24:	4b42      	ldr	r3, [pc, #264]	; (8001e30 <DecodeCmd+0x280>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b06      	cmp	r3, #6
 8001d2a:	d902      	bls.n	8001d32 <DecodeCmd+0x182>
    			w.u8[0] = 6;
 8001d2c:	4b40      	ldr	r3, [pc, #256]	; (8001e30 <DecodeCmd+0x280>)
 8001d2e:	2206      	movs	r2, #6
 8001d30:	701a      	strb	r2, [r3, #0]
    		n10msData = w.u8[0];
 8001d32:	4b3f      	ldr	r3, [pc, #252]	; (8001e30 <DecodeCmd+0x280>)
 8001d34:	781a      	ldrb	r2, [r3, #0]
 8001d36:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <DecodeCmd+0x290>)
 8001d38:	701a      	strb	r2, [r3, #0]
    		timeOutAnalog = n10msData*40;
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <DecodeCmd+0x290>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	0092      	lsls	r2, r2, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <DecodeCmd+0x294>)
 8001d4c:	801a      	strh	r2, [r3, #0]
    		timeOutAnalogAux = timeOutAnalog;
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <DecodeCmd+0x294>)
 8001d50:	881a      	ldrh	r2, [r3, #0]
 8001d52:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <DecodeCmd+0x298>)
 8001d54:	801a      	strh	r2, [r3, #0]
    		ledStatus = LEDTXANALOG;
 8001d56:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <DecodeCmd+0x278>)
 8001d58:	4a3c      	ldr	r2, [pc, #240]	; (8001e4c <DecodeCmd+0x29c>)
 8001d5a:	601a      	str	r2, [r3, #0]
    		stateSendSamples = 0;
 8001d5c:	4b3c      	ldr	r3, [pc, #240]	; (8001e50 <DecodeCmd+0x2a0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
    		CONTAVERAGE = 0;
 8001d62:	4a3c      	ldr	r2, [pc, #240]	; (8001e54 <DecodeCmd+0x2a4>)
 8001d64:	7813      	ldrb	r3, [r2, #0]
 8001d66:	f36f 03c3 	bfc	r3, #3, #1
 8001d6a:	7013      	strb	r3, [r2, #0]
 8001d6c:	e009      	b.n	8001d82 <DecodeCmd+0x1d2>
    	}
    	else{
    		timeOutAnalog = 0;
 8001d6e:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <DecodeCmd+0x294>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	801a      	strh	r2, [r3, #0]
    		timeOutAnalogAux = 0;
 8001d74:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <DecodeCmd+0x298>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	801a      	strh	r2, [r3, #0]
    		ledStatus = LEDIDLE;
 8001d7a:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <DecodeCmd+0x278>)
 8001d7c:	f04f 4268 	mov.w	r2, #3892314112	; 0xe8000000
 8001d80:	601a      	str	r2, [r3, #0]
    	}
    	PutHeaderOnTx(TX, 0xA1, 2);
 8001d82:	2202      	movs	r2, #2
 8001d84:	21a1      	movs	r1, #161	; 0xa1
 8001d86:	6838      	ldr	r0, [r7, #0]
 8001d88:	f7ff fdf4 	bl	8001974 <PutHeaderOnTx>
    	PutByteOnTx(TX, 0x0D);
 8001d8c:	210d      	movs	r1, #13
 8001d8e:	6838      	ldr	r0, [r7, #0]
 8001d90:	f7ff fdc8 	bl	8001924 <PutByteOnTx>
    	PutByteOnTx(TX, TX->cks);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	7a1b      	ldrb	r3, [r3, #8]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	6838      	ldr	r0, [r7, #0]
 8001d9c:	f7ff fdc2 	bl	8001924 <PutByteOnTx>
    	break;
 8001da0:	e2ea      	b.n	8002378 <DecodeCmd+0x7c8>
    case 0xA2://Read Continuous Average every N ms
    	w.u8[0] =  GetByteFromRx(RX, 1, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2101      	movs	r1, #1
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fec9 	bl	8001b3e <GetByteFromRx>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <DecodeCmd+0x280>)
 8001db2:	701a      	strb	r2, [r3, #0]
    	if(w.u8[0] != 0){
 8001db4:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <DecodeCmd+0x280>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d01a      	beq.n	8001df2 <DecodeCmd+0x242>
    		if(w.u8[0] < 10)
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <DecodeCmd+0x280>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b09      	cmp	r3, #9
 8001dc2:	d802      	bhi.n	8001dca <DecodeCmd+0x21a>
    			w.u8[0] = 10;
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <DecodeCmd+0x280>)
 8001dc6:	220a      	movs	r2, #10
 8001dc8:	701a      	strb	r2, [r3, #0]
    		timeOutAnalog = w.u8[0]*4;
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <DecodeCmd+0x280>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <DecodeCmd+0x294>)
 8001dd6:	801a      	strh	r2, [r3, #0]
    		timeOutAnalogAux = timeOutAnalog;
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <DecodeCmd+0x294>)
 8001dda:	881a      	ldrh	r2, [r3, #0]
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <DecodeCmd+0x298>)
 8001dde:	801a      	strh	r2, [r3, #0]
    		ledStatus = LEDTXANALOG;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <DecodeCmd+0x278>)
 8001de2:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <DecodeCmd+0x29c>)
 8001de4:	601a      	str	r2, [r3, #0]
    		CONTAVERAGE = 1;
 8001de6:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <DecodeCmd+0x2a4>)
 8001de8:	7813      	ldrb	r3, [r2, #0]
 8001dea:	f043 0308 	orr.w	r3, r3, #8
 8001dee:	7013      	strb	r3, [r2, #0]
 8001df0:	e009      	b.n	8001e06 <DecodeCmd+0x256>
    	}
    	else{
    		timeOutAnalog = 0;
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <DecodeCmd+0x294>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	801a      	strh	r2, [r3, #0]
    		timeOutAnalogAux = 0;
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <DecodeCmd+0x298>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	801a      	strh	r2, [r3, #0]
    		ledStatus = LEDIDLE;
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <DecodeCmd+0x278>)
 8001e00:	f04f 4268 	mov.w	r2, #3892314112	; 0xe8000000
 8001e04:	601a      	str	r2, [r3, #0]
    	}
    	PutHeaderOnTx(TX, 0xA2, 2);
 8001e06:	2202      	movs	r2, #2
 8001e08:	21a2      	movs	r1, #162	; 0xa2
 8001e0a:	6838      	ldr	r0, [r7, #0]
 8001e0c:	f7ff fdb2 	bl	8001974 <PutHeaderOnTx>
    	PutByteOnTx(TX, 0x0D);
 8001e10:	210d      	movs	r1, #13
 8001e12:	6838      	ldr	r0, [r7, #0]
 8001e14:	f7ff fd86 	bl	8001924 <PutByteOnTx>
    	PutByteOnTx(TX, TX->cks);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	7a1b      	ldrb	r3, [r3, #8]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	6838      	ldr	r0, [r7, #0]
 8001e20:	f7ff fd80 	bl	8001924 <PutByteOnTx>
    	break;
 8001e24:	e2a8      	b.n	8002378 <DecodeCmd+0x7c8>
 8001e26:	bf00      	nop
 8001e28:	20001c34 	.word	0x20001c34
 8001e2c:	20001be0 	.word	0x20001be0
 8001e30:	20000824 	.word	0x20000824
 8001e34:	20000be0 	.word	0x20000be0
 8001e38:	20001be8 	.word	0x20001be8
 8001e3c:	cccccccd 	.word	0xcccccccd
 8001e40:	20001c2c 	.word	0x20001c2c
 8001e44:	20001c28 	.word	0x20001c28
 8001e48:	20001c2a 	.word	0x20001c2a
 8001e4c:	e8a00000 	.word	0xe8a00000
 8001e50:	20001c2d 	.word	0x20001c2d
 8001e54:	20000820 	.word	0x20000820
    case 0xA3://SET Motor Period
    	w.u8[0] = GetByteFromRx(RX, 1, 0);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff fe6e 	bl	8001b3e <GetByteFromRx>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	4ba4      	ldr	r3, [pc, #656]	; (80020f8 <DecodeCmd+0x548>)
 8001e68:	701a      	strb	r2, [r3, #0]
    	w.u8[1] = GetByteFromRx(RX, 1, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff fe65 	bl	8001b3e <GetByteFromRx>
 8001e74:	4603      	mov	r3, r0
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b9f      	ldr	r3, [pc, #636]	; (80020f8 <DecodeCmd+0x548>)
 8001e7a:	705a      	strb	r2, [r3, #1]
    	if(w.u16[0] < 100){
 8001e7c:	4b9e      	ldr	r3, [pc, #632]	; (80020f8 <DecodeCmd+0x548>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	2b63      	cmp	r3, #99	; 0x63
 8001e82:	d802      	bhi.n	8001e8a <DecodeCmd+0x2da>
    		w.u16[0] = 100;
 8001e84:	4b9c      	ldr	r3, [pc, #624]	; (80020f8 <DecodeCmd+0x548>)
 8001e86:	2264      	movs	r2, #100	; 0x64
 8001e88:	801a      	strh	r2, [r3, #0]
    	}
    	if(w.u16[0] > 9000){
 8001e8a:	4b9b      	ldr	r3, [pc, #620]	; (80020f8 <DecodeCmd+0x548>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	f242 3228 	movw	r2, #9000	; 0x2328
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d903      	bls.n	8001e9e <DecodeCmd+0x2ee>
    		w.u16[0] = 9000;
 8001e96:	4b98      	ldr	r3, [pc, #608]	; (80020f8 <DecodeCmd+0x548>)
 8001e98:	f242 3228 	movw	r2, #9000	; 0x2328
 8001e9c:	801a      	strh	r2, [r3, #0]
    	}

		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4896      	ldr	r0, [pc, #600]	; (80020fc <DecodeCmd+0x54c>)
 8001ea2:	f005 ff0d 	bl	8007cc0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	4894      	ldr	r0, [pc, #592]	; (80020fc <DecodeCmd+0x54c>)
 8001eaa:	f005 ff09 	bl	8007cc0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001eae:	2108      	movs	r1, #8
 8001eb0:	4892      	ldr	r0, [pc, #584]	; (80020fc <DecodeCmd+0x54c>)
 8001eb2:	f005 ff05 	bl	8007cc0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8001eb6:	210c      	movs	r1, #12
 8001eb8:	4890      	ldr	r0, [pc, #576]	; (80020fc <DecodeCmd+0x54c>)
 8001eba:	f005 ff01 	bl	8007cc0 <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001ebe:	4b8f      	ldr	r3, [pc, #572]	; (80020fc <DecodeCmd+0x54c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001ec6:	4b8d      	ldr	r3, [pc, #564]	; (80020fc <DecodeCmd+0x54c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001ece:	4b8b      	ldr	r3, [pc, #556]	; (80020fc <DecodeCmd+0x54c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001ed6:	4b89      	ldr	r3, [pc, #548]	; (80020fc <DecodeCmd+0x54c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2200      	movs	r2, #0
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_AUTORELOAD(&htim3, w.u16[0]);
 8001ede:	4b86      	ldr	r3, [pc, #536]	; (80020f8 <DecodeCmd+0x548>)
 8001ee0:	881a      	ldrh	r2, [r3, #0]
 8001ee2:	4b86      	ldr	r3, [pc, #536]	; (80020fc <DecodeCmd+0x54c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ee8:	4b83      	ldr	r3, [pc, #524]	; (80020f8 <DecodeCmd+0x548>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b83      	ldr	r3, [pc, #524]	; (80020fc <DecodeCmd+0x54c>)
 8001ef0:	60da      	str	r2, [r3, #12]

		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4881      	ldr	r0, [pc, #516]	; (80020fc <DecodeCmd+0x54c>)
 8001ef6:	f005 fdd7 	bl	8007aa8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001efa:	2104      	movs	r1, #4
 8001efc:	487f      	ldr	r0, [pc, #508]	; (80020fc <DecodeCmd+0x54c>)
 8001efe:	f005 fdd3 	bl	8007aa8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001f02:	2108      	movs	r1, #8
 8001f04:	487d      	ldr	r0, [pc, #500]	; (80020fc <DecodeCmd+0x54c>)
 8001f06:	f005 fdcf 	bl	8007aa8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001f0a:	210c      	movs	r1, #12
 8001f0c:	487b      	ldr	r0, [pc, #492]	; (80020fc <DecodeCmd+0x54c>)
 8001f0e:	f005 fdcb 	bl	8007aa8 <HAL_TIM_PWM_Start>

		PutHeaderOnTx(TX, 0xA3, 3);
 8001f12:	2203      	movs	r2, #3
 8001f14:	21a3      	movs	r1, #163	; 0xa3
 8001f16:	6838      	ldr	r0, [r7, #0]
 8001f18:	f7ff fd2c 	bl	8001974 <PutHeaderOnTx>
    	PutByteOnTx(TX, w.u8[0]);
 8001f1c:	4b76      	ldr	r3, [pc, #472]	; (80020f8 <DecodeCmd+0x548>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
 8001f22:	6838      	ldr	r0, [r7, #0]
 8001f24:	f7ff fcfe 	bl	8001924 <PutByteOnTx>
    	PutByteOnTx(TX, w.u8[1]);
 8001f28:	4b73      	ldr	r3, [pc, #460]	; (80020f8 <DecodeCmd+0x548>)
 8001f2a:	785b      	ldrb	r3, [r3, #1]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	6838      	ldr	r0, [r7, #0]
 8001f30:	f7ff fcf8 	bl	8001924 <PutByteOnTx>
    	PutByteOnTx(TX, TX->cks);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	7a1b      	ldrb	r3, [r3, #8]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	6838      	ldr	r0, [r7, #0]
 8001f3c:	f7ff fcf2 	bl	8001924 <PutByteOnTx>
    	break;
 8001f40:	e21a      	b.n	8002378 <DecodeCmd+0x7c8>
    case 0xA4://Test Motors
    	w.i8[0] = GetByteFromRx(RX, 1, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2101      	movs	r1, #1
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff fdf9 	bl	8001b3e <GetByteFromRx>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	b25a      	sxtb	r2, r3
 8001f50:	4b69      	ldr	r3, [pc, #420]	; (80020f8 <DecodeCmd+0x548>)
 8001f52:	701a      	strb	r2, [r3, #0]
    	w.i8[1] = GetByteFromRx(RX, 1, 0);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2101      	movs	r1, #1
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fdf0 	bl	8001b3e <GetByteFromRx>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	b25a      	sxtb	r2, r3
 8001f62:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <DecodeCmd+0x548>)
 8001f64:	705a      	strb	r2, [r3, #1]
    	w.i8[2] = GetByteFromRx(RX, 1, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2101      	movs	r1, #1
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fde7 	bl	8001b3e <GetByteFromRx>
 8001f70:	4603      	mov	r3, r0
 8001f72:	b25a      	sxtb	r2, r3
 8001f74:	4b60      	ldr	r3, [pc, #384]	; (80020f8 <DecodeCmd+0x548>)
 8001f76:	709a      	strb	r2, [r3, #2]
    	w.i8[3] = GetByteFromRx(RX, 1, 0);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff fdde 	bl	8001b3e <GetByteFromRx>
 8001f82:	4603      	mov	r3, r0
 8001f84:	b25a      	sxtb	r2, r3
 8001f86:	4b5c      	ldr	r3, [pc, #368]	; (80020f8 <DecodeCmd+0x548>)
 8001f88:	70da      	strb	r2, [r3, #3]
    	if(w.i8[0] > 100)
 8001f8a:	4b5b      	ldr	r3, [pc, #364]	; (80020f8 <DecodeCmd+0x548>)
 8001f8c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f90:	2b64      	cmp	r3, #100	; 0x64
 8001f92:	dd02      	ble.n	8001f9a <DecodeCmd+0x3ea>
    		w.i8[0] = 90;
 8001f94:	4b58      	ldr	r3, [pc, #352]	; (80020f8 <DecodeCmd+0x548>)
 8001f96:	225a      	movs	r2, #90	; 0x5a
 8001f98:	701a      	strb	r2, [r3, #0]
    	if(w.i8[0] < -100)
 8001f9a:	4b57      	ldr	r3, [pc, #348]	; (80020f8 <DecodeCmd+0x548>)
 8001f9c:	f993 3000 	ldrsb.w	r3, [r3]
 8001fa0:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001fa4:	da02      	bge.n	8001fac <DecodeCmd+0x3fc>
    		w.i8[0] = -90;
 8001fa6:	4b54      	ldr	r3, [pc, #336]	; (80020f8 <DecodeCmd+0x548>)
 8001fa8:	22a6      	movs	r2, #166	; 0xa6
 8001faa:	701a      	strb	r2, [r3, #0]
    	if(w.i8[1] > 100)
 8001fac:	4b52      	ldr	r3, [pc, #328]	; (80020f8 <DecodeCmd+0x548>)
 8001fae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	dd02      	ble.n	8001fbc <DecodeCmd+0x40c>
    		w.i8[1] = 90;
 8001fb6:	4b50      	ldr	r3, [pc, #320]	; (80020f8 <DecodeCmd+0x548>)
 8001fb8:	225a      	movs	r2, #90	; 0x5a
 8001fba:	705a      	strb	r2, [r3, #1]
    	if(w.i8[1] < -100)
 8001fbc:	4b4e      	ldr	r3, [pc, #312]	; (80020f8 <DecodeCmd+0x548>)
 8001fbe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001fc2:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001fc6:	da02      	bge.n	8001fce <DecodeCmd+0x41e>
    		w.i8[1] = -90;
 8001fc8:	4b4b      	ldr	r3, [pc, #300]	; (80020f8 <DecodeCmd+0x548>)
 8001fca:	22a6      	movs	r2, #166	; 0xa6
 8001fcc:	705a      	strb	r2, [r3, #1]
    	w1.i16[0] = (w.i8[0]*100)/__HAL_TIM_GET_AUTORELOAD(&htim3);
 8001fce:	4b4a      	ldr	r3, [pc, #296]	; (80020f8 <DecodeCmd+0x548>)
 8001fd0:	f993 3000 	ldrsb.w	r3, [r3]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2364      	movs	r3, #100	; 0x64
 8001fd8:	fb02 f303 	mul.w	r3, r2, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b47      	ldr	r3, [pc, #284]	; (80020fc <DecodeCmd+0x54c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	4b45      	ldr	r3, [pc, #276]	; (8002100 <DecodeCmd+0x550>)
 8001fec:	801a      	strh	r2, [r3, #0]
    	w1.i16[1] = (w.i8[1]*100)/__HAL_TIM_GET_AUTORELOAD(&htim3);
 8001fee:	4b42      	ldr	r3, [pc, #264]	; (80020f8 <DecodeCmd+0x548>)
 8001ff0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2364      	movs	r3, #100	; 0x64
 8001ff8:	fb02 f303 	mul.w	r3, r2, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <DecodeCmd+0x54c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	fbb2 f3f3 	udiv	r3, r2, r3
 8002008:	b21a      	sxth	r2, r3
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <DecodeCmd+0x550>)
 800200c:	805a      	strh	r2, [r3, #2]
    	if(w.u16[1] > 100)
 800200e:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <DecodeCmd+0x548>)
 8002010:	885b      	ldrh	r3, [r3, #2]
 8002012:	2b64      	cmp	r3, #100	; 0x64
 8002014:	d902      	bls.n	800201c <DecodeCmd+0x46c>
    		w.u16[1] = 100;
 8002016:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <DecodeCmd+0x548>)
 8002018:	2264      	movs	r2, #100	; 0x64
 800201a:	805a      	strh	r2, [r3, #2]
    	timeOutTestMotors = w.u16[1];
 800201c:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <DecodeCmd+0x548>)
 800201e:	885a      	ldrh	r2, [r3, #2]
 8002020:	4b38      	ldr	r3, [pc, #224]	; (8002104 <DecodeCmd+0x554>)
 8002022:	801a      	strh	r2, [r3, #0]
    	if(w1.i16[0] < 0){
 8002024:	4b36      	ldr	r3, [pc, #216]	; (8002100 <DecodeCmd+0x550>)
 8002026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202a:	2b00      	cmp	r3, #0
 800202c:	da13      	bge.n	8002056 <DecodeCmd+0x4a6>
    		w1.i16[0] *= -1;
 800202e:	4b34      	ldr	r3, [pc, #208]	; (8002100 <DecodeCmd+0x550>)
 8002030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002034:	b29b      	uxth	r3, r3
 8002036:	425b      	negs	r3, r3
 8002038:	b29b      	uxth	r3, r3
 800203a:	b21a      	sxth	r2, r3
 800203c:	4b30      	ldr	r3, [pc, #192]	; (8002100 <DecodeCmd+0x550>)
 800203e:	801a      	strh	r2, [r3, #0]
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, w1.i16[0]);
 8002040:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <DecodeCmd+0x550>)
 8002042:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002046:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <DecodeCmd+0x54c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	635a      	str	r2, [r3, #52]	; 0x34
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <DecodeCmd+0x54c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2200      	movs	r2, #0
 8002052:	639a      	str	r2, [r3, #56]	; 0x38
 8002054:	e009      	b.n	800206a <DecodeCmd+0x4ba>
    	}
    	else{
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002056:	4b29      	ldr	r3, [pc, #164]	; (80020fc <DecodeCmd+0x54c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2200      	movs	r2, #0
 800205c:	635a      	str	r2, [r3, #52]	; 0x34
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, w1.i16[0]);
 800205e:	4b28      	ldr	r3, [pc, #160]	; (8002100 <DecodeCmd+0x550>)
 8002060:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <DecodeCmd+0x54c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	639a      	str	r2, [r3, #56]	; 0x38
    	}
    	if(w1.i16[1] < 0){
 800206a:	4b25      	ldr	r3, [pc, #148]	; (8002100 <DecodeCmd+0x550>)
 800206c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002070:	2b00      	cmp	r3, #0
 8002072:	da13      	bge.n	800209c <DecodeCmd+0x4ec>
    		w1.i16[1] *= -1;
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <DecodeCmd+0x550>)
 8002076:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800207a:	b29b      	uxth	r3, r3
 800207c:	425b      	negs	r3, r3
 800207e:	b29b      	uxth	r3, r3
 8002080:	b21a      	sxth	r2, r3
 8002082:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <DecodeCmd+0x550>)
 8002084:	805a      	strh	r2, [r3, #2]
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, w1.i16[1]);
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <DecodeCmd+0x550>)
 8002088:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <DecodeCmd+0x54c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	63da      	str	r2, [r3, #60]	; 0x3c
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <DecodeCmd+0x54c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2200      	movs	r2, #0
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
 800209a:	e009      	b.n	80020b0 <DecodeCmd+0x500>
    	}
    	else{
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <DecodeCmd+0x54c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	63da      	str	r2, [r3, #60]	; 0x3c
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, w1.i16[1]);
 80020a4:	4b16      	ldr	r3, [pc, #88]	; (8002100 <DecodeCmd+0x550>)
 80020a6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80020aa:	4b14      	ldr	r3, [pc, #80]	; (80020fc <DecodeCmd+0x54c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
    	}
    	PutHeaderOnTx(TX, 0xA4, 5);
 80020b0:	2205      	movs	r2, #5
 80020b2:	21a4      	movs	r1, #164	; 0xa4
 80020b4:	6838      	ldr	r0, [r7, #0]
 80020b6:	f7ff fc5d 	bl	8001974 <PutHeaderOnTx>
    	PutByteOnTx(TX, w.u8[0]);
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <DecodeCmd+0x548>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	4619      	mov	r1, r3
 80020c0:	6838      	ldr	r0, [r7, #0]
 80020c2:	f7ff fc2f 	bl	8001924 <PutByteOnTx>
    	PutByteOnTx(TX, w.u8[1]);
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <DecodeCmd+0x548>)
 80020c8:	785b      	ldrb	r3, [r3, #1]
 80020ca:	4619      	mov	r1, r3
 80020cc:	6838      	ldr	r0, [r7, #0]
 80020ce:	f7ff fc29 	bl	8001924 <PutByteOnTx>
    	PutByteOnTx(TX, w.u8[2]);
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <DecodeCmd+0x548>)
 80020d4:	789b      	ldrb	r3, [r3, #2]
 80020d6:	4619      	mov	r1, r3
 80020d8:	6838      	ldr	r0, [r7, #0]
 80020da:	f7ff fc23 	bl	8001924 <PutByteOnTx>
    	PutByteOnTx(TX, w.u8[3]);
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <DecodeCmd+0x548>)
 80020e0:	78db      	ldrb	r3, [r3, #3]
 80020e2:	4619      	mov	r1, r3
 80020e4:	6838      	ldr	r0, [r7, #0]
 80020e6:	f7ff fc1d 	bl	8001924 <PutByteOnTx>
    	PutByteOnTx(TX, TX->cks);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	7a1b      	ldrb	r3, [r3, #8]
 80020ee:	4619      	mov	r1, r3
 80020f0:	6838      	ldr	r0, [r7, #0]
 80020f2:	f7ff fc17 	bl	8001924 <PutByteOnTx>
    	break;
 80020f6:	e13f      	b.n	8002378 <DecodeCmd+0x7c8>
 80020f8:	20000824 	.word	0x20000824
 80020fc:	200006cc 	.word	0x200006cc
 8002100:	20000828 	.word	0x20000828
 8002104:	20001c3e 	.word	0x20001c3e
    case 0xB0://SET transparent ESP01
   		ESP01DEBUG  = 1;
 8002108:	4a9d      	ldr	r2, [pc, #628]	; (8002380 <DecodeCmd+0x7d0>)
 800210a:	7813      	ldrb	r3, [r2, #0]
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	7013      	strb	r3, [r2, #0]
   		ledStatus = LEDESP01DBG;
 8002112:	4b9c      	ldr	r3, [pc, #624]	; (8002384 <DecodeCmd+0x7d4>)
 8002114:	f04f 32ea 	mov.w	r2, #3941264106	; 0xeaeaeaea
 8002118:	601a      	str	r2, [r3, #0]
   		countPlus = 0;
 800211a:	4b9b      	ldr	r3, [pc, #620]	; (8002388 <DecodeCmd+0x7d8>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
    	break;
 8002120:	e12a      	b.n	8002378 <DecodeCmd+0x7c8>
    case 0xB1://SET WIFI SSID and PASSWORD
    	for(w.u8[0] = 0; w.u8[0] < 48; w.u8[0]++){
 8002122:	4b9a      	ldr	r3, [pc, #616]	; (800238c <DecodeCmd+0x7dc>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	e019      	b.n	800215e <DecodeCmd+0x5ae>
    		w.u8[1] = GetByteFromRx(RX, 1, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2101      	movs	r1, #1
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff fd05 	bl	8001b3e <GetByteFromRx>
 8002134:	4603      	mov	r3, r0
 8002136:	461a      	mov	r2, r3
 8002138:	4b94      	ldr	r3, [pc, #592]	; (800238c <DecodeCmd+0x7dc>)
 800213a:	705a      	strb	r2, [r3, #1]
    		ssid[w.u8[0]] = w.u8[1];
 800213c:	4b93      	ldr	r3, [pc, #588]	; (800238c <DecodeCmd+0x7dc>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	4b92      	ldr	r3, [pc, #584]	; (800238c <DecodeCmd+0x7dc>)
 8002144:	7859      	ldrb	r1, [r3, #1]
 8002146:	4b92      	ldr	r3, [pc, #584]	; (8002390 <DecodeCmd+0x7e0>)
 8002148:	5499      	strb	r1, [r3, r2]
    		if(w.u8[1] == '\0')
 800214a:	4b90      	ldr	r3, [pc, #576]	; (800238c <DecodeCmd+0x7dc>)
 800214c:	785b      	ldrb	r3, [r3, #1]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <DecodeCmd+0x5b8>
    	for(w.u8[0] = 0; w.u8[0] < 48; w.u8[0]++){
 8002152:	4b8e      	ldr	r3, [pc, #568]	; (800238c <DecodeCmd+0x7dc>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b8c      	ldr	r3, [pc, #560]	; (800238c <DecodeCmd+0x7dc>)
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	4b8b      	ldr	r3, [pc, #556]	; (800238c <DecodeCmd+0x7dc>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b2f      	cmp	r3, #47	; 0x2f
 8002164:	d9e1      	bls.n	800212a <DecodeCmd+0x57a>
 8002166:	e000      	b.n	800216a <DecodeCmd+0x5ba>
    			break;
 8002168:	bf00      	nop
    	}
		ssid[47] = '\0';
 800216a:	4b89      	ldr	r3, [pc, #548]	; (8002390 <DecodeCmd+0x7e0>)
 800216c:	2200      	movs	r2, #0
 800216e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    	for(w.u8[0] = 0; w.u8[0] < 32; w.u8[0]++){
 8002172:	4b86      	ldr	r3, [pc, #536]	; (800238c <DecodeCmd+0x7dc>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	e019      	b.n	80021ae <DecodeCmd+0x5fe>
    		w.u8[1] = GetByteFromRx(RX, 1, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2101      	movs	r1, #1
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff fcdd 	bl	8001b3e <GetByteFromRx>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	4b80      	ldr	r3, [pc, #512]	; (800238c <DecodeCmd+0x7dc>)
 800218a:	705a      	strb	r2, [r3, #1]
    		password[w.u8[0]] = w.u8[1];
 800218c:	4b7f      	ldr	r3, [pc, #508]	; (800238c <DecodeCmd+0x7dc>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b7e      	ldr	r3, [pc, #504]	; (800238c <DecodeCmd+0x7dc>)
 8002194:	7859      	ldrb	r1, [r3, #1]
 8002196:	4b7f      	ldr	r3, [pc, #508]	; (8002394 <DecodeCmd+0x7e4>)
 8002198:	5499      	strb	r1, [r3, r2]
    		if(w.u8[1] == '\0')
 800219a:	4b7c      	ldr	r3, [pc, #496]	; (800238c <DecodeCmd+0x7dc>)
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <DecodeCmd+0x608>
    	for(w.u8[0] = 0; w.u8[0] < 32; w.u8[0]++){
 80021a2:	4b7a      	ldr	r3, [pc, #488]	; (800238c <DecodeCmd+0x7dc>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b78      	ldr	r3, [pc, #480]	; (800238c <DecodeCmd+0x7dc>)
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	4b77      	ldr	r3, [pc, #476]	; (800238c <DecodeCmd+0x7dc>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b1f      	cmp	r3, #31
 80021b4:	d9e1      	bls.n	800217a <DecodeCmd+0x5ca>
 80021b6:	e000      	b.n	80021ba <DecodeCmd+0x60a>
    			break;
 80021b8:	bf00      	nop
    	}
		password[31] = '\0';
 80021ba:	4b76      	ldr	r3, [pc, #472]	; (8002394 <DecodeCmd+0x7e4>)
 80021bc:	2200      	movs	r2, #0
 80021be:	77da      	strb	r2, [r3, #31]
    	ESP01SetWIFI(ssid, password);
 80021c0:	4974      	ldr	r1, [pc, #464]	; (8002394 <DecodeCmd+0x7e4>)
 80021c2:	4873      	ldr	r0, [pc, #460]	; (8002390 <DecodeCmd+0x7e0>)
 80021c4:	f7fe f81c 	bl	8000200 <ESP01SetWIFI>
    	PutHeaderOnTx(TX, 0xB1, 48+32+1);
 80021c8:	2251      	movs	r2, #81	; 0x51
 80021ca:	21b1      	movs	r1, #177	; 0xb1
 80021cc:	6838      	ldr	r0, [r7, #0]
 80021ce:	f7ff fbd1 	bl	8001974 <PutHeaderOnTx>
    	PutBufOnTx(TX, (uint8_t *)ssid, 48);
 80021d2:	2230      	movs	r2, #48	; 0x30
 80021d4:	496e      	ldr	r1, [pc, #440]	; (8002390 <DecodeCmd+0x7e0>)
 80021d6:	6838      	ldr	r0, [r7, #0]
 80021d8:	f7ff fb6c 	bl	80018b4 <PutBufOnTx>
    	PutBufOnTx(TX, (uint8_t *)password, 32);
 80021dc:	2220      	movs	r2, #32
 80021de:	496d      	ldr	r1, [pc, #436]	; (8002394 <DecodeCmd+0x7e4>)
 80021e0:	6838      	ldr	r0, [r7, #0]
 80021e2:	f7ff fb67 	bl	80018b4 <PutBufOnTx>
    	PutByteOnTx(TX, TX->cks);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	7a1b      	ldrb	r3, [r3, #8]
 80021ea:	4619      	mov	r1, r3
 80021ec:	6838      	ldr	r0, [r7, #0]
 80021ee:	f7ff fb99 	bl	8001924 <PutByteOnTx>
    	break;
 80021f2:	e0c1      	b.n	8002378 <DecodeCmd+0x7c8>
    case 0xB2://SET RemoteIP, RemotePort and LocalPort
    	if(ESP01GetLastSTATE() == ESP01WIFIDISCONNECTED){
 80021f4:	f7fe fac8 	bl	8000788 <ESP01GetLastSTATE>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10f      	bne.n	800221e <DecodeCmd+0x66e>
    		PutHeaderOnTx(TX, 0xB2, 2);
 80021fe:	2202      	movs	r2, #2
 8002200:	21b2      	movs	r1, #178	; 0xb2
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	f7ff fbb6 	bl	8001974 <PutHeaderOnTx>
    		PutByteOnTx(TX, 0xFF);
 8002208:	21ff      	movs	r1, #255	; 0xff
 800220a:	6838      	ldr	r0, [r7, #0]
 800220c:	f7ff fb8a 	bl	8001924 <PutByteOnTx>
    		PutByteOnTx(TX, TX->cks);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	7a1b      	ldrb	r3, [r3, #8]
 8002214:	4619      	mov	r1, r3
 8002216:	6838      	ldr	r0, [r7, #0]
 8002218:	f7ff fb84 	bl	8001924 <PutByteOnTx>
    		break;
 800221c:	e0ac      	b.n	8002378 <DecodeCmd+0x7c8>
    	}
    	for(w.u8[0] = 0; w.u8[0] < 16; w.u8[0]++){
 800221e:	4b5b      	ldr	r3, [pc, #364]	; (800238c <DecodeCmd+0x7dc>)
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
 8002224:	e019      	b.n	800225a <DecodeCmd+0x6aa>
    		w.u8[1] = GetByteFromRx(RX, 1, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2101      	movs	r1, #1
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff fc87 	bl	8001b3e <GetByteFromRx>
 8002230:	4603      	mov	r3, r0
 8002232:	461a      	mov	r2, r3
 8002234:	4b55      	ldr	r3, [pc, #340]	; (800238c <DecodeCmd+0x7dc>)
 8002236:	705a      	strb	r2, [r3, #1]
    		remoteIP[w.u8[0]] = w.u8[1];
 8002238:	4b54      	ldr	r3, [pc, #336]	; (800238c <DecodeCmd+0x7dc>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b53      	ldr	r3, [pc, #332]	; (800238c <DecodeCmd+0x7dc>)
 8002240:	7859      	ldrb	r1, [r3, #1]
 8002242:	4b55      	ldr	r3, [pc, #340]	; (8002398 <DecodeCmd+0x7e8>)
 8002244:	5499      	strb	r1, [r3, r2]
    		if(w.u8[1] == '\0')
 8002246:	4b51      	ldr	r3, [pc, #324]	; (800238c <DecodeCmd+0x7dc>)
 8002248:	785b      	ldrb	r3, [r3, #1]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <DecodeCmd+0x6b4>
    	for(w.u8[0] = 0; w.u8[0] < 16; w.u8[0]++){
 800224e:	4b4f      	ldr	r3, [pc, #316]	; (800238c <DecodeCmd+0x7dc>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4b4d      	ldr	r3, [pc, #308]	; (800238c <DecodeCmd+0x7dc>)
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	4b4c      	ldr	r3, [pc, #304]	; (800238c <DecodeCmd+0x7dc>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b0f      	cmp	r3, #15
 8002260:	d9e1      	bls.n	8002226 <DecodeCmd+0x676>
 8002262:	e000      	b.n	8002266 <DecodeCmd+0x6b6>
    			break;
 8002264:	bf00      	nop
    	}
		remoteIP[15] = '\0';
 8002266:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <DecodeCmd+0x7e8>)
 8002268:	2200      	movs	r2, #0
 800226a:	73da      	strb	r2, [r3, #15]
		w.u8[0] = GetByteFromRx(RX, 1, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	2101      	movs	r1, #1
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff fc64 	bl	8001b3e <GetByteFromRx>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	4b44      	ldr	r3, [pc, #272]	; (800238c <DecodeCmd+0x7dc>)
 800227c:	701a      	strb	r2, [r3, #0]
		w.u8[1] = GetByteFromRx(RX, 1, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2101      	movs	r1, #1
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fc5b 	bl	8001b3e <GetByteFromRx>
 8002288:	4603      	mov	r3, r0
 800228a:	461a      	mov	r2, r3
 800228c:	4b3f      	ldr	r3, [pc, #252]	; (800238c <DecodeCmd+0x7dc>)
 800228e:	705a      	strb	r2, [r3, #1]
		w.u8[2] = GetByteFromRx(RX, 1, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2101      	movs	r1, #1
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fc52 	bl	8001b3e <GetByteFromRx>
 800229a:	4603      	mov	r3, r0
 800229c:	461a      	mov	r2, r3
 800229e:	4b3b      	ldr	r3, [pc, #236]	; (800238c <DecodeCmd+0x7dc>)
 80022a0:	709a      	strb	r2, [r3, #2]
		w.u8[3] = GetByteFromRx(RX, 1, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2101      	movs	r1, #1
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff fc49 	bl	8001b3e <GetByteFromRx>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461a      	mov	r2, r3
 80022b0:	4b36      	ldr	r3, [pc, #216]	; (800238c <DecodeCmd+0x7dc>)
 80022b2:	70da      	strb	r2, [r3, #3]
		remotePort = w.u16[0];
 80022b4:	4b35      	ldr	r3, [pc, #212]	; (800238c <DecodeCmd+0x7dc>)
 80022b6:	881a      	ldrh	r2, [r3, #0]
 80022b8:	4b38      	ldr	r3, [pc, #224]	; (800239c <DecodeCmd+0x7ec>)
 80022ba:	801a      	strh	r2, [r3, #0]
		localPort = w.u16[1];
 80022bc:	4b33      	ldr	r3, [pc, #204]	; (800238c <DecodeCmd+0x7dc>)
 80022be:	885a      	ldrh	r2, [r3, #2]
 80022c0:	4b37      	ldr	r3, [pc, #220]	; (80023a0 <DecodeCmd+0x7f0>)
 80022c2:	801a      	strh	r2, [r3, #0]
		ESP01ConnectUDP(remoteIP, remotePort, localPort);
 80022c4:	4b35      	ldr	r3, [pc, #212]	; (800239c <DecodeCmd+0x7ec>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	4a35      	ldr	r2, [pc, #212]	; (80023a0 <DecodeCmd+0x7f0>)
 80022ca:	8812      	ldrh	r2, [r2, #0]
 80022cc:	4619      	mov	r1, r3
 80022ce:	4832      	ldr	r0, [pc, #200]	; (8002398 <DecodeCmd+0x7e8>)
 80022d0:	f7fd ffb8 	bl	8000244 <ESP01ConnectUDP>
		PutHeaderOnTx(TX, 0xB2, 22);
 80022d4:	2216      	movs	r2, #22
 80022d6:	21b2      	movs	r1, #178	; 0xb2
 80022d8:	6838      	ldr	r0, [r7, #0]
 80022da:	f7ff fb4b 	bl	8001974 <PutHeaderOnTx>
		PutByteOnTx(TX, 0x0D);
 80022de:	210d      	movs	r1, #13
 80022e0:	6838      	ldr	r0, [r7, #0]
 80022e2:	f7ff fb1f 	bl	8001924 <PutByteOnTx>
		PutBufOnTx(TX, (uint8_t *)remoteIP, 16);
 80022e6:	2210      	movs	r2, #16
 80022e8:	492b      	ldr	r1, [pc, #172]	; (8002398 <DecodeCmd+0x7e8>)
 80022ea:	6838      	ldr	r0, [r7, #0]
 80022ec:	f7ff fae2 	bl	80018b4 <PutBufOnTx>
		PutBufOnTx(TX, (uint8_t *)&remotePort, 2);
 80022f0:	2202      	movs	r2, #2
 80022f2:	492a      	ldr	r1, [pc, #168]	; (800239c <DecodeCmd+0x7ec>)
 80022f4:	6838      	ldr	r0, [r7, #0]
 80022f6:	f7ff fadd 	bl	80018b4 <PutBufOnTx>
		PutBufOnTx(TX, (uint8_t *)&localPort, 2);
 80022fa:	2202      	movs	r2, #2
 80022fc:	4928      	ldr	r1, [pc, #160]	; (80023a0 <DecodeCmd+0x7f0>)
 80022fe:	6838      	ldr	r0, [r7, #0]
 8002300:	f7ff fad8 	bl	80018b4 <PutBufOnTx>
		PutByteOnTx(TX, TX->cks);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	7a1b      	ldrb	r3, [r3, #8]
 8002308:	4619      	mov	r1, r3
 800230a:	6838      	ldr	r0, [r7, #0]
 800230c:	f7ff fb0a 	bl	8001924 <PutByteOnTx>
    	break;
 8002310:	e032      	b.n	8002378 <DecodeCmd+0x7c8>
    case 0xF0://ALIVE
    	PutHeaderOnTx(TX, 0xF0, 2);
 8002312:	2202      	movs	r2, #2
 8002314:	21f0      	movs	r1, #240	; 0xf0
 8002316:	6838      	ldr	r0, [r7, #0]
 8002318:	f7ff fb2c 	bl	8001974 <PutHeaderOnTx>
        PutByteOnTx(TX, 0x0D);
 800231c:	210d      	movs	r1, #13
 800231e:	6838      	ldr	r0, [r7, #0]
 8002320:	f7ff fb00 	bl	8001924 <PutByteOnTx>
        PutByteOnTx(TX, TX->cks);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	7a1b      	ldrb	r3, [r3, #8]
 8002328:	4619      	mov	r1, r3
 800232a:	6838      	ldr	r0, [r7, #0]
 800232c:	f7ff fafa 	bl	8001924 <PutByteOnTx>
        break;
 8002330:	e022      	b.n	8002378 <DecodeCmd+0x7c8>
    case 0xF1://FIRMWARE
        PutStrOntx(TX, "+&DBG");
 8002332:	491c      	ldr	r1, [pc, #112]	; (80023a4 <DecodeCmd+0x7f4>)
 8002334:	6838      	ldr	r0, [r7, #0]
 8002336:	f7ff fbca 	bl	8001ace <PutStrOntx>
        PutStrOntx(TX, FIRMWARE);
 800233a:	491b      	ldr	r1, [pc, #108]	; (80023a8 <DecodeCmd+0x7f8>)
 800233c:	6838      	ldr	r0, [r7, #0]
 800233e:	f7ff fbc6 	bl	8001ace <PutStrOntx>
        PutByteOnTx(TX, '\n');
 8002342:	210a      	movs	r1, #10
 8002344:	6838      	ldr	r0, [r7, #0]
 8002346:	f7ff faed 	bl	8001924 <PutByteOnTx>
        break;
 800234a:	e015      	b.n	8002378 <DecodeCmd+0x7c8>
    default:
        PutHeaderOnTx(TX, RX->buf[RX->iData], 2);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	8952      	ldrh	r2, [r2, #10]
 8002354:	4413      	add	r3, r2
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2202      	movs	r2, #2
 800235a:	4619      	mov	r1, r3
 800235c:	6838      	ldr	r0, [r7, #0]
 800235e:	f7ff fb09 	bl	8001974 <PutHeaderOnTx>
        PutByteOnTx(TX, 0xFF);
 8002362:	21ff      	movs	r1, #255	; 0xff
 8002364:	6838      	ldr	r0, [r7, #0]
 8002366:	f7ff fadd 	bl	8001924 <PutByteOnTx>
        PutByteOnTx(TX, TX->cks);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	7a1b      	ldrb	r3, [r3, #8]
 800236e:	4619      	mov	r1, r3
 8002370:	6838      	ldr	r0, [r7, #0]
 8002372:	f7ff fad7 	bl	8001924 <PutByteOnTx>
        break;
 8002376:	bf00      	nop
    }

}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000820 	.word	0x20000820
 8002384:	20001c34 	.word	0x20001c34
 8002388:	20001c40 	.word	0x20001c40
 800238c:	20000824 	.word	0x20000824
 8002390:	20000874 	.word	0x20000874
 8002394:	200008a4 	.word	0x200008a4
 8002398:	200008c4 	.word	0x200008c4
 800239c:	200008d4 	.word	0x200008d4
 80023a0:	200008d6 	.word	0x200008d6
 80023a4:	0800a2a4 	.word	0x0800a2a4
 80023a8:	0800a3fc 	.word	0x0800a3fc

080023ac <Do100ms>:

void Do100ms(){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
	timeOut100ms = 10;
 80023b0:	4b3c      	ldr	r3, [pc, #240]	; (80024a4 <Do100ms+0xf8>)
 80023b2:	220a      	movs	r2, #10
 80023b4:	701a      	strb	r2, [r3, #0]

	if(maskLedStatus & ledStatus)
 80023b6:	4b3c      	ldr	r3, [pc, #240]	; (80024a8 <Do100ms+0xfc>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4b3c      	ldr	r3, [pc, #240]	; (80024ac <Do100ms+0x100>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <Do100ms+0x26>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80023c4:	2201      	movs	r2, #1
 80023c6:	2120      	movs	r1, #32
 80023c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023cc:	f003 fd24 	bl	8005e18 <HAL_GPIO_WritePin>
 80023d0:	e005      	b.n	80023de <Do100ms+0x32>
	else
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2120      	movs	r1, #32
 80023d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023da:	f003 fd1d 	bl	8005e18 <HAL_GPIO_WritePin>
	maskLedStatus >>= 1;
 80023de:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <Do100ms+0xfc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	4a30      	ldr	r2, [pc, #192]	; (80024a8 <Do100ms+0xfc>)
 80023e6:	6013      	str	r3, [r2, #0]
	if(!maskLedStatus)
 80023e8:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <Do100ms+0xfc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d103      	bne.n	80023f8 <Do100ms+0x4c>
		maskLedStatus = 0x80000000;
 80023f0:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <Do100ms+0xfc>)
 80023f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80023f6:	601a      	str	r2, [r3, #0]

	if(timeOutTestMotors){
 80023f8:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <Do100ms+0x104>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d019      	beq.n	8002434 <Do100ms+0x88>
		timeOutTestMotors--;
 8002400:	4b2b      	ldr	r3, [pc, #172]	; (80024b0 <Do100ms+0x104>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <Do100ms+0x104>)
 800240a:	801a      	strh	r2, [r3, #0]
		if(!timeOutTestMotors){
 800240c:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <Do100ms+0x104>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10f      	bne.n	8002434 <Do100ms+0x88>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002414:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <Do100ms+0x108>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2200      	movs	r2, #0
 800241a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800241c:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <Do100ms+0x108>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2200      	movs	r2, #0
 8002422:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8002424:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <Do100ms+0x108>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2200      	movs	r2, #0
 800242a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 800242c:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <Do100ms+0x108>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2200      	movs	r2, #0
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}

	if(timeOutSendAlive){
 8002434:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <Do100ms+0x10c>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d030      	beq.n	800249e <Do100ms+0xf2>
		timeOutSendAlive--;
 800243c:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <Do100ms+0x10c>)
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <Do100ms+0x10c>)
 8002446:	801a      	strh	r2, [r3, #0]
		if(!timeOutSendAlive){
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <Do100ms+0x10c>)
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d126      	bne.n	800249e <Do100ms+0xf2>
			timeOutSendAlive = 200;
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <Do100ms+0x10c>)
 8002452:	22c8      	movs	r2, #200	; 0xc8
 8002454:	801a      	strh	r2, [r3, #0]
			TX.cks = 0;
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <Do100ms+0x110>)
 8002458:	2200      	movs	r2, #0
 800245a:	721a      	strb	r2, [r3, #8]
			PutHeaderOnTx(&TX, 0xF0, 2);
 800245c:	2202      	movs	r2, #2
 800245e:	21f0      	movs	r1, #240	; 0xf0
 8002460:	4816      	ldr	r0, [pc, #88]	; (80024bc <Do100ms+0x110>)
 8002462:	f7ff fa87 	bl	8001974 <PutHeaderOnTx>
			PutByteOnTx(&TX, 0x0D);
 8002466:	210d      	movs	r1, #13
 8002468:	4814      	ldr	r0, [pc, #80]	; (80024bc <Do100ms+0x110>)
 800246a:	f7ff fa5b 	bl	8001924 <PutByteOnTx>
			PutByteOnTx(&TX, TX.cks);
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <Do100ms+0x110>)
 8002470:	7a1b      	ldrb	r3, [r3, #8]
 8002472:	4619      	mov	r1, r3
 8002474:	4811      	ldr	r0, [pc, #68]	; (80024bc <Do100ms+0x110>)
 8002476:	f7ff fa55 	bl	8001924 <PutByteOnTx>
			TXESP01.cks = 0;
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <Do100ms+0x114>)
 800247c:	2200      	movs	r2, #0
 800247e:	721a      	strb	r2, [r3, #8]
			PutHeaderOnTx(&TXESP01, 0xF0, 2);
 8002480:	2202      	movs	r2, #2
 8002482:	21f0      	movs	r1, #240	; 0xf0
 8002484:	480e      	ldr	r0, [pc, #56]	; (80024c0 <Do100ms+0x114>)
 8002486:	f7ff fa75 	bl	8001974 <PutHeaderOnTx>
			PutByteOnTx(&TXESP01, 0x0D);
 800248a:	210d      	movs	r1, #13
 800248c:	480c      	ldr	r0, [pc, #48]	; (80024c0 <Do100ms+0x114>)
 800248e:	f7ff fa49 	bl	8001924 <PutByteOnTx>
			PutByteOnTx(&TXESP01, TXESP01.cks);
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <Do100ms+0x114>)
 8002494:	7a1b      	ldrb	r3, [r3, #8]
 8002496:	4619      	mov	r1, r3
 8002498:	4809      	ldr	r0, [pc, #36]	; (80024c0 <Do100ms+0x114>)
 800249a:	f7ff fa43 	bl	8001924 <PutByteOnTx>
		}
	}
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20001c3c 	.word	0x20001c3c
 80024a8:	20001c30 	.word	0x20001c30
 80024ac:	20001c34 	.word	0x20001c34
 80024b0:	20001c3e 	.word	0x20001c3e
 80024b4:	200006cc 	.word	0x200006cc
 80024b8:	20000bdc 	.word	0x20000bdc
 80024bc:	20000854 	.word	0x20000854
 80024c0:	20000864 	.word	0x20000864

080024c4 <ESP01ChEN>:


void ESP01ChEN(uint32_t value){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(CH_ENA_GPIO_Port, CH_ENA_Pin, value);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024d6:	4803      	ldr	r0, [pc, #12]	; (80024e4 <ESP01ChEN+0x20>)
 80024d8:	f003 fc9e 	bl	8005e18 <HAL_GPIO_WritePin>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	48000800 	.word	0x48000800

080024e8 <ESP01DatagramReady>:

void ESP01DatagramReady(uint8_t *buf, uint16_t length){
 80024e8:	b490      	push	{r4, r7}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<length; i++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	81fb      	strh	r3, [r7, #14]
 80024f8:	e010      	b.n	800251c <ESP01DatagramReady+0x34>
		RXESP01.buf[RXESP01.iw++] = buf[i];
 80024fa:	89fb      	ldrh	r3, [r7, #14]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	441a      	add	r2, r3
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <ESP01DatagramReady+0x48>)
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <ESP01DatagramReady+0x48>)
 8002506:	88db      	ldrh	r3, [r3, #6]
 8002508:	1c58      	adds	r0, r3, #1
 800250a:	b284      	uxth	r4, r0
 800250c:	4808      	ldr	r0, [pc, #32]	; (8002530 <ESP01DatagramReady+0x48>)
 800250e:	80c4      	strh	r4, [r0, #6]
 8002510:	440b      	add	r3, r1
 8002512:	7812      	ldrb	r2, [r2, #0]
 8002514:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<length; i++)
 8002516:	89fb      	ldrh	r3, [r7, #14]
 8002518:	3301      	adds	r3, #1
 800251a:	81fb      	strh	r3, [r7, #14]
 800251c:	89fa      	ldrh	r2, [r7, #14]
 800251e:	887b      	ldrh	r3, [r7, #2]
 8002520:	429a      	cmp	r2, r3
 8002522:	d3ea      	bcc.n	80024fa <ESP01DatagramReady+0x12>
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bc90      	pop	{r4, r7}
 800252e:	4770      	bx	lr
 8002530:	20000840 	.word	0x20000840

08002534 <ESP01WIFIConnected>:

void ESP01WIFIConnected(){
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	PutStrOntx(&TX, "+&DBGWIFI Connected\n");
 8002538:	4902      	ldr	r1, [pc, #8]	; (8002544 <ESP01WIFIConnected+0x10>)
 800253a:	4803      	ldr	r0, [pc, #12]	; (8002548 <ESP01WIFIConnected+0x14>)
 800253c:	f7ff fac7 	bl	8001ace <PutStrOntx>
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	0800a2ac 	.word	0x0800a2ac
 8002548:	20000854 	.word	0x20000854

0800254c <ESP01WIFIDisconnected>:

void ESP01WIFIDisconnected(){
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
	PutStrOntx(&TX, "+&DBGWIFI Disconnected\n");
 8002550:	4902      	ldr	r1, [pc, #8]	; (800255c <ESP01WIFIDisconnected+0x10>)
 8002552:	4803      	ldr	r0, [pc, #12]	; (8002560 <ESP01WIFIDisconnected+0x14>)
 8002554:	f7ff fabb 	bl	8001ace <PutStrOntx>
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	0800a2c4 	.word	0x0800a2c4
 8002560:	20000854 	.word	0x20000854

08002564 <ESP01UDPReady>:

void ESP01UDPReady(){
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
	PutStrOntx(&TX, "+&DBGUDP Connected\n");
 8002568:	4902      	ldr	r1, [pc, #8]	; (8002574 <ESP01UDPReady+0x10>)
 800256a:	4803      	ldr	r0, [pc, #12]	; (8002578 <ESP01UDPReady+0x14>)
 800256c:	f7ff faaf 	bl	8001ace <PutStrOntx>
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}
 8002574:	0800a2dc 	.word	0x0800a2dc
 8002578:	20000854 	.word	0x20000854

0800257c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	flag1.byte = 0;
 8002580:	4b9d      	ldr	r3, [pc, #628]	; (80027f8 <main+0x27c>)
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
	RX.buf = bufRX;
 8002586:	4b9d      	ldr	r3, [pc, #628]	; (80027fc <main+0x280>)
 8002588:	4a9d      	ldr	r2, [pc, #628]	; (8002800 <main+0x284>)
 800258a:	601a      	str	r2, [r3, #0]
	RX.header = 0;
 800258c:	4b9b      	ldr	r3, [pc, #620]	; (80027fc <main+0x280>)
 800258e:	2200      	movs	r2, #0
 8002590:	711a      	strb	r2, [r3, #4]
	RX.ir = 0;
 8002592:	4b9a      	ldr	r3, [pc, #616]	; (80027fc <main+0x280>)
 8002594:	2200      	movs	r2, #0
 8002596:	811a      	strh	r2, [r3, #8]
	RX.iw = 0;
 8002598:	4b98      	ldr	r3, [pc, #608]	; (80027fc <main+0x280>)
 800259a:	2200      	movs	r2, #0
 800259c:	80da      	strh	r2, [r3, #6]
	RX.maskSize = RXBUFSIZE - 1;
 800259e:	4b97      	ldr	r3, [pc, #604]	; (80027fc <main+0x280>)
 80025a0:	22ff      	movs	r2, #255	; 0xff
 80025a2:	821a      	strh	r2, [r3, #16]

	TX.buf = bufTX;
 80025a4:	4b97      	ldr	r3, [pc, #604]	; (8002804 <main+0x288>)
 80025a6:	4a98      	ldr	r2, [pc, #608]	; (8002808 <main+0x28c>)
 80025a8:	601a      	str	r2, [r3, #0]
	TX.ir = 0;
 80025aa:	4b96      	ldr	r3, [pc, #600]	; (8002804 <main+0x288>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	80da      	strh	r2, [r3, #6]
	TX.iw = 0;
 80025b0:	4b94      	ldr	r3, [pc, #592]	; (8002804 <main+0x288>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	809a      	strh	r2, [r3, #4]
	TX.maskSize = TXBUFSIZE - 1;
 80025b6:	4b93      	ldr	r3, [pc, #588]	; (8002804 <main+0x288>)
 80025b8:	22ff      	movs	r2, #255	; 0xff
 80025ba:	819a      	strh	r2, [r3, #12]

	RXESP01.buf = bufRXESP01;
 80025bc:	4b93      	ldr	r3, [pc, #588]	; (800280c <main+0x290>)
 80025be:	4a94      	ldr	r2, [pc, #592]	; (8002810 <main+0x294>)
 80025c0:	601a      	str	r2, [r3, #0]
	RXESP01.header = 0;
 80025c2:	4b92      	ldr	r3, [pc, #584]	; (800280c <main+0x290>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	711a      	strb	r2, [r3, #4]
	RXESP01.ir = 0;
 80025c8:	4b90      	ldr	r3, [pc, #576]	; (800280c <main+0x290>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	811a      	strh	r2, [r3, #8]
	RXESP01.iw = 0;
 80025ce:	4b8f      	ldr	r3, [pc, #572]	; (800280c <main+0x290>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	80da      	strh	r2, [r3, #6]
	RXESP01.maskSize = RXESP01BUFSIZE - 1;
 80025d4:	4b8d      	ldr	r3, [pc, #564]	; (800280c <main+0x290>)
 80025d6:	227f      	movs	r2, #127	; 0x7f
 80025d8:	821a      	strh	r2, [r3, #16]

	TXESP01.buf = bufTXESP01;
 80025da:	4b8e      	ldr	r3, [pc, #568]	; (8002814 <main+0x298>)
 80025dc:	4a8e      	ldr	r2, [pc, #568]	; (8002818 <main+0x29c>)
 80025de:	601a      	str	r2, [r3, #0]
	TXESP01.ir = 0;
 80025e0:	4b8c      	ldr	r3, [pc, #560]	; (8002814 <main+0x298>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	80da      	strh	r2, [r3, #6]
	TXESP01.iw = 0;
 80025e6:	4b8b      	ldr	r3, [pc, #556]	; (8002814 <main+0x298>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	809a      	strh	r2, [r3, #4]
	TXESP01.maskSize = TXESP01BUFSIZE - 1;
 80025ec:	4b89      	ldr	r3, [pc, #548]	; (8002814 <main+0x298>)
 80025ee:	227f      	movs	r2, #127	; 0x7f
 80025f0:	819a      	strh	r2, [r3, #12]

	timeOut100ms = 10;
 80025f2:	4b8a      	ldr	r3, [pc, #552]	; (800281c <main+0x2a0>)
 80025f4:	220a      	movs	r2, #10
 80025f6:	701a      	strb	r2, [r3, #0]
	ledStatus = LEDIDLE;
 80025f8:	4b89      	ldr	r3, [pc, #548]	; (8002820 <main+0x2a4>)
 80025fa:	f04f 4268 	mov.w	r2, #3892314112	; 0xe8000000
 80025fe:	601a      	str	r2, [r3, #0]

	indexADCData = 0;
 8002600:	4b88      	ldr	r3, [pc, #544]	; (8002824 <main+0x2a8>)
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
	indexADCData10ms -= 40;
 8002606:	4b88      	ldr	r3, [pc, #544]	; (8002828 <main+0x2ac>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	3b28      	subs	r3, #40	; 0x28
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4b86      	ldr	r3, [pc, #536]	; (8002828 <main+0x2ac>)
 8002610:	701a      	strb	r2, [r3, #0]
	indexADCData10ms &= (ADCDATASIZE - 1);
 8002612:	4b85      	ldr	r3, [pc, #532]	; (8002828 <main+0x2ac>)
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	4b84      	ldr	r3, [pc, #528]	; (8002828 <main+0x2ac>)
 8002618:	701a      	strb	r2, [r3, #0]

	timeOutTestMotors = 0;
 800261a:	4b84      	ldr	r3, [pc, #528]	; (800282c <main+0x2b0>)
 800261c:	2200      	movs	r2, #0
 800261e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002620:	f001 f93c 	bl	800389c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002624:	f000 fa8a 	bl	8002b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002628:	f000 fdd2 	bl	80031d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800262c:	f000 fdb2 	bl	8003194 <MX_DMA_Init>
  MX_ADC1_Init();
 8002630:	f000 faf0 	bl	8002c14 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002634:	f000 fb8c 	bl	8002d50 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002638:	f000 fc0c 	bl	8002e54 <MX_ADC3_Init>
  MX_TIM3_Init();
 800263c:	f000 fcce 	bl	8002fdc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002640:	f000 fd48 	bl	80030d4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002644:	f000 fd76 	bl	8003134 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002648:	f000 fc74 	bl	8002f34 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  indexADCData = 0;
 800264c:	4b75      	ldr	r3, [pc, #468]	; (8002824 <main+0x2a8>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim1);
 8002652:	4877      	ldr	r0, [pc, #476]	; (8002830 <main+0x2b4>)
 8002654:	f005 f960 	bl	8007918 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &RX.buf[RX.iw], 1);
 8002658:	4b68      	ldr	r3, [pc, #416]	; (80027fc <main+0x280>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a67      	ldr	r2, [pc, #412]	; (80027fc <main+0x280>)
 800265e:	88d2      	ldrh	r2, [r2, #6]
 8002660:	4413      	add	r3, r2
 8002662:	2201      	movs	r2, #1
 8002664:	4619      	mov	r1, r3
 8002666:	4873      	ldr	r0, [pc, #460]	; (8002834 <main+0x2b8>)
 8002668:	f006 fc48 	bl	8008efc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &auxDataRXESP01, 1);
 800266c:	2201      	movs	r2, #1
 800266e:	4972      	ldr	r1, [pc, #456]	; (8002838 <main+0x2bc>)
 8002670:	4872      	ldr	r0, [pc, #456]	; (800283c <main+0x2c0>)
 8002672:	f006 fc43 	bl	8008efc <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start(&htim3);
 8002676:	4872      	ldr	r0, [pc, #456]	; (8002840 <main+0x2c4>)
 8002678:	f005 f8e6 	bl	8007848 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800267c:	2100      	movs	r1, #0
 800267e:	4870      	ldr	r0, [pc, #448]	; (8002840 <main+0x2c4>)
 8002680:	f005 fa12 	bl	8007aa8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002684:	2104      	movs	r1, #4
 8002686:	486e      	ldr	r0, [pc, #440]	; (8002840 <main+0x2c4>)
 8002688:	f005 fa0e 	bl	8007aa8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800268c:	2108      	movs	r1, #8
 800268e:	486c      	ldr	r0, [pc, #432]	; (8002840 <main+0x2c4>)
 8002690:	f005 fa0a 	bl	8007aa8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002694:	210c      	movs	r1, #12
 8002696:	486a      	ldr	r0, [pc, #424]	; (8002840 <main+0x2c4>)
 8002698:	f005 fa06 	bl	8007aa8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800269c:	4b68      	ldr	r3, [pc, #416]	; (8002840 <main+0x2c4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2200      	movs	r2, #0
 80026a2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80026a4:	4b66      	ldr	r3, [pc, #408]	; (8002840 <main+0x2c4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2200      	movs	r2, #0
 80026aa:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80026ac:	4b64      	ldr	r3, [pc, #400]	; (8002840 <main+0x2c4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2200      	movs	r2, #0
 80026b2:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80026b4:	4b62      	ldr	r3, [pc, #392]	; (8002840 <main+0x2c4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2200      	movs	r2, #0
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(CH_ENA_GPIO_Port, CH_ENA_Pin, GPIO_PIN_SET);
 80026bc:	2201      	movs	r2, #1
 80026be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026c2:	4860      	ldr	r0, [pc, #384]	; (8002844 <main+0x2c8>)
 80026c4:	f003 fba8 	bl	8005e18 <HAL_GPIO_WritePin>
  ESP01Init((ESP01GpioWriteCH_EN *)&ESP01ChEN, (ESP01OnUDPData *)&ESP01DatagramReady);
 80026c8:	495f      	ldr	r1, [pc, #380]	; (8002848 <main+0x2cc>)
 80026ca:	4860      	ldr	r0, [pc, #384]	; (800284c <main+0x2d0>)
 80026cc:	f7fd fd82 	bl	80001d4 <ESP01Init>
  ESP01AttachOnWIFIConnected((ESP01OnWIFIConnected *)&ESP01WIFIConnected);
 80026d0:	485f      	ldr	r0, [pc, #380]	; (8002850 <main+0x2d4>)
 80026d2:	f7fe f829 	bl	8000728 <ESP01AttachOnWIFIConnected>
  ESP01AttachOnWIFIDisconnected((ESP01OnWIFIDisconnected *)&ESP01WIFIDisconnected);
 80026d6:	485f      	ldr	r0, [pc, #380]	; (8002854 <main+0x2d8>)
 80026d8:	f7fe f836 	bl	8000748 <ESP01AttachOnWIFIDisconnected>
  ESP01AttachOnUDPReady((ESP01OnUDPReady *)&ESP01UDPReady);
 80026dc:	485e      	ldr	r0, [pc, #376]	; (8002858 <main+0x2dc>)
 80026de:	f7fe f843 	bl	8000768 <ESP01AttachOnUDPReady>


  lastTickValue = HAL_GetTick();
 80026e2:	f001 f935 	bl	8003950 <HAL_GetTick>
 80026e6:	4603      	mov	r3, r0
 80026e8:	4a5c      	ldr	r2, [pc, #368]	; (800285c <main+0x2e0>)
 80026ea:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!timeOut100ms)
 80026ec:	4b4b      	ldr	r3, [pc, #300]	; (800281c <main+0x2a0>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <main+0x17c>
		  Do100ms();
 80026f4:	f7ff fe5a 	bl	80023ac <Do100ms>

	  if((HAL_GetTick()-lastTickValue) >= 10){
 80026f8:	f001 f92a 	bl	8003950 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b57      	ldr	r3, [pc, #348]	; (800285c <main+0x2e0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b09      	cmp	r3, #9
 8002706:	d930      	bls.n	800276a <main+0x1ee>
		  lastTickValue = HAL_GetTick();
 8002708:	f001 f922 	bl	8003950 <HAL_GetTick>
 800270c:	4603      	mov	r3, r0
 800270e:	4a53      	ldr	r2, [pc, #332]	; (800285c <main+0x2e0>)
 8002710:	6013      	str	r3, [r2, #0]

		  if(RX.header){
 8002712:	4b3a      	ldr	r3, [pc, #232]	; (80027fc <main+0x280>)
 8002714:	791b      	ldrb	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <main+0x1b8>
			  RX.timeout--;
 800271a:	4b38      	ldr	r3, [pc, #224]	; (80027fc <main+0x280>)
 800271c:	7b1b      	ldrb	r3, [r3, #12]
 800271e:	3b01      	subs	r3, #1
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4b36      	ldr	r3, [pc, #216]	; (80027fc <main+0x280>)
 8002724:	731a      	strb	r2, [r3, #12]
			  if(!RX.timeout)
 8002726:	4b35      	ldr	r3, [pc, #212]	; (80027fc <main+0x280>)
 8002728:	7b1b      	ldrb	r3, [r3, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <main+0x1b8>
				  RX.header = 0;
 800272e:	4b33      	ldr	r3, [pc, #204]	; (80027fc <main+0x280>)
 8002730:	2200      	movs	r2, #0
 8002732:	711a      	strb	r2, [r3, #4]
		  }

		  if(timeOut100ms)
 8002734:	4b39      	ldr	r3, [pc, #228]	; (800281c <main+0x2a0>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <main+0x1cc>
			  timeOut100ms--;
 800273c:	4b37      	ldr	r3, [pc, #220]	; (800281c <main+0x2a0>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	3b01      	subs	r3, #1
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b35      	ldr	r3, [pc, #212]	; (800281c <main+0x2a0>)
 8002746:	701a      	strb	r2, [r3, #0]

		  if(timeOutPlus){
 8002748:	4b45      	ldr	r3, [pc, #276]	; (8002860 <main+0x2e4>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00c      	beq.n	800276a <main+0x1ee>
			  timeOutPlus--;
 8002750:	4b43      	ldr	r3, [pc, #268]	; (8002860 <main+0x2e4>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	3b01      	subs	r3, #1
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4b41      	ldr	r3, [pc, #260]	; (8002860 <main+0x2e4>)
 800275a:	701a      	strb	r2, [r3, #0]
			  if(!timeOutPlus)
 800275c:	4b40      	ldr	r3, [pc, #256]	; (8002860 <main+0x2e4>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d102      	bne.n	800276a <main+0x1ee>
				  countPlus = 0;
 8002764:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <main+0x2e8>)
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
		  }


	  }

	  if(RX.ISCMD)
 800276a:	4b24      	ldr	r3, [pc, #144]	; (80027fc <main+0x280>)
 800276c:	7c9b      	ldrb	r3, [r3, #18]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <main+0x1fe>
		  DecodeCmd(&RX, &TX);
 8002772:	4924      	ldr	r1, [pc, #144]	; (8002804 <main+0x288>)
 8002774:	4821      	ldr	r0, [pc, #132]	; (80027fc <main+0x280>)
 8002776:	f7ff fa1b 	bl	8001bb0 <DecodeCmd>

	  if(RX.ir != RX.iw)
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <main+0x280>)
 800277c:	891a      	ldrh	r2, [r3, #8]
 800277e:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <main+0x280>)
 8002780:	88db      	ldrh	r3, [r3, #6]
 8002782:	429a      	cmp	r2, r3
 8002784:	d002      	beq.n	800278c <main+0x210>
		  DecodeHeader(&RX);
 8002786:	481d      	ldr	r0, [pc, #116]	; (80027fc <main+0x280>)
 8002788:	f7fe ff98 	bl	80016bc <DecodeHeader>

	  if(RXESP01.ISCMD)
 800278c:	4b1f      	ldr	r3, [pc, #124]	; (800280c <main+0x290>)
 800278e:	7c9b      	ldrb	r3, [r3, #18]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <main+0x220>
		  DecodeCmd(&RXESP01, &TXESP01);
 8002794:	491f      	ldr	r1, [pc, #124]	; (8002814 <main+0x298>)
 8002796:	481d      	ldr	r0, [pc, #116]	; (800280c <main+0x290>)
 8002798:	f7ff fa0a 	bl	8001bb0 <DecodeCmd>

	  if(RXESP01.ir != RXESP01.iw)
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <main+0x290>)
 800279e:	891a      	ldrh	r2, [r3, #8]
 80027a0:	4b1a      	ldr	r3, [pc, #104]	; (800280c <main+0x290>)
 80027a2:	88db      	ldrh	r3, [r3, #6]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d002      	beq.n	80027ae <main+0x232>
		  DecodeHeader(&RXESP01);
 80027a8:	4818      	ldr	r0, [pc, #96]	; (800280c <main+0x290>)
 80027aa:	f7fe ff87 	bl	80016bc <DecodeHeader>

	  if(ANALOGREADY){
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <main+0x27c>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8119 	beq.w	80029f0 <main+0x474>
		  ANALOGREADY = 0;
 80027be:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <main+0x27c>)
 80027c0:	7813      	ldrb	r3, [r2, #0]
 80027c2:	f36f 0341 	bfc	r3, #1, #1
 80027c6:	7013      	strb	r3, [r2, #0]
		  if(CONTAVERAGE){
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <main+0x27c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d074      	beq.n	80028c0 <main+0x344>
			  TX.cks = 0;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <main+0x288>)
 80027d8:	2200      	movs	r2, #0
 80027da:	721a      	strb	r2, [r3, #8]
			  PutHeaderOnTx(&TX, 0xA2, 16+2);
 80027dc:	2212      	movs	r2, #18
 80027de:	21a2      	movs	r1, #162	; 0xa2
 80027e0:	4808      	ldr	r0, [pc, #32]	; (8002804 <main+0x288>)
 80027e2:	f7ff f8c7 	bl	8001974 <PutHeaderOnTx>
			  PutByteOnTx(&TX, 0x0A);
 80027e6:	210a      	movs	r1, #10
 80027e8:	4806      	ldr	r0, [pc, #24]	; (8002804 <main+0x288>)
 80027ea:	f7ff f89b 	bl	8001924 <PutByteOnTx>
			  for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 80027ee:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <main+0x2ec>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	709a      	strb	r2, [r3, #2]
 80027f4:	e059      	b.n	80028aa <main+0x32e>
 80027f6:	bf00      	nop
 80027f8:	20000820 	.word	0x20000820
 80027fc:	2000082c 	.word	0x2000082c
 8002800:	200008d8 	.word	0x200008d8
 8002804:	20000854 	.word	0x20000854
 8002808:	20000a5c 	.word	0x20000a5c
 800280c:	20000840 	.word	0x20000840
 8002810:	200009d8 	.word	0x200009d8
 8002814:	20000864 	.word	0x20000864
 8002818:	20000b5c 	.word	0x20000b5c
 800281c:	20001c3c 	.word	0x20001c3c
 8002820:	20001c34 	.word	0x20001c34
 8002824:	20001be0 	.word	0x20001be0
 8002828:	20001be1 	.word	0x20001be1
 800282c:	20001c3e 	.word	0x20001c3e
 8002830:	20000680 	.word	0x20000680
 8002834:	20000718 	.word	0x20000718
 8002838:	20000a58 	.word	0x20000a58
 800283c:	2000079c 	.word	0x2000079c
 8002840:	200006cc 	.word	0x200006cc
 8002844:	48000800 	.word	0x48000800
 8002848:	080024e9 	.word	0x080024e9
 800284c:	080024c5 	.word	0x080024c5
 8002850:	08002535 	.word	0x08002535
 8002854:	0800254d 	.word	0x0800254d
 8002858:	08002565 	.word	0x08002565
 800285c:	20001c38 	.word	0x20001c38
 8002860:	20001c41 	.word	0x20001c41
 8002864:	20001c40 	.word	0x20001c40
 8002868:	20000824 	.word	0x20000824
				  w.u16[0] = sumADCDataLock[w.u8[2]]/40;
 800286c:	4b87      	ldr	r3, [pc, #540]	; (8002a8c <main+0x510>)
 800286e:	789b      	ldrb	r3, [r3, #2]
 8002870:	461a      	mov	r2, r3
 8002872:	4b87      	ldr	r3, [pc, #540]	; (8002a90 <main+0x514>)
 8002874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002878:	4a86      	ldr	r2, [pc, #536]	; (8002a94 <main+0x518>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	b29a      	uxth	r2, r3
 8002882:	4b82      	ldr	r3, [pc, #520]	; (8002a8c <main+0x510>)
 8002884:	801a      	strh	r2, [r3, #0]
				  PutByteOnTx(&TX, w.u8[0]);
 8002886:	4b81      	ldr	r3, [pc, #516]	; (8002a8c <main+0x510>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	4619      	mov	r1, r3
 800288c:	4882      	ldr	r0, [pc, #520]	; (8002a98 <main+0x51c>)
 800288e:	f7ff f849 	bl	8001924 <PutByteOnTx>
				  PutByteOnTx(&TX, w.u8[1]);
 8002892:	4b7e      	ldr	r3, [pc, #504]	; (8002a8c <main+0x510>)
 8002894:	785b      	ldrb	r3, [r3, #1]
 8002896:	4619      	mov	r1, r3
 8002898:	487f      	ldr	r0, [pc, #508]	; (8002a98 <main+0x51c>)
 800289a:	f7ff f843 	bl	8001924 <PutByteOnTx>
			  for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 800289e:	4b7b      	ldr	r3, [pc, #492]	; (8002a8c <main+0x510>)
 80028a0:	789b      	ldrb	r3, [r3, #2]
 80028a2:	3301      	adds	r3, #1
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4b79      	ldr	r3, [pc, #484]	; (8002a8c <main+0x510>)
 80028a8:	709a      	strb	r2, [r3, #2]
 80028aa:	4b78      	ldr	r3, [pc, #480]	; (8002a8c <main+0x510>)
 80028ac:	789b      	ldrb	r3, [r3, #2]
 80028ae:	2b07      	cmp	r3, #7
 80028b0:	d9dc      	bls.n	800286c <main+0x2f0>
			  }
			  PutByteOnTx(&TX, TX.cks);
 80028b2:	4b79      	ldr	r3, [pc, #484]	; (8002a98 <main+0x51c>)
 80028b4:	7a1b      	ldrb	r3, [r3, #8]
 80028b6:	4619      	mov	r1, r3
 80028b8:	4877      	ldr	r0, [pc, #476]	; (8002a98 <main+0x51c>)
 80028ba:	f7ff f833 	bl	8001924 <PutByteOnTx>
 80028be:	e097      	b.n	80029f0 <main+0x474>
		  }
		  else{
			  TX.cks = 0;
 80028c0:	4b75      	ldr	r3, [pc, #468]	; (8002a98 <main+0x51c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	721a      	strb	r2, [r3, #8]
			  w.u8[3] = iADCDataReady;
 80028c6:	4b75      	ldr	r3, [pc, #468]	; (8002a9c <main+0x520>)
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	4b70      	ldr	r3, [pc, #448]	; (8002a8c <main+0x510>)
 80028cc:	70da      	strb	r2, [r3, #3]
			  w.u8[3] -= (n10msData*40);
 80028ce:	4b6f      	ldr	r3, [pc, #444]	; (8002a8c <main+0x510>)
 80028d0:	78da      	ldrb	r2, [r3, #3]
 80028d2:	4b73      	ldr	r3, [pc, #460]	; (8002aa0 <main+0x524>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	4619      	mov	r1, r3
 80028d8:	0049      	lsls	r1, r1, #1
 80028da:	440b      	add	r3, r1
 80028dc:	4619      	mov	r1, r3
 80028de:	00c8      	lsls	r0, r1, #3
 80028e0:	4619      	mov	r1, r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	440b      	add	r3, r1
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4b67      	ldr	r3, [pc, #412]	; (8002a8c <main+0x510>)
 80028f0:	70da      	strb	r2, [r3, #3]
			  w.u8[3] &= (ADCDATASIZE - 1);
 80028f2:	4b66      	ldr	r3, [pc, #408]	; (8002a8c <main+0x510>)
 80028f4:	78da      	ldrb	r2, [r3, #3]
 80028f6:	4b65      	ldr	r3, [pc, #404]	; (8002a8c <main+0x510>)
 80028f8:	70da      	strb	r2, [r3, #3]
			  w.u8[2] = n10msData*5 + 1;
 80028fa:	4b69      	ldr	r3, [pc, #420]	; (8002aa0 <main+0x524>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	0092      	lsls	r2, r2, #2
 8002902:	4413      	add	r3, r2
 8002904:	b2db      	uxtb	r3, r3
 8002906:	3301      	adds	r3, #1
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4b60      	ldr	r3, [pc, #384]	; (8002a8c <main+0x510>)
 800290c:	709a      	strb	r2, [r3, #2]
			  w.u8[2] *= 16;
 800290e:	4b5f      	ldr	r3, [pc, #380]	; (8002a8c <main+0x510>)
 8002910:	789b      	ldrb	r3, [r3, #2]
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4b5d      	ldr	r3, [pc, #372]	; (8002a8c <main+0x510>)
 8002918:	709a      	strb	r2, [r3, #2]
			  PutHeaderOnTx(&TX, 0xA1, w.u8[2]+3);
 800291a:	4b5c      	ldr	r3, [pc, #368]	; (8002a8c <main+0x510>)
 800291c:	789b      	ldrb	r3, [r3, #2]
 800291e:	3303      	adds	r3, #3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	21a1      	movs	r1, #161	; 0xa1
 8002926:	485c      	ldr	r0, [pc, #368]	; (8002a98 <main+0x51c>)
 8002928:	f7ff f824 	bl	8001974 <PutHeaderOnTx>
			  PutByteOnTx(&TX, 0x0A);
 800292c:	210a      	movs	r1, #10
 800292e:	485a      	ldr	r0, [pc, #360]	; (8002a98 <main+0x51c>)
 8002930:	f7fe fff8 	bl	8001924 <PutByteOnTx>
			  w.u8[2] /= 16;
 8002934:	4b55      	ldr	r3, [pc, #340]	; (8002a8c <main+0x510>)
 8002936:	789b      	ldrb	r3, [r3, #2]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	b2da      	uxtb	r2, r3
 800293c:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <main+0x510>)
 800293e:	709a      	strb	r2, [r3, #2]
			  w.u8[2]--;
 8002940:	4b52      	ldr	r3, [pc, #328]	; (8002a8c <main+0x510>)
 8002942:	789b      	ldrb	r3, [r3, #2]
 8002944:	3b01      	subs	r3, #1
 8002946:	b2da      	uxtb	r2, r3
 8002948:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <main+0x510>)
 800294a:	709a      	strb	r2, [r3, #2]
			  PutByteOnTx(&TX, w.u8[2]);
 800294c:	4b4f      	ldr	r3, [pc, #316]	; (8002a8c <main+0x510>)
 800294e:	789b      	ldrb	r3, [r3, #2]
 8002950:	4619      	mov	r1, r3
 8002952:	4851      	ldr	r0, [pc, #324]	; (8002a98 <main+0x51c>)
 8002954:	f7fe ffe6 	bl	8001924 <PutByteOnTx>
			  while(w.u8[2]){
 8002958:	e019      	b.n	800298e <main+0x412>
				  PutBufOnTx(&TX, (uint8_t *)&ADCData[w.u8[3]], 16);
 800295a:	4b4c      	ldr	r3, [pc, #304]	; (8002a8c <main+0x510>)
 800295c:	78db      	ldrb	r3, [r3, #3]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	4a50      	ldr	r2, [pc, #320]	; (8002aa4 <main+0x528>)
 8002962:	4413      	add	r3, r2
 8002964:	2210      	movs	r2, #16
 8002966:	4619      	mov	r1, r3
 8002968:	484b      	ldr	r0, [pc, #300]	; (8002a98 <main+0x51c>)
 800296a:	f7fe ffa3 	bl	80018b4 <PutBufOnTx>
				  w.u8[3] += 8;
 800296e:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <main+0x510>)
 8002970:	78db      	ldrb	r3, [r3, #3]
 8002972:	3308      	adds	r3, #8
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4b45      	ldr	r3, [pc, #276]	; (8002a8c <main+0x510>)
 8002978:	70da      	strb	r2, [r3, #3]
				  w.u8[3] &= (ADCDATASIZE-1);
 800297a:	4b44      	ldr	r3, [pc, #272]	; (8002a8c <main+0x510>)
 800297c:	78da      	ldrb	r2, [r3, #3]
 800297e:	4b43      	ldr	r3, [pc, #268]	; (8002a8c <main+0x510>)
 8002980:	70da      	strb	r2, [r3, #3]
				  w.u8[2]--;
 8002982:	4b42      	ldr	r3, [pc, #264]	; (8002a8c <main+0x510>)
 8002984:	789b      	ldrb	r3, [r3, #2]
 8002986:	3b01      	subs	r3, #1
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b40      	ldr	r3, [pc, #256]	; (8002a8c <main+0x510>)
 800298c:	709a      	strb	r2, [r3, #2]
			  while(w.u8[2]){
 800298e:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <main+0x510>)
 8002990:	789b      	ldrb	r3, [r3, #2]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1e1      	bne.n	800295a <main+0x3de>
			  }
			  for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 8002996:	4b3d      	ldr	r3, [pc, #244]	; (8002a8c <main+0x510>)
 8002998:	2200      	movs	r2, #0
 800299a:	709a      	strb	r2, [r3, #2]
 800299c:	e01e      	b.n	80029dc <main+0x460>
				  w.u16[0] = sumADCDataLock[w.u8[2]]/40;
 800299e:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <main+0x510>)
 80029a0:	789b      	ldrb	r3, [r3, #2]
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <main+0x514>)
 80029a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029aa:	4a3a      	ldr	r2, [pc, #232]	; (8002a94 <main+0x518>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	4b35      	ldr	r3, [pc, #212]	; (8002a8c <main+0x510>)
 80029b6:	801a      	strh	r2, [r3, #0]
				  PutByteOnTx(&TX, w.u8[0]);
 80029b8:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <main+0x510>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	4836      	ldr	r0, [pc, #216]	; (8002a98 <main+0x51c>)
 80029c0:	f7fe ffb0 	bl	8001924 <PutByteOnTx>
				  PutByteOnTx(&TX, w.u8[1]);
 80029c4:	4b31      	ldr	r3, [pc, #196]	; (8002a8c <main+0x510>)
 80029c6:	785b      	ldrb	r3, [r3, #1]
 80029c8:	4619      	mov	r1, r3
 80029ca:	4833      	ldr	r0, [pc, #204]	; (8002a98 <main+0x51c>)
 80029cc:	f7fe ffaa 	bl	8001924 <PutByteOnTx>
			  for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 80029d0:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <main+0x510>)
 80029d2:	789b      	ldrb	r3, [r3, #2]
 80029d4:	3301      	adds	r3, #1
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <main+0x510>)
 80029da:	709a      	strb	r2, [r3, #2]
 80029dc:	4b2b      	ldr	r3, [pc, #172]	; (8002a8c <main+0x510>)
 80029de:	789b      	ldrb	r3, [r3, #2]
 80029e0:	2b07      	cmp	r3, #7
 80029e2:	d9dc      	bls.n	800299e <main+0x422>
			  }
			  PutByteOnTx(&TX, TX.cks);
 80029e4:	4b2c      	ldr	r3, [pc, #176]	; (8002a98 <main+0x51c>)
 80029e6:	7a1b      	ldrb	r3, [r3, #8]
 80029e8:	4619      	mov	r1, r3
 80029ea:	482b      	ldr	r0, [pc, #172]	; (8002a98 <main+0x51c>)
 80029ec:	f7fe ff9a 	bl	8001924 <PutByteOnTx>
		  }
	  }

	  if(TX.ir != TX.iw){
 80029f0:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <main+0x51c>)
 80029f2:	88da      	ldrh	r2, [r3, #6]
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <main+0x51c>)
 80029f6:	889b      	ldrh	r3, [r3, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d01c      	beq.n	8002a36 <main+0x4ba>
		  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE)){
 80029fc:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <main+0x52c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a06:	2b80      	cmp	r3, #128	; 0x80
 8002a08:	d115      	bne.n	8002a36 <main+0x4ba>
			  huart2.Instance->TDR = TX.buf[TX.ir++];
 8002a0a:	4b23      	ldr	r3, [pc, #140]	; (8002a98 <main+0x51c>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <main+0x51c>)
 8002a10:	88db      	ldrh	r3, [r3, #6]
 8002a12:	1c59      	adds	r1, r3, #1
 8002a14:	b288      	uxth	r0, r1
 8002a16:	4920      	ldr	r1, [pc, #128]	; (8002a98 <main+0x51c>)
 8002a18:	80c8      	strh	r0, [r1, #6]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <main+0x52c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	b292      	uxth	r2, r2
 8002a24:	851a      	strh	r2, [r3, #40]	; 0x28
			  TX.ir &= TX.maskSize;
 8002a26:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <main+0x51c>)
 8002a28:	88da      	ldrh	r2, [r3, #6]
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <main+0x51c>)
 8002a2c:	899b      	ldrh	r3, [r3, #12]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <main+0x51c>)
 8002a34:	80da      	strh	r2, [r3, #6]
		  }
	  }

	  if(ESP01DEBUG){
 8002a36:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <main+0x530>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d039      	beq.n	8002ab8 <main+0x53c>
		  if(TXESP01.ir != TXESP01.iw){
 8002a44:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <main+0x534>)
 8002a46:	88da      	ldrh	r2, [r3, #6]
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <main+0x534>)
 8002a4a:	889b      	ldrh	r3, [r3, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d06b      	beq.n	8002b28 <main+0x5ac>
			  if(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE)){
 8002a50:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <main+0x538>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5a:	2b80      	cmp	r3, #128	; 0x80
 8002a5c:	d164      	bne.n	8002b28 <main+0x5ac>
				  huart3.Instance->TDR = TXESP01.buf[TXESP01.ir++];
 8002a5e:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <main+0x534>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <main+0x534>)
 8002a64:	88db      	ldrh	r3, [r3, #6]
 8002a66:	1c59      	adds	r1, r3, #1
 8002a68:	b288      	uxth	r0, r1
 8002a6a:	4911      	ldr	r1, [pc, #68]	; (8002ab0 <main+0x534>)
 8002a6c:	80c8      	strh	r0, [r1, #6]
 8002a6e:	4413      	add	r3, r2
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <main+0x538>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	b292      	uxth	r2, r2
 8002a78:	851a      	strh	r2, [r3, #40]	; 0x28
				  TXESP01.ir &= TXESP01.maskSize;
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <main+0x534>)
 8002a7c:	88da      	ldrh	r2, [r3, #6]
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <main+0x534>)
 8002a80:	899b      	ldrh	r3, [r3, #12]
 8002a82:	4013      	ands	r3, r2
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <main+0x534>)
 8002a88:	80da      	strh	r2, [r3, #6]
 8002a8a:	e04d      	b.n	8002b28 <main+0x5ac>
 8002a8c:	20000824 	.word	0x20000824
 8002a90:	20001c08 	.word	0x20001c08
 8002a94:	cccccccd 	.word	0xcccccccd
 8002a98:	20000854 	.word	0x20000854
 8002a9c:	20001be2 	.word	0x20001be2
 8002aa0:	20001c2c 	.word	0x20001c2c
 8002aa4:	20000be0 	.word	0x20000be0
 8002aa8:	20000718 	.word	0x20000718
 8002aac:	20000820 	.word	0x20000820
 8002ab0:	20000864 	.word	0x20000864
 8002ab4:	2000079c 	.word	0x2000079c
			  }
		  }
	  }
	  else{
		  if(TXESP01.iw != TXESP01.ir){
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <main+0x5b4>)
 8002aba:	889a      	ldrh	r2, [r3, #4]
 8002abc:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <main+0x5b4>)
 8002abe:	88db      	ldrh	r3, [r3, #6]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d019      	beq.n	8002af8 <main+0x57c>
			  w.u16[0] = TXESP01.iw - TXESP01.ir;
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <main+0x5b4>)
 8002ac6:	889a      	ldrh	r2, [r3, #4]
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <main+0x5b4>)
 8002aca:	88db      	ldrh	r3, [r3, #6]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <main+0x5b8>)
 8002ad2:	801a      	strh	r2, [r3, #0]
			  if(ESP01SendUDPData(&TXESP01.buf[TXESP01.ir], w.u16[0], TXESP01BUFSIZE))
 8002ad4:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <main+0x5b4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <main+0x5b4>)
 8002ada:	88d2      	ldrh	r2, [r2, #6]
 8002adc:	4413      	add	r3, r2
 8002ade:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <main+0x5b8>)
 8002ae0:	8811      	ldrh	r1, [r2, #0]
 8002ae2:	2280      	movs	r2, #128	; 0x80
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fd39 	bl	800055c <ESP01SendUDPData>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <main+0x57c>
				  TXESP01.iw = TXESP01.ir;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <main+0x5b4>)
 8002af2:	88da      	ldrh	r2, [r3, #6]
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <main+0x5b4>)
 8002af6:	809a      	strh	r2, [r3, #4]
		  }

		  if(ESP01HasByteToTx()){
 8002af8:	f7fd fce4 	bl	80004c4 <ESP01HasByteToTx>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d012      	beq.n	8002b28 <main+0x5ac>
			  if(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE)){
 8002b02:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <main+0x5bc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0c:	2b80      	cmp	r3, #128	; 0x80
 8002b0e:	d10b      	bne.n	8002b28 <main+0x5ac>
				  if(ESP01GetTxByte(&w.u8[0]))
 8002b10:	4808      	ldr	r0, [pc, #32]	; (8002b34 <main+0x5b8>)
 8002b12:	f7fd fcf3 	bl	80004fc <ESP01GetTxByte>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <main+0x5ac>
					  huart3.Instance->TDR = w.u8[0];
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <main+0x5b8>)
 8002b1e:	781a      	ldrb	r2, [r3, #0]
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <main+0x5bc>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	b292      	uxth	r2, r2
 8002b26:	851a      	strh	r2, [r3, #40]	; 0x28
			  }
		  }
	  }


	  ESP01Task();
 8002b28:	f7fd fddc 	bl	80006e4 <ESP01Task>
	  if(!timeOut100ms)
 8002b2c:	e5de      	b.n	80026ec <main+0x170>
 8002b2e:	bf00      	nop
 8002b30:	20000864 	.word	0x20000864
 8002b34:	20000824 	.word	0x20000824
 8002b38:	2000079c 	.word	0x2000079c

08002b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b0a6      	sub	sp, #152	; 0x98
 8002b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b46:	2228      	movs	r2, #40	; 0x28
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f007 fb82 	bl	800a254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	2258      	movs	r2, #88	; 0x58
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f007 fb74 	bl	800a254 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002b70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002b74:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b76:	2301      	movs	r3, #1
 8002b78:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b88:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 f954 	bl	8005e48 <HAL_RCC_OscConfig>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002ba6:	f000 fba1 	bl	80032ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002baa:	230f      	movs	r3, #15
 8002bac:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f004 f992 	bl	8006ef0 <HAL_RCC_ClockConfig>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002bd2:	f000 fb8b 	bl	80032ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <SystemClock_Config+0xd4>)
 8002bd8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC34|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV6;
 8002be2:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV6;
 8002be8:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8002bec:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bf6:	1d3b      	adds	r3, r7, #4
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f004 fbaf 	bl	800735c <HAL_RCCEx_PeriphCLKConfig>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002c04:	f000 fb72 	bl	80032ec <Error_Handler>
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3798      	adds	r7, #152	; 0x98
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	00201186 	.word	0x00201186

08002c14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002c1a:	f107 031c 	add.w	r3, r7, #28
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
 8002c34:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002c36:	4b45      	ldr	r3, [pc, #276]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002c38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002c3e:	4b43      	ldr	r3, [pc, #268]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c44:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002c4a:	4b40      	ldr	r3, [pc, #256]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c50:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c56:	4b3d      	ldr	r3, [pc, #244]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c64:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c6a:	4b38      	ldr	r3, [pc, #224]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002c70:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002c72:	2204      	movs	r2, #4
 8002c74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002c76:	4b35      	ldr	r3, [pc, #212]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002c7e:	4b33      	ldr	r3, [pc, #204]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002c80:	2208      	movs	r2, #8
 8002c82:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002c84:	4b31      	ldr	r3, [pc, #196]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002c8a:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c90:	482e      	ldr	r0, [pc, #184]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002c92:	f000 fe87 	bl	80039a4 <HAL_ADC_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002c9c:	f000 fb26 	bl	80032ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8002ca0:	2306      	movs	r3, #6
 8002ca2:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8002ca4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ca8:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002cae:	f107 031c 	add.w	r3, r7, #28
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4825      	ldr	r0, [pc, #148]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002cb6:	f002 f9c7 	bl	8005048 <HAL_ADCEx_MultiModeConfigChannel>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002cc0:	f000 fb14 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	4619      	mov	r1, r3
 8002ce0:	481a      	ldr	r0, [pc, #104]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002ce2:	f001 fec5 	bl	8004a70 <HAL_ADC_ConfigChannel>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002cec:	f000 fafe 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4813      	ldr	r0, [pc, #76]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002cfe:	f001 feb7 	bl	8004a70 <HAL_ADC_ConfigChannel>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002d08:	f000 faf0 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002d0c:	2306      	movs	r3, #6
 8002d0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002d10:	2303      	movs	r3, #3
 8002d12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	4619      	mov	r1, r3
 8002d18:	480c      	ldr	r0, [pc, #48]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002d1a:	f001 fea9 	bl	8004a70 <HAL_ADC_ConfigChannel>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8002d24:	f000 fae2 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002d28:	2307      	movs	r3, #7
 8002d2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002d2c:	2304      	movs	r3, #4
 8002d2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	4619      	mov	r1, r3
 8002d34:	4805      	ldr	r0, [pc, #20]	; (8002d4c <MX_ADC1_Init+0x138>)
 8002d36:	f001 fe9b 	bl	8004a70 <HAL_ADC_ConfigChannel>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8002d40:	f000 fad4 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d44:	bf00      	nop
 8002d46:	3728      	adds	r7, #40	; 0x28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	2000054c 	.word	0x2000054c

08002d50 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d56:	463b      	mov	r3, r7
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]
 8002d64:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002d66:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002d68:	4a39      	ldr	r2, [pc, #228]	; (8002e50 <MX_ADC2_Init+0x100>)
 8002d6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002d6c:	4b37      	ldr	r3, [pc, #220]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002d72:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002d78:	4b34      	ldr	r3, [pc, #208]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002d7e:	4b33      	ldr	r3, [pc, #204]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002d84:	4b31      	ldr	r3, [pc, #196]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d8c:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8002d92:	4b2e      	ldr	r3, [pc, #184]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002d94:	2204      	movs	r2, #4
 8002d96:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002d98:	4b2c      	ldr	r3, [pc, #176]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002da0:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002da2:	2208      	movs	r2, #8
 8002da4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002da6:	4b29      	ldr	r3, [pc, #164]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002dac:	4b27      	ldr	r3, [pc, #156]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002db2:	4826      	ldr	r0, [pc, #152]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002db4:	f000 fdf6 	bl	80039a4 <HAL_ADC_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8002dbe:	f000 fa95 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002dda:	463b      	mov	r3, r7
 8002ddc:	4619      	mov	r1, r3
 8002dde:	481b      	ldr	r0, [pc, #108]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002de0:	f001 fe46 	bl	8004a70 <HAL_ADC_ConfigChannel>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 8002dea:	f000 fa7f 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002dee:	2308      	movs	r3, #8
 8002df0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002df2:	2302      	movs	r3, #2
 8002df4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002df6:	463b      	mov	r3, r7
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4814      	ldr	r0, [pc, #80]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002dfc:	f001 fe38 	bl	8004a70 <HAL_ADC_ConfigChannel>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8002e06:	f000 fa71 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002e0a:	2309      	movs	r3, #9
 8002e0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002e12:	463b      	mov	r3, r7
 8002e14:	4619      	mov	r1, r3
 8002e16:	480d      	ldr	r0, [pc, #52]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002e18:	f001 fe2a 	bl	8004a70 <HAL_ADC_ConfigChannel>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8002e22:	f000 fa63 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002e26:	2312      	movs	r3, #18
 8002e28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002e2a:	2304      	movs	r3, #4
 8002e2c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002e2e:	463b      	mov	r3, r7
 8002e30:	4619      	mov	r1, r3
 8002e32:	4806      	ldr	r0, [pc, #24]	; (8002e4c <MX_ADC2_Init+0xfc>)
 8002e34:	f001 fe1c 	bl	8004a70 <HAL_ADC_ConfigChannel>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 8002e3e:	f000 fa55 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002e42:	bf00      	nop
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	2000059c 	.word	0x2000059c
 8002e50:	50000100 	.word	0x50000100

08002e54 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002e5a:	f107 031c 	add.w	r3, r7, #28
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]
 8002e74:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002e76:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002e78:	4a2d      	ldr	r2, [pc, #180]	; (8002f30 <MX_ADC3_Init+0xdc>)
 8002e7a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002e7c:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002e82:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e88:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002e8e:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002e94:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e9c:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ea2:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ea8:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002eae:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002ec8:	4b18      	ldr	r3, [pc, #96]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002ece:	4817      	ldr	r0, [pc, #92]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002ed0:	f000 fd68 	bl	80039a4 <HAL_ADC_Init>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8002eda:	f000 fa07 	bl	80032ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8002ee2:	f107 031c 	add.w	r3, r7, #28
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4810      	ldr	r0, [pc, #64]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002eea:	f002 f8ad 	bl	8005048 <HAL_ADCEx_MultiModeConfigChannel>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8002ef4:	f000 f9fa 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002ef8:	230c      	movs	r3, #12
 8002efa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002efc:	2301      	movs	r3, #1
 8002efe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002f00:	2300      	movs	r3, #0
 8002f02:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	4619      	mov	r1, r3
 8002f14:	4805      	ldr	r0, [pc, #20]	; (8002f2c <MX_ADC3_Init+0xd8>)
 8002f16:	f001 fdab 	bl	8004a70 <HAL_ADC_ConfigChannel>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8002f20:	f000 f9e4 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002f24:	bf00      	nop
 8002f26:	3728      	adds	r7, #40	; 0x28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	200005ec 	.word	0x200005ec
 8002f30:	50000400 	.word	0x50000400

08002f34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f3a:	f107 0310 	add.w	r3, r7, #16
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f52:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <MX_TIM1_Init+0xa0>)
 8002f54:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <MX_TIM1_Init+0xa4>)
 8002f56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002f58:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <MX_TIM1_Init+0xa0>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <MX_TIM1_Init+0xa0>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 18000;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <MX_TIM1_Init+0xa0>)
 8002f66:	f244 6250 	movw	r2, #18000	; 0x4650
 8002f6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f6c:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <MX_TIM1_Init+0xa0>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f72:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <MX_TIM1_Init+0xa0>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f78:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <MX_TIM1_Init+0xa0>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f7e:	4815      	ldr	r0, [pc, #84]	; (8002fd4 <MX_TIM1_Init+0xa0>)
 8002f80:	f004 fc0a 	bl	8007798 <HAL_TIM_Base_Init>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002f8a:	f000 f9af 	bl	80032ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f94:	f107 0310 	add.w	r3, r7, #16
 8002f98:	4619      	mov	r1, r3
 8002f9a:	480e      	ldr	r0, [pc, #56]	; (8002fd4 <MX_TIM1_Init+0xa0>)
 8002f9c:	f005 f960 	bl	8008260 <HAL_TIM_ConfigClockSource>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002fa6:	f000 f9a1 	bl	80032ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <MX_TIM1_Init+0xa0>)
 8002fbc:	f005 fea6 	bl	8008d0c <HAL_TIMEx_MasterConfigSynchronization>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002fc6:	f000 f991 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002fca:	bf00      	nop
 8002fcc:	3720      	adds	r7, #32
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000680 	.word	0x20000680
 8002fd8:	40012c00 	.word	0x40012c00

08002fdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	; 0x28
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe2:	f107 031c 	add.w	r3, r7, #28
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fee:	463b      	mov	r3, r7
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	60da      	str	r2, [r3, #12]
 8002ffa:	611a      	str	r2, [r3, #16]
 8002ffc:	615a      	str	r2, [r3, #20]
 8002ffe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003000:	4b32      	ldr	r3, [pc, #200]	; (80030cc <MX_TIM3_Init+0xf0>)
 8003002:	4a33      	ldr	r2, [pc, #204]	; (80030d0 <MX_TIM3_Init+0xf4>)
 8003004:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8003006:	4b31      	ldr	r3, [pc, #196]	; (80030cc <MX_TIM3_Init+0xf0>)
 8003008:	2263      	movs	r2, #99	; 0x63
 800300a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300c:	4b2f      	ldr	r3, [pc, #188]	; (80030cc <MX_TIM3_Init+0xf0>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9000;
 8003012:	4b2e      	ldr	r3, [pc, #184]	; (80030cc <MX_TIM3_Init+0xf0>)
 8003014:	f242 3228 	movw	r2, #9000	; 0x2328
 8003018:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800301a:	4b2c      	ldr	r3, [pc, #176]	; (80030cc <MX_TIM3_Init+0xf0>)
 800301c:	2200      	movs	r2, #0
 800301e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003020:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <MX_TIM3_Init+0xf0>)
 8003022:	2200      	movs	r2, #0
 8003024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003026:	4829      	ldr	r0, [pc, #164]	; (80030cc <MX_TIM3_Init+0xf0>)
 8003028:	f004 fce6 	bl	80079f8 <HAL_TIM_PWM_Init>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8003032:	f000 f95b 	bl	80032ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800303a:	2300      	movs	r3, #0
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800303e:	f107 031c 	add.w	r3, r7, #28
 8003042:	4619      	mov	r1, r3
 8003044:	4821      	ldr	r0, [pc, #132]	; (80030cc <MX_TIM3_Init+0xf0>)
 8003046:	f005 fe61 	bl	8008d0c <HAL_TIMEx_MasterConfigSynchronization>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003050:	f000 f94c 	bl	80032ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003054:	2360      	movs	r3, #96	; 0x60
 8003056:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800305c:	2300      	movs	r3, #0
 800305e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003060:	2300      	movs	r3, #0
 8003062:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003064:	463b      	mov	r3, r7
 8003066:	2200      	movs	r2, #0
 8003068:	4619      	mov	r1, r3
 800306a:	4818      	ldr	r0, [pc, #96]	; (80030cc <MX_TIM3_Init+0xf0>)
 800306c:	f004 ffe4 	bl	8008038 <HAL_TIM_PWM_ConfigChannel>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003076:	f000 f939 	bl	80032ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800307a:	463b      	mov	r3, r7
 800307c:	2204      	movs	r2, #4
 800307e:	4619      	mov	r1, r3
 8003080:	4812      	ldr	r0, [pc, #72]	; (80030cc <MX_TIM3_Init+0xf0>)
 8003082:	f004 ffd9 	bl	8008038 <HAL_TIM_PWM_ConfigChannel>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800308c:	f000 f92e 	bl	80032ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003090:	463b      	mov	r3, r7
 8003092:	2208      	movs	r2, #8
 8003094:	4619      	mov	r1, r3
 8003096:	480d      	ldr	r0, [pc, #52]	; (80030cc <MX_TIM3_Init+0xf0>)
 8003098:	f004 ffce 	bl	8008038 <HAL_TIM_PWM_ConfigChannel>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80030a2:	f000 f923 	bl	80032ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030a6:	463b      	mov	r3, r7
 80030a8:	220c      	movs	r2, #12
 80030aa:	4619      	mov	r1, r3
 80030ac:	4807      	ldr	r0, [pc, #28]	; (80030cc <MX_TIM3_Init+0xf0>)
 80030ae:	f004 ffc3 	bl	8008038 <HAL_TIM_PWM_ConfigChannel>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80030b8:	f000 f918 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80030bc:	4803      	ldr	r0, [pc, #12]	; (80030cc <MX_TIM3_Init+0xf0>)
 80030be:	f000 fa97 	bl	80035f0 <HAL_TIM_MspPostInit>

}
 80030c2:	bf00      	nop
 80030c4:	3728      	adds	r7, #40	; 0x28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200006cc 	.word	0x200006cc
 80030d0:	40000400 	.word	0x40000400

080030d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030d8:	4b14      	ldr	r3, [pc, #80]	; (800312c <MX_USART2_UART_Init+0x58>)
 80030da:	4a15      	ldr	r2, [pc, #84]	; (8003130 <MX_USART2_UART_Init+0x5c>)
 80030dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030de:	4b13      	ldr	r3, [pc, #76]	; (800312c <MX_USART2_UART_Init+0x58>)
 80030e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030e6:	4b11      	ldr	r3, [pc, #68]	; (800312c <MX_USART2_UART_Init+0x58>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030ec:	4b0f      	ldr	r3, [pc, #60]	; (800312c <MX_USART2_UART_Init+0x58>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030f2:	4b0e      	ldr	r3, [pc, #56]	; (800312c <MX_USART2_UART_Init+0x58>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <MX_USART2_UART_Init+0x58>)
 80030fa:	220c      	movs	r2, #12
 80030fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030fe:	4b0b      	ldr	r3, [pc, #44]	; (800312c <MX_USART2_UART_Init+0x58>)
 8003100:	2200      	movs	r2, #0
 8003102:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <MX_USART2_UART_Init+0x58>)
 8003106:	2200      	movs	r2, #0
 8003108:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800310a:	4b08      	ldr	r3, [pc, #32]	; (800312c <MX_USART2_UART_Init+0x58>)
 800310c:	2200      	movs	r2, #0
 800310e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <MX_USART2_UART_Init+0x58>)
 8003112:	2200      	movs	r2, #0
 8003114:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003116:	4805      	ldr	r0, [pc, #20]	; (800312c <MX_USART2_UART_Init+0x58>)
 8003118:	f005 fea2 	bl	8008e60 <HAL_UART_Init>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003122:	f000 f8e3 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000718 	.word	0x20000718
 8003130:	40004400 	.word	0x40004400

08003134 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003138:	4b14      	ldr	r3, [pc, #80]	; (800318c <MX_USART3_UART_Init+0x58>)
 800313a:	4a15      	ldr	r2, [pc, #84]	; (8003190 <MX_USART3_UART_Init+0x5c>)
 800313c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <MX_USART3_UART_Init+0x58>)
 8003140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003144:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003146:	4b11      	ldr	r3, [pc, #68]	; (800318c <MX_USART3_UART_Init+0x58>)
 8003148:	2200      	movs	r2, #0
 800314a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <MX_USART3_UART_Init+0x58>)
 800314e:	2200      	movs	r2, #0
 8003150:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003152:	4b0e      	ldr	r3, [pc, #56]	; (800318c <MX_USART3_UART_Init+0x58>)
 8003154:	2200      	movs	r2, #0
 8003156:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <MX_USART3_UART_Init+0x58>)
 800315a:	220c      	movs	r2, #12
 800315c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <MX_USART3_UART_Init+0x58>)
 8003160:	2200      	movs	r2, #0
 8003162:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <MX_USART3_UART_Init+0x58>)
 8003166:	2200      	movs	r2, #0
 8003168:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <MX_USART3_UART_Init+0x58>)
 800316c:	2200      	movs	r2, #0
 800316e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <MX_USART3_UART_Init+0x58>)
 8003172:	2200      	movs	r2, #0
 8003174:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003176:	4805      	ldr	r0, [pc, #20]	; (800318c <MX_USART3_UART_Init+0x58>)
 8003178:	f005 fe72 	bl	8008e60 <HAL_UART_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003182:	f000 f8b3 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	2000079c 	.word	0x2000079c
 8003190:	40004800 	.word	0x40004800

08003194 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <MX_DMA_Init+0x38>)
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <MX_DMA_Init+0x38>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6153      	str	r3, [r2, #20]
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <MX_DMA_Init+0x38>)
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	607b      	str	r3, [r7, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	200b      	movs	r0, #11
 80031b8:	f002 fa43 	bl	8005642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031bc:	200b      	movs	r0, #11
 80031be:	f002 fa5c 	bl	800567a <HAL_NVIC_EnableIRQ>

}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000

080031d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	; 0x28
 80031d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d6:	f107 0314 	add.w	r3, r7, #20
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	605a      	str	r2, [r3, #4]
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	60da      	str	r2, [r3, #12]
 80031e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031e6:	4b3e      	ldr	r3, [pc, #248]	; (80032e0 <MX_GPIO_Init+0x110>)
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	4a3d      	ldr	r2, [pc, #244]	; (80032e0 <MX_GPIO_Init+0x110>)
 80031ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031f0:	6153      	str	r3, [r2, #20]
 80031f2:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <MX_GPIO_Init+0x110>)
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031fe:	4b38      	ldr	r3, [pc, #224]	; (80032e0 <MX_GPIO_Init+0x110>)
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	4a37      	ldr	r2, [pc, #220]	; (80032e0 <MX_GPIO_Init+0x110>)
 8003204:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003208:	6153      	str	r3, [r2, #20]
 800320a:	4b35      	ldr	r3, [pc, #212]	; (80032e0 <MX_GPIO_Init+0x110>)
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003216:	4b32      	ldr	r3, [pc, #200]	; (80032e0 <MX_GPIO_Init+0x110>)
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	4a31      	ldr	r2, [pc, #196]	; (80032e0 <MX_GPIO_Init+0x110>)
 800321c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003220:	6153      	str	r3, [r2, #20]
 8003222:	4b2f      	ldr	r3, [pc, #188]	; (80032e0 <MX_GPIO_Init+0x110>)
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800322e:	4b2c      	ldr	r3, [pc, #176]	; (80032e0 <MX_GPIO_Init+0x110>)
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	4a2b      	ldr	r2, [pc, #172]	; (80032e0 <MX_GPIO_Init+0x110>)
 8003234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003238:	6153      	str	r3, [r2, #20]
 800323a:	4b29      	ldr	r3, [pc, #164]	; (80032e0 <MX_GPIO_Init+0x110>)
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8003246:	2200      	movs	r2, #0
 8003248:	2120      	movs	r1, #32
 800324a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800324e:	f002 fde3 	bl	8005e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CH_ENA_GPIO_Port, CH_ENA_Pin, GPIO_PIN_RESET);
 8003252:	2200      	movs	r2, #0
 8003254:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003258:	4822      	ldr	r0, [pc, #136]	; (80032e4 <MX_GPIO_Init+0x114>)
 800325a:	f002 fddd 	bl	8005e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800325e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003264:	2300      	movs	r3, #0
 8003266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	4619      	mov	r1, r3
 8003272:	481c      	ldr	r0, [pc, #112]	; (80032e4 <MX_GPIO_Init+0x114>)
 8003274:	f002 fc46 	bl	8005b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8003278:	2320      	movs	r3, #32
 800327a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800327c:	2301      	movs	r3, #1
 800327e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003284:	2300      	movs	r3, #0
 8003286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8003288:	f107 0314 	add.w	r3, r7, #20
 800328c:	4619      	mov	r1, r3
 800328e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003292:	f002 fc37 	bl	8005b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH_ENA_Pin */
  GPIO_InitStruct.Pin = CH_ENA_Pin;
 8003296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800329a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329c:	2301      	movs	r3, #1
 800329e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a4:	2300      	movs	r3, #0
 80032a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CH_ENA_GPIO_Port, &GPIO_InitStruct);
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	4619      	mov	r1, r3
 80032ae:	480d      	ldr	r0, [pc, #52]	; (80032e4 <MX_GPIO_Init+0x114>)
 80032b0:	f002 fc28 	bl	8005b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032ba:	2312      	movs	r3, #18
 80032bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032c2:	2303      	movs	r3, #3
 80032c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032c6:	2304      	movs	r3, #4
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ca:	f107 0314 	add.w	r3, r7, #20
 80032ce:	4619      	mov	r1, r3
 80032d0:	4805      	ldr	r0, [pc, #20]	; (80032e8 <MX_GPIO_Init+0x118>)
 80032d2:	f002 fc17 	bl	8005b04 <HAL_GPIO_Init>

}
 80032d6:	bf00      	nop
 80032d8:	3728      	adds	r7, #40	; 0x28
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	48000800 	.word	0x48000800
 80032e8:	48000400 	.word	0x48000400

080032ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032f0:	b672      	cpsid	i
}
 80032f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032f4:	e7fe      	b.n	80032f4 <Error_Handler+0x8>
	...

080032f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <HAL_MspInit+0x44>)
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	4a0e      	ldr	r2, [pc, #56]	; (800333c <HAL_MspInit+0x44>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6193      	str	r3, [r2, #24]
 800330a:	4b0c      	ldr	r3, [pc, #48]	; (800333c <HAL_MspInit+0x44>)
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	607b      	str	r3, [r7, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <HAL_MspInit+0x44>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	4a08      	ldr	r2, [pc, #32]	; (800333c <HAL_MspInit+0x44>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003320:	61d3      	str	r3, [r2, #28]
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_MspInit+0x44>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000

08003340 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b090      	sub	sp, #64	; 0x40
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003360:	d16e      	bne.n	8003440 <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003362:	4b78      	ldr	r3, [pc, #480]	; (8003544 <HAL_ADC_MspInit+0x204>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	4a76      	ldr	r2, [pc, #472]	; (8003544 <HAL_ADC_MspInit+0x204>)
 800336a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800336c:	4b75      	ldr	r3, [pc, #468]	; (8003544 <HAL_ADC_MspInit+0x204>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d10b      	bne.n	800338c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003374:	4b74      	ldr	r3, [pc, #464]	; (8003548 <HAL_ADC_MspInit+0x208>)
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	4a73      	ldr	r2, [pc, #460]	; (8003548 <HAL_ADC_MspInit+0x208>)
 800337a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337e:	6153      	str	r3, [r2, #20]
 8003380:	4b71      	ldr	r3, [pc, #452]	; (8003548 <HAL_ADC_MspInit+0x208>)
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800338c:	4b6e      	ldr	r3, [pc, #440]	; (8003548 <HAL_ADC_MspInit+0x208>)
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	4a6d      	ldr	r2, [pc, #436]	; (8003548 <HAL_ADC_MspInit+0x208>)
 8003392:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003396:	6153      	str	r3, [r2, #20]
 8003398:	4b6b      	ldr	r3, [pc, #428]	; (8003548 <HAL_ADC_MspInit+0x208>)
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a4:	4b68      	ldr	r3, [pc, #416]	; (8003548 <HAL_ADC_MspInit+0x208>)
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	4a67      	ldr	r2, [pc, #412]	; (8003548 <HAL_ADC_MspInit+0x208>)
 80033aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ae:	6153      	str	r3, [r2, #20]
 80033b0:	4b65      	ldr	r3, [pc, #404]	; (8003548 <HAL_ADC_MspInit+0x208>)
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b8:	623b      	str	r3, [r7, #32]
 80033ba:	6a3b      	ldr	r3, [r7, #32]
    PC1     ------> ADC1_IN7
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80033bc:	230b      	movs	r3, #11
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033c0:	2303      	movs	r3, #3
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033cc:	4619      	mov	r1, r3
 80033ce:	485f      	ldr	r0, [pc, #380]	; (800354c <HAL_ADC_MspInit+0x20c>)
 80033d0:	f002 fb98 	bl	8005b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033d4:	2303      	movs	r3, #3
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033d8:	2303      	movs	r3, #3
 80033da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033e4:	4619      	mov	r1, r3
 80033e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ea:	f002 fb8b 	bl	8005b04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80033ee:	4b58      	ldr	r3, [pc, #352]	; (8003550 <HAL_ADC_MspInit+0x210>)
 80033f0:	4a58      	ldr	r2, [pc, #352]	; (8003554 <HAL_ADC_MspInit+0x214>)
 80033f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033f4:	4b56      	ldr	r3, [pc, #344]	; (8003550 <HAL_ADC_MspInit+0x210>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033fa:	4b55      	ldr	r3, [pc, #340]	; (8003550 <HAL_ADC_MspInit+0x210>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003400:	4b53      	ldr	r3, [pc, #332]	; (8003550 <HAL_ADC_MspInit+0x210>)
 8003402:	2280      	movs	r2, #128	; 0x80
 8003404:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003406:	4b52      	ldr	r3, [pc, #328]	; (8003550 <HAL_ADC_MspInit+0x210>)
 8003408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800340c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800340e:	4b50      	ldr	r3, [pc, #320]	; (8003550 <HAL_ADC_MspInit+0x210>)
 8003410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003414:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003416:	4b4e      	ldr	r3, [pc, #312]	; (8003550 <HAL_ADC_MspInit+0x210>)
 8003418:	2200      	movs	r2, #0
 800341a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800341c:	4b4c      	ldr	r3, [pc, #304]	; (8003550 <HAL_ADC_MspInit+0x210>)
 800341e:	2200      	movs	r2, #0
 8003420:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003422:	484b      	ldr	r0, [pc, #300]	; (8003550 <HAL_ADC_MspInit+0x210>)
 8003424:	f002 f943 	bl	80056ae <HAL_DMA_Init>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 800342e:	f7ff ff5d 	bl	80032ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a46      	ldr	r2, [pc, #280]	; (8003550 <HAL_ADC_MspInit+0x210>)
 8003436:	639a      	str	r2, [r3, #56]	; 0x38
 8003438:	4a45      	ldr	r2, [pc, #276]	; (8003550 <HAL_ADC_MspInit+0x210>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800343e:	e07c      	b.n	800353a <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a44      	ldr	r2, [pc, #272]	; (8003558 <HAL_ADC_MspInit+0x218>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d146      	bne.n	80034d8 <HAL_ADC_MspInit+0x198>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800344a:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <HAL_ADC_MspInit+0x204>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3301      	adds	r3, #1
 8003450:	4a3c      	ldr	r2, [pc, #240]	; (8003544 <HAL_ADC_MspInit+0x204>)
 8003452:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003454:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <HAL_ADC_MspInit+0x204>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d10b      	bne.n	8003474 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800345c:	4b3a      	ldr	r3, [pc, #232]	; (8003548 <HAL_ADC_MspInit+0x208>)
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	4a39      	ldr	r2, [pc, #228]	; (8003548 <HAL_ADC_MspInit+0x208>)
 8003462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003466:	6153      	str	r3, [r2, #20]
 8003468:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HAL_ADC_MspInit+0x208>)
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003474:	4b34      	ldr	r3, [pc, #208]	; (8003548 <HAL_ADC_MspInit+0x208>)
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	4a33      	ldr	r2, [pc, #204]	; (8003548 <HAL_ADC_MspInit+0x208>)
 800347a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800347e:	6153      	str	r3, [r2, #20]
 8003480:	4b31      	ldr	r3, [pc, #196]	; (8003548 <HAL_ADC_MspInit+0x208>)
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348c:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <HAL_ADC_MspInit+0x208>)
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	4a2d      	ldr	r2, [pc, #180]	; (8003548 <HAL_ADC_MspInit+0x208>)
 8003492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003496:	6153      	str	r3, [r2, #20]
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_ADC_MspInit+0x208>)
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80034a4:	230e      	movs	r3, #14
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034a8:	2303      	movs	r3, #3
 80034aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034b4:	4619      	mov	r1, r3
 80034b6:	4825      	ldr	r0, [pc, #148]	; (800354c <HAL_ADC_MspInit+0x20c>)
 80034b8:	f002 fb24 	bl	8005b04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034bc:	2310      	movs	r3, #16
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034c0:	2303      	movs	r3, #3
 80034c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034cc:	4619      	mov	r1, r3
 80034ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d2:	f002 fb17 	bl	8005b04 <HAL_GPIO_Init>
}
 80034d6:	e030      	b.n	800353a <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC3)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1f      	ldr	r2, [pc, #124]	; (800355c <HAL_ADC_MspInit+0x21c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d12b      	bne.n	800353a <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC34_CLK_ENABLE();
 80034e2:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HAL_ADC_MspInit+0x208>)
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	4a18      	ldr	r2, [pc, #96]	; (8003548 <HAL_ADC_MspInit+0x208>)
 80034e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034ec:	6153      	str	r3, [r2, #20]
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <HAL_ADC_MspInit+0x208>)
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <HAL_ADC_MspInit+0x208>)
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <HAL_ADC_MspInit+0x208>)
 8003500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003504:	6153      	str	r3, [r2, #20]
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <HAL_ADC_MspInit+0x208>)
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003512:	2301      	movs	r3, #1
 8003514:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003516:	2303      	movs	r3, #3
 8003518:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003522:	4619      	mov	r1, r3
 8003524:	480e      	ldr	r0, [pc, #56]	; (8003560 <HAL_ADC_MspInit+0x220>)
 8003526:	f002 faed 	bl	8005b04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800352a:	2200      	movs	r2, #0
 800352c:	2100      	movs	r1, #0
 800352e:	202f      	movs	r0, #47	; 0x2f
 8003530:	f002 f887 	bl	8005642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8003534:	202f      	movs	r0, #47	; 0x2f
 8003536:	f002 f8a0 	bl	800567a <HAL_NVIC_EnableIRQ>
}
 800353a:	bf00      	nop
 800353c:	3740      	adds	r7, #64	; 0x40
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20001c44 	.word	0x20001c44
 8003548:	40021000 	.word	0x40021000
 800354c:	48000800 	.word	0x48000800
 8003550:	2000063c 	.word	0x2000063c
 8003554:	40020008 	.word	0x40020008
 8003558:	50000100 	.word	0x50000100
 800355c:	50000400 	.word	0x50000400
 8003560:	48000400 	.word	0x48000400

08003564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0d      	ldr	r2, [pc, #52]	; (80035a8 <HAL_TIM_Base_MspInit+0x44>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d113      	bne.n	800359e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <HAL_TIM_Base_MspInit+0x48>)
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	4a0c      	ldr	r2, [pc, #48]	; (80035ac <HAL_TIM_Base_MspInit+0x48>)
 800357c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003580:	6193      	str	r3, [r2, #24]
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <HAL_TIM_Base_MspInit+0x48>)
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800358e:	2200      	movs	r2, #0
 8003590:	2100      	movs	r1, #0
 8003592:	2019      	movs	r0, #25
 8003594:	f002 f855 	bl	8005642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003598:	2019      	movs	r0, #25
 800359a:	f002 f86e 	bl	800567a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <HAL_TIM_PWM_MspInit+0x38>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d10b      	bne.n	80035da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <HAL_TIM_PWM_MspInit+0x3c>)
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	4a09      	ldr	r2, [pc, #36]	; (80035ec <HAL_TIM_PWM_MspInit+0x3c>)
 80035c8:	f043 0302 	orr.w	r3, r3, #2
 80035cc:	61d3      	str	r3, [r2, #28]
 80035ce:	4b07      	ldr	r3, [pc, #28]	; (80035ec <HAL_TIM_PWM_MspInit+0x3c>)
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40021000 	.word	0x40021000

080035f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a11      	ldr	r2, [pc, #68]	; (8003654 <HAL_TIM_MspPostInit+0x64>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d11c      	bne.n	800364c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003612:	4b11      	ldr	r3, [pc, #68]	; (8003658 <HAL_TIM_MspPostInit+0x68>)
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	4a10      	ldr	r2, [pc, #64]	; (8003658 <HAL_TIM_MspPostInit+0x68>)
 8003618:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800361c:	6153      	str	r3, [r2, #20]
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <HAL_TIM_MspPostInit+0x68>)
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800362a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800362e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003630:	2302      	movs	r3, #2
 8003632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003638:	2300      	movs	r3, #0
 800363a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800363c:	2302      	movs	r3, #2
 800363e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003640:	f107 030c 	add.w	r3, r7, #12
 8003644:	4619      	mov	r1, r3
 8003646:	4805      	ldr	r0, [pc, #20]	; (800365c <HAL_TIM_MspPostInit+0x6c>)
 8003648:	f002 fa5c 	bl	8005b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800364c:	bf00      	nop
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40000400 	.word	0x40000400
 8003658:	40021000 	.word	0x40021000
 800365c:	48000800 	.word	0x48000800

08003660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08c      	sub	sp, #48	; 0x30
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 031c 	add.w	r3, r7, #28
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a37      	ldr	r2, [pc, #220]	; (800375c <HAL_UART_MspInit+0xfc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d131      	bne.n	80036e6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003682:	4b37      	ldr	r3, [pc, #220]	; (8003760 <HAL_UART_MspInit+0x100>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4a36      	ldr	r2, [pc, #216]	; (8003760 <HAL_UART_MspInit+0x100>)
 8003688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368c:	61d3      	str	r3, [r2, #28]
 800368e:	4b34      	ldr	r3, [pc, #208]	; (8003760 <HAL_UART_MspInit+0x100>)
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	61bb      	str	r3, [r7, #24]
 8003698:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369a:	4b31      	ldr	r3, [pc, #196]	; (8003760 <HAL_UART_MspInit+0x100>)
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	4a30      	ldr	r2, [pc, #192]	; (8003760 <HAL_UART_MspInit+0x100>)
 80036a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a4:	6153      	str	r3, [r2, #20]
 80036a6:	4b2e      	ldr	r3, [pc, #184]	; (8003760 <HAL_UART_MspInit+0x100>)
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036b2:	230c      	movs	r3, #12
 80036b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b6:	2302      	movs	r3, #2
 80036b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036be:	2303      	movs	r3, #3
 80036c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036c2:	2307      	movs	r3, #7
 80036c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c6:	f107 031c 	add.w	r3, r7, #28
 80036ca:	4619      	mov	r1, r3
 80036cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036d0:	f002 fa18 	bl	8005b04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036d4:	2200      	movs	r2, #0
 80036d6:	2100      	movs	r1, #0
 80036d8:	2026      	movs	r0, #38	; 0x26
 80036da:	f001 ffb2 	bl	8005642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036de:	2026      	movs	r0, #38	; 0x26
 80036e0:	f001 ffcb 	bl	800567a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80036e4:	e035      	b.n	8003752 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <HAL_UART_MspInit+0x104>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d130      	bne.n	8003752 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036f0:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <HAL_UART_MspInit+0x100>)
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <HAL_UART_MspInit+0x100>)
 80036f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036fa:	61d3      	str	r3, [r2, #28]
 80036fc:	4b18      	ldr	r3, [pc, #96]	; (8003760 <HAL_UART_MspInit+0x100>)
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <HAL_UART_MspInit+0x100>)
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	4a14      	ldr	r2, [pc, #80]	; (8003760 <HAL_UART_MspInit+0x100>)
 800370e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003712:	6153      	str	r3, [r2, #20]
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_UART_MspInit+0x100>)
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003720:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003726:	2302      	movs	r3, #2
 8003728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800372e:	2303      	movs	r3, #3
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003732:	2307      	movs	r3, #7
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003736:	f107 031c 	add.w	r3, r7, #28
 800373a:	4619      	mov	r1, r3
 800373c:	480a      	ldr	r0, [pc, #40]	; (8003768 <HAL_UART_MspInit+0x108>)
 800373e:	f002 f9e1 	bl	8005b04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003742:	2200      	movs	r2, #0
 8003744:	2100      	movs	r1, #0
 8003746:	2027      	movs	r0, #39	; 0x27
 8003748:	f001 ff7b 	bl	8005642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800374c:	2027      	movs	r0, #39	; 0x27
 800374e:	f001 ff94 	bl	800567a <HAL_NVIC_EnableIRQ>
}
 8003752:	bf00      	nop
 8003754:	3730      	adds	r7, #48	; 0x30
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40004400 	.word	0x40004400
 8003760:	40021000 	.word	0x40021000
 8003764:	40004800 	.word	0x40004800
 8003768:	48000800 	.word	0x48000800

0800376c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003770:	e7fe      	b.n	8003770 <NMI_Handler+0x4>

08003772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003772:	b480      	push	{r7}
 8003774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003776:	e7fe      	b.n	8003776 <HardFault_Handler+0x4>

08003778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800377c:	e7fe      	b.n	800377c <MemManage_Handler+0x4>

0800377e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003782:	e7fe      	b.n	8003782 <BusFault_Handler+0x4>

08003784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003788:	e7fe      	b.n	8003788 <UsageFault_Handler+0x4>

0800378a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800378a:	b480      	push	{r7}
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037a6:	b480      	push	{r7}
 80037a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037b8:	f000 f8b6 	bl	8003928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037bc:	bf00      	nop
 80037be:	bd80      	pop	{r7, pc}

080037c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037c4:	4802      	ldr	r0, [pc, #8]	; (80037d0 <DMA1_Channel1_IRQHandler+0x10>)
 80037c6:	f002 f88f 	bl	80058e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	2000063c 	.word	0x2000063c

080037d4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037d8:	4802      	ldr	r0, [pc, #8]	; (80037e4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80037da:	f004 fb0d 	bl	8007df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000680 	.word	0x20000680

080037e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037ec:	4802      	ldr	r0, [pc, #8]	; (80037f8 <USART2_IRQHandler+0x10>)
 80037ee:	f005 fbd3 	bl	8008f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000718 	.word	0x20000718

080037fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003800:	4802      	ldr	r0, [pc, #8]	; (800380c <USART3_IRQHandler+0x10>)
 8003802:	f005 fbc9 	bl	8008f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	2000079c 	.word	0x2000079c

08003810 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003814:	4802      	ldr	r0, [pc, #8]	; (8003820 <ADC3_IRQHandler+0x10>)
 8003816:	f000 fd23 	bl	8004260 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200005ec 	.word	0x200005ec

08003824 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <SystemInit+0x20>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382e:	4a05      	ldr	r2, [pc, #20]	; (8003844 <SystemInit+0x20>)
 8003830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003880 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800384c:	480d      	ldr	r0, [pc, #52]	; (8003884 <LoopForever+0x6>)
  ldr r1, =_edata
 800384e:	490e      	ldr	r1, [pc, #56]	; (8003888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003850:	4a0e      	ldr	r2, [pc, #56]	; (800388c <LoopForever+0xe>)
  movs r3, #0
 8003852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003854:	e002      	b.n	800385c <LoopCopyDataInit>

08003856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800385a:	3304      	adds	r3, #4

0800385c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800385c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800385e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003860:	d3f9      	bcc.n	8003856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003862:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003864:	4c0b      	ldr	r4, [pc, #44]	; (8003894 <LoopForever+0x16>)
  movs r3, #0
 8003866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003868:	e001      	b.n	800386e <LoopFillZerobss>

0800386a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800386a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800386c:	3204      	adds	r2, #4

0800386e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800386e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003870:	d3fb      	bcc.n	800386a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003872:	f7ff ffd7 	bl	8003824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003876:	f006 fcc9 	bl	800a20c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800387a:	f7fe fe7f 	bl	800257c <main>

0800387e <LoopForever>:

LoopForever:
    b LoopForever
 800387e:	e7fe      	b.n	800387e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003880:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003888:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800388c:	0800a44c 	.word	0x0800a44c
  ldr r2, =_sbss
 8003890:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003894:	20001c4c 	.word	0x20001c4c

08003898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003898:	e7fe      	b.n	8003898 <ADC1_2_IRQHandler>
	...

0800389c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038a0:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <HAL_Init+0x28>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a07      	ldr	r2, [pc, #28]	; (80038c4 <HAL_Init+0x28>)
 80038a6:	f043 0310 	orr.w	r3, r3, #16
 80038aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038ac:	2003      	movs	r0, #3
 80038ae:	f001 febd 	bl	800562c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038b2:	200f      	movs	r0, #15
 80038b4:	f000 f808 	bl	80038c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038b8:	f7ff fd1e 	bl	80032f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40022000 	.word	0x40022000

080038c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038d0:	4b12      	ldr	r3, [pc, #72]	; (800391c <HAL_InitTick+0x54>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b12      	ldr	r3, [pc, #72]	; (8003920 <HAL_InitTick+0x58>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	4619      	mov	r1, r3
 80038da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038de:	fbb3 f3f1 	udiv	r3, r3, r1
 80038e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 fed5 	bl	8005696 <HAL_SYSTICK_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e00e      	b.n	8003914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d80a      	bhi.n	8003912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038fc:	2200      	movs	r2, #0
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	f04f 30ff 	mov.w	r0, #4294967295
 8003904:	f001 fe9d 	bl	8005642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003908:	4a06      	ldr	r2, [pc, #24]	; (8003924 <HAL_InitTick+0x5c>)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000000 	.word	0x20000000
 8003920:	20000008 	.word	0x20000008
 8003924:	20000004 	.word	0x20000004

08003928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_IncTick+0x20>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_IncTick+0x24>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4413      	add	r3, r2
 8003938:	4a04      	ldr	r2, [pc, #16]	; (800394c <HAL_IncTick+0x24>)
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20000008 	.word	0x20000008
 800394c:	20001c48 	.word	0x20001c48

08003950 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return uwTick;  
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <HAL_GetTick+0x14>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20001c48 	.word	0x20001c48

08003968 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b09a      	sub	sp, #104	; 0x68
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e1e3      	b.n	8003d8c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d176      	bne.n	8003ac4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d152      	bne.n	8003a84 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff fca1 	bl	8003340 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d13b      	bne.n	8003a84 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f001 fcd7 	bl	80053c0 <ADC_Disable>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d12f      	bne.n	8003a84 <HAL_ADC_Init+0xe0>
 8003a24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d12b      	bne.n	8003a84 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a34:	f023 0302 	bic.w	r3, r3, #2
 8003a38:	f043 0202 	orr.w	r2, r3, #2
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a4e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a5e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a60:	4b92      	ldr	r3, [pc, #584]	; (8003cac <HAL_ADC_Init+0x308>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a92      	ldr	r2, [pc, #584]	; (8003cb0 <HAL_ADC_Init+0x30c>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	0c9a      	lsrs	r2, r3, #18
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a76:	e002      	b.n	8003a7e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f9      	bne.n	8003a78 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa0:	d110      	bne.n	8003ac4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f023 0312 	bic.w	r3, r3, #18
 8003aaa:	f043 0210 	orr.w	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f040 8150 	bne.w	8003d72 <HAL_ADC_Init+0x3ce>
 8003ad2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f040 814b 	bne.w	8003d72 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f040 8143 	bne.w	8003d72 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003af4:	f043 0202 	orr.w	r2, r3, #2
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b04:	d004      	beq.n	8003b10 <HAL_ADC_Init+0x16c>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6a      	ldr	r2, [pc, #424]	; (8003cb4 <HAL_ADC_Init+0x310>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d101      	bne.n	8003b14 <HAL_ADC_Init+0x170>
 8003b10:	4b69      	ldr	r3, [pc, #420]	; (8003cb8 <HAL_ADC_Init+0x314>)
 8003b12:	e000      	b.n	8003b16 <HAL_ADC_Init+0x172>
 8003b14:	4b69      	ldr	r3, [pc, #420]	; (8003cbc <HAL_ADC_Init+0x318>)
 8003b16:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b20:	d102      	bne.n	8003b28 <HAL_ADC_Init+0x184>
 8003b22:	4b64      	ldr	r3, [pc, #400]	; (8003cb4 <HAL_ADC_Init+0x310>)
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	e01a      	b.n	8003b5e <HAL_ADC_Init+0x1ba>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a61      	ldr	r2, [pc, #388]	; (8003cb4 <HAL_ADC_Init+0x310>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d103      	bne.n	8003b3a <HAL_ADC_Init+0x196>
 8003b32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e011      	b.n	8003b5e <HAL_ADC_Init+0x1ba>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a60      	ldr	r2, [pc, #384]	; (8003cc0 <HAL_ADC_Init+0x31c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d102      	bne.n	8003b4a <HAL_ADC_Init+0x1a6>
 8003b44:	4b5f      	ldr	r3, [pc, #380]	; (8003cc4 <HAL_ADC_Init+0x320>)
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	e009      	b.n	8003b5e <HAL_ADC_Init+0x1ba>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a5d      	ldr	r2, [pc, #372]	; (8003cc4 <HAL_ADC_Init+0x320>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d102      	bne.n	8003b5a <HAL_ADC_Init+0x1b6>
 8003b54:	4b5a      	ldr	r3, [pc, #360]	; (8003cc0 <HAL_ADC_Init+0x31c>)
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e001      	b.n	8003b5e <HAL_ADC_Init+0x1ba>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d108      	bne.n	8003b7e <HAL_ADC_Init+0x1da>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_Init+0x1da>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_ADC_Init+0x1dc>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d11c      	bne.n	8003bbe <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003b84:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d010      	beq.n	8003bac <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d107      	bne.n	8003ba6 <HAL_ADC_Init+0x202>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADC_Init+0x202>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_ADC_Init+0x204>
 8003ba6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d108      	bne.n	8003bbe <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bbc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	7e5b      	ldrb	r3, [r3, #25]
 8003bc2:	035b      	lsls	r3, r3, #13
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bc8:	2a01      	cmp	r2, #1
 8003bca:	d002      	beq.n	8003bd2 <HAL_ADC_Init+0x22e>
 8003bcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bd0:	e000      	b.n	8003bd4 <HAL_ADC_Init+0x230>
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003be4:	4313      	orrs	r3, r2
 8003be6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d11b      	bne.n	8003c2a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	7e5b      	ldrb	r3, [r3, #25]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	045a      	lsls	r2, r3, #17
 8003c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c0c:	e00d      	b.n	8003c2a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003c16:	f043 0220 	orr.w	r2, r3, #32
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	f043 0201 	orr.w	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d054      	beq.n	8003cdc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a22      	ldr	r2, [pc, #136]	; (8003cc0 <HAL_ADC_Init+0x31c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <HAL_ADC_Init+0x2a2>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a20      	ldr	r2, [pc, #128]	; (8003cc4 <HAL_ADC_Init+0x320>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d140      	bne.n	8003cc8 <HAL_ADC_Init+0x324>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003c4e:	d02a      	beq.n	8003ca6 <HAL_ADC_Init+0x302>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c58:	d022      	beq.n	8003ca0 <HAL_ADC_Init+0x2fc>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003c62:	d01a      	beq.n	8003c9a <HAL_ADC_Init+0x2f6>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8003c6c:	d012      	beq.n	8003c94 <HAL_ADC_Init+0x2f0>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8003c76:	d00a      	beq.n	8003c8e <HAL_ADC_Init+0x2ea>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8003c80:	d002      	beq.n	8003c88 <HAL_ADC_Init+0x2e4>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	e023      	b.n	8003cd0 <HAL_ADC_Init+0x32c>
 8003c88:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003c8c:	e020      	b.n	8003cd0 <HAL_ADC_Init+0x32c>
 8003c8e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003c92:	e01d      	b.n	8003cd0 <HAL_ADC_Init+0x32c>
 8003c94:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003c98:	e01a      	b.n	8003cd0 <HAL_ADC_Init+0x32c>
 8003c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c9e:	e017      	b.n	8003cd0 <HAL_ADC_Init+0x32c>
 8003ca0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003ca4:	e014      	b.n	8003cd0 <HAL_ADC_Init+0x32c>
 8003ca6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003caa:	e011      	b.n	8003cd0 <HAL_ADC_Init+0x32c>
 8003cac:	20000000 	.word	0x20000000
 8003cb0:	431bde83 	.word	0x431bde83
 8003cb4:	50000100 	.word	0x50000100
 8003cb8:	50000300 	.word	0x50000300
 8003cbc:	50000700 	.word	0x50000700
 8003cc0:	50000400 	.word	0x50000400
 8003cc4:	50000500 	.word	0x50000500
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d114      	bne.n	8003d14 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cf8:	f023 0302 	bic.w	r3, r3, #2
 8003cfc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7e1b      	ldrb	r3, [r3, #24]
 8003d02:	039a      	lsls	r2, r3, #14
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d10:	4313      	orrs	r3, r2
 8003d12:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <HAL_ADC_Init+0x3f0>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003d24:	430b      	orrs	r3, r1
 8003d26:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d10c      	bne.n	8003d4a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f023 010f 	bic.w	r1, r3, #15
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	1e5a      	subs	r2, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
 8003d48:	e007      	b.n	8003d5a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 020f 	bic.w	r2, r2, #15
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	f023 0303 	bic.w	r3, r3, #3
 8003d68:	f043 0201 	orr.w	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40
 8003d70:	e00a      	b.n	8003d88 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f023 0312 	bic.w	r3, r3, #18
 8003d7a:	f043 0210 	orr.w	r2, r3, #16
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003d88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3768      	adds	r7, #104	; 0x68
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	fff0c007 	.word	0xfff0c007

08003d98 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f040 80f9 	bne.w	8003fa6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_ADC_Start+0x2a>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e0f4      	b.n	8003fac <HAL_ADC_Start+0x214>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f001 fa94 	bl	80052f8 <ADC_Enable>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f040 80e0 	bne.w	8003f9c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003de4:	f023 0301 	bic.w	r3, r3, #1
 8003de8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003df8:	d004      	beq.n	8003e04 <HAL_ADC_Start+0x6c>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a6d      	ldr	r2, [pc, #436]	; (8003fb4 <HAL_ADC_Start+0x21c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d106      	bne.n	8003e12 <HAL_ADC_Start+0x7a>
 8003e04:	4b6c      	ldr	r3, [pc, #432]	; (8003fb8 <HAL_ADC_Start+0x220>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d010      	beq.n	8003e32 <HAL_ADC_Start+0x9a>
 8003e10:	e005      	b.n	8003e1e <HAL_ADC_Start+0x86>
 8003e12:	4b6a      	ldr	r3, [pc, #424]	; (8003fbc <HAL_ADC_Start+0x224>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 031f 	and.w	r3, r3, #31
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_ADC_Start+0x9a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e26:	d004      	beq.n	8003e32 <HAL_ADC_Start+0x9a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a64      	ldr	r2, [pc, #400]	; (8003fc0 <HAL_ADC_Start+0x228>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d115      	bne.n	8003e5e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d036      	beq.n	8003eba <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003e5c:	e02d      	b.n	8003eba <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e72:	d004      	beq.n	8003e7e <HAL_ADC_Start+0xe6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a4e      	ldr	r2, [pc, #312]	; (8003fb4 <HAL_ADC_Start+0x21c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d10a      	bne.n	8003e94 <HAL_ADC_Start+0xfc>
 8003e7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bf14      	ite	ne
 8003e8c:	2301      	movne	r3, #1
 8003e8e:	2300      	moveq	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	e008      	b.n	8003ea6 <HAL_ADC_Start+0x10e>
 8003e94:	4b4a      	ldr	r3, [pc, #296]	; (8003fc0 <HAL_ADC_Start+0x228>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf14      	ite	ne
 8003ea0:	2301      	movne	r3, #1
 8003ea2:	2300      	moveq	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003eb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec6:	d106      	bne.n	8003ed6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	f023 0206 	bic.w	r2, r3, #6
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	645a      	str	r2, [r3, #68]	; 0x44
 8003ed4:	e002      	b.n	8003edc <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	221c      	movs	r2, #28
 8003eea:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ef4:	d004      	beq.n	8003f00 <HAL_ADC_Start+0x168>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a2e      	ldr	r2, [pc, #184]	; (8003fb4 <HAL_ADC_Start+0x21c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d106      	bne.n	8003f0e <HAL_ADC_Start+0x176>
 8003f00:	4b2d      	ldr	r3, [pc, #180]	; (8003fb8 <HAL_ADC_Start+0x220>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d03e      	beq.n	8003f8a <HAL_ADC_Start+0x1f2>
 8003f0c:	e005      	b.n	8003f1a <HAL_ADC_Start+0x182>
 8003f0e:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <HAL_ADC_Start+0x224>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d037      	beq.n	8003f8a <HAL_ADC_Start+0x1f2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f22:	d004      	beq.n	8003f2e <HAL_ADC_Start+0x196>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a22      	ldr	r2, [pc, #136]	; (8003fb4 <HAL_ADC_Start+0x21c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d106      	bne.n	8003f3c <HAL_ADC_Start+0x1a4>
 8003f2e:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <HAL_ADC_Start+0x220>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	2b05      	cmp	r3, #5
 8003f38:	d027      	beq.n	8003f8a <HAL_ADC_Start+0x1f2>
 8003f3a:	e005      	b.n	8003f48 <HAL_ADC_Start+0x1b0>
 8003f3c:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <HAL_ADC_Start+0x224>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2b05      	cmp	r3, #5
 8003f46:	d020      	beq.n	8003f8a <HAL_ADC_Start+0x1f2>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f50:	d004      	beq.n	8003f5c <HAL_ADC_Start+0x1c4>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a17      	ldr	r2, [pc, #92]	; (8003fb4 <HAL_ADC_Start+0x21c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d106      	bne.n	8003f6a <HAL_ADC_Start+0x1d2>
 8003f5c:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <HAL_ADC_Start+0x220>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	2b09      	cmp	r3, #9
 8003f66:	d010      	beq.n	8003f8a <HAL_ADC_Start+0x1f2>
 8003f68:	e005      	b.n	8003f76 <HAL_ADC_Start+0x1de>
 8003f6a:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <HAL_ADC_Start+0x224>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	2b09      	cmp	r3, #9
 8003f74:	d009      	beq.n	8003f8a <HAL_ADC_Start+0x1f2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f7e:	d004      	beq.n	8003f8a <HAL_ADC_Start+0x1f2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a0e      	ldr	r2, [pc, #56]	; (8003fc0 <HAL_ADC_Start+0x228>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d10f      	bne.n	8003faa <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0204 	orr.w	r2, r2, #4
 8003f98:	609a      	str	r2, [r3, #8]
 8003f9a:	e006      	b.n	8003faa <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003fa4:	e001      	b.n	8003faa <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	50000100 	.word	0x50000100
 8003fb8:	50000300 	.word	0x50000300
 8003fbc:	50000700 	.word	0x50000700
 8003fc0:	50000400 	.word	0x50000400

08003fc4 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f040 8123 	bne.w	8004226 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_ADC_Start_IT+0x2a>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e11e      	b.n	800422c <HAL_ADC_Start_IT+0x268>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f001 f97e 	bl	80052f8 <ADC_Enable>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f040 810a 	bne.w	800421c <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004024:	d004      	beq.n	8004030 <HAL_ADC_Start_IT+0x6c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a82      	ldr	r2, [pc, #520]	; (8004234 <HAL_ADC_Start_IT+0x270>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d106      	bne.n	800403e <HAL_ADC_Start_IT+0x7a>
 8004030:	4b81      	ldr	r3, [pc, #516]	; (8004238 <HAL_ADC_Start_IT+0x274>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	2b00      	cmp	r3, #0
 800403a:	d010      	beq.n	800405e <HAL_ADC_Start_IT+0x9a>
 800403c:	e005      	b.n	800404a <HAL_ADC_Start_IT+0x86>
 800403e:	4b7f      	ldr	r3, [pc, #508]	; (800423c <HAL_ADC_Start_IT+0x278>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_ADC_Start_IT+0x9a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004052:	d004      	beq.n	800405e <HAL_ADC_Start_IT+0x9a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a79      	ldr	r2, [pc, #484]	; (8004240 <HAL_ADC_Start_IT+0x27c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d115      	bne.n	800408a <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d036      	beq.n	80040e6 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004080:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004088:	e02d      	b.n	80040e6 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800409e:	d004      	beq.n	80040aa <HAL_ADC_Start_IT+0xe6>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a63      	ldr	r2, [pc, #396]	; (8004234 <HAL_ADC_Start_IT+0x270>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d10a      	bne.n	80040c0 <HAL_ADC_Start_IT+0xfc>
 80040aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	bf14      	ite	ne
 80040b8:	2301      	movne	r3, #1
 80040ba:	2300      	moveq	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	e008      	b.n	80040d2 <HAL_ADC_Start_IT+0x10e>
 80040c0:	4b5f      	ldr	r3, [pc, #380]	; (8004240 <HAL_ADC_Start_IT+0x27c>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf14      	ite	ne
 80040cc:	2301      	movne	r3, #1
 80040ce:	2300      	moveq	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f2:	d106      	bne.n	8004102 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f8:	f023 0206 	bic.w	r2, r3, #6
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	645a      	str	r2, [r3, #68]	; 0x44
 8004100:	e002      	b.n	8004108 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	221c      	movs	r2, #28
 8004116:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	2b08      	cmp	r3, #8
 800411e:	d110      	bne.n	8004142 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0204 	bic.w	r2, r2, #4
 800412e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0208 	orr.w	r2, r2, #8
 800413e:	605a      	str	r2, [r3, #4]
          break;
 8004140:	e008      	b.n	8004154 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 020c 	orr.w	r2, r2, #12
 8004150:	605a      	str	r2, [r3, #4]
          break;
 8004152:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004158:	2b01      	cmp	r3, #1
 800415a:	d107      	bne.n	800416c <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0210 	bic.w	r2, r2, #16
 800416a:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004174:	d004      	beq.n	8004180 <HAL_ADC_Start_IT+0x1bc>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a2e      	ldr	r2, [pc, #184]	; (8004234 <HAL_ADC_Start_IT+0x270>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d106      	bne.n	800418e <HAL_ADC_Start_IT+0x1ca>
 8004180:	4b2d      	ldr	r3, [pc, #180]	; (8004238 <HAL_ADC_Start_IT+0x274>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2b00      	cmp	r3, #0
 800418a:	d03e      	beq.n	800420a <HAL_ADC_Start_IT+0x246>
 800418c:	e005      	b.n	800419a <HAL_ADC_Start_IT+0x1d6>
 800418e:	4b2b      	ldr	r3, [pc, #172]	; (800423c <HAL_ADC_Start_IT+0x278>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	2b00      	cmp	r3, #0
 8004198:	d037      	beq.n	800420a <HAL_ADC_Start_IT+0x246>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041a2:	d004      	beq.n	80041ae <HAL_ADC_Start_IT+0x1ea>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a22      	ldr	r2, [pc, #136]	; (8004234 <HAL_ADC_Start_IT+0x270>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d106      	bne.n	80041bc <HAL_ADC_Start_IT+0x1f8>
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <HAL_ADC_Start_IT+0x274>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	2b05      	cmp	r3, #5
 80041b8:	d027      	beq.n	800420a <HAL_ADC_Start_IT+0x246>
 80041ba:	e005      	b.n	80041c8 <HAL_ADC_Start_IT+0x204>
 80041bc:	4b1f      	ldr	r3, [pc, #124]	; (800423c <HAL_ADC_Start_IT+0x278>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	2b05      	cmp	r3, #5
 80041c6:	d020      	beq.n	800420a <HAL_ADC_Start_IT+0x246>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041d0:	d004      	beq.n	80041dc <HAL_ADC_Start_IT+0x218>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a17      	ldr	r2, [pc, #92]	; (8004234 <HAL_ADC_Start_IT+0x270>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d106      	bne.n	80041ea <HAL_ADC_Start_IT+0x226>
 80041dc:	4b16      	ldr	r3, [pc, #88]	; (8004238 <HAL_ADC_Start_IT+0x274>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2b09      	cmp	r3, #9
 80041e6:	d010      	beq.n	800420a <HAL_ADC_Start_IT+0x246>
 80041e8:	e005      	b.n	80041f6 <HAL_ADC_Start_IT+0x232>
 80041ea:	4b14      	ldr	r3, [pc, #80]	; (800423c <HAL_ADC_Start_IT+0x278>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	2b09      	cmp	r3, #9
 80041f4:	d009      	beq.n	800420a <HAL_ADC_Start_IT+0x246>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041fe:	d004      	beq.n	800420a <HAL_ADC_Start_IT+0x246>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a0e      	ldr	r2, [pc, #56]	; (8004240 <HAL_ADC_Start_IT+0x27c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d10f      	bne.n	800422a <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0204 	orr.w	r2, r2, #4
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	e006      	b.n	800422a <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004224:	e001      	b.n	800422a <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004226:	2302      	movs	r3, #2
 8004228:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800422a:	7bfb      	ldrb	r3, [r7, #15]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	50000100 	.word	0x50000100
 8004238:	50000300 	.word	0x50000300
 800423c:	50000700 	.word	0x50000700
 8004240:	50000400 	.word	0x50000400

08004244 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800426c:	2300      	movs	r3, #0
 800426e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b04      	cmp	r3, #4
 8004280:	d106      	bne.n	8004290 <HAL_ADC_IRQHandler+0x30>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d00f      	beq.n	80042b0 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800429a:	2b08      	cmp	r3, #8
 800429c:	f040 80c0 	bne.w	8004420 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	f040 80b8 	bne.w	8004420 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d105      	bne.n	80042c8 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042d0:	d004      	beq.n	80042dc <HAL_ADC_IRQHandler+0x7c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a8e      	ldr	r2, [pc, #568]	; (8004510 <HAL_ADC_IRQHandler+0x2b0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d106      	bne.n	80042ea <HAL_ADC_IRQHandler+0x8a>
 80042dc:	4b8d      	ldr	r3, [pc, #564]	; (8004514 <HAL_ADC_IRQHandler+0x2b4>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d03e      	beq.n	8004366 <HAL_ADC_IRQHandler+0x106>
 80042e8:	e005      	b.n	80042f6 <HAL_ADC_IRQHandler+0x96>
 80042ea:	4b8b      	ldr	r3, [pc, #556]	; (8004518 <HAL_ADC_IRQHandler+0x2b8>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d037      	beq.n	8004366 <HAL_ADC_IRQHandler+0x106>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042fe:	d004      	beq.n	800430a <HAL_ADC_IRQHandler+0xaa>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a82      	ldr	r2, [pc, #520]	; (8004510 <HAL_ADC_IRQHandler+0x2b0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d106      	bne.n	8004318 <HAL_ADC_IRQHandler+0xb8>
 800430a:	4b82      	ldr	r3, [pc, #520]	; (8004514 <HAL_ADC_IRQHandler+0x2b4>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	2b05      	cmp	r3, #5
 8004314:	d027      	beq.n	8004366 <HAL_ADC_IRQHandler+0x106>
 8004316:	e005      	b.n	8004324 <HAL_ADC_IRQHandler+0xc4>
 8004318:	4b7f      	ldr	r3, [pc, #508]	; (8004518 <HAL_ADC_IRQHandler+0x2b8>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	2b05      	cmp	r3, #5
 8004322:	d020      	beq.n	8004366 <HAL_ADC_IRQHandler+0x106>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800432c:	d004      	beq.n	8004338 <HAL_ADC_IRQHandler+0xd8>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a77      	ldr	r2, [pc, #476]	; (8004510 <HAL_ADC_IRQHandler+0x2b0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d106      	bne.n	8004346 <HAL_ADC_IRQHandler+0xe6>
 8004338:	4b76      	ldr	r3, [pc, #472]	; (8004514 <HAL_ADC_IRQHandler+0x2b4>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	2b09      	cmp	r3, #9
 8004342:	d010      	beq.n	8004366 <HAL_ADC_IRQHandler+0x106>
 8004344:	e005      	b.n	8004352 <HAL_ADC_IRQHandler+0xf2>
 8004346:	4b74      	ldr	r3, [pc, #464]	; (8004518 <HAL_ADC_IRQHandler+0x2b8>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	2b09      	cmp	r3, #9
 8004350:	d009      	beq.n	8004366 <HAL_ADC_IRQHandler+0x106>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800435a:	d004      	beq.n	8004366 <HAL_ADC_IRQHandler+0x106>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a6e      	ldr	r2, [pc, #440]	; (800451c <HAL_ADC_IRQHandler+0x2bc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d104      	bne.n	8004370 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	e00f      	b.n	8004390 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004378:	d004      	beq.n	8004384 <HAL_ADC_IRQHandler+0x124>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a64      	ldr	r2, [pc, #400]	; (8004510 <HAL_ADC_IRQHandler+0x2b0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d102      	bne.n	800438a <HAL_ADC_IRQHandler+0x12a>
 8004384:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004388:	e000      	b.n	800438c <HAL_ADC_IRQHandler+0x12c>
 800438a:	4b64      	ldr	r3, [pc, #400]	; (800451c <HAL_ADC_IRQHandler+0x2bc>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800439a:	2b00      	cmp	r3, #0
 800439c:	d139      	bne.n	8004412 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d134      	bne.n	8004412 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d12d      	bne.n	8004412 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d11a      	bne.n	80043fa <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 020c 	bic.w	r2, r2, #12
 80043d2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d112      	bne.n	8004412 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	f043 0201 	orr.w	r2, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40
 80043f8:	e00b      	b.n	8004412 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0210 	orr.w	r2, r3, #16
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	f043 0201 	orr.w	r2, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fc ff64 	bl	80012e0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	220c      	movs	r2, #12
 800441e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b20      	cmp	r3, #32
 800442c:	d106      	bne.n	800443c <HAL_ADC_IRQHandler+0x1dc>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b20      	cmp	r3, #32
 800443a:	d00f      	beq.n	800445c <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8004446:	2b40      	cmp	r3, #64	; 0x40
 8004448:	f040 8143 	bne.w	80046d2 <HAL_ADC_IRQHandler+0x472>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004456:	2b40      	cmp	r3, #64	; 0x40
 8004458:	f040 813b 	bne.w	80046d2 <HAL_ADC_IRQHandler+0x472>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004470:	d004      	beq.n	800447c <HAL_ADC_IRQHandler+0x21c>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a26      	ldr	r2, [pc, #152]	; (8004510 <HAL_ADC_IRQHandler+0x2b0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d106      	bne.n	800448a <HAL_ADC_IRQHandler+0x22a>
 800447c:	4b25      	ldr	r3, [pc, #148]	; (8004514 <HAL_ADC_IRQHandler+0x2b4>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	2b00      	cmp	r3, #0
 8004486:	d03e      	beq.n	8004506 <HAL_ADC_IRQHandler+0x2a6>
 8004488:	e005      	b.n	8004496 <HAL_ADC_IRQHandler+0x236>
 800448a:	4b23      	ldr	r3, [pc, #140]	; (8004518 <HAL_ADC_IRQHandler+0x2b8>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	2b00      	cmp	r3, #0
 8004494:	d037      	beq.n	8004506 <HAL_ADC_IRQHandler+0x2a6>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800449e:	d004      	beq.n	80044aa <HAL_ADC_IRQHandler+0x24a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1a      	ldr	r2, [pc, #104]	; (8004510 <HAL_ADC_IRQHandler+0x2b0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d106      	bne.n	80044b8 <HAL_ADC_IRQHandler+0x258>
 80044aa:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <HAL_ADC_IRQHandler+0x2b4>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	2b05      	cmp	r3, #5
 80044b4:	d027      	beq.n	8004506 <HAL_ADC_IRQHandler+0x2a6>
 80044b6:	e005      	b.n	80044c4 <HAL_ADC_IRQHandler+0x264>
 80044b8:	4b17      	ldr	r3, [pc, #92]	; (8004518 <HAL_ADC_IRQHandler+0x2b8>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2b05      	cmp	r3, #5
 80044c2:	d020      	beq.n	8004506 <HAL_ADC_IRQHandler+0x2a6>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044cc:	d004      	beq.n	80044d8 <HAL_ADC_IRQHandler+0x278>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a0f      	ldr	r2, [pc, #60]	; (8004510 <HAL_ADC_IRQHandler+0x2b0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d106      	bne.n	80044e6 <HAL_ADC_IRQHandler+0x286>
 80044d8:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <HAL_ADC_IRQHandler+0x2b4>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	2b09      	cmp	r3, #9
 80044e2:	d010      	beq.n	8004506 <HAL_ADC_IRQHandler+0x2a6>
 80044e4:	e005      	b.n	80044f2 <HAL_ADC_IRQHandler+0x292>
 80044e6:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <HAL_ADC_IRQHandler+0x2b8>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	2b09      	cmp	r3, #9
 80044f0:	d009      	beq.n	8004506 <HAL_ADC_IRQHandler+0x2a6>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044fa:	d004      	beq.n	8004506 <HAL_ADC_IRQHandler+0x2a6>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a06      	ldr	r2, [pc, #24]	; (800451c <HAL_ADC_IRQHandler+0x2bc>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d10c      	bne.n	8004520 <HAL_ADC_IRQHandler+0x2c0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	e017      	b.n	8004540 <HAL_ADC_IRQHandler+0x2e0>
 8004510:	50000100 	.word	0x50000100
 8004514:	50000300 	.word	0x50000300
 8004518:	50000700 	.word	0x50000700
 800451c:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004528:	d004      	beq.n	8004534 <HAL_ADC_IRQHandler+0x2d4>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a5b      	ldr	r2, [pc, #364]	; (800469c <HAL_ADC_IRQHandler+0x43c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d102      	bne.n	800453a <HAL_ADC_IRQHandler+0x2da>
 8004534:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004538:	e000      	b.n	800453c <HAL_ADC_IRQHandler+0x2dc>
 800453a:	4b59      	ldr	r3, [pc, #356]	; (80046a0 <HAL_ADC_IRQHandler+0x440>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004546:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800454a:	2b00      	cmp	r3, #0
 800454c:	f040 80ba 	bne.w	80046c4 <HAL_ADC_IRQHandler+0x464>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00d      	beq.n	8004576 <HAL_ADC_IRQHandler+0x316>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004564:	2b00      	cmp	r3, #0
 8004566:	f040 80ad 	bne.w	80046c4 <HAL_ADC_IRQHandler+0x464>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004570:	2b00      	cmp	r3, #0
 8004572:	f040 80a7 	bne.w	80046c4 <HAL_ADC_IRQHandler+0x464>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004580:	2b40      	cmp	r3, #64	; 0x40
 8004582:	f040 809f 	bne.w	80046c4 <HAL_ADC_IRQHandler+0x464>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800458e:	d004      	beq.n	800459a <HAL_ADC_IRQHandler+0x33a>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a41      	ldr	r2, [pc, #260]	; (800469c <HAL_ADC_IRQHandler+0x43c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d106      	bne.n	80045a8 <HAL_ADC_IRQHandler+0x348>
 800459a:	4b42      	ldr	r3, [pc, #264]	; (80046a4 <HAL_ADC_IRQHandler+0x444>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d03e      	beq.n	8004624 <HAL_ADC_IRQHandler+0x3c4>
 80045a6:	e005      	b.n	80045b4 <HAL_ADC_IRQHandler+0x354>
 80045a8:	4b3f      	ldr	r3, [pc, #252]	; (80046a8 <HAL_ADC_IRQHandler+0x448>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d037      	beq.n	8004624 <HAL_ADC_IRQHandler+0x3c4>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045bc:	d004      	beq.n	80045c8 <HAL_ADC_IRQHandler+0x368>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a36      	ldr	r2, [pc, #216]	; (800469c <HAL_ADC_IRQHandler+0x43c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d106      	bne.n	80045d6 <HAL_ADC_IRQHandler+0x376>
 80045c8:	4b36      	ldr	r3, [pc, #216]	; (80046a4 <HAL_ADC_IRQHandler+0x444>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	2b06      	cmp	r3, #6
 80045d2:	d027      	beq.n	8004624 <HAL_ADC_IRQHandler+0x3c4>
 80045d4:	e005      	b.n	80045e2 <HAL_ADC_IRQHandler+0x382>
 80045d6:	4b34      	ldr	r3, [pc, #208]	; (80046a8 <HAL_ADC_IRQHandler+0x448>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	2b06      	cmp	r3, #6
 80045e0:	d020      	beq.n	8004624 <HAL_ADC_IRQHandler+0x3c4>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045ea:	d004      	beq.n	80045f6 <HAL_ADC_IRQHandler+0x396>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a2a      	ldr	r2, [pc, #168]	; (800469c <HAL_ADC_IRQHandler+0x43c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d106      	bne.n	8004604 <HAL_ADC_IRQHandler+0x3a4>
 80045f6:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <HAL_ADC_IRQHandler+0x444>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	2b07      	cmp	r3, #7
 8004600:	d010      	beq.n	8004624 <HAL_ADC_IRQHandler+0x3c4>
 8004602:	e005      	b.n	8004610 <HAL_ADC_IRQHandler+0x3b0>
 8004604:	4b28      	ldr	r3, [pc, #160]	; (80046a8 <HAL_ADC_IRQHandler+0x448>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	2b07      	cmp	r3, #7
 800460e:	d009      	beq.n	8004624 <HAL_ADC_IRQHandler+0x3c4>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004618:	d004      	beq.n	8004624 <HAL_ADC_IRQHandler+0x3c4>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a20      	ldr	r2, [pc, #128]	; (80046a0 <HAL_ADC_IRQHandler+0x440>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d104      	bne.n	800462e <HAL_ADC_IRQHandler+0x3ce>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	e00f      	b.n	800464e <HAL_ADC_IRQHandler+0x3ee>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004636:	d004      	beq.n	8004642 <HAL_ADC_IRQHandler+0x3e2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a17      	ldr	r2, [pc, #92]	; (800469c <HAL_ADC_IRQHandler+0x43c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d102      	bne.n	8004648 <HAL_ADC_IRQHandler+0x3e8>
 8004642:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004646:	e000      	b.n	800464a <HAL_ADC_IRQHandler+0x3ea>
 8004648:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <HAL_ADC_IRQHandler+0x440>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d135      	bne.n	80046c4 <HAL_ADC_IRQHandler+0x464>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d122      	bne.n	80046ac <HAL_ADC_IRQHandler+0x44c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004674:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d11a      	bne.n	80046c4 <HAL_ADC_IRQHandler+0x464>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f043 0201 	orr.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
 800469a:	e013      	b.n	80046c4 <HAL_ADC_IRQHandler+0x464>
 800469c:	50000100 	.word	0x50000100
 80046a0:	50000400 	.word	0x50000400
 80046a4:	50000300 	.word	0x50000300
 80046a8:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	f043 0210 	orr.w	r2, r3, #16
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046bc:	f043 0201 	orr.w	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f9ab 	bl	8004a20 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2260      	movs	r2, #96	; 0x60
 80046d0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046dc:	2b80      	cmp	r3, #128	; 0x80
 80046de:	d113      	bne.n	8004708 <HAL_ADC_IRQHandler+0x4a8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	2b80      	cmp	r3, #128	; 0x80
 80046ec:	d10c      	bne.n	8004708 <HAL_ADC_IRQHandler+0x4a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff f93e 	bl	800397c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2280      	movs	r2, #128	; 0x80
 8004706:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004716:	d115      	bne.n	8004744 <HAL_ADC_IRQHandler+0x4e4>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004726:	d10d      	bne.n	8004744 <HAL_ADC_IRQHandler+0x4e4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f987 	bl	8004a48 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004742:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800474e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004752:	d115      	bne.n	8004780 <HAL_ADC_IRQHandler+0x520>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800475e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004762:	d10d      	bne.n	8004780 <HAL_ADC_IRQHandler+0x520>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f973 	bl	8004a5c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800477e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b10      	cmp	r3, #16
 800478c:	d149      	bne.n	8004822 <HAL_ADC_IRQHandler+0x5c2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b10      	cmp	r3, #16
 800479a:	d142      	bne.n	8004822 <HAL_ADC_IRQHandler+0x5c2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d102      	bne.n	80047aa <HAL_ADC_IRQHandler+0x54a>
    {
      overrun_error = 1U;
 80047a4:	2301      	movs	r3, #1
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	e025      	b.n	80047f6 <HAL_ADC_IRQHandler+0x596>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047b2:	d004      	beq.n	80047be <HAL_ADC_IRQHandler+0x55e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a2e      	ldr	r2, [pc, #184]	; (8004874 <HAL_ADC_IRQHandler+0x614>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d101      	bne.n	80047c2 <HAL_ADC_IRQHandler+0x562>
 80047be:	4b2e      	ldr	r3, [pc, #184]	; (8004878 <HAL_ADC_IRQHandler+0x618>)
 80047c0:	e000      	b.n	80047c4 <HAL_ADC_IRQHandler+0x564>
 80047c2:	4b2e      	ldr	r3, [pc, #184]	; (800487c <HAL_ADC_IRQHandler+0x61c>)
 80047c4:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <HAL_ADC_IRQHandler+0x586>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d10a      	bne.n	80047f6 <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 80047e0:	2301      	movs	r3, #1
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	e007      	b.n	80047f6 <HAL_ADC_IRQHandler+0x596>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 80047f2:	2301      	movs	r3, #1
 80047f4:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d10e      	bne.n	800481a <HAL_ADC_IRQHandler+0x5ba>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480c:	f043 0202 	orr.w	r2, r3, #2
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff f8bb 	bl	8003990 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2210      	movs	r2, #16
 8004820:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004830:	d11b      	bne.n	800486a <HAL_ADC_IRQHandler+0x60a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004840:	d113      	bne.n	800486a <HAL_ADC_IRQHandler+0x60a>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004852:	f043 0208 	orr.w	r2, r3, #8
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004862:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f8e5 	bl	8004a34 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800486a:	bf00      	nop
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	50000100 	.word	0x50000100
 8004878:	50000300 	.word	0x50000300
 800487c:	50000700 	.word	0x50000700

08004880 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b09a      	sub	sp, #104	; 0x68
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_HandleTypeDef tmphadcSlave = {0};
 8004892:	f107 0310 	add.w	r3, r7, #16
 8004896:	2250      	movs	r2, #80	; 0x50
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f005 fcda 	bl	800a254 <memset>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e0a2      	b.n	80049f4 <HAL_ADCEx_MultiModeStart_DMA+0x174>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Perform ADC enable and conversion start if no conversion is on going */
  /* (check on ADC master only) */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f040 8092 	bne.w	80049ea <HAL_ADCEx_MultiModeStart_DMA+0x16a>
  {
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    /* (Depending on STM32F3 product, there may be up to 2 ADC slaves)        */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048ce:	d102      	bne.n	80048d6 <HAL_ADCEx_MultiModeStart_DMA+0x56>
 80048d0:	4b4a      	ldr	r3, [pc, #296]	; (80049fc <HAL_ADCEx_MultiModeStart_DMA+0x17c>)
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	e009      	b.n	80048ea <HAL_ADCEx_MultiModeStart_DMA+0x6a>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a49      	ldr	r2, [pc, #292]	; (8004a00 <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d102      	bne.n	80048e6 <HAL_ADCEx_MultiModeStart_DMA+0x66>
 80048e0:	4b48      	ldr	r3, [pc, #288]	; (8004a04 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	e001      	b.n	80048ea <HAL_ADCEx_MultiModeStart_DMA+0x6a>
 80048e6:	2300      	movs	r3, #0
 80048e8:	613b      	str	r3, [r7, #16]
    
    if (tmphadcSlave.Instance == NULL)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10b      	bne.n	8004908 <HAL_ADCEx_MultiModeStart_DMA+0x88>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	f043 0220 	orr.w	r2, r3, #32
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e075      	b.n	80049f4 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    }
    
    
    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 fcf5 	bl	80052f8 <ADC_Enable>
 800490e:	4603      	mov	r3, r0
 8004910:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (tmp_hal_status == HAL_OK)
 8004914:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004918:	2b00      	cmp	r3, #0
 800491a:	d107      	bne.n	800492c <HAL_ADCEx_MultiModeStart_DMA+0xac>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 800491c:	f107 0310 	add.w	r3, r7, #16
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fce9 	bl	80052f8 <ADC_Enable>
 8004926:	4603      	mov	r3, r0
 8004928:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    }
    
    /* Start conversion all ADCs of multimode are effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800492c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004930:	2b00      	cmp	r3, #0
 8004932:	d155      	bne.n	80049e0 <HAL_ADCEx_MultiModeStart_DMA+0x160>
    {
      /* Set ADC state (ADC master)                                           */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004938:	4b33      	ldr	r3, [pc, #204]	; (8004a08 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 800493a:	4013      	ands	r3, r2
 800493c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP | HAL_ADC_STATE_MULTIMODE_SLAVE,
                        HAL_ADC_STATE_REG_BUSY);
        
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d007      	beq.n	8004962 <HAL_ADCEx_MultiModeStart_DMA+0xe2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800495a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	641a      	str	r2, [r3, #64]	; 0x40
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	645a      	str	r2, [r3, #68]	; 0x44
      
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	4a25      	ldr	r2, [pc, #148]	; (8004a0c <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 8004976:	629a      	str	r2, [r3, #40]	; 0x28
         
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	4a24      	ldr	r2, [pc, #144]	; (8004a10 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 800497e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	4a23      	ldr	r2, [pc, #140]	; (8004a14 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8004986:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004990:	d004      	beq.n	800499c <HAL_ADCEx_MultiModeStart_DMA+0x11c>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a19      	ldr	r2, [pc, #100]	; (80049fc <HAL_ADCEx_MultiModeStart_DMA+0x17c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d101      	bne.n	80049a0 <HAL_ADCEx_MultiModeStart_DMA+0x120>
 800499c:	4b1e      	ldr	r3, [pc, #120]	; (8004a18 <HAL_ADCEx_MultiModeStart_DMA+0x198>)
 800499e:	e000      	b.n	80049a2 <HAL_ADCEx_MultiModeStart_DMA+0x122>
 80049a0:	4b1e      	ldr	r3, [pc, #120]	; (8004a1c <HAL_ADCEx_MultiModeStart_DMA+0x19c>)
 80049a2:	663b      	str	r3, [r7, #96]	; 0x60
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	221c      	movs	r2, #28
 80049aa:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0210 	orr.w	r2, r2, #16
 80049ba:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80049c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049c2:	330c      	adds	r3, #12
 80049c4:	4619      	mov	r1, r3
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f000 feb7 	bl	800573c <HAL_DMA_Start_IT>
          
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0204 	orr.w	r2, r2, #4
 80049dc:	609a      	str	r2, [r3, #8]
 80049de:	e007      	b.n	80049f0 <HAL_ADCEx_MultiModeStart_DMA+0x170>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80049e8:	e002      	b.n	80049f0 <HAL_ADCEx_MultiModeStart_DMA+0x170>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049ea:	2302      	movs	r3, #2
 80049ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  /* Return function status */
  return tmp_hal_status;
 80049f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3768      	adds	r7, #104	; 0x68
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	50000100 	.word	0x50000100
 8004a00:	50000400 	.word	0x50000400
 8004a04:	50000500 	.word	0x50000500
 8004a08:	ffeff0fe 	.word	0xffeff0fe
 8004a0c:	0800522d 	.word	0x0800522d
 8004a10:	080052a7 	.word	0x080052a7
 8004a14:	080052c3 	.word	0x080052c3
 8004a18:	50000300 	.word	0x50000300
 8004a1c:	50000700 	.word	0x50000700

08004a20 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b09b      	sub	sp, #108	; 0x6c
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x22>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e2ca      	b.n	8005028 <HAL_ADC_ConfigChannel+0x5b8>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f040 82ae 	bne.w	8005006 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d81c      	bhi.n	8004aec <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	4613      	mov	r3, r2
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4413      	add	r3, r2
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	231f      	movs	r3, #31
 8004ac8:	4093      	lsls	r3, r2
 8004aca:	43db      	mvns	r3, r3
 8004acc:	4019      	ands	r1, r3
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	4413      	add	r3, r2
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	fa00 f203 	lsl.w	r2, r0, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
 8004aea:	e063      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b09      	cmp	r3, #9
 8004af2:	d81e      	bhi.n	8004b32 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	4613      	mov	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	4413      	add	r3, r2
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	3b1e      	subs	r3, #30
 8004b08:	221f      	movs	r2, #31
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	4019      	ands	r1, r3
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	4413      	add	r3, r2
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	3b1e      	subs	r3, #30
 8004b24:	fa00 f203 	lsl.w	r2, r0, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	635a      	str	r2, [r3, #52]	; 0x34
 8004b30:	e040      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b0e      	cmp	r3, #14
 8004b38:	d81e      	bhi.n	8004b78 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	4413      	add	r3, r2
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	3b3c      	subs	r3, #60	; 0x3c
 8004b4e:	221f      	movs	r2, #31
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	4019      	ands	r1, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	4413      	add	r3, r2
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	3b3c      	subs	r3, #60	; 0x3c
 8004b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38
 8004b76:	e01d      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	4613      	mov	r3, r2
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	4413      	add	r3, r2
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	3b5a      	subs	r3, #90	; 0x5a
 8004b8c:	221f      	movs	r2, #31
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	43db      	mvns	r3, r3
 8004b94:	4019      	ands	r1, r3
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	4413      	add	r3, r2
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	3b5a      	subs	r3, #90	; 0x5a
 8004ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 030c 	and.w	r3, r3, #12
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f040 80e5 	bne.w	8004d8e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b09      	cmp	r3, #9
 8004bca:	d91c      	bls.n	8004c06 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6999      	ldr	r1, [r3, #24]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	4413      	add	r3, r2
 8004bdc:	3b1e      	subs	r3, #30
 8004bde:	2207      	movs	r2, #7
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	43db      	mvns	r3, r3
 8004be6:	4019      	ands	r1, r3
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6898      	ldr	r0, [r3, #8]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	4413      	add	r3, r2
 8004bf6:	3b1e      	subs	r3, #30
 8004bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	619a      	str	r2, [r3, #24]
 8004c04:	e019      	b.n	8004c3a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6959      	ldr	r1, [r3, #20]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	4413      	add	r3, r2
 8004c16:	2207      	movs	r2, #7
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	4019      	ands	r1, r3
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	6898      	ldr	r0, [r3, #8]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	4413      	add	r3, r2
 8004c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	695a      	ldr	r2, [r3, #20]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	08db      	lsrs	r3, r3, #3
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d84f      	bhi.n	8004cfc <HAL_ADC_ConfigChannel+0x28c>
 8004c5c:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <HAL_ADC_ConfigChannel+0x1f4>)
 8004c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c62:	bf00      	nop
 8004c64:	08004c75 	.word	0x08004c75
 8004c68:	08004c97 	.word	0x08004c97
 8004c6c:	08004cb9 	.word	0x08004cb9
 8004c70:	08004cdb 	.word	0x08004cdb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c7a:	4b9a      	ldr	r3, [pc, #616]	; (8004ee4 <HAL_ADC_ConfigChannel+0x474>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	0691      	lsls	r1, r2, #26
 8004c84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c86:	430a      	orrs	r2, r1
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004c92:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004c94:	e07e      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c9c:	4b91      	ldr	r3, [pc, #580]	; (8004ee4 <HAL_ADC_ConfigChannel+0x474>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	0691      	lsls	r1, r2, #26
 8004ca6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004cb4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004cb6:	e06d      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004cbe:	4b89      	ldr	r3, [pc, #548]	; (8004ee4 <HAL_ADC_ConfigChannel+0x474>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	0691      	lsls	r1, r2, #26
 8004cc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004cd6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004cd8:	e05c      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ce0:	4b80      	ldr	r3, [pc, #512]	; (8004ee4 <HAL_ADC_ConfigChannel+0x474>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	0691      	lsls	r1, r2, #26
 8004cea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cec:	430a      	orrs	r2, r1
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004cf8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004cfa:	e04b      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	069b      	lsls	r3, r3, #26
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d107      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d1e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	069b      	lsls	r3, r3, #26
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d107      	bne.n	8004d44 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d42:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	069b      	lsls	r3, r3, #26
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d107      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d66:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	069b      	lsls	r3, r3, #26
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d10a      	bne.n	8004d92 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d8a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004d8c:	e001      	b.n	8004d92 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004d8e:	bf00      	nop
 8004d90:	e000      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x324>
      break;
 8004d92:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d108      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x344>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x344>
 8004db0:	2301      	movs	r3, #1
 8004db2:	e000      	b.n	8004db6 <HAL_ADC_ConfigChannel+0x346>
 8004db4:	2300      	movs	r3, #0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f040 8130 	bne.w	800501c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d00f      	beq.n	8004de4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43da      	mvns	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	400a      	ands	r2, r1
 8004dde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004de2:	e049      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	409a      	lsls	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b09      	cmp	r3, #9
 8004e04:	d91c      	bls.n	8004e40 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6999      	ldr	r1, [r3, #24]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	4413      	add	r3, r2
 8004e16:	3b1b      	subs	r3, #27
 8004e18:	2207      	movs	r2, #7
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	4019      	ands	r1, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6898      	ldr	r0, [r3, #8]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	4413      	add	r3, r2
 8004e30:	3b1b      	subs	r3, #27
 8004e32:	fa00 f203 	lsl.w	r2, r0, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	619a      	str	r2, [r3, #24]
 8004e3e:	e01b      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6959      	ldr	r1, [r3, #20]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	4413      	add	r3, r2
 8004e52:	2207      	movs	r2, #7
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	4019      	ands	r1, r3
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	6898      	ldr	r0, [r3, #8]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	4613      	mov	r3, r2
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	4413      	add	r3, r2
 8004e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e80:	d004      	beq.n	8004e8c <HAL_ADC_ConfigChannel+0x41c>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <HAL_ADC_ConfigChannel+0x478>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d101      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x420>
 8004e8c:	4b17      	ldr	r3, [pc, #92]	; (8004eec <HAL_ADC_ConfigChannel+0x47c>)
 8004e8e:	e000      	b.n	8004e92 <HAL_ADC_ConfigChannel+0x422>
 8004e90:	4b17      	ldr	r3, [pc, #92]	; (8004ef0 <HAL_ADC_ConfigChannel+0x480>)
 8004e92:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d105      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d015      	beq.n	8004ed4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004eac:	2b11      	cmp	r3, #17
 8004eae:	d105      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00b      	beq.n	8004ed4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004ec0:	2b12      	cmp	r3, #18
 8004ec2:	f040 80ab 	bne.w	800501c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f040 80a4 	bne.w	800501c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004edc:	d10a      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x484>
 8004ede:	4b02      	ldr	r3, [pc, #8]	; (8004ee8 <HAL_ADC_ConfigChannel+0x478>)
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	e022      	b.n	8004f2a <HAL_ADC_ConfigChannel+0x4ba>
 8004ee4:	83fff000 	.word	0x83fff000
 8004ee8:	50000100 	.word	0x50000100
 8004eec:	50000300 	.word	0x50000300
 8004ef0:	50000700 	.word	0x50000700
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a4e      	ldr	r2, [pc, #312]	; (8005034 <HAL_ADC_ConfigChannel+0x5c4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d103      	bne.n	8004f06 <HAL_ADC_ConfigChannel+0x496>
 8004efe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	e011      	b.n	8004f2a <HAL_ADC_ConfigChannel+0x4ba>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a4b      	ldr	r2, [pc, #300]	; (8005038 <HAL_ADC_ConfigChannel+0x5c8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d102      	bne.n	8004f16 <HAL_ADC_ConfigChannel+0x4a6>
 8004f10:	4b4a      	ldr	r3, [pc, #296]	; (800503c <HAL_ADC_ConfigChannel+0x5cc>)
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e009      	b.n	8004f2a <HAL_ADC_ConfigChannel+0x4ba>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a48      	ldr	r2, [pc, #288]	; (800503c <HAL_ADC_ConfigChannel+0x5cc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d102      	bne.n	8004f26 <HAL_ADC_ConfigChannel+0x4b6>
 8004f20:	4b45      	ldr	r3, [pc, #276]	; (8005038 <HAL_ADC_ConfigChannel+0x5c8>)
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	e001      	b.n	8004f2a <HAL_ADC_ConfigChannel+0x4ba>
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 0303 	and.w	r3, r3, #3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d108      	bne.n	8004f4a <HAL_ADC_ConfigChannel+0x4da>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d101      	bne.n	8004f4a <HAL_ADC_ConfigChannel+0x4da>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <HAL_ADC_ConfigChannel+0x4dc>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d150      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004f50:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d010      	beq.n	8004f78 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d107      	bne.n	8004f72 <HAL_ADC_ConfigChannel+0x502>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <HAL_ADC_ConfigChannel+0x502>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x504>
 8004f72:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d13c      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b10      	cmp	r3, #16
 8004f7e:	d11d      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x54c>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f88:	d118      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f94:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f96:	4b2a      	ldr	r3, [pc, #168]	; (8005040 <HAL_ADC_ConfigChannel+0x5d0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <HAL_ADC_ConfigChannel+0x5d4>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	0c9a      	lsrs	r2, r3, #18
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004fac:	e002      	b.n	8004fb4 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f9      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004fba:	e02e      	b.n	800501a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b11      	cmp	r3, #17
 8004fc2:	d10b      	bne.n	8004fdc <HAL_ADC_ConfigChannel+0x56c>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fcc:	d106      	bne.n	8004fdc <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004fda:	e01e      	b.n	800501a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b12      	cmp	r3, #18
 8004fe2:	d11a      	bne.n	800501a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fee:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004ff0:	e013      	b.n	800501a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f043 0220 	orr.w	r2, r3, #32
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005004:	e00a      	b.n	800501c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	f043 0220 	orr.w	r2, r3, #32
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005018:	e000      	b.n	800501c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800501a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005024:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005028:	4618      	mov	r0, r3
 800502a:	376c      	adds	r7, #108	; 0x6c
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	50000100 	.word	0x50000100
 8005038:	50000400 	.word	0x50000400
 800503c:	50000500 	.word	0x50000500
 8005040:	20000000 	.word	0x20000000
 8005044:	431bde83 	.word	0x431bde83

08005048 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8005048:	b480      	push	{r7}
 800504a:	b099      	sub	sp, #100	; 0x64
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005060:	d102      	bne.n	8005068 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8005062:	4b6d      	ldr	r3, [pc, #436]	; (8005218 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	e01a      	b.n	800509e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a6a      	ldr	r2, [pc, #424]	; (8005218 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d103      	bne.n	800507a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8005072:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	e011      	b.n	800509e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a67      	ldr	r2, [pc, #412]	; (800521c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d102      	bne.n	800508a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005084:	4b66      	ldr	r3, [pc, #408]	; (8005220 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	e009      	b.n	800509e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a64      	ldr	r2, [pc, #400]	; (8005220 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d102      	bne.n	800509a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005094:	4b61      	ldr	r3, [pc, #388]	; (800521c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005096:	60bb      	str	r3, [r7, #8]
 8005098:	e001      	b.n	800509e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e0b0      	b.n	800520a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e0a9      	b.n	800520a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f040 808d 	bne.w	80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f040 8086 	bne.w	80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050e4:	d004      	beq.n	80050f0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a4b      	ldr	r2, [pc, #300]	; (8005218 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d101      	bne.n	80050f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80050f0:	4b4c      	ldr	r3, [pc, #304]	; (8005224 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80050f2:	e000      	b.n	80050f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80050f4:	4b4c      	ldr	r3, [pc, #304]	; (8005228 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80050f6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d040      	beq.n	8005182 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005100:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005112:	035b      	lsls	r3, r3, #13
 8005114:	430b      	orrs	r3, r1
 8005116:	431a      	orrs	r2, r3
 8005118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800511a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	2b01      	cmp	r3, #1
 8005128:	d108      	bne.n	800513c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800513c:	2300      	movs	r3, #0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d15c      	bne.n	80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	2b01      	cmp	r3, #1
 800514c:	d107      	bne.n	800515e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800515e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005160:	2b00      	cmp	r3, #0
 8005162:	d14b      	bne.n	80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800516c:	f023 030f 	bic.w	r3, r3, #15
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	6811      	ldr	r1, [r2, #0]
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	6892      	ldr	r2, [r2, #8]
 8005178:	430a      	orrs	r2, r1
 800517a:	431a      	orrs	r2, r3
 800517c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800517e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005180:	e03c      	b.n	80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800518a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800518c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	2b01      	cmp	r3, #1
 800519a:	d108      	bne.n	80051ae <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80051ae:	2300      	movs	r3, #0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d123      	bne.n	80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d107      	bne.n	80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80051d0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d112      	bne.n	80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80051d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80051de:	f023 030f 	bic.w	r3, r3, #15
 80051e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051e4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80051e6:	e009      	b.n	80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80051fa:	e000      	b.n	80051fe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80051fc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005206:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800520a:	4618      	mov	r0, r3
 800520c:	3764      	adds	r7, #100	; 0x64
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	50000100 	.word	0x50000100
 800521c:	50000400 	.word	0x50000400
 8005220:	50000500 	.word	0x50000500
 8005224:	50000300 	.word	0x50000300
 8005228:	50000700 	.word	0x50000700

0800522c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005242:	2b00      	cmp	r3, #0
 8005244:	d126      	bne.n	8005294 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800525c:	2b00      	cmp	r3, #0
 800525e:	d115      	bne.n	800528c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005264:	2b00      	cmp	r3, #0
 8005266:	d111      	bne.n	800528c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d105      	bne.n	800528c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	f043 0201 	orr.w	r2, r3, #1
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7fc f827 	bl	80012e0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005292:	e004      	b.n	800529e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	4798      	blx	r3
}
 800529e:	bf00      	nop
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b084      	sub	sp, #16
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f7fe fb57 	bl	8003968 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80052ba:	bf00      	nop
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e0:	f043 0204 	orr.w	r2, r3, #4
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f7fe fb51 	bl	8003990 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052ee:	bf00      	nop
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	2b01      	cmp	r3, #1
 8005310:	d108      	bne.n	8005324 <ADC_Enable+0x2c>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <ADC_Enable+0x2c>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <ADC_Enable+0x2e>
 8005324:	2300      	movs	r3, #0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d143      	bne.n	80053b2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	4b22      	ldr	r3, [pc, #136]	; (80053bc <ADC_Enable+0xc4>)
 8005332:	4013      	ands	r3, r2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00d      	beq.n	8005354 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	f043 0210 	orr.w	r2, r3, #16
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005348:	f043 0201 	orr.w	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e02f      	b.n	80053b4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005364:	f7fe faf4 	bl	8003950 <HAL_GetTick>
 8005368:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800536a:	e01b      	b.n	80053a4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800536c:	f7fe faf0 	bl	8003950 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d914      	bls.n	80053a4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b01      	cmp	r3, #1
 8005386:	d00d      	beq.n	80053a4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	f043 0210 	orr.w	r2, r3, #16
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005398:	f043 0201 	orr.w	r2, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e007      	b.n	80053b4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d1dc      	bne.n	800536c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	8000003f 	.word	0x8000003f

080053c0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d108      	bne.n	80053ec <ADC_Disable+0x2c>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <ADC_Disable+0x2c>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e000      	b.n	80053ee <ADC_Disable+0x2e>
 80053ec:	2300      	movs	r3, #0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d047      	beq.n	8005482 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 030d 	and.w	r3, r3, #13
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d10f      	bne.n	8005420 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0202 	orr.w	r2, r2, #2
 800540e:	609a      	str	r2, [r3, #8]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2203      	movs	r2, #3
 8005416:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005418:	f7fe fa9a 	bl	8003950 <HAL_GetTick>
 800541c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800541e:	e029      	b.n	8005474 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	f043 0210 	orr.w	r2, r3, #16
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005430:	f043 0201 	orr.w	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e023      	b.n	8005484 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800543c:	f7fe fa88 	bl	8003950 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d914      	bls.n	8005474 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b01      	cmp	r3, #1
 8005456:	d10d      	bne.n	8005474 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	f043 0210 	orr.w	r2, r3, #16
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005468:	f043 0201 	orr.w	r2, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e007      	b.n	8005484 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b01      	cmp	r3, #1
 8005480:	d0dc      	beq.n	800543c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800549c:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <__NVIC_SetPriorityGrouping+0x44>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054a8:	4013      	ands	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054be:	4a04      	ldr	r2, [pc, #16]	; (80054d0 <__NVIC_SetPriorityGrouping+0x44>)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	60d3      	str	r3, [r2, #12]
}
 80054c4:	bf00      	nop
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	e000ed00 	.word	0xe000ed00

080054d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054d8:	4b04      	ldr	r3, [pc, #16]	; (80054ec <__NVIC_GetPriorityGrouping+0x18>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	0a1b      	lsrs	r3, r3, #8
 80054de:	f003 0307 	and.w	r3, r3, #7
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	e000ed00 	.word	0xe000ed00

080054f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	db0b      	blt.n	800551a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	f003 021f 	and.w	r2, r3, #31
 8005508:	4907      	ldr	r1, [pc, #28]	; (8005528 <__NVIC_EnableIRQ+0x38>)
 800550a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	2001      	movs	r0, #1
 8005512:	fa00 f202 	lsl.w	r2, r0, r2
 8005516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	e000e100 	.word	0xe000e100

0800552c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	6039      	str	r1, [r7, #0]
 8005536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553c:	2b00      	cmp	r3, #0
 800553e:	db0a      	blt.n	8005556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	b2da      	uxtb	r2, r3
 8005544:	490c      	ldr	r1, [pc, #48]	; (8005578 <__NVIC_SetPriority+0x4c>)
 8005546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800554a:	0112      	lsls	r2, r2, #4
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	440b      	add	r3, r1
 8005550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005554:	e00a      	b.n	800556c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	b2da      	uxtb	r2, r3
 800555a:	4908      	ldr	r1, [pc, #32]	; (800557c <__NVIC_SetPriority+0x50>)
 800555c:	79fb      	ldrb	r3, [r7, #7]
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	3b04      	subs	r3, #4
 8005564:	0112      	lsls	r2, r2, #4
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	440b      	add	r3, r1
 800556a:	761a      	strb	r2, [r3, #24]
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	e000e100 	.word	0xe000e100
 800557c:	e000ed00 	.word	0xe000ed00

08005580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005580:	b480      	push	{r7}
 8005582:	b089      	sub	sp, #36	; 0x24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f1c3 0307 	rsb	r3, r3, #7
 800559a:	2b04      	cmp	r3, #4
 800559c:	bf28      	it	cs
 800559e:	2304      	movcs	r3, #4
 80055a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	3304      	adds	r3, #4
 80055a6:	2b06      	cmp	r3, #6
 80055a8:	d902      	bls.n	80055b0 <NVIC_EncodePriority+0x30>
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	3b03      	subs	r3, #3
 80055ae:	e000      	b.n	80055b2 <NVIC_EncodePriority+0x32>
 80055b0:	2300      	movs	r3, #0
 80055b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055b4:	f04f 32ff 	mov.w	r2, #4294967295
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	43da      	mvns	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	401a      	ands	r2, r3
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055c8:	f04f 31ff 	mov.w	r1, #4294967295
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	fa01 f303 	lsl.w	r3, r1, r3
 80055d2:	43d9      	mvns	r1, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055d8:	4313      	orrs	r3, r2
         );
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3724      	adds	r7, #36	; 0x24
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055f8:	d301      	bcc.n	80055fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055fa:	2301      	movs	r3, #1
 80055fc:	e00f      	b.n	800561e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055fe:	4a0a      	ldr	r2, [pc, #40]	; (8005628 <SysTick_Config+0x40>)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3b01      	subs	r3, #1
 8005604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005606:	210f      	movs	r1, #15
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	f7ff ff8e 	bl	800552c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005610:	4b05      	ldr	r3, [pc, #20]	; (8005628 <SysTick_Config+0x40>)
 8005612:	2200      	movs	r2, #0
 8005614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005616:	4b04      	ldr	r3, [pc, #16]	; (8005628 <SysTick_Config+0x40>)
 8005618:	2207      	movs	r2, #7
 800561a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	e000e010 	.word	0xe000e010

0800562c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff ff29 	bl	800548c <__NVIC_SetPriorityGrouping>
}
 800563a:	bf00      	nop
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b086      	sub	sp, #24
 8005646:	af00      	add	r7, sp, #0
 8005648:	4603      	mov	r3, r0
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	607a      	str	r2, [r7, #4]
 800564e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005654:	f7ff ff3e 	bl	80054d4 <__NVIC_GetPriorityGrouping>
 8005658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	6978      	ldr	r0, [r7, #20]
 8005660:	f7ff ff8e 	bl	8005580 <NVIC_EncodePriority>
 8005664:	4602      	mov	r2, r0
 8005666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800566a:	4611      	mov	r1, r2
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff ff5d 	bl	800552c <__NVIC_SetPriority>
}
 8005672:	bf00      	nop
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	4603      	mov	r3, r0
 8005682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff ff31 	bl	80054f0 <__NVIC_EnableIRQ>
}
 800568e:	bf00      	nop
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7ff ffa2 	bl	80055e8 <SysTick_Config>
 80056a4:	4603      	mov	r3, r0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e037      	b.n	8005734 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80056da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80056de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80056e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005700:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f9b8 	bl	8005a8c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}  
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_DMA_Start_IT+0x20>
 8005758:	2302      	movs	r3, #2
 800575a:	e04a      	b.n	80057f2 <HAL_DMA_Start_IT+0xb6>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800576a:	2b01      	cmp	r3, #1
 800576c:	d13a      	bne.n	80057e4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2202      	movs	r2, #2
 8005772:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0201 	bic.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	68b9      	ldr	r1, [r7, #8]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f94b 	bl	8005a2e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 020e 	orr.w	r2, r2, #14
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	e00f      	b.n	80057d2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 020a 	orr.w	r2, r2, #10
 80057c0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0204 	bic.w	r2, r2, #4
 80057d0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0201 	orr.w	r2, r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	e005      	b.n	80057f0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80057ec:	2302      	movs	r3, #2
 80057ee:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005808:	2b02      	cmp	r3, #2
 800580a:	d008      	beq.n	800581e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2204      	movs	r2, #4
 8005810:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e020      	b.n	8005860 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 020e 	bic.w	r2, r2, #14
 800582c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0201 	bic.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005846:	2101      	movs	r1, #1
 8005848:	fa01 f202 	lsl.w	r2, r1, r2
 800584c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800587e:	2b02      	cmp	r3, #2
 8005880:	d005      	beq.n	800588e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2204      	movs	r2, #4
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	73fb      	strb	r3, [r7, #15]
 800588c:	e027      	b.n	80058de <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 020e 	bic.w	r2, r2, #14
 800589c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0201 	bic.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b6:	2101      	movs	r1, #1
 80058b8:	fa01 f202 	lsl.w	r2, r1, r2
 80058bc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	4798      	blx	r3
    } 
  }
  return status;
 80058de:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	2204      	movs	r2, #4
 8005906:	409a      	lsls	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d024      	beq.n	800595a <HAL_DMA_IRQHandler+0x72>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01f      	beq.n	800595a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d107      	bne.n	8005938 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0204 	bic.w	r2, r2, #4
 8005936:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005940:	2104      	movs	r1, #4
 8005942:	fa01 f202 	lsl.w	r2, r1, r2
 8005946:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d06a      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005958:	e065      	b.n	8005a26 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	2202      	movs	r2, #2
 8005960:	409a      	lsls	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4013      	ands	r3, r2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d02c      	beq.n	80059c4 <HAL_DMA_IRQHandler+0xdc>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d027      	beq.n	80059c4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10b      	bne.n	800599a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 020a 	bic.w	r2, r2, #10
 8005990:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	2102      	movs	r1, #2
 80059a4:	fa01 f202 	lsl.w	r2, r1, r2
 80059a8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d035      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80059c2:	e030      	b.n	8005a26 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	2208      	movs	r2, #8
 80059ca:	409a      	lsls	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d028      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x13e>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d023      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 020e 	bic.w	r2, r2, #14
 80059ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f6:	2101      	movs	r1, #1
 80059f8:	fa01 f202 	lsl.w	r2, r1, r2
 80059fc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4798      	blx	r3
    }
  }
}  
 8005a24:	e7ff      	b.n	8005a26 <HAL_DMA_IRQHandler+0x13e>
 8005a26:	bf00      	nop
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a44:	2101      	movs	r1, #1
 8005a46:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b10      	cmp	r3, #16
 8005a5a:	d108      	bne.n	8005a6e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a6c:	e007      	b.n	8005a7e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	60da      	str	r2, [r3, #12]
}
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
	...

08005a8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4b14      	ldr	r3, [pc, #80]	; (8005aec <DMA_CalcBaseAndBitshift+0x60>)
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d80f      	bhi.n	8005ac0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <DMA_CalcBaseAndBitshift+0x64>)
 8005aa8:	4413      	add	r3, r2
 8005aaa:	4a12      	ldr	r2, [pc, #72]	; (8005af4 <DMA_CalcBaseAndBitshift+0x68>)
 8005aac:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab0:	091b      	lsrs	r3, r3, #4
 8005ab2:	009a      	lsls	r2, r3, #2
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a0f      	ldr	r2, [pc, #60]	; (8005af8 <DMA_CalcBaseAndBitshift+0x6c>)
 8005abc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005abe:	e00e      	b.n	8005ade <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4b0d      	ldr	r3, [pc, #52]	; (8005afc <DMA_CalcBaseAndBitshift+0x70>)
 8005ac8:	4413      	add	r3, r2
 8005aca:	4a0a      	ldr	r2, [pc, #40]	; (8005af4 <DMA_CalcBaseAndBitshift+0x68>)
 8005acc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad0:	091b      	lsrs	r3, r3, #4
 8005ad2:	009a      	lsls	r2, r3, #2
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a09      	ldr	r2, [pc, #36]	; (8005b00 <DMA_CalcBaseAndBitshift+0x74>)
 8005adc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40020407 	.word	0x40020407
 8005af0:	bffdfff8 	.word	0xbffdfff8
 8005af4:	cccccccd 	.word	0xcccccccd
 8005af8:	40020000 	.word	0x40020000
 8005afc:	bffdfbf8 	.word	0xbffdfbf8
 8005b00:	40020400 	.word	0x40020400

08005b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b12:	e160      	b.n	8005dd6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	2101      	movs	r1, #1
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b20:	4013      	ands	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 8152 	beq.w	8005dd0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d005      	beq.n	8005b44 <HAL_GPIO_Init+0x40>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d130      	bne.n	8005ba6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	2203      	movs	r2, #3
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	43db      	mvns	r3, r3
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	43db      	mvns	r3, r3
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4013      	ands	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	091b      	lsrs	r3, r3, #4
 8005b90:	f003 0201 	and.w	r2, r3, #1
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d017      	beq.n	8005be2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d123      	bne.n	8005c36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	08da      	lsrs	r2, r3, #3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3208      	adds	r2, #8
 8005bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	220f      	movs	r2, #15
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	08da      	lsrs	r2, r3, #3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3208      	adds	r2, #8
 8005c30:	6939      	ldr	r1, [r7, #16]
 8005c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	2203      	movs	r2, #3
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	43db      	mvns	r3, r3
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f003 0203 	and.w	r2, r3, #3
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 80ac 	beq.w	8005dd0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c78:	4b5e      	ldr	r3, [pc, #376]	; (8005df4 <HAL_GPIO_Init+0x2f0>)
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	4a5d      	ldr	r2, [pc, #372]	; (8005df4 <HAL_GPIO_Init+0x2f0>)
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	6193      	str	r3, [r2, #24]
 8005c84:	4b5b      	ldr	r3, [pc, #364]	; (8005df4 <HAL_GPIO_Init+0x2f0>)
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005c90:	4a59      	ldr	r2, [pc, #356]	; (8005df8 <HAL_GPIO_Init+0x2f4>)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	089b      	lsrs	r3, r3, #2
 8005c96:	3302      	adds	r3, #2
 8005c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	220f      	movs	r2, #15
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	43db      	mvns	r3, r3
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005cba:	d025      	beq.n	8005d08 <HAL_GPIO_Init+0x204>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a4f      	ldr	r2, [pc, #316]	; (8005dfc <HAL_GPIO_Init+0x2f8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d01f      	beq.n	8005d04 <HAL_GPIO_Init+0x200>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a4e      	ldr	r2, [pc, #312]	; (8005e00 <HAL_GPIO_Init+0x2fc>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d019      	beq.n	8005d00 <HAL_GPIO_Init+0x1fc>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a4d      	ldr	r2, [pc, #308]	; (8005e04 <HAL_GPIO_Init+0x300>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d013      	beq.n	8005cfc <HAL_GPIO_Init+0x1f8>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a4c      	ldr	r2, [pc, #304]	; (8005e08 <HAL_GPIO_Init+0x304>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00d      	beq.n	8005cf8 <HAL_GPIO_Init+0x1f4>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a4b      	ldr	r2, [pc, #300]	; (8005e0c <HAL_GPIO_Init+0x308>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d007      	beq.n	8005cf4 <HAL_GPIO_Init+0x1f0>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a4a      	ldr	r2, [pc, #296]	; (8005e10 <HAL_GPIO_Init+0x30c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d101      	bne.n	8005cf0 <HAL_GPIO_Init+0x1ec>
 8005cec:	2306      	movs	r3, #6
 8005cee:	e00c      	b.n	8005d0a <HAL_GPIO_Init+0x206>
 8005cf0:	2307      	movs	r3, #7
 8005cf2:	e00a      	b.n	8005d0a <HAL_GPIO_Init+0x206>
 8005cf4:	2305      	movs	r3, #5
 8005cf6:	e008      	b.n	8005d0a <HAL_GPIO_Init+0x206>
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	e006      	b.n	8005d0a <HAL_GPIO_Init+0x206>
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e004      	b.n	8005d0a <HAL_GPIO_Init+0x206>
 8005d00:	2302      	movs	r3, #2
 8005d02:	e002      	b.n	8005d0a <HAL_GPIO_Init+0x206>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e000      	b.n	8005d0a <HAL_GPIO_Init+0x206>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	f002 0203 	and.w	r2, r2, #3
 8005d10:	0092      	lsls	r2, r2, #2
 8005d12:	4093      	lsls	r3, r2
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d1a:	4937      	ldr	r1, [pc, #220]	; (8005df8 <HAL_GPIO_Init+0x2f4>)
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	089b      	lsrs	r3, r3, #2
 8005d20:	3302      	adds	r3, #2
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d28:	4b3a      	ldr	r3, [pc, #232]	; (8005e14 <HAL_GPIO_Init+0x310>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	43db      	mvns	r3, r3
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4013      	ands	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005d4c:	4a31      	ldr	r2, [pc, #196]	; (8005e14 <HAL_GPIO_Init+0x310>)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005d52:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <HAL_GPIO_Init+0x310>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005d76:	4a27      	ldr	r2, [pc, #156]	; (8005e14 <HAL_GPIO_Init+0x310>)
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d7c:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <HAL_GPIO_Init+0x310>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	43db      	mvns	r3, r3
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005da0:	4a1c      	ldr	r2, [pc, #112]	; (8005e14 <HAL_GPIO_Init+0x310>)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005da6:	4b1b      	ldr	r3, [pc, #108]	; (8005e14 <HAL_GPIO_Init+0x310>)
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	43db      	mvns	r3, r3
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4013      	ands	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005dca:	4a12      	ldr	r2, [pc, #72]	; (8005e14 <HAL_GPIO_Init+0x310>)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f47f ae97 	bne.w	8005b14 <HAL_GPIO_Init+0x10>
  }
}
 8005de6:	bf00      	nop
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	40021000 	.word	0x40021000
 8005df8:	40010000 	.word	0x40010000
 8005dfc:	48000400 	.word	0x48000400
 8005e00:	48000800 	.word	0x48000800
 8005e04:	48000c00 	.word	0x48000c00
 8005e08:	48001000 	.word	0x48001000
 8005e0c:	48001400 	.word	0x48001400
 8005e10:	48001800 	.word	0x48001800
 8005e14:	40010400 	.word	0x40010400

08005e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	807b      	strh	r3, [r7, #2]
 8005e24:	4613      	mov	r3, r2
 8005e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e28:	787b      	ldrb	r3, [r7, #1]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e2e:	887a      	ldrh	r2, [r7, #2]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e34:	e002      	b.n	8005e3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e36:	887a      	ldrh	r2, [r7, #2]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e58:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f001 b83a 	b.w	8006ee2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 816f 	beq.w	8006162 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005e84:	4bb5      	ldr	r3, [pc, #724]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f003 030c 	and.w	r3, r3, #12
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d00c      	beq.n	8005eaa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e90:	4bb2      	ldr	r3, [pc, #712]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f003 030c 	and.w	r3, r3, #12
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d15c      	bne.n	8005f56 <HAL_RCC_OscConfig+0x10e>
 8005e9c:	4baf      	ldr	r3, [pc, #700]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea8:	d155      	bne.n	8005f56 <HAL_RCC_OscConfig+0x10e>
 8005eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005eae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005eb6:	fa93 f3a3 	rbit	r3, r3
 8005eba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005ebe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ec2:	fab3 f383 	clz	r3, r3
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	095b      	lsrs	r3, r3, #5
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	f043 0301 	orr.w	r3, r3, #1
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d102      	bne.n	8005edc <HAL_RCC_OscConfig+0x94>
 8005ed6:	4ba1      	ldr	r3, [pc, #644]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	e015      	b.n	8005f08 <HAL_RCC_OscConfig+0xc0>
 8005edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ee0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005ee8:	fa93 f3a3 	rbit	r3, r3
 8005eec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ef4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005ef8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005efc:	fa93 f3a3 	rbit	r3, r3
 8005f00:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005f04:	4b95      	ldr	r3, [pc, #596]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f0c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005f10:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8005f14:	fa92 f2a2 	rbit	r2, r2
 8005f18:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8005f1c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005f20:	fab2 f282 	clz	r2, r2
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	f042 0220 	orr.w	r2, r2, #32
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	f002 021f 	and.w	r2, r2, #31
 8005f30:	2101      	movs	r1, #1
 8005f32:	fa01 f202 	lsl.w	r2, r1, r2
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 8111 	beq.w	8006160 <HAL_RCC_OscConfig+0x318>
 8005f3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f040 8108 	bne.w	8006160 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	f000 bfc6 	b.w	8006ee2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f66:	d106      	bne.n	8005f76 <HAL_RCC_OscConfig+0x12e>
 8005f68:	4b7c      	ldr	r3, [pc, #496]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a7b      	ldr	r2, [pc, #492]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	e036      	b.n	8005fe4 <HAL_RCC_OscConfig+0x19c>
 8005f76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10c      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x158>
 8005f86:	4b75      	ldr	r3, [pc, #468]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a74      	ldr	r2, [pc, #464]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	4b72      	ldr	r3, [pc, #456]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a71      	ldr	r2, [pc, #452]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	e021      	b.n	8005fe4 <HAL_RCC_OscConfig+0x19c>
 8005fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fa4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fb0:	d10c      	bne.n	8005fcc <HAL_RCC_OscConfig+0x184>
 8005fb2:	4b6a      	ldr	r3, [pc, #424]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a69      	ldr	r2, [pc, #420]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	4b67      	ldr	r3, [pc, #412]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a66      	ldr	r2, [pc, #408]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	e00b      	b.n	8005fe4 <HAL_RCC_OscConfig+0x19c>
 8005fcc:	4b63      	ldr	r3, [pc, #396]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a62      	ldr	r2, [pc, #392]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	4b60      	ldr	r3, [pc, #384]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a5f      	ldr	r2, [pc, #380]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8005fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fe2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fe4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fe8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d059      	beq.n	80060a8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff4:	f7fd fcac 	bl	8003950 <HAL_GetTick>
 8005ff8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ffc:	e00a      	b.n	8006014 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ffe:	f7fd fca7 	bl	8003950 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b64      	cmp	r3, #100	; 0x64
 800600c:	d902      	bls.n	8006014 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	f000 bf67 	b.w	8006ee2 <HAL_RCC_OscConfig+0x109a>
 8006014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006018:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800601c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006020:	fa93 f3a3 	rbit	r3, r3
 8006024:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8006028:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800602c:	fab3 f383 	clz	r3, r3
 8006030:	b2db      	uxtb	r3, r3
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	b2db      	uxtb	r3, r3
 8006036:	f043 0301 	orr.w	r3, r3, #1
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d102      	bne.n	8006046 <HAL_RCC_OscConfig+0x1fe>
 8006040:	4b46      	ldr	r3, [pc, #280]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	e015      	b.n	8006072 <HAL_RCC_OscConfig+0x22a>
 8006046:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800604a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800604e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8006052:	fa93 f3a3 	rbit	r3, r3
 8006056:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800605a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800605e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006062:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8006066:	fa93 f3a3 	rbit	r3, r3
 800606a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800606e:	4b3b      	ldr	r3, [pc, #236]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006076:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800607a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800607e:	fa92 f2a2 	rbit	r2, r2
 8006082:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8006086:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800608a:	fab2 f282 	clz	r2, r2
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	f042 0220 	orr.w	r2, r2, #32
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	f002 021f 	and.w	r2, r2, #31
 800609a:	2101      	movs	r1, #1
 800609c:	fa01 f202 	lsl.w	r2, r1, r2
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0ab      	beq.n	8005ffe <HAL_RCC_OscConfig+0x1b6>
 80060a6:	e05c      	b.n	8006162 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a8:	f7fd fc52 	bl	8003950 <HAL_GetTick>
 80060ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060b0:	e00a      	b.n	80060c8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060b2:	f7fd fc4d 	bl	8003950 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b64      	cmp	r3, #100	; 0x64
 80060c0:	d902      	bls.n	80060c8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	f000 bf0d 	b.w	8006ee2 <HAL_RCC_OscConfig+0x109a>
 80060c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060cc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80060d4:	fa93 f3a3 	rbit	r3, r3
 80060d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80060dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060e0:	fab3 f383 	clz	r3, r3
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d102      	bne.n	80060fa <HAL_RCC_OscConfig+0x2b2>
 80060f4:	4b19      	ldr	r3, [pc, #100]	; (800615c <HAL_RCC_OscConfig+0x314>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	e015      	b.n	8006126 <HAL_RCC_OscConfig+0x2de>
 80060fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006102:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8006106:	fa93 f3a3 	rbit	r3, r3
 800610a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800610e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006112:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006116:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800611a:	fa93 f3a3 	rbit	r3, r3
 800611e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006122:	4b0e      	ldr	r3, [pc, #56]	; (800615c <HAL_RCC_OscConfig+0x314>)
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800612a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800612e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006132:	fa92 f2a2 	rbit	r2, r2
 8006136:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800613a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800613e:	fab2 f282 	clz	r2, r2
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	f042 0220 	orr.w	r2, r2, #32
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	f002 021f 	and.w	r2, r2, #31
 800614e:	2101      	movs	r1, #1
 8006150:	fa01 f202 	lsl.w	r2, r1, r2
 8006154:	4013      	ands	r3, r2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1ab      	bne.n	80060b2 <HAL_RCC_OscConfig+0x26a>
 800615a:	e002      	b.n	8006162 <HAL_RCC_OscConfig+0x31a>
 800615c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006166:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 817f 	beq.w	8006476 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006178:	4ba7      	ldr	r3, [pc, #668]	; (8006418 <HAL_RCC_OscConfig+0x5d0>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f003 030c 	and.w	r3, r3, #12
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00c      	beq.n	800619e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006184:	4ba4      	ldr	r3, [pc, #656]	; (8006418 <HAL_RCC_OscConfig+0x5d0>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f003 030c 	and.w	r3, r3, #12
 800618c:	2b08      	cmp	r3, #8
 800618e:	d173      	bne.n	8006278 <HAL_RCC_OscConfig+0x430>
 8006190:	4ba1      	ldr	r3, [pc, #644]	; (8006418 <HAL_RCC_OscConfig+0x5d0>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8006198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619c:	d16c      	bne.n	8006278 <HAL_RCC_OscConfig+0x430>
 800619e:	2302      	movs	r3, #2
 80061a0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80061a8:	fa93 f3a3 	rbit	r3, r3
 80061ac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80061b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061b4:	fab3 f383 	clz	r3, r3
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	f043 0301 	orr.w	r3, r3, #1
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d102      	bne.n	80061ce <HAL_RCC_OscConfig+0x386>
 80061c8:	4b93      	ldr	r3, [pc, #588]	; (8006418 <HAL_RCC_OscConfig+0x5d0>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	e013      	b.n	80061f6 <HAL_RCC_OscConfig+0x3ae>
 80061ce:	2302      	movs	r3, #2
 80061d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80061d8:	fa93 f3a3 	rbit	r3, r3
 80061dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80061e0:	2302      	movs	r3, #2
 80061e2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80061e6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80061ea:	fa93 f3a3 	rbit	r3, r3
 80061ee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80061f2:	4b89      	ldr	r3, [pc, #548]	; (8006418 <HAL_RCC_OscConfig+0x5d0>)
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	2202      	movs	r2, #2
 80061f8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80061fc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8006200:	fa92 f2a2 	rbit	r2, r2
 8006204:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8006208:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800620c:	fab2 f282 	clz	r2, r2
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	f042 0220 	orr.w	r2, r2, #32
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	f002 021f 	and.w	r2, r2, #31
 800621c:	2101      	movs	r1, #1
 800621e:	fa01 f202 	lsl.w	r2, r1, r2
 8006222:	4013      	ands	r3, r2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <HAL_RCC_OscConfig+0x3f6>
 8006228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800622c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d002      	beq.n	800623e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	f000 be52 	b.w	8006ee2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800623e:	4b76      	ldr	r3, [pc, #472]	; (8006418 <HAL_RCC_OscConfig+0x5d0>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800624a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	21f8      	movs	r1, #248	; 0xf8
 8006254:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006258:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800625c:	fa91 f1a1 	rbit	r1, r1
 8006260:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8006264:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006268:	fab1 f181 	clz	r1, r1
 800626c:	b2c9      	uxtb	r1, r1
 800626e:	408b      	lsls	r3, r1
 8006270:	4969      	ldr	r1, [pc, #420]	; (8006418 <HAL_RCC_OscConfig+0x5d0>)
 8006272:	4313      	orrs	r3, r2
 8006274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006276:	e0fe      	b.n	8006476 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006278:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800627c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 8088 	beq.w	800639a <HAL_RCC_OscConfig+0x552>
 800628a:	2301      	movs	r3, #1
 800628c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006290:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006294:	fa93 f3a3 	rbit	r3, r3
 8006298:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800629c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062a0:	fab3 f383 	clz	r3, r3
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80062aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	461a      	mov	r2, r3
 80062b2:	2301      	movs	r3, #1
 80062b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b6:	f7fd fb4b 	bl	8003950 <HAL_GetTick>
 80062ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062be:	e00a      	b.n	80062d6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062c0:	f7fd fb46 	bl	8003950 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d902      	bls.n	80062d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	f000 be06 	b.w	8006ee2 <HAL_RCC_OscConfig+0x109a>
 80062d6:	2302      	movs	r3, #2
 80062d8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062dc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80062e0:	fa93 f3a3 	rbit	r3, r3
 80062e4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80062e8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ec:	fab3 f383 	clz	r3, r3
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d102      	bne.n	8006306 <HAL_RCC_OscConfig+0x4be>
 8006300:	4b45      	ldr	r3, [pc, #276]	; (8006418 <HAL_RCC_OscConfig+0x5d0>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	e013      	b.n	800632e <HAL_RCC_OscConfig+0x4e6>
 8006306:	2302      	movs	r3, #2
 8006308:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800630c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006310:	fa93 f3a3 	rbit	r3, r3
 8006314:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006318:	2302      	movs	r3, #2
 800631a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800631e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006322:	fa93 f3a3 	rbit	r3, r3
 8006326:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800632a:	4b3b      	ldr	r3, [pc, #236]	; (8006418 <HAL_RCC_OscConfig+0x5d0>)
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	2202      	movs	r2, #2
 8006330:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006334:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006338:	fa92 f2a2 	rbit	r2, r2
 800633c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8006340:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006344:	fab2 f282 	clz	r2, r2
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	f042 0220 	orr.w	r2, r2, #32
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	f002 021f 	and.w	r2, r2, #31
 8006354:	2101      	movs	r1, #1
 8006356:	fa01 f202 	lsl.w	r2, r1, r2
 800635a:	4013      	ands	r3, r2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0af      	beq.n	80062c0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006360:	4b2d      	ldr	r3, [pc, #180]	; (8006418 <HAL_RCC_OscConfig+0x5d0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800636c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	21f8      	movs	r1, #248	; 0xf8
 8006376:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800637a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800637e:	fa91 f1a1 	rbit	r1, r1
 8006382:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8006386:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800638a:	fab1 f181 	clz	r1, r1
 800638e:	b2c9      	uxtb	r1, r1
 8006390:	408b      	lsls	r3, r1
 8006392:	4921      	ldr	r1, [pc, #132]	; (8006418 <HAL_RCC_OscConfig+0x5d0>)
 8006394:	4313      	orrs	r3, r2
 8006396:	600b      	str	r3, [r1, #0]
 8006398:	e06d      	b.n	8006476 <HAL_RCC_OscConfig+0x62e>
 800639a:	2301      	movs	r3, #1
 800639c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80063a4:	fa93 f3a3 	rbit	r3, r3
 80063a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80063ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063b0:	fab3 f383 	clz	r3, r3
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80063ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	461a      	mov	r2, r3
 80063c2:	2300      	movs	r3, #0
 80063c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c6:	f7fd fac3 	bl	8003950 <HAL_GetTick>
 80063ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ce:	e00a      	b.n	80063e6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063d0:	f7fd fabe 	bl	8003950 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d902      	bls.n	80063e6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	f000 bd7e 	b.w	8006ee2 <HAL_RCC_OscConfig+0x109a>
 80063e6:	2302      	movs	r3, #2
 80063e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063f0:	fa93 f3a3 	rbit	r3, r3
 80063f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80063f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063fc:	fab3 f383 	clz	r3, r3
 8006400:	b2db      	uxtb	r3, r3
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	b2db      	uxtb	r3, r3
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	d105      	bne.n	800641c <HAL_RCC_OscConfig+0x5d4>
 8006410:	4b01      	ldr	r3, [pc, #4]	; (8006418 <HAL_RCC_OscConfig+0x5d0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	e016      	b.n	8006444 <HAL_RCC_OscConfig+0x5fc>
 8006416:	bf00      	nop
 8006418:	40021000 	.word	0x40021000
 800641c:	2302      	movs	r3, #2
 800641e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006426:	fa93 f3a3 	rbit	r3, r3
 800642a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800642e:	2302      	movs	r3, #2
 8006430:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006434:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006438:	fa93 f3a3 	rbit	r3, r3
 800643c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006440:	4bbf      	ldr	r3, [pc, #764]	; (8006740 <HAL_RCC_OscConfig+0x8f8>)
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	2202      	movs	r2, #2
 8006446:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800644a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800644e:	fa92 f2a2 	rbit	r2, r2
 8006452:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8006456:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800645a:	fab2 f282 	clz	r2, r2
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	f042 0220 	orr.w	r2, r2, #32
 8006464:	b2d2      	uxtb	r2, r2
 8006466:	f002 021f 	and.w	r2, r2, #31
 800646a:	2101      	movs	r1, #1
 800646c:	fa01 f202 	lsl.w	r2, r1, r2
 8006470:	4013      	ands	r3, r2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1ac      	bne.n	80063d0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800647a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 8113 	beq.w	80066b2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800648c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006490:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d07c      	beq.n	8006596 <HAL_RCC_OscConfig+0x74e>
 800649c:	2301      	movs	r3, #1
 800649e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064a6:	fa93 f3a3 	rbit	r3, r3
 80064aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80064ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064b2:	fab3 f383 	clz	r3, r3
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	461a      	mov	r2, r3
 80064ba:	4ba2      	ldr	r3, [pc, #648]	; (8006744 <HAL_RCC_OscConfig+0x8fc>)
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	461a      	mov	r2, r3
 80064c2:	2301      	movs	r3, #1
 80064c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064c6:	f7fd fa43 	bl	8003950 <HAL_GetTick>
 80064ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ce:	e00a      	b.n	80064e6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064d0:	f7fd fa3e 	bl	8003950 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d902      	bls.n	80064e6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	f000 bcfe 	b.w	8006ee2 <HAL_RCC_OscConfig+0x109a>
 80064e6:	2302      	movs	r3, #2
 80064e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064f0:	fa93 f2a3 	rbit	r2, r3
 80064f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006506:	2202      	movs	r2, #2
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800650e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	fa93 f2a3 	rbit	r2, r3
 8006518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800651c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006526:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800652a:	2202      	movs	r2, #2
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006532:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	fa93 f2a3 	rbit	r2, r3
 800653c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006540:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006544:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006546:	4b7e      	ldr	r3, [pc, #504]	; (8006740 <HAL_RCC_OscConfig+0x8f8>)
 8006548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800654a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800654e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006552:	2102      	movs	r1, #2
 8006554:	6019      	str	r1, [r3, #0]
 8006556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800655a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	fa93 f1a3 	rbit	r1, r3
 8006564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006568:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800656c:	6019      	str	r1, [r3, #0]
  return result;
 800656e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006572:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	fab3 f383 	clz	r3, r3
 800657c:	b2db      	uxtb	r3, r3
 800657e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	2101      	movs	r1, #1
 800658a:	fa01 f303 	lsl.w	r3, r1, r3
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d09d      	beq.n	80064d0 <HAL_RCC_OscConfig+0x688>
 8006594:	e08d      	b.n	80066b2 <HAL_RCC_OscConfig+0x86a>
 8006596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800659a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800659e:	2201      	movs	r2, #1
 80065a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	fa93 f2a3 	rbit	r2, r3
 80065b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80065b8:	601a      	str	r2, [r3, #0]
  return result;
 80065ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80065c2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065c4:	fab3 f383 	clz	r3, r3
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	461a      	mov	r2, r3
 80065cc:	4b5d      	ldr	r3, [pc, #372]	; (8006744 <HAL_RCC_OscConfig+0x8fc>)
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	461a      	mov	r2, r3
 80065d4:	2300      	movs	r3, #0
 80065d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d8:	f7fd f9ba 	bl	8003950 <HAL_GetTick>
 80065dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e0:	e00a      	b.n	80065f8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065e2:	f7fd f9b5 	bl	8003950 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d902      	bls.n	80065f8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	f000 bc75 	b.w	8006ee2 <HAL_RCC_OscConfig+0x109a>
 80065f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006600:	2202      	movs	r2, #2
 8006602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006608:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	fa93 f2a3 	rbit	r2, r3
 8006612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006616:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006624:	2202      	movs	r2, #2
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800662c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	fa93 f2a3 	rbit	r2, r3
 8006636:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800663a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006644:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006648:	2202      	movs	r2, #2
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006650:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	fa93 f2a3 	rbit	r2, r3
 800665a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800665e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006662:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006664:	4b36      	ldr	r3, [pc, #216]	; (8006740 <HAL_RCC_OscConfig+0x8f8>)
 8006666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800666c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006670:	2102      	movs	r1, #2
 8006672:	6019      	str	r1, [r3, #0]
 8006674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006678:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	fa93 f1a3 	rbit	r1, r3
 8006682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006686:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800668a:	6019      	str	r1, [r3, #0]
  return result;
 800668c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006690:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	fab3 f383 	clz	r3, r3
 800669a:	b2db      	uxtb	r3, r3
 800669c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	2101      	movs	r1, #1
 80066a8:	fa01 f303 	lsl.w	r3, r1, r3
 80066ac:	4013      	ands	r3, r2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d197      	bne.n	80065e2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0304 	and.w	r3, r3, #4
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 81a5 	beq.w	8006a12 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066c8:	2300      	movs	r3, #0
 80066ca:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ce:	4b1c      	ldr	r3, [pc, #112]	; (8006740 <HAL_RCC_OscConfig+0x8f8>)
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d116      	bne.n	8006708 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066da:	4b19      	ldr	r3, [pc, #100]	; (8006740 <HAL_RCC_OscConfig+0x8f8>)
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	4a18      	ldr	r2, [pc, #96]	; (8006740 <HAL_RCC_OscConfig+0x8f8>)
 80066e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e4:	61d3      	str	r3, [r2, #28]
 80066e6:	4b16      	ldr	r3, [pc, #88]	; (8006740 <HAL_RCC_OscConfig+0x8f8>)
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80066ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006700:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006708:	4b0f      	ldr	r3, [pc, #60]	; (8006748 <HAL_RCC_OscConfig+0x900>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006710:	2b00      	cmp	r3, #0
 8006712:	d121      	bne.n	8006758 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006714:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <HAL_RCC_OscConfig+0x900>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a0b      	ldr	r2, [pc, #44]	; (8006748 <HAL_RCC_OscConfig+0x900>)
 800671a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800671e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006720:	f7fd f916 	bl	8003950 <HAL_GetTick>
 8006724:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006728:	e010      	b.n	800674c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800672a:	f7fd f911 	bl	8003950 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b64      	cmp	r3, #100	; 0x64
 8006738:	d908      	bls.n	800674c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e3d1      	b.n	8006ee2 <HAL_RCC_OscConfig+0x109a>
 800673e:	bf00      	nop
 8006740:	40021000 	.word	0x40021000
 8006744:	10908120 	.word	0x10908120
 8006748:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800674c:	4b8d      	ldr	r3, [pc, #564]	; (8006984 <HAL_RCC_OscConfig+0xb3c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0e8      	beq.n	800672a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800675c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d106      	bne.n	8006776 <HAL_RCC_OscConfig+0x92e>
 8006768:	4b87      	ldr	r3, [pc, #540]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	4a86      	ldr	r2, [pc, #536]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 800676e:	f043 0301 	orr.w	r3, r3, #1
 8006772:	6213      	str	r3, [r2, #32]
 8006774:	e035      	b.n	80067e2 <HAL_RCC_OscConfig+0x99a>
 8006776:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800677a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10c      	bne.n	80067a0 <HAL_RCC_OscConfig+0x958>
 8006786:	4b80      	ldr	r3, [pc, #512]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	4a7f      	ldr	r2, [pc, #508]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 800678c:	f023 0301 	bic.w	r3, r3, #1
 8006790:	6213      	str	r3, [r2, #32]
 8006792:	4b7d      	ldr	r3, [pc, #500]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	4a7c      	ldr	r2, [pc, #496]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 8006798:	f023 0304 	bic.w	r3, r3, #4
 800679c:	6213      	str	r3, [r2, #32]
 800679e:	e020      	b.n	80067e2 <HAL_RCC_OscConfig+0x99a>
 80067a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	2b05      	cmp	r3, #5
 80067ae:	d10c      	bne.n	80067ca <HAL_RCC_OscConfig+0x982>
 80067b0:	4b75      	ldr	r3, [pc, #468]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	4a74      	ldr	r2, [pc, #464]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 80067b6:	f043 0304 	orr.w	r3, r3, #4
 80067ba:	6213      	str	r3, [r2, #32]
 80067bc:	4b72      	ldr	r3, [pc, #456]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	4a71      	ldr	r2, [pc, #452]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 80067c2:	f043 0301 	orr.w	r3, r3, #1
 80067c6:	6213      	str	r3, [r2, #32]
 80067c8:	e00b      	b.n	80067e2 <HAL_RCC_OscConfig+0x99a>
 80067ca:	4b6f      	ldr	r3, [pc, #444]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	4a6e      	ldr	r2, [pc, #440]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 80067d0:	f023 0301 	bic.w	r3, r3, #1
 80067d4:	6213      	str	r3, [r2, #32]
 80067d6:	4b6c      	ldr	r3, [pc, #432]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	4a6b      	ldr	r2, [pc, #428]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 80067dc:	f023 0304 	bic.w	r3, r3, #4
 80067e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 8081 	beq.w	80068f6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067f4:	f7fd f8ac 	bl	8003950 <HAL_GetTick>
 80067f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067fc:	e00b      	b.n	8006816 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067fe:	f7fd f8a7 	bl	8003950 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	f241 3288 	movw	r2, #5000	; 0x1388
 800680e:	4293      	cmp	r3, r2
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e365      	b.n	8006ee2 <HAL_RCC_OscConfig+0x109a>
 8006816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800681a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800681e:	2202      	movs	r2, #2
 8006820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006826:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	fa93 f2a3 	rbit	r2, r3
 8006830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006834:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800683e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006842:	2202      	movs	r2, #2
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800684a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	fa93 f2a3 	rbit	r2, r3
 8006854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006858:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800685c:	601a      	str	r2, [r3, #0]
  return result;
 800685e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006862:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006866:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006868:	fab3 f383 	clz	r3, r3
 800686c:	b2db      	uxtb	r3, r3
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	b2db      	uxtb	r3, r3
 8006872:	f043 0302 	orr.w	r3, r3, #2
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b02      	cmp	r3, #2
 800687a:	d102      	bne.n	8006882 <HAL_RCC_OscConfig+0xa3a>
 800687c:	4b42      	ldr	r3, [pc, #264]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	e013      	b.n	80068aa <HAL_RCC_OscConfig+0xa62>
 8006882:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006886:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800688a:	2202      	movs	r2, #2
 800688c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800688e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006892:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	fa93 f2a3 	rbit	r2, r3
 800689c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068a0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	4b38      	ldr	r3, [pc, #224]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80068b2:	2102      	movs	r1, #2
 80068b4:	6011      	str	r1, [r2, #0]
 80068b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068ba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	fa92 f1a2 	rbit	r1, r2
 80068c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068c8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80068cc:	6011      	str	r1, [r2, #0]
  return result;
 80068ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068d2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80068d6:	6812      	ldr	r2, [r2, #0]
 80068d8:	fab2 f282 	clz	r2, r2
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	f002 021f 	and.w	r2, r2, #31
 80068e8:	2101      	movs	r1, #1
 80068ea:	fa01 f202 	lsl.w	r2, r1, r2
 80068ee:	4013      	ands	r3, r2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d084      	beq.n	80067fe <HAL_RCC_OscConfig+0x9b6>
 80068f4:	e083      	b.n	80069fe <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068f6:	f7fd f82b 	bl	8003950 <HAL_GetTick>
 80068fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068fe:	e00b      	b.n	8006918 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006900:	f7fd f826 	bl	8003950 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006910:	4293      	cmp	r3, r2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e2e4      	b.n	8006ee2 <HAL_RCC_OscConfig+0x109a>
 8006918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800691c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006920:	2202      	movs	r2, #2
 8006922:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006928:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	fa93 f2a3 	rbit	r2, r3
 8006932:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006936:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006940:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006944:	2202      	movs	r2, #2
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800694c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	fa93 f2a3 	rbit	r2, r3
 8006956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800695a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800695e:	601a      	str	r2, [r3, #0]
  return result;
 8006960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006964:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006968:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800696a:	fab3 f383 	clz	r3, r3
 800696e:	b2db      	uxtb	r3, r3
 8006970:	095b      	lsrs	r3, r3, #5
 8006972:	b2db      	uxtb	r3, r3
 8006974:	f043 0302 	orr.w	r3, r3, #2
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d106      	bne.n	800698c <HAL_RCC_OscConfig+0xb44>
 800697e:	4b02      	ldr	r3, [pc, #8]	; (8006988 <HAL_RCC_OscConfig+0xb40>)
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	e017      	b.n	80069b4 <HAL_RCC_OscConfig+0xb6c>
 8006984:	40007000 	.word	0x40007000
 8006988:	40021000 	.word	0x40021000
 800698c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006990:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006994:	2202      	movs	r2, #2
 8006996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006998:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800699c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	fa93 f2a3 	rbit	r2, r3
 80069a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069aa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	4bb3      	ldr	r3, [pc, #716]	; (8006c80 <HAL_RCC_OscConfig+0xe38>)
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80069b8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80069bc:	2102      	movs	r1, #2
 80069be:	6011      	str	r1, [r2, #0]
 80069c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80069c4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80069c8:	6812      	ldr	r2, [r2, #0]
 80069ca:	fa92 f1a2 	rbit	r1, r2
 80069ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80069d2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80069d6:	6011      	str	r1, [r2, #0]
  return result;
 80069d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80069dc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80069e0:	6812      	ldr	r2, [r2, #0]
 80069e2:	fab2 f282 	clz	r2, r2
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	f002 021f 	and.w	r2, r2, #31
 80069f2:	2101      	movs	r1, #1
 80069f4:	fa01 f202 	lsl.w	r2, r1, r2
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d180      	bne.n	8006900 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80069fe:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d105      	bne.n	8006a12 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a06:	4b9e      	ldr	r3, [pc, #632]	; (8006c80 <HAL_RCC_OscConfig+0xe38>)
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	4a9d      	ldr	r2, [pc, #628]	; (8006c80 <HAL_RCC_OscConfig+0xe38>)
 8006a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a10:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 825e 	beq.w	8006ee0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a24:	4b96      	ldr	r3, [pc, #600]	; (8006c80 <HAL_RCC_OscConfig+0xe38>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f003 030c 	and.w	r3, r3, #12
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	f000 821f 	beq.w	8006e70 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	f040 8170 	bne.w	8006d24 <HAL_RCC_OscConfig+0xedc>
 8006a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a48:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006a4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a56:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	fa93 f2a3 	rbit	r2, r3
 8006a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a64:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006a68:	601a      	str	r2, [r3, #0]
  return result;
 8006a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a6e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006a72:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a74:	fab3 f383 	clz	r3, r3
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006a7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	461a      	mov	r2, r3
 8006a86:	2300      	movs	r3, #0
 8006a88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8a:	f7fc ff61 	bl	8003950 <HAL_GetTick>
 8006a8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a92:	e009      	b.n	8006aa8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a94:	f7fc ff5c 	bl	8003950 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e21c      	b.n	8006ee2 <HAL_RCC_OscConfig+0x109a>
 8006aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006aac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006ab0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006aba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	fa93 f2a3 	rbit	r2, r3
 8006ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ac8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006acc:	601a      	str	r2, [r3, #0]
  return result;
 8006ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ad2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006ad6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ad8:	fab3 f383 	clz	r3, r3
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	095b      	lsrs	r3, r3, #5
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	f043 0301 	orr.w	r3, r3, #1
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d102      	bne.n	8006af2 <HAL_RCC_OscConfig+0xcaa>
 8006aec:	4b64      	ldr	r3, [pc, #400]	; (8006c80 <HAL_RCC_OscConfig+0xe38>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	e027      	b.n	8006b42 <HAL_RCC_OscConfig+0xcfa>
 8006af2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006af6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006afa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b04:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	fa93 f2a3 	rbit	r2, r3
 8006b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b12:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b1c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b2a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	fa93 f2a3 	rbit	r2, r3
 8006b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b38:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	4b50      	ldr	r3, [pc, #320]	; (8006c80 <HAL_RCC_OscConfig+0xe38>)
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b46:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006b4a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006b4e:	6011      	str	r1, [r2, #0]
 8006b50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b54:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006b58:	6812      	ldr	r2, [r2, #0]
 8006b5a:	fa92 f1a2 	rbit	r1, r2
 8006b5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b62:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006b66:	6011      	str	r1, [r2, #0]
  return result;
 8006b68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b6c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006b70:	6812      	ldr	r2, [r2, #0]
 8006b72:	fab2 f282 	clz	r2, r2
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	f042 0220 	orr.w	r2, r2, #32
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	f002 021f 	and.w	r2, r2, #31
 8006b82:	2101      	movs	r1, #1
 8006b84:	fa01 f202 	lsl.w	r2, r1, r2
 8006b88:	4013      	ands	r3, r2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d182      	bne.n	8006a94 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b8e:	4b3c      	ldr	r3, [pc, #240]	; (8006c80 <HAL_RCC_OscConfig+0xe38>)
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b92:	f023 020f 	bic.w	r2, r3, #15
 8006b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	4937      	ldr	r1, [pc, #220]	; (8006c80 <HAL_RCC_OscConfig+0xe38>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006ba8:	4b35      	ldr	r3, [pc, #212]	; (8006c80 <HAL_RCC_OscConfig+0xe38>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8006bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6a19      	ldr	r1, [r3, #32]
 8006bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	492d      	ldr	r1, [pc, #180]	; (8006c80 <HAL_RCC_OscConfig+0xe38>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	604b      	str	r3, [r1, #4]
 8006bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bd4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006bd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006be2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	fa93 f2a3 	rbit	r2, r3
 8006bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bf0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006bf4:	601a      	str	r2, [r3, #0]
  return result;
 8006bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bfa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006bfe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c00:	fab3 f383 	clz	r3, r3
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	461a      	mov	r2, r3
 8006c12:	2301      	movs	r3, #1
 8006c14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c16:	f7fc fe9b 	bl	8003950 <HAL_GetTick>
 8006c1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c1e:	e009      	b.n	8006c34 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c20:	f7fc fe96 	bl	8003950 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d901      	bls.n	8006c34 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e156      	b.n	8006ee2 <HAL_RCC_OscConfig+0x109a>
 8006c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c38:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c46:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	fa93 f2a3 	rbit	r2, r3
 8006c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c54:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006c58:	601a      	str	r2, [r3, #0]
  return result;
 8006c5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c5e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006c62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c64:	fab3 f383 	clz	r3, r3
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	095b      	lsrs	r3, r3, #5
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	f043 0301 	orr.w	r3, r3, #1
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d105      	bne.n	8006c84 <HAL_RCC_OscConfig+0xe3c>
 8006c78:	4b01      	ldr	r3, [pc, #4]	; (8006c80 <HAL_RCC_OscConfig+0xe38>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	e02a      	b.n	8006cd4 <HAL_RCC_OscConfig+0xe8c>
 8006c7e:	bf00      	nop
 8006c80:	40021000 	.word	0x40021000
 8006c84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c96:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	fa93 f2a3 	rbit	r2, r3
 8006ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ca4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006cb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cbc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	fa93 f2a3 	rbit	r2, r3
 8006cc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cca:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	4b86      	ldr	r3, [pc, #536]	; (8006eec <HAL_RCC_OscConfig+0x10a4>)
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006cd8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006cdc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006ce0:	6011      	str	r1, [r2, #0]
 8006ce2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006ce6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006cea:	6812      	ldr	r2, [r2, #0]
 8006cec:	fa92 f1a2 	rbit	r1, r2
 8006cf0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006cf4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8006cf8:	6011      	str	r1, [r2, #0]
  return result;
 8006cfa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006cfe:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8006d02:	6812      	ldr	r2, [r2, #0]
 8006d04:	fab2 f282 	clz	r2, r2
 8006d08:	b2d2      	uxtb	r2, r2
 8006d0a:	f042 0220 	orr.w	r2, r2, #32
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	f002 021f 	and.w	r2, r2, #31
 8006d14:	2101      	movs	r1, #1
 8006d16:	fa01 f202 	lsl.w	r2, r1, r2
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f43f af7f 	beq.w	8006c20 <HAL_RCC_OscConfig+0xdd8>
 8006d22:	e0dd      	b.n	8006ee0 <HAL_RCC_OscConfig+0x1098>
 8006d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d28:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006d2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d36:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	fa93 f2a3 	rbit	r2, r3
 8006d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d44:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006d48:	601a      	str	r2, [r3, #0]
  return result;
 8006d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d4e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006d52:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d54:	fab3 f383 	clz	r3, r3
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	461a      	mov	r2, r3
 8006d66:	2300      	movs	r3, #0
 8006d68:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d6a:	f7fc fdf1 	bl	8003950 <HAL_GetTick>
 8006d6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d72:	e009      	b.n	8006d88 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d74:	f7fc fdec 	bl	8003950 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e0ac      	b.n	8006ee2 <HAL_RCC_OscConfig+0x109a>
 8006d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d8c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006d90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d9a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	fa93 f2a3 	rbit	r2, r3
 8006da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006da8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006dac:	601a      	str	r2, [r3, #0]
  return result;
 8006dae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006db2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006db6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006db8:	fab3 f383 	clz	r3, r3
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	095b      	lsrs	r3, r3, #5
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	f043 0301 	orr.w	r3, r3, #1
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d102      	bne.n	8006dd2 <HAL_RCC_OscConfig+0xf8a>
 8006dcc:	4b47      	ldr	r3, [pc, #284]	; (8006eec <HAL_RCC_OscConfig+0x10a4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	e027      	b.n	8006e22 <HAL_RCC_OscConfig+0xfda>
 8006dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dd6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006dda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006de4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	fa93 f2a3 	rbit	r2, r3
 8006dee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006df2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dfc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006e00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e0a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	fa93 f2a3 	rbit	r2, r3
 8006e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e18:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	4b33      	ldr	r3, [pc, #204]	; (8006eec <HAL_RCC_OscConfig+0x10a4>)
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006e26:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006e2a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006e2e:	6011      	str	r1, [r2, #0]
 8006e30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006e34:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006e38:	6812      	ldr	r2, [r2, #0]
 8006e3a:	fa92 f1a2 	rbit	r1, r2
 8006e3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006e42:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006e46:	6011      	str	r1, [r2, #0]
  return result;
 8006e48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006e4c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006e50:	6812      	ldr	r2, [r2, #0]
 8006e52:	fab2 f282 	clz	r2, r2
 8006e56:	b2d2      	uxtb	r2, r2
 8006e58:	f042 0220 	orr.w	r2, r2, #32
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	f002 021f 	and.w	r2, r2, #31
 8006e62:	2101      	movs	r1, #1
 8006e64:	fa01 f202 	lsl.w	r2, r1, r2
 8006e68:	4013      	ands	r3, r2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d182      	bne.n	8006d74 <HAL_RCC_OscConfig+0xf2c>
 8006e6e:	e037      	b.n	8006ee0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e02e      	b.n	8006ee2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e84:	4b19      	ldr	r3, [pc, #100]	; (8006eec <HAL_RCC_OscConfig+0x10a4>)
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006e8c:	4b17      	ldr	r3, [pc, #92]	; (8006eec <HAL_RCC_OscConfig+0x10a4>)
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006e94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e98:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8006e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ea0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d117      	bne.n	8006edc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006eac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006eb0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006eb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006eb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d10b      	bne.n	8006edc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006ec4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006ec8:	f003 020f 	and.w	r2, r3, #15
 8006ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ed0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d001      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e000      	b.n	8006ee2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40021000 	.word	0x40021000

08006ef0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b09e      	sub	sp, #120	; 0x78
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e162      	b.n	80071ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f08:	4b90      	ldr	r3, [pc, #576]	; (800714c <HAL_RCC_ClockConfig+0x25c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d910      	bls.n	8006f38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f16:	4b8d      	ldr	r3, [pc, #564]	; (800714c <HAL_RCC_ClockConfig+0x25c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f023 0207 	bic.w	r2, r3, #7
 8006f1e:	498b      	ldr	r1, [pc, #556]	; (800714c <HAL_RCC_ClockConfig+0x25c>)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f26:	4b89      	ldr	r3, [pc, #548]	; (800714c <HAL_RCC_ClockConfig+0x25c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0307 	and.w	r3, r3, #7
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d001      	beq.n	8006f38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e14a      	b.n	80071ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d008      	beq.n	8006f56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f44:	4b82      	ldr	r3, [pc, #520]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	497f      	ldr	r1, [pc, #508]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 80dc 	beq.w	800711c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d13c      	bne.n	8006fe6 <HAL_RCC_ClockConfig+0xf6>
 8006f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f74:	fa93 f3a3 	rbit	r3, r3
 8006f78:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f7c:	fab3 f383 	clz	r3, r3
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	095b      	lsrs	r3, r3, #5
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	f043 0301 	orr.w	r3, r3, #1
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d102      	bne.n	8006f96 <HAL_RCC_ClockConfig+0xa6>
 8006f90:	4b6f      	ldr	r3, [pc, #444]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	e00f      	b.n	8006fb6 <HAL_RCC_ClockConfig+0xc6>
 8006f96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f9e:	fa93 f3a3 	rbit	r3, r3
 8006fa2:	667b      	str	r3, [r7, #100]	; 0x64
 8006fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8006faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fac:	fa93 f3a3 	rbit	r3, r3
 8006fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fb2:	4b67      	ldr	r3, [pc, #412]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006fba:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fbe:	fa92 f2a2 	rbit	r2, r2
 8006fc2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006fc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fc6:	fab2 f282 	clz	r2, r2
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	f042 0220 	orr.w	r2, r2, #32
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	f002 021f 	and.w	r2, r2, #31
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8006fdc:	4013      	ands	r3, r2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d17b      	bne.n	80070da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e0f3      	b.n	80071ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d13c      	bne.n	8007068 <HAL_RCC_ClockConfig+0x178>
 8006fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ff2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ff6:	fa93 f3a3 	rbit	r3, r3
 8006ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ffe:	fab3 f383 	clz	r3, r3
 8007002:	b2db      	uxtb	r3, r3
 8007004:	095b      	lsrs	r3, r3, #5
 8007006:	b2db      	uxtb	r3, r3
 8007008:	f043 0301 	orr.w	r3, r3, #1
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b01      	cmp	r3, #1
 8007010:	d102      	bne.n	8007018 <HAL_RCC_ClockConfig+0x128>
 8007012:	4b4f      	ldr	r3, [pc, #316]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	e00f      	b.n	8007038 <HAL_RCC_ClockConfig+0x148>
 8007018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800701c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800701e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007020:	fa93 f3a3 	rbit	r3, r3
 8007024:	647b      	str	r3, [r7, #68]	; 0x44
 8007026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800702a:	643b      	str	r3, [r7, #64]	; 0x40
 800702c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800702e:	fa93 f3a3 	rbit	r3, r3
 8007032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007034:	4b46      	ldr	r3, [pc, #280]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800703c:	63ba      	str	r2, [r7, #56]	; 0x38
 800703e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007040:	fa92 f2a2 	rbit	r2, r2
 8007044:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007048:	fab2 f282 	clz	r2, r2
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	f042 0220 	orr.w	r2, r2, #32
 8007052:	b2d2      	uxtb	r2, r2
 8007054:	f002 021f 	and.w	r2, r2, #31
 8007058:	2101      	movs	r1, #1
 800705a:	fa01 f202 	lsl.w	r2, r1, r2
 800705e:	4013      	ands	r3, r2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d13a      	bne.n	80070da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e0b2      	b.n	80071ce <HAL_RCC_ClockConfig+0x2de>
 8007068:	2302      	movs	r3, #2
 800706a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	fa93 f3a3 	rbit	r3, r3
 8007072:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007076:	fab3 f383 	clz	r3, r3
 800707a:	b2db      	uxtb	r3, r3
 800707c:	095b      	lsrs	r3, r3, #5
 800707e:	b2db      	uxtb	r3, r3
 8007080:	f043 0301 	orr.w	r3, r3, #1
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b01      	cmp	r3, #1
 8007088:	d102      	bne.n	8007090 <HAL_RCC_ClockConfig+0x1a0>
 800708a:	4b31      	ldr	r3, [pc, #196]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	e00d      	b.n	80070ac <HAL_RCC_ClockConfig+0x1bc>
 8007090:	2302      	movs	r3, #2
 8007092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007096:	fa93 f3a3 	rbit	r3, r3
 800709a:	627b      	str	r3, [r7, #36]	; 0x24
 800709c:	2302      	movs	r3, #2
 800709e:	623b      	str	r3, [r7, #32]
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	fa93 f3a3 	rbit	r3, r3
 80070a6:	61fb      	str	r3, [r7, #28]
 80070a8:	4b29      	ldr	r3, [pc, #164]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	2202      	movs	r2, #2
 80070ae:	61ba      	str	r2, [r7, #24]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	fa92 f2a2 	rbit	r2, r2
 80070b6:	617a      	str	r2, [r7, #20]
  return result;
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	fab2 f282 	clz	r2, r2
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	f042 0220 	orr.w	r2, r2, #32
 80070c4:	b2d2      	uxtb	r2, r2
 80070c6:	f002 021f 	and.w	r2, r2, #31
 80070ca:	2101      	movs	r1, #1
 80070cc:	fa01 f202 	lsl.w	r2, r1, r2
 80070d0:	4013      	ands	r3, r2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e079      	b.n	80071ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070da:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f023 0203 	bic.w	r2, r3, #3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	491a      	ldr	r1, [pc, #104]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070ec:	f7fc fc30 	bl	8003950 <HAL_GetTick>
 80070f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070f2:	e00a      	b.n	800710a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070f4:	f7fc fc2c 	bl	8003950 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007102:	4293      	cmp	r3, r2
 8007104:	d901      	bls.n	800710a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e061      	b.n	80071ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800710a:	4b11      	ldr	r3, [pc, #68]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f003 020c 	and.w	r2, r3, #12
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	429a      	cmp	r2, r3
 800711a:	d1eb      	bne.n	80070f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800711c:	4b0b      	ldr	r3, [pc, #44]	; (800714c <HAL_RCC_ClockConfig+0x25c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d214      	bcs.n	8007154 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800712a:	4b08      	ldr	r3, [pc, #32]	; (800714c <HAL_RCC_ClockConfig+0x25c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f023 0207 	bic.w	r2, r3, #7
 8007132:	4906      	ldr	r1, [pc, #24]	; (800714c <HAL_RCC_ClockConfig+0x25c>)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	4313      	orrs	r3, r2
 8007138:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800713a:	4b04      	ldr	r3, [pc, #16]	; (800714c <HAL_RCC_ClockConfig+0x25c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	429a      	cmp	r2, r3
 8007146:	d005      	beq.n	8007154 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e040      	b.n	80071ce <HAL_RCC_ClockConfig+0x2de>
 800714c:	40022000 	.word	0x40022000
 8007150:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d008      	beq.n	8007172 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007160:	4b1d      	ldr	r3, [pc, #116]	; (80071d8 <HAL_RCC_ClockConfig+0x2e8>)
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	491a      	ldr	r1, [pc, #104]	; (80071d8 <HAL_RCC_ClockConfig+0x2e8>)
 800716e:	4313      	orrs	r3, r2
 8007170:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	d009      	beq.n	8007192 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800717e:	4b16      	ldr	r3, [pc, #88]	; (80071d8 <HAL_RCC_ClockConfig+0x2e8>)
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	00db      	lsls	r3, r3, #3
 800718c:	4912      	ldr	r1, [pc, #72]	; (80071d8 <HAL_RCC_ClockConfig+0x2e8>)
 800718e:	4313      	orrs	r3, r2
 8007190:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007192:	f000 f829 	bl	80071e8 <HAL_RCC_GetSysClockFreq>
 8007196:	4601      	mov	r1, r0
 8007198:	4b0f      	ldr	r3, [pc, #60]	; (80071d8 <HAL_RCC_ClockConfig+0x2e8>)
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071a0:	22f0      	movs	r2, #240	; 0xf0
 80071a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	fa92 f2a2 	rbit	r2, r2
 80071aa:	60fa      	str	r2, [r7, #12]
  return result;
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	fab2 f282 	clz	r2, r2
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	40d3      	lsrs	r3, r2
 80071b6:	4a09      	ldr	r2, [pc, #36]	; (80071dc <HAL_RCC_ClockConfig+0x2ec>)
 80071b8:	5cd3      	ldrb	r3, [r2, r3]
 80071ba:	fa21 f303 	lsr.w	r3, r1, r3
 80071be:	4a08      	ldr	r2, [pc, #32]	; (80071e0 <HAL_RCC_ClockConfig+0x2f0>)
 80071c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80071c2:	4b08      	ldr	r3, [pc, #32]	; (80071e4 <HAL_RCC_ClockConfig+0x2f4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fc fb7e 	bl	80038c8 <HAL_InitTick>
  
  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3778      	adds	r7, #120	; 0x78
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	40021000 	.word	0x40021000
 80071dc:	0800a40c 	.word	0x0800a40c
 80071e0:	20000000 	.word	0x20000000
 80071e4:	20000004 	.word	0x20000004

080071e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b08b      	sub	sp, #44	; 0x2c
 80071ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80071ee:	2300      	movs	r3, #0
 80071f0:	61fb      	str	r3, [r7, #28]
 80071f2:	2300      	movs	r3, #0
 80071f4:	61bb      	str	r3, [r7, #24]
 80071f6:	2300      	movs	r3, #0
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007202:	4b2a      	ldr	r3, [pc, #168]	; (80072ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	f003 030c 	and.w	r3, r3, #12
 800720e:	2b04      	cmp	r3, #4
 8007210:	d002      	beq.n	8007218 <HAL_RCC_GetSysClockFreq+0x30>
 8007212:	2b08      	cmp	r3, #8
 8007214:	d003      	beq.n	800721e <HAL_RCC_GetSysClockFreq+0x36>
 8007216:	e03f      	b.n	8007298 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007218:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800721a:	623b      	str	r3, [r7, #32]
      break;
 800721c:	e03f      	b.n	800729e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007224:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007228:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	fa92 f2a2 	rbit	r2, r2
 8007230:	607a      	str	r2, [r7, #4]
  return result;
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	fab2 f282 	clz	r2, r2
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	40d3      	lsrs	r3, r2
 800723c:	4a1d      	ldr	r2, [pc, #116]	; (80072b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800723e:	5cd3      	ldrb	r3, [r2, r3]
 8007240:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007242:	4b1a      	ldr	r3, [pc, #104]	; (80072ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	f003 030f 	and.w	r3, r3, #15
 800724a:	220f      	movs	r2, #15
 800724c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	fa92 f2a2 	rbit	r2, r2
 8007254:	60fa      	str	r2, [r7, #12]
  return result;
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	fab2 f282 	clz	r2, r2
 800725c:	b2d2      	uxtb	r2, r2
 800725e:	40d3      	lsrs	r3, r2
 8007260:	4a15      	ldr	r2, [pc, #84]	; (80072b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007262:	5cd3      	ldrb	r3, [r2, r3]
 8007264:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d008      	beq.n	8007282 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007270:	4a0f      	ldr	r2, [pc, #60]	; (80072b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	fbb2 f2f3 	udiv	r2, r2, r3
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	fb02 f303 	mul.w	r3, r2, r3
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
 8007280:	e007      	b.n	8007292 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007282:	4a0b      	ldr	r2, [pc, #44]	; (80072b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	fbb2 f2f3 	udiv	r2, r2, r3
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	fb02 f303 	mul.w	r3, r2, r3
 8007290:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	623b      	str	r3, [r7, #32]
      break;
 8007296:	e002      	b.n	800729e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007298:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800729a:	623b      	str	r3, [r7, #32]
      break;
 800729c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800729e:	6a3b      	ldr	r3, [r7, #32]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	372c      	adds	r7, #44	; 0x2c
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	40021000 	.word	0x40021000
 80072b0:	007a1200 	.word	0x007a1200
 80072b4:	0800a424 	.word	0x0800a424
 80072b8:	0800a434 	.word	0x0800a434

080072bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072c0:	4b03      	ldr	r3, [pc, #12]	; (80072d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80072c2:	681b      	ldr	r3, [r3, #0]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	20000000 	.word	0x20000000

080072d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80072da:	f7ff ffef 	bl	80072bc <HAL_RCC_GetHCLKFreq>
 80072de:	4601      	mov	r1, r0
 80072e0:	4b0b      	ldr	r3, [pc, #44]	; (8007310 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072e8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80072ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	fa92 f2a2 	rbit	r2, r2
 80072f4:	603a      	str	r2, [r7, #0]
  return result;
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	fab2 f282 	clz	r2, r2
 80072fc:	b2d2      	uxtb	r2, r2
 80072fe:	40d3      	lsrs	r3, r2
 8007300:	4a04      	ldr	r2, [pc, #16]	; (8007314 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007302:	5cd3      	ldrb	r3, [r2, r3]
 8007304:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	40021000 	.word	0x40021000
 8007314:	0800a41c 	.word	0x0800a41c

08007318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800731e:	f7ff ffcd 	bl	80072bc <HAL_RCC_GetHCLKFreq>
 8007322:	4601      	mov	r1, r0
 8007324:	4b0b      	ldr	r3, [pc, #44]	; (8007354 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800732c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007330:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	fa92 f2a2 	rbit	r2, r2
 8007338:	603a      	str	r2, [r7, #0]
  return result;
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	fab2 f282 	clz	r2, r2
 8007340:	b2d2      	uxtb	r2, r2
 8007342:	40d3      	lsrs	r3, r2
 8007344:	4a04      	ldr	r2, [pc, #16]	; (8007358 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007346:	5cd3      	ldrb	r3, [r2, r3]
 8007348:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800734c:	4618      	mov	r0, r3
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40021000 	.word	0x40021000
 8007358:	0800a41c 	.word	0x0800a41c

0800735c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b092      	sub	sp, #72	; 0x48
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800736c:	2300      	movs	r3, #0
 800736e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 80d4 	beq.w	8007528 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007380:	4b4e      	ldr	r3, [pc, #312]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10e      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800738c:	4b4b      	ldr	r3, [pc, #300]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	4a4a      	ldr	r2, [pc, #296]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007396:	61d3      	str	r3, [r2, #28]
 8007398:	4b48      	ldr	r3, [pc, #288]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073a0:	60bb      	str	r3, [r7, #8]
 80073a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073a4:	2301      	movs	r3, #1
 80073a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073aa:	4b45      	ldr	r3, [pc, #276]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d118      	bne.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073b6:	4b42      	ldr	r3, [pc, #264]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a41      	ldr	r2, [pc, #260]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073c2:	f7fc fac5 	bl	8003950 <HAL_GetTick>
 80073c6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073c8:	e008      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ca:	f7fc fac1 	bl	8003950 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b64      	cmp	r3, #100	; 0x64
 80073d6:	d901      	bls.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e1d6      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073dc:	4b38      	ldr	r3, [pc, #224]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d0f0      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073e8:	4b34      	ldr	r3, [pc, #208]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 8084 	beq.w	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007402:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007404:	429a      	cmp	r2, r3
 8007406:	d07c      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007408:	4b2c      	ldr	r3, [pc, #176]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007416:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	fa93 f3a3 	rbit	r3, r3
 800741e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007422:	fab3 f383 	clz	r3, r3
 8007426:	b2db      	uxtb	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	4b26      	ldr	r3, [pc, #152]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	461a      	mov	r2, r3
 8007432:	2301      	movs	r3, #1
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800743a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800743c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743e:	fa93 f3a3 	rbit	r3, r3
 8007442:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007446:	fab3 f383 	clz	r3, r3
 800744a:	b2db      	uxtb	r3, r3
 800744c:	461a      	mov	r2, r3
 800744e:	4b1d      	ldr	r3, [pc, #116]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007450:	4413      	add	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	461a      	mov	r2, r3
 8007456:	2300      	movs	r3, #0
 8007458:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800745a:	4a18      	ldr	r2, [pc, #96]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800745c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800745e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d04b      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800746a:	f7fc fa71 	bl	8003950 <HAL_GetTick>
 800746e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007470:	e00a      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007472:	f7fc fa6d 	bl	8003950 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007480:	4293      	cmp	r3, r2
 8007482:	d901      	bls.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e180      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007488:	2302      	movs	r3, #2
 800748a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748e:	fa93 f3a3 	rbit	r3, r3
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
 8007494:	2302      	movs	r3, #2
 8007496:	623b      	str	r3, [r7, #32]
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	fa93 f3a3 	rbit	r3, r3
 800749e:	61fb      	str	r3, [r7, #28]
  return result;
 80074a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074a2:	fab3 f383 	clz	r3, r3
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	095b      	lsrs	r3, r3, #5
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	f043 0302 	orr.w	r3, r3, #2
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d108      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80074b6:	4b01      	ldr	r3, [pc, #4]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	e00d      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80074bc:	40021000 	.word	0x40021000
 80074c0:	40007000 	.word	0x40007000
 80074c4:	10908100 	.word	0x10908100
 80074c8:	2302      	movs	r3, #2
 80074ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	fa93 f3a3 	rbit	r3, r3
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	4b9a      	ldr	r3, [pc, #616]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	2202      	movs	r2, #2
 80074da:	613a      	str	r2, [r7, #16]
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	fa92 f2a2 	rbit	r2, r2
 80074e2:	60fa      	str	r2, [r7, #12]
  return result;
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	fab2 f282 	clz	r2, r2
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074f0:	b2d2      	uxtb	r2, r2
 80074f2:	f002 021f 	and.w	r2, r2, #31
 80074f6:	2101      	movs	r1, #1
 80074f8:	fa01 f202 	lsl.w	r2, r1, r2
 80074fc:	4013      	ands	r3, r2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0b7      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007502:	4b8f      	ldr	r3, [pc, #572]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	498c      	ldr	r1, [pc, #560]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007510:	4313      	orrs	r3, r2
 8007512:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007514:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007518:	2b01      	cmp	r3, #1
 800751a:	d105      	bne.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800751c:	4b88      	ldr	r3, [pc, #544]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	4a87      	ldr	r2, [pc, #540]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007526:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d008      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007534:	4b82      	ldr	r3, [pc, #520]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007538:	f023 0203 	bic.w	r2, r3, #3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	497f      	ldr	r1, [pc, #508]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007542:	4313      	orrs	r3, r2
 8007544:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d008      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007552:	4b7b      	ldr	r3, [pc, #492]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	4978      	ldr	r1, [pc, #480]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007560:	4313      	orrs	r3, r2
 8007562:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0304 	and.w	r3, r3, #4
 800756c:	2b00      	cmp	r3, #0
 800756e:	d008      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007570:	4b73      	ldr	r3, [pc, #460]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007574:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	4970      	ldr	r1, [pc, #448]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800757e:	4313      	orrs	r3, r2
 8007580:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b00      	cmp	r3, #0
 800758c:	d008      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800758e:	4b6c      	ldr	r3, [pc, #432]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	f023 0210 	bic.w	r2, r3, #16
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	4969      	ldr	r1, [pc, #420]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800759c:	4313      	orrs	r3, r2
 800759e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d008      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80075ac:	4b64      	ldr	r3, [pc, #400]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b8:	4961      	ldr	r1, [pc, #388]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d008      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075ca:	4b5d      	ldr	r3, [pc, #372]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ce:	f023 0220 	bic.w	r2, r3, #32
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	495a      	ldr	r1, [pc, #360]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d008      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075e8:	4b55      	ldr	r3, [pc, #340]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	4952      	ldr	r1, [pc, #328]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0308 	and.w	r3, r3, #8
 8007602:	2b00      	cmp	r3, #0
 8007604:	d008      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007606:	4b4e      	ldr	r3, [pc, #312]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	494b      	ldr	r1, [pc, #300]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007614:	4313      	orrs	r3, r2
 8007616:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0310 	and.w	r3, r3, #16
 8007620:	2b00      	cmp	r3, #0
 8007622:	d008      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007624:	4b46      	ldr	r3, [pc, #280]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007628:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	4943      	ldr	r1, [pc, #268]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007632:	4313      	orrs	r3, r2
 8007634:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800763e:	2b00      	cmp	r3, #0
 8007640:	d008      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007642:	4b3f      	ldr	r3, [pc, #252]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	493c      	ldr	r1, [pc, #240]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007650:	4313      	orrs	r3, r2
 8007652:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765c:	2b00      	cmp	r3, #0
 800765e:	d008      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007660:	4b37      	ldr	r3, [pc, #220]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766c:	4934      	ldr	r1, [pc, #208]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800766e:	4313      	orrs	r3, r2
 8007670:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800767a:	2b00      	cmp	r3, #0
 800767c:	d008      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800767e:	4b30      	ldr	r3, [pc, #192]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007682:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768a:	492d      	ldr	r1, [pc, #180]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800768c:	4313      	orrs	r3, r2
 800768e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d008      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800769c:	4b28      	ldr	r3, [pc, #160]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800769e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a8:	4925      	ldr	r1, [pc, #148]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d008      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80076ba:	4b21      	ldr	r3, [pc, #132]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	491e      	ldr	r1, [pc, #120]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d008      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80076d8:	4b19      	ldr	r3, [pc, #100]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e4:	4916      	ldr	r1, [pc, #88]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d008      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80076f6:	4b12      	ldr	r3, [pc, #72]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007702:	490f      	ldr	r1, [pc, #60]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007704:	4313      	orrs	r3, r2
 8007706:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d008      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007714:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007718:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007720:	4907      	ldr	r1, [pc, #28]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007722:	4313      	orrs	r3, r2
 8007724:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00c      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007732:	4b03      	ldr	r3, [pc, #12]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	e002      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800773e:	bf00      	nop
 8007740:	40021000 	.word	0x40021000
 8007744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007746:	4913      	ldr	r1, [pc, #76]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007748:	4313      	orrs	r3, r2
 800774a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d008      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007758:	4b0e      	ldr	r3, [pc, #56]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800775a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007764:	490b      	ldr	r1, [pc, #44]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007766:	4313      	orrs	r3, r2
 8007768:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d008      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8007776:	4b07      	ldr	r3, [pc, #28]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007782:	4904      	ldr	r1, [pc, #16]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007784:	4313      	orrs	r3, r2
 8007786:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3748      	adds	r7, #72	; 0x48
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	40021000 	.word	0x40021000

08007798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e049      	b.n	800783e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d106      	bne.n	80077c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7fb fed0 	bl	8003564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f000 fe34 	bl	8008444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b01      	cmp	r3, #1
 800785a:	d001      	beq.n	8007860 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e047      	b.n	80078f0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a23      	ldr	r2, [pc, #140]	; (80078fc <HAL_TIM_Base_Start+0xb4>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d01d      	beq.n	80078ae <HAL_TIM_Base_Start+0x66>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800787a:	d018      	beq.n	80078ae <HAL_TIM_Base_Start+0x66>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a1f      	ldr	r2, [pc, #124]	; (8007900 <HAL_TIM_Base_Start+0xb8>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d013      	beq.n	80078ae <HAL_TIM_Base_Start+0x66>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a1e      	ldr	r2, [pc, #120]	; (8007904 <HAL_TIM_Base_Start+0xbc>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00e      	beq.n	80078ae <HAL_TIM_Base_Start+0x66>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a1c      	ldr	r2, [pc, #112]	; (8007908 <HAL_TIM_Base_Start+0xc0>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d009      	beq.n	80078ae <HAL_TIM_Base_Start+0x66>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a1b      	ldr	r2, [pc, #108]	; (800790c <HAL_TIM_Base_Start+0xc4>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d004      	beq.n	80078ae <HAL_TIM_Base_Start+0x66>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a19      	ldr	r2, [pc, #100]	; (8007910 <HAL_TIM_Base_Start+0xc8>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d115      	bne.n	80078da <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	4b17      	ldr	r3, [pc, #92]	; (8007914 <HAL_TIM_Base_Start+0xcc>)
 80078b6:	4013      	ands	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b06      	cmp	r3, #6
 80078be:	d015      	beq.n	80078ec <HAL_TIM_Base_Start+0xa4>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078c6:	d011      	beq.n	80078ec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0201 	orr.w	r2, r2, #1
 80078d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d8:	e008      	b.n	80078ec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f042 0201 	orr.w	r2, r2, #1
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	e000      	b.n	80078ee <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	40012c00 	.word	0x40012c00
 8007900:	40000400 	.word	0x40000400
 8007904:	40000800 	.word	0x40000800
 8007908:	40013400 	.word	0x40013400
 800790c:	40014000 	.word	0x40014000
 8007910:	40015000 	.word	0x40015000
 8007914:	00010007 	.word	0x00010007

08007918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b01      	cmp	r3, #1
 800792a:	d001      	beq.n	8007930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e04f      	b.n	80079d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0201 	orr.w	r2, r2, #1
 8007946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a23      	ldr	r2, [pc, #140]	; (80079dc <HAL_TIM_Base_Start_IT+0xc4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d01d      	beq.n	800798e <HAL_TIM_Base_Start_IT+0x76>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795a:	d018      	beq.n	800798e <HAL_TIM_Base_Start_IT+0x76>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a1f      	ldr	r2, [pc, #124]	; (80079e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d013      	beq.n	800798e <HAL_TIM_Base_Start_IT+0x76>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a1e      	ldr	r2, [pc, #120]	; (80079e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00e      	beq.n	800798e <HAL_TIM_Base_Start_IT+0x76>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a1c      	ldr	r2, [pc, #112]	; (80079e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d009      	beq.n	800798e <HAL_TIM_Base_Start_IT+0x76>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a1b      	ldr	r2, [pc, #108]	; (80079ec <HAL_TIM_Base_Start_IT+0xd4>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d004      	beq.n	800798e <HAL_TIM_Base_Start_IT+0x76>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a19      	ldr	r2, [pc, #100]	; (80079f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d115      	bne.n	80079ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	4b17      	ldr	r3, [pc, #92]	; (80079f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007996:	4013      	ands	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b06      	cmp	r3, #6
 800799e:	d015      	beq.n	80079cc <HAL_TIM_Base_Start_IT+0xb4>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079a6:	d011      	beq.n	80079cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f042 0201 	orr.w	r2, r2, #1
 80079b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b8:	e008      	b.n	80079cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f042 0201 	orr.w	r2, r2, #1
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	e000      	b.n	80079ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	40012c00 	.word	0x40012c00
 80079e0:	40000400 	.word	0x40000400
 80079e4:	40000800 	.word	0x40000800
 80079e8:	40013400 	.word	0x40013400
 80079ec:	40014000 	.word	0x40014000
 80079f0:	40015000 	.word	0x40015000
 80079f4:	00010007 	.word	0x00010007

080079f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e049      	b.n	8007a9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fb fdc6 	bl	80035b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	3304      	adds	r3, #4
 8007a34:	4619      	mov	r1, r3
 8007a36:	4610      	mov	r0, r2
 8007a38:	f000 fd04 	bl	8008444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d109      	bne.n	8007acc <HAL_TIM_PWM_Start+0x24>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	bf14      	ite	ne
 8007ac4:	2301      	movne	r3, #1
 8007ac6:	2300      	moveq	r3, #0
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	e03c      	b.n	8007b46 <HAL_TIM_PWM_Start+0x9e>
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d109      	bne.n	8007ae6 <HAL_TIM_PWM_Start+0x3e>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	bf14      	ite	ne
 8007ade:	2301      	movne	r3, #1
 8007ae0:	2300      	moveq	r3, #0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	e02f      	b.n	8007b46 <HAL_TIM_PWM_Start+0x9e>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d109      	bne.n	8007b00 <HAL_TIM_PWM_Start+0x58>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	bf14      	ite	ne
 8007af8:	2301      	movne	r3, #1
 8007afa:	2300      	moveq	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	e022      	b.n	8007b46 <HAL_TIM_PWM_Start+0x9e>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2b0c      	cmp	r3, #12
 8007b04:	d109      	bne.n	8007b1a <HAL_TIM_PWM_Start+0x72>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	bf14      	ite	ne
 8007b12:	2301      	movne	r3, #1
 8007b14:	2300      	moveq	r3, #0
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	e015      	b.n	8007b46 <HAL_TIM_PWM_Start+0x9e>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b10      	cmp	r3, #16
 8007b1e:	d109      	bne.n	8007b34 <HAL_TIM_PWM_Start+0x8c>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	bf14      	ite	ne
 8007b2c:	2301      	movne	r3, #1
 8007b2e:	2300      	moveq	r3, #0
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	e008      	b.n	8007b46 <HAL_TIM_PWM_Start+0x9e>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	bf14      	ite	ne
 8007b40:	2301      	movne	r3, #1
 8007b42:	2300      	moveq	r3, #0
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e0a1      	b.n	8007c92 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d104      	bne.n	8007b5e <HAL_TIM_PWM_Start+0xb6>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b5c:	e023      	b.n	8007ba6 <HAL_TIM_PWM_Start+0xfe>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b04      	cmp	r3, #4
 8007b62:	d104      	bne.n	8007b6e <HAL_TIM_PWM_Start+0xc6>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b6c:	e01b      	b.n	8007ba6 <HAL_TIM_PWM_Start+0xfe>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b08      	cmp	r3, #8
 8007b72:	d104      	bne.n	8007b7e <HAL_TIM_PWM_Start+0xd6>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b7c:	e013      	b.n	8007ba6 <HAL_TIM_PWM_Start+0xfe>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b0c      	cmp	r3, #12
 8007b82:	d104      	bne.n	8007b8e <HAL_TIM_PWM_Start+0xe6>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b8c:	e00b      	b.n	8007ba6 <HAL_TIM_PWM_Start+0xfe>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b10      	cmp	r3, #16
 8007b92:	d104      	bne.n	8007b9e <HAL_TIM_PWM_Start+0xf6>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b9c:	e003      	b.n	8007ba6 <HAL_TIM_PWM_Start+0xfe>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2201      	movs	r2, #1
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 f886 	bl	8008cc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a38      	ldr	r2, [pc, #224]	; (8007c9c <HAL_TIM_PWM_Start+0x1f4>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d018      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x148>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a37      	ldr	r2, [pc, #220]	; (8007ca0 <HAL_TIM_PWM_Start+0x1f8>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d013      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x148>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a35      	ldr	r2, [pc, #212]	; (8007ca4 <HAL_TIM_PWM_Start+0x1fc>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00e      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x148>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a34      	ldr	r2, [pc, #208]	; (8007ca8 <HAL_TIM_PWM_Start+0x200>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d009      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x148>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a32      	ldr	r2, [pc, #200]	; (8007cac <HAL_TIM_PWM_Start+0x204>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d004      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x148>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a31      	ldr	r2, [pc, #196]	; (8007cb0 <HAL_TIM_PWM_Start+0x208>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d101      	bne.n	8007bf4 <HAL_TIM_PWM_Start+0x14c>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e000      	b.n	8007bf6 <HAL_TIM_PWM_Start+0x14e>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d007      	beq.n	8007c0a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a23      	ldr	r2, [pc, #140]	; (8007c9c <HAL_TIM_PWM_Start+0x1f4>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d01d      	beq.n	8007c50 <HAL_TIM_PWM_Start+0x1a8>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c1c:	d018      	beq.n	8007c50 <HAL_TIM_PWM_Start+0x1a8>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a24      	ldr	r2, [pc, #144]	; (8007cb4 <HAL_TIM_PWM_Start+0x20c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d013      	beq.n	8007c50 <HAL_TIM_PWM_Start+0x1a8>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a22      	ldr	r2, [pc, #136]	; (8007cb8 <HAL_TIM_PWM_Start+0x210>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d00e      	beq.n	8007c50 <HAL_TIM_PWM_Start+0x1a8>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a1a      	ldr	r2, [pc, #104]	; (8007ca0 <HAL_TIM_PWM_Start+0x1f8>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d009      	beq.n	8007c50 <HAL_TIM_PWM_Start+0x1a8>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a18      	ldr	r2, [pc, #96]	; (8007ca4 <HAL_TIM_PWM_Start+0x1fc>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d004      	beq.n	8007c50 <HAL_TIM_PWM_Start+0x1a8>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a19      	ldr	r2, [pc, #100]	; (8007cb0 <HAL_TIM_PWM_Start+0x208>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d115      	bne.n	8007c7c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	689a      	ldr	r2, [r3, #8]
 8007c56:	4b19      	ldr	r3, [pc, #100]	; (8007cbc <HAL_TIM_PWM_Start+0x214>)
 8007c58:	4013      	ands	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2b06      	cmp	r3, #6
 8007c60:	d015      	beq.n	8007c8e <HAL_TIM_PWM_Start+0x1e6>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c68:	d011      	beq.n	8007c8e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f042 0201 	orr.w	r2, r2, #1
 8007c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c7a:	e008      	b.n	8007c8e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0201 	orr.w	r2, r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	e000      	b.n	8007c90 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	40012c00 	.word	0x40012c00
 8007ca0:	40013400 	.word	0x40013400
 8007ca4:	40014000 	.word	0x40014000
 8007ca8:	40014400 	.word	0x40014400
 8007cac:	40014800 	.word	0x40014800
 8007cb0:	40015000 	.word	0x40015000
 8007cb4:	40000400 	.word	0x40000400
 8007cb8:	40000800 	.word	0x40000800
 8007cbc:	00010007 	.word	0x00010007

08007cc0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 fff4 	bl	8008cc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a40      	ldr	r2, [pc, #256]	; (8007de0 <HAL_TIM_PWM_Stop+0x120>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d018      	beq.n	8007d14 <HAL_TIM_PWM_Stop+0x54>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a3f      	ldr	r2, [pc, #252]	; (8007de4 <HAL_TIM_PWM_Stop+0x124>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d013      	beq.n	8007d14 <HAL_TIM_PWM_Stop+0x54>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a3d      	ldr	r2, [pc, #244]	; (8007de8 <HAL_TIM_PWM_Stop+0x128>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00e      	beq.n	8007d14 <HAL_TIM_PWM_Stop+0x54>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a3c      	ldr	r2, [pc, #240]	; (8007dec <HAL_TIM_PWM_Stop+0x12c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d009      	beq.n	8007d14 <HAL_TIM_PWM_Stop+0x54>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a3a      	ldr	r2, [pc, #232]	; (8007df0 <HAL_TIM_PWM_Stop+0x130>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d004      	beq.n	8007d14 <HAL_TIM_PWM_Stop+0x54>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a39      	ldr	r2, [pc, #228]	; (8007df4 <HAL_TIM_PWM_Stop+0x134>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d101      	bne.n	8007d18 <HAL_TIM_PWM_Stop+0x58>
 8007d14:	2301      	movs	r3, #1
 8007d16:	e000      	b.n	8007d1a <HAL_TIM_PWM_Stop+0x5a>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d017      	beq.n	8007d4e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6a1a      	ldr	r2, [r3, #32]
 8007d24:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d28:	4013      	ands	r3, r2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10f      	bne.n	8007d4e <HAL_TIM_PWM_Stop+0x8e>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6a1a      	ldr	r2, [r3, #32]
 8007d34:	f240 4344 	movw	r3, #1092	; 0x444
 8007d38:	4013      	ands	r3, r2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d107      	bne.n	8007d4e <HAL_TIM_PWM_Stop+0x8e>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6a1a      	ldr	r2, [r3, #32]
 8007d54:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d58:	4013      	ands	r3, r2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10f      	bne.n	8007d7e <HAL_TIM_PWM_Stop+0xbe>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6a1a      	ldr	r2, [r3, #32]
 8007d64:	f240 4344 	movw	r3, #1092	; 0x444
 8007d68:	4013      	ands	r3, r2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d107      	bne.n	8007d7e <HAL_TIM_PWM_Stop+0xbe>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 0201 	bic.w	r2, r2, #1
 8007d7c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d104      	bne.n	8007d8e <HAL_TIM_PWM_Stop+0xce>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d8c:	e023      	b.n	8007dd6 <HAL_TIM_PWM_Stop+0x116>
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d104      	bne.n	8007d9e <HAL_TIM_PWM_Stop+0xde>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d9c:	e01b      	b.n	8007dd6 <HAL_TIM_PWM_Stop+0x116>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b08      	cmp	r3, #8
 8007da2:	d104      	bne.n	8007dae <HAL_TIM_PWM_Stop+0xee>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dac:	e013      	b.n	8007dd6 <HAL_TIM_PWM_Stop+0x116>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b0c      	cmp	r3, #12
 8007db2:	d104      	bne.n	8007dbe <HAL_TIM_PWM_Stop+0xfe>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007dbc:	e00b      	b.n	8007dd6 <HAL_TIM_PWM_Stop+0x116>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b10      	cmp	r3, #16
 8007dc2:	d104      	bne.n	8007dce <HAL_TIM_PWM_Stop+0x10e>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dcc:	e003      	b.n	8007dd6 <HAL_TIM_PWM_Stop+0x116>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	40012c00 	.word	0x40012c00
 8007de4:	40013400 	.word	0x40013400
 8007de8:	40014000 	.word	0x40014000
 8007dec:	40014400 	.word	0x40014400
 8007df0:	40014800 	.word	0x40014800
 8007df4:	40015000 	.word	0x40015000

08007df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d122      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d11b      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f06f 0202 	mvn.w	r2, #2
 8007e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fae3 	bl	8008406 <HAL_TIM_IC_CaptureCallback>
 8007e40:	e005      	b.n	8007e4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fad5 	bl	80083f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fae6 	bl	800841a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f003 0304 	and.w	r3, r3, #4
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d122      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d11b      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f06f 0204 	mvn.w	r2, #4
 8007e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fab9 	bl	8008406 <HAL_TIM_IC_CaptureCallback>
 8007e94:	e005      	b.n	8007ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 faab 	bl	80083f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fabc 	bl	800841a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f003 0308 	and.w	r3, r3, #8
 8007eb2:	2b08      	cmp	r3, #8
 8007eb4:	d122      	bne.n	8007efc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f003 0308 	and.w	r3, r3, #8
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d11b      	bne.n	8007efc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f06f 0208 	mvn.w	r2, #8
 8007ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2204      	movs	r2, #4
 8007ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fa8f 	bl	8008406 <HAL_TIM_IC_CaptureCallback>
 8007ee8:	e005      	b.n	8007ef6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fa81 	bl	80083f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fa92 	bl	800841a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	f003 0310 	and.w	r3, r3, #16
 8007f06:	2b10      	cmp	r3, #16
 8007f08:	d122      	bne.n	8007f50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f003 0310 	and.w	r3, r3, #16
 8007f14:	2b10      	cmp	r3, #16
 8007f16:	d11b      	bne.n	8007f50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f06f 0210 	mvn.w	r2, #16
 8007f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2208      	movs	r2, #8
 8007f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa65 	bl	8008406 <HAL_TIM_IC_CaptureCallback>
 8007f3c:	e005      	b.n	8007f4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fa57 	bl	80083f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fa68 	bl	800841a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d10e      	bne.n	8007f7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d107      	bne.n	8007f7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f06f 0201 	mvn.w	r2, #1
 8007f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7f9 fa7c 	bl	8001474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f86:	2b80      	cmp	r3, #128	; 0x80
 8007f88:	d10e      	bne.n	8007fa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f94:	2b80      	cmp	r3, #128	; 0x80
 8007f96:	d107      	bne.n	8007fa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 ff48 	bl	8008e38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fb6:	d10e      	bne.n	8007fd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc2:	2b80      	cmp	r3, #128	; 0x80
 8007fc4:	d107      	bne.n	8007fd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 ff3b 	bl	8008e4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe0:	2b40      	cmp	r3, #64	; 0x40
 8007fe2:	d10e      	bne.n	8008002 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fee:	2b40      	cmp	r3, #64	; 0x40
 8007ff0:	d107      	bne.n	8008002 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fa16 	bl	800842e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	f003 0320 	and.w	r3, r3, #32
 800800c:	2b20      	cmp	r3, #32
 800800e:	d10e      	bne.n	800802e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f003 0320 	and.w	r3, r3, #32
 800801a:	2b20      	cmp	r3, #32
 800801c:	d107      	bne.n	800802e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f06f 0220 	mvn.w	r2, #32
 8008026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fefb 	bl	8008e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800802e:	bf00      	nop
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800804e:	2b01      	cmp	r3, #1
 8008050:	d101      	bne.n	8008056 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008052:	2302      	movs	r3, #2
 8008054:	e0ff      	b.n	8008256 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b14      	cmp	r3, #20
 8008062:	f200 80f0 	bhi.w	8008246 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008066:	a201      	add	r2, pc, #4	; (adr r2, 800806c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806c:	080080c1 	.word	0x080080c1
 8008070:	08008247 	.word	0x08008247
 8008074:	08008247 	.word	0x08008247
 8008078:	08008247 	.word	0x08008247
 800807c:	08008101 	.word	0x08008101
 8008080:	08008247 	.word	0x08008247
 8008084:	08008247 	.word	0x08008247
 8008088:	08008247 	.word	0x08008247
 800808c:	08008143 	.word	0x08008143
 8008090:	08008247 	.word	0x08008247
 8008094:	08008247 	.word	0x08008247
 8008098:	08008247 	.word	0x08008247
 800809c:	08008183 	.word	0x08008183
 80080a0:	08008247 	.word	0x08008247
 80080a4:	08008247 	.word	0x08008247
 80080a8:	08008247 	.word	0x08008247
 80080ac:	080081c5 	.word	0x080081c5
 80080b0:	08008247 	.word	0x08008247
 80080b4:	08008247 	.word	0x08008247
 80080b8:	08008247 	.word	0x08008247
 80080bc:	08008205 	.word	0x08008205
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68b9      	ldr	r1, [r7, #8]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 fa5a 	bl	8008580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	699a      	ldr	r2, [r3, #24]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f042 0208 	orr.w	r2, r2, #8
 80080da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	699a      	ldr	r2, [r3, #24]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f022 0204 	bic.w	r2, r2, #4
 80080ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6999      	ldr	r1, [r3, #24]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	691a      	ldr	r2, [r3, #16]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	619a      	str	r2, [r3, #24]
      break;
 80080fe:	e0a5      	b.n	800824c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68b9      	ldr	r1, [r7, #8]
 8008106:	4618      	mov	r0, r3
 8008108:	f000 fad4 	bl	80086b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	699a      	ldr	r2, [r3, #24]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800811a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699a      	ldr	r2, [r3, #24]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800812a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6999      	ldr	r1, [r3, #24]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	021a      	lsls	r2, r3, #8
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	430a      	orrs	r2, r1
 800813e:	619a      	str	r2, [r3, #24]
      break;
 8008140:	e084      	b.n	800824c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68b9      	ldr	r1, [r7, #8]
 8008148:	4618      	mov	r0, r3
 800814a:	f000 fb47 	bl	80087dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69da      	ldr	r2, [r3, #28]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f042 0208 	orr.w	r2, r2, #8
 800815c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69da      	ldr	r2, [r3, #28]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 0204 	bic.w	r2, r2, #4
 800816c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	69d9      	ldr	r1, [r3, #28]
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	691a      	ldr	r2, [r3, #16]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	430a      	orrs	r2, r1
 800817e:	61da      	str	r2, [r3, #28]
      break;
 8008180:	e064      	b.n	800824c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	4618      	mov	r0, r3
 800818a:	f000 fbb9 	bl	8008900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	69da      	ldr	r2, [r3, #28]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800819c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69da      	ldr	r2, [r3, #28]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69d9      	ldr	r1, [r3, #28]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	021a      	lsls	r2, r3, #8
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	61da      	str	r2, [r3, #28]
      break;
 80081c2:	e043      	b.n	800824c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fc08 	bl	80089e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f042 0208 	orr.w	r2, r2, #8
 80081de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f022 0204 	bic.w	r2, r2, #4
 80081ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	691a      	ldr	r2, [r3, #16]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008202:	e023      	b.n	800824c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68b9      	ldr	r1, [r7, #8]
 800820a:	4618      	mov	r0, r3
 800820c:	f000 fc52 	bl	8008ab4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800821e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800822e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	021a      	lsls	r2, r3, #8
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	430a      	orrs	r2, r1
 8008242:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008244:	e002      	b.n	800824c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	75fb      	strb	r3, [r7, #23]
      break;
 800824a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008254:	7dfb      	ldrb	r3, [r7, #23]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3718      	adds	r7, #24
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop

08008260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008274:	2b01      	cmp	r3, #1
 8008276:	d101      	bne.n	800827c <HAL_TIM_ConfigClockSource+0x1c>
 8008278:	2302      	movs	r3, #2
 800827a:	e0b6      	b.n	80083ea <HAL_TIM_ConfigClockSource+0x18a>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2202      	movs	r2, #2
 8008288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800829a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800829e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082b8:	d03e      	beq.n	8008338 <HAL_TIM_ConfigClockSource+0xd8>
 80082ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082be:	f200 8087 	bhi.w	80083d0 <HAL_TIM_ConfigClockSource+0x170>
 80082c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c6:	f000 8086 	beq.w	80083d6 <HAL_TIM_ConfigClockSource+0x176>
 80082ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ce:	d87f      	bhi.n	80083d0 <HAL_TIM_ConfigClockSource+0x170>
 80082d0:	2b70      	cmp	r3, #112	; 0x70
 80082d2:	d01a      	beq.n	800830a <HAL_TIM_ConfigClockSource+0xaa>
 80082d4:	2b70      	cmp	r3, #112	; 0x70
 80082d6:	d87b      	bhi.n	80083d0 <HAL_TIM_ConfigClockSource+0x170>
 80082d8:	2b60      	cmp	r3, #96	; 0x60
 80082da:	d050      	beq.n	800837e <HAL_TIM_ConfigClockSource+0x11e>
 80082dc:	2b60      	cmp	r3, #96	; 0x60
 80082de:	d877      	bhi.n	80083d0 <HAL_TIM_ConfigClockSource+0x170>
 80082e0:	2b50      	cmp	r3, #80	; 0x50
 80082e2:	d03c      	beq.n	800835e <HAL_TIM_ConfigClockSource+0xfe>
 80082e4:	2b50      	cmp	r3, #80	; 0x50
 80082e6:	d873      	bhi.n	80083d0 <HAL_TIM_ConfigClockSource+0x170>
 80082e8:	2b40      	cmp	r3, #64	; 0x40
 80082ea:	d058      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x13e>
 80082ec:	2b40      	cmp	r3, #64	; 0x40
 80082ee:	d86f      	bhi.n	80083d0 <HAL_TIM_ConfigClockSource+0x170>
 80082f0:	2b30      	cmp	r3, #48	; 0x30
 80082f2:	d064      	beq.n	80083be <HAL_TIM_ConfigClockSource+0x15e>
 80082f4:	2b30      	cmp	r3, #48	; 0x30
 80082f6:	d86b      	bhi.n	80083d0 <HAL_TIM_ConfigClockSource+0x170>
 80082f8:	2b20      	cmp	r3, #32
 80082fa:	d060      	beq.n	80083be <HAL_TIM_ConfigClockSource+0x15e>
 80082fc:	2b20      	cmp	r3, #32
 80082fe:	d867      	bhi.n	80083d0 <HAL_TIM_ConfigClockSource+0x170>
 8008300:	2b00      	cmp	r3, #0
 8008302:	d05c      	beq.n	80083be <HAL_TIM_ConfigClockSource+0x15e>
 8008304:	2b10      	cmp	r3, #16
 8008306:	d05a      	beq.n	80083be <HAL_TIM_ConfigClockSource+0x15e>
 8008308:	e062      	b.n	80083d0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6818      	ldr	r0, [r3, #0]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	6899      	ldr	r1, [r3, #8]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f000 fcb1 	bl	8008c80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800832c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	609a      	str	r2, [r3, #8]
      break;
 8008336:	e04f      	b.n	80083d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6818      	ldr	r0, [r3, #0]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	6899      	ldr	r1, [r3, #8]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f000 fc9a 	bl	8008c80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689a      	ldr	r2, [r3, #8]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800835a:	609a      	str	r2, [r3, #8]
      break;
 800835c:	e03c      	b.n	80083d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	6859      	ldr	r1, [r3, #4]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	461a      	mov	r2, r3
 800836c:	f000 fc0e 	bl	8008b8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2150      	movs	r1, #80	; 0x50
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fc67 	bl	8008c4a <TIM_ITRx_SetConfig>
      break;
 800837c:	e02c      	b.n	80083d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	6859      	ldr	r1, [r3, #4]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	461a      	mov	r2, r3
 800838c:	f000 fc2d 	bl	8008bea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2160      	movs	r1, #96	; 0x60
 8008396:	4618      	mov	r0, r3
 8008398:	f000 fc57 	bl	8008c4a <TIM_ITRx_SetConfig>
      break;
 800839c:	e01c      	b.n	80083d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6818      	ldr	r0, [r3, #0]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	6859      	ldr	r1, [r3, #4]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	461a      	mov	r2, r3
 80083ac:	f000 fbee 	bl	8008b8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2140      	movs	r1, #64	; 0x40
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 fc47 	bl	8008c4a <TIM_ITRx_SetConfig>
      break;
 80083bc:	e00c      	b.n	80083d8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4619      	mov	r1, r3
 80083c8:	4610      	mov	r0, r2
 80083ca:	f000 fc3e 	bl	8008c4a <TIM_ITRx_SetConfig>
      break;
 80083ce:	e003      	b.n	80083d8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	73fb      	strb	r3, [r7, #15]
      break;
 80083d4:	e000      	b.n	80083d8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80083d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800840e:	bf00      	nop
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008422:	bf00      	nop
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800842e:	b480      	push	{r7}
 8008430:	b083      	sub	sp, #12
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008436:	bf00      	nop
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
	...

08008444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a42      	ldr	r2, [pc, #264]	; (8008560 <TIM_Base_SetConfig+0x11c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d013      	beq.n	8008484 <TIM_Base_SetConfig+0x40>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008462:	d00f      	beq.n	8008484 <TIM_Base_SetConfig+0x40>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a3f      	ldr	r2, [pc, #252]	; (8008564 <TIM_Base_SetConfig+0x120>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00b      	beq.n	8008484 <TIM_Base_SetConfig+0x40>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a3e      	ldr	r2, [pc, #248]	; (8008568 <TIM_Base_SetConfig+0x124>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d007      	beq.n	8008484 <TIM_Base_SetConfig+0x40>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a3d      	ldr	r2, [pc, #244]	; (800856c <TIM_Base_SetConfig+0x128>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d003      	beq.n	8008484 <TIM_Base_SetConfig+0x40>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a3c      	ldr	r2, [pc, #240]	; (8008570 <TIM_Base_SetConfig+0x12c>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d108      	bne.n	8008496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800848a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4313      	orrs	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a31      	ldr	r2, [pc, #196]	; (8008560 <TIM_Base_SetConfig+0x11c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d01f      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084a4:	d01b      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a2e      	ldr	r2, [pc, #184]	; (8008564 <TIM_Base_SetConfig+0x120>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d017      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a2d      	ldr	r2, [pc, #180]	; (8008568 <TIM_Base_SetConfig+0x124>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d013      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a2c      	ldr	r2, [pc, #176]	; (800856c <TIM_Base_SetConfig+0x128>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00f      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a2c      	ldr	r2, [pc, #176]	; (8008574 <TIM_Base_SetConfig+0x130>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d00b      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a2b      	ldr	r2, [pc, #172]	; (8008578 <TIM_Base_SetConfig+0x134>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d007      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a2a      	ldr	r2, [pc, #168]	; (800857c <TIM_Base_SetConfig+0x138>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d003      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a25      	ldr	r2, [pc, #148]	; (8008570 <TIM_Base_SetConfig+0x12c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d108      	bne.n	80084f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a12      	ldr	r2, [pc, #72]	; (8008560 <TIM_Base_SetConfig+0x11c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d013      	beq.n	8008544 <TIM_Base_SetConfig+0x100>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a13      	ldr	r2, [pc, #76]	; (800856c <TIM_Base_SetConfig+0x128>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00f      	beq.n	8008544 <TIM_Base_SetConfig+0x100>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a13      	ldr	r2, [pc, #76]	; (8008574 <TIM_Base_SetConfig+0x130>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d00b      	beq.n	8008544 <TIM_Base_SetConfig+0x100>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a12      	ldr	r2, [pc, #72]	; (8008578 <TIM_Base_SetConfig+0x134>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d007      	beq.n	8008544 <TIM_Base_SetConfig+0x100>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a11      	ldr	r2, [pc, #68]	; (800857c <TIM_Base_SetConfig+0x138>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d003      	beq.n	8008544 <TIM_Base_SetConfig+0x100>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a0c      	ldr	r2, [pc, #48]	; (8008570 <TIM_Base_SetConfig+0x12c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d103      	bne.n	800854c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	691a      	ldr	r2, [r3, #16]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	615a      	str	r2, [r3, #20]
}
 8008552:	bf00      	nop
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	40012c00 	.word	0x40012c00
 8008564:	40000400 	.word	0x40000400
 8008568:	40000800 	.word	0x40000800
 800856c:	40013400 	.word	0x40013400
 8008570:	40015000 	.word	0x40015000
 8008574:	40014000 	.word	0x40014000
 8008578:	40014400 	.word	0x40014400
 800857c:	40014800 	.word	0x40014800

08008580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	f023 0201 	bic.w	r2, r3, #1
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0303 	bic.w	r3, r3, #3
 80085ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f023 0302 	bic.w	r3, r3, #2
 80085cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a30      	ldr	r2, [pc, #192]	; (800869c <TIM_OC1_SetConfig+0x11c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d013      	beq.n	8008608 <TIM_OC1_SetConfig+0x88>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a2f      	ldr	r2, [pc, #188]	; (80086a0 <TIM_OC1_SetConfig+0x120>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d00f      	beq.n	8008608 <TIM_OC1_SetConfig+0x88>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a2e      	ldr	r2, [pc, #184]	; (80086a4 <TIM_OC1_SetConfig+0x124>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d00b      	beq.n	8008608 <TIM_OC1_SetConfig+0x88>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a2d      	ldr	r2, [pc, #180]	; (80086a8 <TIM_OC1_SetConfig+0x128>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d007      	beq.n	8008608 <TIM_OC1_SetConfig+0x88>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a2c      	ldr	r2, [pc, #176]	; (80086ac <TIM_OC1_SetConfig+0x12c>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d003      	beq.n	8008608 <TIM_OC1_SetConfig+0x88>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a2b      	ldr	r2, [pc, #172]	; (80086b0 <TIM_OC1_SetConfig+0x130>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d10c      	bne.n	8008622 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f023 0308 	bic.w	r3, r3, #8
 800860e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	4313      	orrs	r3, r2
 8008618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f023 0304 	bic.w	r3, r3, #4
 8008620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a1d      	ldr	r2, [pc, #116]	; (800869c <TIM_OC1_SetConfig+0x11c>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d013      	beq.n	8008652 <TIM_OC1_SetConfig+0xd2>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a1c      	ldr	r2, [pc, #112]	; (80086a0 <TIM_OC1_SetConfig+0x120>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d00f      	beq.n	8008652 <TIM_OC1_SetConfig+0xd2>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a1b      	ldr	r2, [pc, #108]	; (80086a4 <TIM_OC1_SetConfig+0x124>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d00b      	beq.n	8008652 <TIM_OC1_SetConfig+0xd2>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a1a      	ldr	r2, [pc, #104]	; (80086a8 <TIM_OC1_SetConfig+0x128>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d007      	beq.n	8008652 <TIM_OC1_SetConfig+0xd2>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a19      	ldr	r2, [pc, #100]	; (80086ac <TIM_OC1_SetConfig+0x12c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d003      	beq.n	8008652 <TIM_OC1_SetConfig+0xd2>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a18      	ldr	r2, [pc, #96]	; (80086b0 <TIM_OC1_SetConfig+0x130>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d111      	bne.n	8008676 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	4313      	orrs	r3, r2
 800866a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	4313      	orrs	r3, r2
 8008674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	621a      	str	r2, [r3, #32]
}
 8008690:	bf00      	nop
 8008692:	371c      	adds	r7, #28
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	40012c00 	.word	0x40012c00
 80086a0:	40013400 	.word	0x40013400
 80086a4:	40014000 	.word	0x40014000
 80086a8:	40014400 	.word	0x40014400
 80086ac:	40014800 	.word	0x40014800
 80086b0:	40015000 	.word	0x40015000

080086b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	f023 0210 	bic.w	r2, r3, #16
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	021b      	lsls	r3, r3, #8
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f023 0320 	bic.w	r3, r3, #32
 8008702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	011b      	lsls	r3, r3, #4
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	4313      	orrs	r3, r2
 800870e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a2c      	ldr	r2, [pc, #176]	; (80087c4 <TIM_OC2_SetConfig+0x110>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d007      	beq.n	8008728 <TIM_OC2_SetConfig+0x74>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a2b      	ldr	r2, [pc, #172]	; (80087c8 <TIM_OC2_SetConfig+0x114>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d003      	beq.n	8008728 <TIM_OC2_SetConfig+0x74>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a2a      	ldr	r2, [pc, #168]	; (80087cc <TIM_OC2_SetConfig+0x118>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d10d      	bne.n	8008744 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800872e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	011b      	lsls	r3, r3, #4
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	4313      	orrs	r3, r2
 800873a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008742:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a1f      	ldr	r2, [pc, #124]	; (80087c4 <TIM_OC2_SetConfig+0x110>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d013      	beq.n	8008774 <TIM_OC2_SetConfig+0xc0>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a1e      	ldr	r2, [pc, #120]	; (80087c8 <TIM_OC2_SetConfig+0x114>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00f      	beq.n	8008774 <TIM_OC2_SetConfig+0xc0>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a1e      	ldr	r2, [pc, #120]	; (80087d0 <TIM_OC2_SetConfig+0x11c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d00b      	beq.n	8008774 <TIM_OC2_SetConfig+0xc0>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a1d      	ldr	r2, [pc, #116]	; (80087d4 <TIM_OC2_SetConfig+0x120>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d007      	beq.n	8008774 <TIM_OC2_SetConfig+0xc0>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a1c      	ldr	r2, [pc, #112]	; (80087d8 <TIM_OC2_SetConfig+0x124>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d003      	beq.n	8008774 <TIM_OC2_SetConfig+0xc0>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a17      	ldr	r2, [pc, #92]	; (80087cc <TIM_OC2_SetConfig+0x118>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d113      	bne.n	800879c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800877a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008782:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	4313      	orrs	r3, r2
 800878e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	4313      	orrs	r3, r2
 800879a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	621a      	str	r2, [r3, #32]
}
 80087b6:	bf00      	nop
 80087b8:	371c      	adds	r7, #28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	40012c00 	.word	0x40012c00
 80087c8:	40013400 	.word	0x40013400
 80087cc:	40015000 	.word	0x40015000
 80087d0:	40014000 	.word	0x40014000
 80087d4:	40014400 	.word	0x40014400
 80087d8:	40014800 	.word	0x40014800

080087dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800880a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800880e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f023 0303 	bic.w	r3, r3, #3
 8008816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	021b      	lsls	r3, r3, #8
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	4313      	orrs	r3, r2
 8008834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a2b      	ldr	r2, [pc, #172]	; (80088e8 <TIM_OC3_SetConfig+0x10c>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d007      	beq.n	800884e <TIM_OC3_SetConfig+0x72>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a2a      	ldr	r2, [pc, #168]	; (80088ec <TIM_OC3_SetConfig+0x110>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d003      	beq.n	800884e <TIM_OC3_SetConfig+0x72>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a29      	ldr	r2, [pc, #164]	; (80088f0 <TIM_OC3_SetConfig+0x114>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d10d      	bne.n	800886a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	021b      	lsls	r3, r3, #8
 800885c:	697a      	ldr	r2, [r7, #20]
 800885e:	4313      	orrs	r3, r2
 8008860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008868:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a1e      	ldr	r2, [pc, #120]	; (80088e8 <TIM_OC3_SetConfig+0x10c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d013      	beq.n	800889a <TIM_OC3_SetConfig+0xbe>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a1d      	ldr	r2, [pc, #116]	; (80088ec <TIM_OC3_SetConfig+0x110>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00f      	beq.n	800889a <TIM_OC3_SetConfig+0xbe>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a1d      	ldr	r2, [pc, #116]	; (80088f4 <TIM_OC3_SetConfig+0x118>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d00b      	beq.n	800889a <TIM_OC3_SetConfig+0xbe>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a1c      	ldr	r2, [pc, #112]	; (80088f8 <TIM_OC3_SetConfig+0x11c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d007      	beq.n	800889a <TIM_OC3_SetConfig+0xbe>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a1b      	ldr	r2, [pc, #108]	; (80088fc <TIM_OC3_SetConfig+0x120>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d003      	beq.n	800889a <TIM_OC3_SetConfig+0xbe>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a16      	ldr	r2, [pc, #88]	; (80088f0 <TIM_OC3_SetConfig+0x114>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d113      	bne.n	80088c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	011b      	lsls	r3, r3, #4
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	011b      	lsls	r3, r3, #4
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	4313      	orrs	r3, r2
 80088c0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	621a      	str	r2, [r3, #32]
}
 80088dc:	bf00      	nop
 80088de:	371c      	adds	r7, #28
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	40012c00 	.word	0x40012c00
 80088ec:	40013400 	.word	0x40013400
 80088f0:	40015000 	.word	0x40015000
 80088f4:	40014000 	.word	0x40014000
 80088f8:	40014400 	.word	0x40014400
 80088fc:	40014800 	.word	0x40014800

08008900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a1b      	ldr	r3, [r3, #32]
 800891a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800892e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800893a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	021b      	lsls	r3, r3, #8
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	4313      	orrs	r3, r2
 8008946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800894e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	031b      	lsls	r3, r3, #12
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	4313      	orrs	r3, r2
 800895a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a1a      	ldr	r2, [pc, #104]	; (80089c8 <TIM_OC4_SetConfig+0xc8>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d013      	beq.n	800898c <TIM_OC4_SetConfig+0x8c>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a19      	ldr	r2, [pc, #100]	; (80089cc <TIM_OC4_SetConfig+0xcc>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d00f      	beq.n	800898c <TIM_OC4_SetConfig+0x8c>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a18      	ldr	r2, [pc, #96]	; (80089d0 <TIM_OC4_SetConfig+0xd0>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d00b      	beq.n	800898c <TIM_OC4_SetConfig+0x8c>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a17      	ldr	r2, [pc, #92]	; (80089d4 <TIM_OC4_SetConfig+0xd4>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d007      	beq.n	800898c <TIM_OC4_SetConfig+0x8c>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a16      	ldr	r2, [pc, #88]	; (80089d8 <TIM_OC4_SetConfig+0xd8>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d003      	beq.n	800898c <TIM_OC4_SetConfig+0x8c>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a15      	ldr	r2, [pc, #84]	; (80089dc <TIM_OC4_SetConfig+0xdc>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d109      	bne.n	80089a0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008992:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	019b      	lsls	r3, r3, #6
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	4313      	orrs	r3, r2
 800899e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	621a      	str	r2, [r3, #32]
}
 80089ba:	bf00      	nop
 80089bc:	371c      	adds	r7, #28
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	40012c00 	.word	0x40012c00
 80089cc:	40013400 	.word	0x40013400
 80089d0:	40014000 	.word	0x40014000
 80089d4:	40014400 	.word	0x40014400
 80089d8:	40014800 	.word	0x40014800
 80089dc:	40015000 	.word	0x40015000

080089e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	041b      	lsls	r3, r3, #16
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a19      	ldr	r2, [pc, #100]	; (8008a9c <TIM_OC5_SetConfig+0xbc>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d013      	beq.n	8008a62 <TIM_OC5_SetConfig+0x82>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a18      	ldr	r2, [pc, #96]	; (8008aa0 <TIM_OC5_SetConfig+0xc0>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d00f      	beq.n	8008a62 <TIM_OC5_SetConfig+0x82>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a17      	ldr	r2, [pc, #92]	; (8008aa4 <TIM_OC5_SetConfig+0xc4>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d00b      	beq.n	8008a62 <TIM_OC5_SetConfig+0x82>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a16      	ldr	r2, [pc, #88]	; (8008aa8 <TIM_OC5_SetConfig+0xc8>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d007      	beq.n	8008a62 <TIM_OC5_SetConfig+0x82>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a15      	ldr	r2, [pc, #84]	; (8008aac <TIM_OC5_SetConfig+0xcc>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d003      	beq.n	8008a62 <TIM_OC5_SetConfig+0x82>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a14      	ldr	r2, [pc, #80]	; (8008ab0 <TIM_OC5_SetConfig+0xd0>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d109      	bne.n	8008a76 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	021b      	lsls	r3, r3, #8
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	621a      	str	r2, [r3, #32]
}
 8008a90:	bf00      	nop
 8008a92:	371c      	adds	r7, #28
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	40012c00 	.word	0x40012c00
 8008aa0:	40013400 	.word	0x40013400
 8008aa4:	40014000 	.word	0x40014000
 8008aa8:	40014400 	.word	0x40014400
 8008aac:	40014800 	.word	0x40014800
 8008ab0:	40015000 	.word	0x40015000

08008ab4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	021b      	lsls	r3, r3, #8
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008afa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	051b      	lsls	r3, r3, #20
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a1a      	ldr	r2, [pc, #104]	; (8008b74 <TIM_OC6_SetConfig+0xc0>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d013      	beq.n	8008b38 <TIM_OC6_SetConfig+0x84>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a19      	ldr	r2, [pc, #100]	; (8008b78 <TIM_OC6_SetConfig+0xc4>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d00f      	beq.n	8008b38 <TIM_OC6_SetConfig+0x84>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a18      	ldr	r2, [pc, #96]	; (8008b7c <TIM_OC6_SetConfig+0xc8>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d00b      	beq.n	8008b38 <TIM_OC6_SetConfig+0x84>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a17      	ldr	r2, [pc, #92]	; (8008b80 <TIM_OC6_SetConfig+0xcc>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d007      	beq.n	8008b38 <TIM_OC6_SetConfig+0x84>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a16      	ldr	r2, [pc, #88]	; (8008b84 <TIM_OC6_SetConfig+0xd0>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d003      	beq.n	8008b38 <TIM_OC6_SetConfig+0x84>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a15      	ldr	r2, [pc, #84]	; (8008b88 <TIM_OC6_SetConfig+0xd4>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d109      	bne.n	8008b4c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	029b      	lsls	r3, r3, #10
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	621a      	str	r2, [r3, #32]
}
 8008b66:	bf00      	nop
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	40012c00 	.word	0x40012c00
 8008b78:	40013400 	.word	0x40013400
 8008b7c:	40014000 	.word	0x40014000
 8008b80:	40014400 	.word	0x40014400
 8008b84:	40014800 	.word	0x40014800
 8008b88:	40015000 	.word	0x40015000

08008b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b087      	sub	sp, #28
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
 8008b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	f023 0201 	bic.w	r2, r3, #1
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	011b      	lsls	r3, r3, #4
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f023 030a 	bic.w	r3, r3, #10
 8008bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	621a      	str	r2, [r3, #32]
}
 8008bde:	bf00      	nop
 8008be0:	371c      	adds	r7, #28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b087      	sub	sp, #28
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	60f8      	str	r0, [r7, #12]
 8008bf2:	60b9      	str	r1, [r7, #8]
 8008bf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	f023 0210 	bic.w	r2, r3, #16
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6a1b      	ldr	r3, [r3, #32]
 8008c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	031b      	lsls	r3, r3, #12
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	011b      	lsls	r3, r3, #4
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	621a      	str	r2, [r3, #32]
}
 8008c3e:	bf00      	nop
 8008c40:	371c      	adds	r7, #28
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b085      	sub	sp, #20
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	f043 0307 	orr.w	r3, r3, #7
 8008c6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	609a      	str	r2, [r3, #8]
}
 8008c74:	bf00      	nop
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	021a      	lsls	r2, r3, #8
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	609a      	str	r2, [r3, #8]
}
 8008cb4:	bf00      	nop
 8008cb6:	371c      	adds	r7, #28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f003 031f 	and.w	r3, r3, #31
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6a1a      	ldr	r2, [r3, #32]
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	43db      	mvns	r3, r3
 8008ce2:	401a      	ands	r2, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6a1a      	ldr	r2, [r3, #32]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	f003 031f 	and.w	r3, r3, #31
 8008cf2:	6879      	ldr	r1, [r7, #4]
 8008cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	621a      	str	r2, [r3, #32]
}
 8008cfe:	bf00      	nop
 8008d00:	371c      	adds	r7, #28
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
	...

08008d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d101      	bne.n	8008d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d20:	2302      	movs	r3, #2
 8008d22:	e06d      	b.n	8008e00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a30      	ldr	r2, [pc, #192]	; (8008e0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d009      	beq.n	8008d62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a2f      	ldr	r2, [pc, #188]	; (8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d004      	beq.n	8008d62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a2d      	ldr	r2, [pc, #180]	; (8008e14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d108      	bne.n	8008d74 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a1e      	ldr	r2, [pc, #120]	; (8008e0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d01d      	beq.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da0:	d018      	beq.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a1c      	ldr	r2, [pc, #112]	; (8008e18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d013      	beq.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a1a      	ldr	r2, [pc, #104]	; (8008e1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d00e      	beq.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a15      	ldr	r2, [pc, #84]	; (8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d009      	beq.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a16      	ldr	r2, [pc, #88]	; (8008e20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d004      	beq.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a11      	ldr	r2, [pc, #68]	; (8008e14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d10c      	bne.n	8008dee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	40012c00 	.word	0x40012c00
 8008e10:	40013400 	.word	0x40013400
 8008e14:	40015000 	.word	0x40015000
 8008e18:	40000400 	.word	0x40000400
 8008e1c:	40000800 	.word	0x40000800
 8008e20:	40014000 	.word	0x40014000

08008e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e040      	b.n	8008ef4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d106      	bne.n	8008e88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7fa fbec 	bl	8003660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2224      	movs	r2, #36	; 0x24
 8008e8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f022 0201 	bic.w	r2, r2, #1
 8008e9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fb78 	bl	8009594 <UART_SetConfig>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d101      	bne.n	8008eae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e022      	b.n	8008ef4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d002      	beq.n	8008ebc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fd42 	bl	8009940 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	689a      	ldr	r2, [r3, #8]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f042 0201 	orr.w	r2, r2, #1
 8008eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fdc9 	bl	8009a84 <UART_CheckIdleState>
 8008ef2:	4603      	mov	r3, r0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08a      	sub	sp, #40	; 0x28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	4613      	mov	r3, r2
 8008f08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f0e:	2b20      	cmp	r3, #32
 8008f10:	d13d      	bne.n	8008f8e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <HAL_UART_Receive_IT+0x22>
 8008f18:	88fb      	ldrh	r3, [r7, #6]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e036      	b.n	8008f90 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d101      	bne.n	8008f30 <HAL_UART_Receive_IT+0x34>
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	e02f      	b.n	8008f90 <HAL_UART_Receive_IT+0x94>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d018      	beq.n	8008f7e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	e853 3f00 	ldrex	r3, [r3]
 8008f58:	613b      	str	r3, [r7, #16]
   return(result);
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f60:	627b      	str	r3, [r7, #36]	; 0x24
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	623b      	str	r3, [r7, #32]
 8008f6c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6e:	69f9      	ldr	r1, [r7, #28]
 8008f70:	6a3a      	ldr	r2, [r7, #32]
 8008f72:	e841 2300 	strex	r3, r2, [r1]
 8008f76:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1e6      	bne.n	8008f4c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f7e:	88fb      	ldrh	r3, [r7, #6]
 8008f80:	461a      	mov	r2, r3
 8008f82:	68b9      	ldr	r1, [r7, #8]
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f000 fe8b 	bl	8009ca0 <UART_Start_Receive_IT>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	e000      	b.n	8008f90 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f8e:	2302      	movs	r3, #2
  }
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3728      	adds	r7, #40	; 0x28
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b0ba      	sub	sp, #232	; 0xe8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008fbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008fc2:	f640 030f 	movw	r3, #2063	; 0x80f
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008fcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d115      	bne.n	8009000 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00f      	beq.n	8009000 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fe4:	f003 0320 	and.w	r3, r3, #32
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d009      	beq.n	8009000 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 82a3 	beq.w	800953c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	4798      	blx	r3
      }
      return;
 8008ffe:	e29d      	b.n	800953c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 8117 	beq.w	8009238 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800900a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	d106      	bne.n	8009024 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009016:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800901a:	4b85      	ldr	r3, [pc, #532]	; (8009230 <HAL_UART_IRQHandler+0x298>)
 800901c:	4013      	ands	r3, r2
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 810a 	beq.w	8009238 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	2b00      	cmp	r3, #0
 800902e:	d011      	beq.n	8009054 <HAL_UART_IRQHandler+0xbc>
 8009030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2201      	movs	r2, #1
 8009042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800904a:	f043 0201 	orr.w	r2, r3, #1
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009058:	f003 0302 	and.w	r3, r3, #2
 800905c:	2b00      	cmp	r3, #0
 800905e:	d011      	beq.n	8009084 <HAL_UART_IRQHandler+0xec>
 8009060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009064:	f003 0301 	and.w	r3, r3, #1
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00b      	beq.n	8009084 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2202      	movs	r2, #2
 8009072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800907a:	f043 0204 	orr.w	r2, r3, #4
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d011      	beq.n	80090b4 <HAL_UART_IRQHandler+0x11c>
 8009090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00b      	beq.n	80090b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2204      	movs	r2, #4
 80090a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090aa:	f043 0202 	orr.w	r2, r3, #2
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80090b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b8:	f003 0308 	and.w	r3, r3, #8
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d017      	beq.n	80090f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80090c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090c4:	f003 0320 	and.w	r3, r3, #32
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d105      	bne.n	80090d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80090cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00b      	beq.n	80090f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2208      	movs	r2, #8
 80090de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090e6:	f043 0208 	orr.w	r2, r3, #8
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80090f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d012      	beq.n	8009122 <HAL_UART_IRQHandler+0x18a>
 80090fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009100:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00c      	beq.n	8009122 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009118:	f043 0220 	orr.w	r2, r3, #32
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 8209 	beq.w	8009540 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800912e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009132:	f003 0320 	and.w	r3, r3, #32
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00d      	beq.n	8009156 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800913a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800913e:	f003 0320 	and.w	r3, r3, #32
 8009142:	2b00      	cmp	r3, #0
 8009144:	d007      	beq.n	8009156 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800915c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916a:	2b40      	cmp	r3, #64	; 0x40
 800916c:	d005      	beq.n	800917a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800916e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009172:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009176:	2b00      	cmp	r3, #0
 8009178:	d04f      	beq.n	800921a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fe3c 	bl	8009df8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918a:	2b40      	cmp	r3, #64	; 0x40
 800918c:	d141      	bne.n	8009212 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3308      	adds	r3, #8
 8009194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009198:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800919c:	e853 3f00 	ldrex	r3, [r3]
 80091a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80091a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3308      	adds	r3, #8
 80091b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80091ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80091be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80091c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80091ca:	e841 2300 	strex	r3, r2, [r1]
 80091ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80091d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1d9      	bne.n	800918e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d013      	beq.n	800920a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e6:	4a13      	ldr	r2, [pc, #76]	; (8009234 <HAL_UART_IRQHandler+0x29c>)
 80091e8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fc fb3c 	bl	800586c <HAL_DMA_Abort_IT>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d017      	beq.n	800922a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009204:	4610      	mov	r0, r2
 8009206:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009208:	e00f      	b.n	800922a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f9ac 	bl	8009568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009210:	e00b      	b.n	800922a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f9a8 	bl	8009568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009218:	e007      	b.n	800922a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f9a4 	bl	8009568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009228:	e18a      	b.n	8009540 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800922a:	bf00      	nop
    return;
 800922c:	e188      	b.n	8009540 <HAL_UART_IRQHandler+0x5a8>
 800922e:	bf00      	nop
 8009230:	04000120 	.word	0x04000120
 8009234:	08009ebf 	.word	0x08009ebf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800923c:	2b01      	cmp	r3, #1
 800923e:	f040 8143 	bne.w	80094c8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009246:	f003 0310 	and.w	r3, r3, #16
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 813c 	beq.w	80094c8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009254:	f003 0310 	and.w	r3, r3, #16
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 8135 	beq.w	80094c8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2210      	movs	r2, #16
 8009264:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009270:	2b40      	cmp	r3, #64	; 0x40
 8009272:	f040 80b1 	bne.w	80093d8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009282:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009286:	2b00      	cmp	r3, #0
 8009288:	f000 815c 	beq.w	8009544 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009296:	429a      	cmp	r2, r3
 8009298:	f080 8154 	bcs.w	8009544 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	2b20      	cmp	r3, #32
 80092ae:	f000 8085 	beq.w	80093bc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092be:	e853 3f00 	ldrex	r3, [r3]
 80092c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80092c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80092e0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80092e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80092ec:	e841 2300 	strex	r3, r2, [r1]
 80092f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80092f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1da      	bne.n	80092b2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3308      	adds	r3, #8
 8009302:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009306:	e853 3f00 	ldrex	r3, [r3]
 800930a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800930c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800930e:	f023 0301 	bic.w	r3, r3, #1
 8009312:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3308      	adds	r3, #8
 800931c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009320:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009324:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009328:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800932c:	e841 2300 	strex	r3, r2, [r1]
 8009330:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1e1      	bne.n	80092fc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	3308      	adds	r3, #8
 800933e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009342:	e853 3f00 	ldrex	r3, [r3]
 8009346:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800934a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800934e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	3308      	adds	r3, #8
 8009358:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800935c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800935e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009362:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800936a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e3      	bne.n	8009338 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2220      	movs	r2, #32
 8009374:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009384:	e853 3f00 	ldrex	r3, [r3]
 8009388:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800938a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800938c:	f023 0310 	bic.w	r3, r3, #16
 8009390:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	461a      	mov	r2, r3
 800939a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800939e:	65bb      	str	r3, [r7, #88]	; 0x58
 80093a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80093ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1e4      	bne.n	800937c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fc fa1f 	bl	80057fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f8d3 	bl	800957c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093d6:	e0b5      	b.n	8009544 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 80a7 	beq.w	8009548 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80093fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f000 80a2 	beq.w	8009548 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940c:	e853 3f00 	ldrex	r3, [r3]
 8009410:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009414:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009418:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	461a      	mov	r2, r3
 8009422:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009426:	647b      	str	r3, [r7, #68]	; 0x44
 8009428:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800942c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e4      	bne.n	8009404 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3308      	adds	r3, #8
 8009440:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	623b      	str	r3, [r7, #32]
   return(result);
 800944a:	6a3b      	ldr	r3, [r7, #32]
 800944c:	f023 0301 	bic.w	r3, r3, #1
 8009450:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3308      	adds	r3, #8
 800945a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800945e:	633a      	str	r2, [r7, #48]	; 0x30
 8009460:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009466:	e841 2300 	strex	r3, r2, [r1]
 800946a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1e3      	bne.n	800943a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2220      	movs	r2, #32
 8009476:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	60fb      	str	r3, [r7, #12]
   return(result);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f023 0310 	bic.w	r3, r3, #16
 8009498:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	461a      	mov	r2, r3
 80094a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80094a6:	61fb      	str	r3, [r7, #28]
 80094a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094aa:	69b9      	ldr	r1, [r7, #24]
 80094ac:	69fa      	ldr	r2, [r7, #28]
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	617b      	str	r3, [r7, #20]
   return(result);
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e4      	bne.n	8009484 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f85b 	bl	800957c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094c6:	e03f      	b.n	8009548 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80094c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00e      	beq.n	80094f2 <HAL_UART_IRQHandler+0x55a>
 80094d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d008      	beq.n	80094f2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80094e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fe83 	bl	800a1f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094f0:	e02d      	b.n	800954e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80094f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00e      	beq.n	800951c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80094fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009506:	2b00      	cmp	r3, #0
 8009508:	d008      	beq.n	800951c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800950e:	2b00      	cmp	r3, #0
 8009510:	d01c      	beq.n	800954c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	4798      	blx	r3
    }
    return;
 800951a:	e017      	b.n	800954c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800951c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009524:	2b00      	cmp	r3, #0
 8009526:	d012      	beq.n	800954e <HAL_UART_IRQHandler+0x5b6>
 8009528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800952c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00c      	beq.n	800954e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fcd8 	bl	8009eea <UART_EndTransmit_IT>
    return;
 800953a:	e008      	b.n	800954e <HAL_UART_IRQHandler+0x5b6>
      return;
 800953c:	bf00      	nop
 800953e:	e006      	b.n	800954e <HAL_UART_IRQHandler+0x5b6>
    return;
 8009540:	bf00      	nop
 8009542:	e004      	b.n	800954e <HAL_UART_IRQHandler+0x5b6>
      return;
 8009544:	bf00      	nop
 8009546:	e002      	b.n	800954e <HAL_UART_IRQHandler+0x5b6>
      return;
 8009548:	bf00      	nop
 800954a:	e000      	b.n	800954e <HAL_UART_IRQHandler+0x5b6>
    return;
 800954c:	bf00      	nop
  }

}
 800954e:	37e8      	adds	r7, #232	; 0xe8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	460b      	mov	r3, r1
 8009586:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b088      	sub	sp, #32
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	689a      	ldr	r2, [r3, #8]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	431a      	orrs	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	431a      	orrs	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	4b92      	ldr	r3, [pc, #584]	; (8009808 <UART_SetConfig+0x274>)
 80095c0:	4013      	ands	r3, r2
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	6812      	ldr	r2, [r2, #0]
 80095c6:	6979      	ldr	r1, [r7, #20]
 80095c8:	430b      	orrs	r3, r1
 80095ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	430a      	orrs	r2, r1
 80095e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a1b      	ldr	r3, [r3, #32]
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	430a      	orrs	r2, r1
 8009604:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a80      	ldr	r2, [pc, #512]	; (800980c <UART_SetConfig+0x278>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d120      	bne.n	8009652 <UART_SetConfig+0xbe>
 8009610:	4b7f      	ldr	r3, [pc, #508]	; (8009810 <UART_SetConfig+0x27c>)
 8009612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009614:	f003 0303 	and.w	r3, r3, #3
 8009618:	2b03      	cmp	r3, #3
 800961a:	d817      	bhi.n	800964c <UART_SetConfig+0xb8>
 800961c:	a201      	add	r2, pc, #4	; (adr r2, 8009624 <UART_SetConfig+0x90>)
 800961e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009622:	bf00      	nop
 8009624:	08009635 	.word	0x08009635
 8009628:	08009641 	.word	0x08009641
 800962c:	08009647 	.word	0x08009647
 8009630:	0800963b 	.word	0x0800963b
 8009634:	2301      	movs	r3, #1
 8009636:	77fb      	strb	r3, [r7, #31]
 8009638:	e0b5      	b.n	80097a6 <UART_SetConfig+0x212>
 800963a:	2302      	movs	r3, #2
 800963c:	77fb      	strb	r3, [r7, #31]
 800963e:	e0b2      	b.n	80097a6 <UART_SetConfig+0x212>
 8009640:	2304      	movs	r3, #4
 8009642:	77fb      	strb	r3, [r7, #31]
 8009644:	e0af      	b.n	80097a6 <UART_SetConfig+0x212>
 8009646:	2308      	movs	r3, #8
 8009648:	77fb      	strb	r3, [r7, #31]
 800964a:	e0ac      	b.n	80097a6 <UART_SetConfig+0x212>
 800964c:	2310      	movs	r3, #16
 800964e:	77fb      	strb	r3, [r7, #31]
 8009650:	e0a9      	b.n	80097a6 <UART_SetConfig+0x212>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a6f      	ldr	r2, [pc, #444]	; (8009814 <UART_SetConfig+0x280>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d124      	bne.n	80096a6 <UART_SetConfig+0x112>
 800965c:	4b6c      	ldr	r3, [pc, #432]	; (8009810 <UART_SetConfig+0x27c>)
 800965e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009660:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009664:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009668:	d011      	beq.n	800968e <UART_SetConfig+0xfa>
 800966a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800966e:	d817      	bhi.n	80096a0 <UART_SetConfig+0x10c>
 8009670:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009674:	d011      	beq.n	800969a <UART_SetConfig+0x106>
 8009676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800967a:	d811      	bhi.n	80096a0 <UART_SetConfig+0x10c>
 800967c:	2b00      	cmp	r3, #0
 800967e:	d003      	beq.n	8009688 <UART_SetConfig+0xf4>
 8009680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009684:	d006      	beq.n	8009694 <UART_SetConfig+0x100>
 8009686:	e00b      	b.n	80096a0 <UART_SetConfig+0x10c>
 8009688:	2300      	movs	r3, #0
 800968a:	77fb      	strb	r3, [r7, #31]
 800968c:	e08b      	b.n	80097a6 <UART_SetConfig+0x212>
 800968e:	2302      	movs	r3, #2
 8009690:	77fb      	strb	r3, [r7, #31]
 8009692:	e088      	b.n	80097a6 <UART_SetConfig+0x212>
 8009694:	2304      	movs	r3, #4
 8009696:	77fb      	strb	r3, [r7, #31]
 8009698:	e085      	b.n	80097a6 <UART_SetConfig+0x212>
 800969a:	2308      	movs	r3, #8
 800969c:	77fb      	strb	r3, [r7, #31]
 800969e:	e082      	b.n	80097a6 <UART_SetConfig+0x212>
 80096a0:	2310      	movs	r3, #16
 80096a2:	77fb      	strb	r3, [r7, #31]
 80096a4:	e07f      	b.n	80097a6 <UART_SetConfig+0x212>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a5b      	ldr	r2, [pc, #364]	; (8009818 <UART_SetConfig+0x284>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d124      	bne.n	80096fa <UART_SetConfig+0x166>
 80096b0:	4b57      	ldr	r3, [pc, #348]	; (8009810 <UART_SetConfig+0x27c>)
 80096b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80096b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80096bc:	d011      	beq.n	80096e2 <UART_SetConfig+0x14e>
 80096be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80096c2:	d817      	bhi.n	80096f4 <UART_SetConfig+0x160>
 80096c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80096c8:	d011      	beq.n	80096ee <UART_SetConfig+0x15a>
 80096ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80096ce:	d811      	bhi.n	80096f4 <UART_SetConfig+0x160>
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d003      	beq.n	80096dc <UART_SetConfig+0x148>
 80096d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096d8:	d006      	beq.n	80096e8 <UART_SetConfig+0x154>
 80096da:	e00b      	b.n	80096f4 <UART_SetConfig+0x160>
 80096dc:	2300      	movs	r3, #0
 80096de:	77fb      	strb	r3, [r7, #31]
 80096e0:	e061      	b.n	80097a6 <UART_SetConfig+0x212>
 80096e2:	2302      	movs	r3, #2
 80096e4:	77fb      	strb	r3, [r7, #31]
 80096e6:	e05e      	b.n	80097a6 <UART_SetConfig+0x212>
 80096e8:	2304      	movs	r3, #4
 80096ea:	77fb      	strb	r3, [r7, #31]
 80096ec:	e05b      	b.n	80097a6 <UART_SetConfig+0x212>
 80096ee:	2308      	movs	r3, #8
 80096f0:	77fb      	strb	r3, [r7, #31]
 80096f2:	e058      	b.n	80097a6 <UART_SetConfig+0x212>
 80096f4:	2310      	movs	r3, #16
 80096f6:	77fb      	strb	r3, [r7, #31]
 80096f8:	e055      	b.n	80097a6 <UART_SetConfig+0x212>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a47      	ldr	r2, [pc, #284]	; (800981c <UART_SetConfig+0x288>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d124      	bne.n	800974e <UART_SetConfig+0x1ba>
 8009704:	4b42      	ldr	r3, [pc, #264]	; (8009810 <UART_SetConfig+0x27c>)
 8009706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009708:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800970c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009710:	d011      	beq.n	8009736 <UART_SetConfig+0x1a2>
 8009712:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009716:	d817      	bhi.n	8009748 <UART_SetConfig+0x1b4>
 8009718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800971c:	d011      	beq.n	8009742 <UART_SetConfig+0x1ae>
 800971e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009722:	d811      	bhi.n	8009748 <UART_SetConfig+0x1b4>
 8009724:	2b00      	cmp	r3, #0
 8009726:	d003      	beq.n	8009730 <UART_SetConfig+0x19c>
 8009728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800972c:	d006      	beq.n	800973c <UART_SetConfig+0x1a8>
 800972e:	e00b      	b.n	8009748 <UART_SetConfig+0x1b4>
 8009730:	2300      	movs	r3, #0
 8009732:	77fb      	strb	r3, [r7, #31]
 8009734:	e037      	b.n	80097a6 <UART_SetConfig+0x212>
 8009736:	2302      	movs	r3, #2
 8009738:	77fb      	strb	r3, [r7, #31]
 800973a:	e034      	b.n	80097a6 <UART_SetConfig+0x212>
 800973c:	2304      	movs	r3, #4
 800973e:	77fb      	strb	r3, [r7, #31]
 8009740:	e031      	b.n	80097a6 <UART_SetConfig+0x212>
 8009742:	2308      	movs	r3, #8
 8009744:	77fb      	strb	r3, [r7, #31]
 8009746:	e02e      	b.n	80097a6 <UART_SetConfig+0x212>
 8009748:	2310      	movs	r3, #16
 800974a:	77fb      	strb	r3, [r7, #31]
 800974c:	e02b      	b.n	80097a6 <UART_SetConfig+0x212>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a33      	ldr	r2, [pc, #204]	; (8009820 <UART_SetConfig+0x28c>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d124      	bne.n	80097a2 <UART_SetConfig+0x20e>
 8009758:	4b2d      	ldr	r3, [pc, #180]	; (8009810 <UART_SetConfig+0x27c>)
 800975a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009760:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009764:	d011      	beq.n	800978a <UART_SetConfig+0x1f6>
 8009766:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800976a:	d817      	bhi.n	800979c <UART_SetConfig+0x208>
 800976c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009770:	d011      	beq.n	8009796 <UART_SetConfig+0x202>
 8009772:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009776:	d811      	bhi.n	800979c <UART_SetConfig+0x208>
 8009778:	2b00      	cmp	r3, #0
 800977a:	d003      	beq.n	8009784 <UART_SetConfig+0x1f0>
 800977c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009780:	d006      	beq.n	8009790 <UART_SetConfig+0x1fc>
 8009782:	e00b      	b.n	800979c <UART_SetConfig+0x208>
 8009784:	2300      	movs	r3, #0
 8009786:	77fb      	strb	r3, [r7, #31]
 8009788:	e00d      	b.n	80097a6 <UART_SetConfig+0x212>
 800978a:	2302      	movs	r3, #2
 800978c:	77fb      	strb	r3, [r7, #31]
 800978e:	e00a      	b.n	80097a6 <UART_SetConfig+0x212>
 8009790:	2304      	movs	r3, #4
 8009792:	77fb      	strb	r3, [r7, #31]
 8009794:	e007      	b.n	80097a6 <UART_SetConfig+0x212>
 8009796:	2308      	movs	r3, #8
 8009798:	77fb      	strb	r3, [r7, #31]
 800979a:	e004      	b.n	80097a6 <UART_SetConfig+0x212>
 800979c:	2310      	movs	r3, #16
 800979e:	77fb      	strb	r3, [r7, #31]
 80097a0:	e001      	b.n	80097a6 <UART_SetConfig+0x212>
 80097a2:	2310      	movs	r3, #16
 80097a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097ae:	d16c      	bne.n	800988a <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80097b0:	7ffb      	ldrb	r3, [r7, #31]
 80097b2:	2b08      	cmp	r3, #8
 80097b4:	d838      	bhi.n	8009828 <UART_SetConfig+0x294>
 80097b6:	a201      	add	r2, pc, #4	; (adr r2, 80097bc <UART_SetConfig+0x228>)
 80097b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097bc:	080097e1 	.word	0x080097e1
 80097c0:	080097e9 	.word	0x080097e9
 80097c4:	080097f1 	.word	0x080097f1
 80097c8:	08009829 	.word	0x08009829
 80097cc:	080097f7 	.word	0x080097f7
 80097d0:	08009829 	.word	0x08009829
 80097d4:	08009829 	.word	0x08009829
 80097d8:	08009829 	.word	0x08009829
 80097dc:	080097ff 	.word	0x080097ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097e0:	f7fd fd78 	bl	80072d4 <HAL_RCC_GetPCLK1Freq>
 80097e4:	61b8      	str	r0, [r7, #24]
        break;
 80097e6:	e024      	b.n	8009832 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097e8:	f7fd fd96 	bl	8007318 <HAL_RCC_GetPCLK2Freq>
 80097ec:	61b8      	str	r0, [r7, #24]
        break;
 80097ee:	e020      	b.n	8009832 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097f0:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <UART_SetConfig+0x290>)
 80097f2:	61bb      	str	r3, [r7, #24]
        break;
 80097f4:	e01d      	b.n	8009832 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097f6:	f7fd fcf7 	bl	80071e8 <HAL_RCC_GetSysClockFreq>
 80097fa:	61b8      	str	r0, [r7, #24]
        break;
 80097fc:	e019      	b.n	8009832 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009802:	61bb      	str	r3, [r7, #24]
        break;
 8009804:	e015      	b.n	8009832 <UART_SetConfig+0x29e>
 8009806:	bf00      	nop
 8009808:	efff69f3 	.word	0xefff69f3
 800980c:	40013800 	.word	0x40013800
 8009810:	40021000 	.word	0x40021000
 8009814:	40004400 	.word	0x40004400
 8009818:	40004800 	.word	0x40004800
 800981c:	40004c00 	.word	0x40004c00
 8009820:	40005000 	.word	0x40005000
 8009824:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8009828:	2300      	movs	r3, #0
 800982a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	77bb      	strb	r3, [r7, #30]
        break;
 8009830:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d075      	beq.n	8009924 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	005a      	lsls	r2, r3, #1
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	085b      	lsrs	r3, r3, #1
 8009842:	441a      	add	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	fbb2 f3f3 	udiv	r3, r2, r3
 800984c:	b29b      	uxth	r3, r3
 800984e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	2b0f      	cmp	r3, #15
 8009854:	d916      	bls.n	8009884 <UART_SetConfig+0x2f0>
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800985c:	d212      	bcs.n	8009884 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	b29b      	uxth	r3, r3
 8009862:	f023 030f 	bic.w	r3, r3, #15
 8009866:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	085b      	lsrs	r3, r3, #1
 800986c:	b29b      	uxth	r3, r3
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	b29a      	uxth	r2, r3
 8009874:	89fb      	ldrh	r3, [r7, #14]
 8009876:	4313      	orrs	r3, r2
 8009878:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	89fa      	ldrh	r2, [r7, #14]
 8009880:	60da      	str	r2, [r3, #12]
 8009882:	e04f      	b.n	8009924 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	77bb      	strb	r3, [r7, #30]
 8009888:	e04c      	b.n	8009924 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800988a:	7ffb      	ldrb	r3, [r7, #31]
 800988c:	2b08      	cmp	r3, #8
 800988e:	d828      	bhi.n	80098e2 <UART_SetConfig+0x34e>
 8009890:	a201      	add	r2, pc, #4	; (adr r2, 8009898 <UART_SetConfig+0x304>)
 8009892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009896:	bf00      	nop
 8009898:	080098bd 	.word	0x080098bd
 800989c:	080098c5 	.word	0x080098c5
 80098a0:	080098cd 	.word	0x080098cd
 80098a4:	080098e3 	.word	0x080098e3
 80098a8:	080098d3 	.word	0x080098d3
 80098ac:	080098e3 	.word	0x080098e3
 80098b0:	080098e3 	.word	0x080098e3
 80098b4:	080098e3 	.word	0x080098e3
 80098b8:	080098db 	.word	0x080098db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098bc:	f7fd fd0a 	bl	80072d4 <HAL_RCC_GetPCLK1Freq>
 80098c0:	61b8      	str	r0, [r7, #24]
        break;
 80098c2:	e013      	b.n	80098ec <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098c4:	f7fd fd28 	bl	8007318 <HAL_RCC_GetPCLK2Freq>
 80098c8:	61b8      	str	r0, [r7, #24]
        break;
 80098ca:	e00f      	b.n	80098ec <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098cc:	4b1b      	ldr	r3, [pc, #108]	; (800993c <UART_SetConfig+0x3a8>)
 80098ce:	61bb      	str	r3, [r7, #24]
        break;
 80098d0:	e00c      	b.n	80098ec <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098d2:	f7fd fc89 	bl	80071e8 <HAL_RCC_GetSysClockFreq>
 80098d6:	61b8      	str	r0, [r7, #24]
        break;
 80098d8:	e008      	b.n	80098ec <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098de:	61bb      	str	r3, [r7, #24]
        break;
 80098e0:	e004      	b.n	80098ec <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80098e2:	2300      	movs	r3, #0
 80098e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	77bb      	strb	r3, [r7, #30]
        break;
 80098ea:	bf00      	nop
    }

    if (pclk != 0U)
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d018      	beq.n	8009924 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	085a      	lsrs	r2, r3, #1
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	441a      	add	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	fbb2 f3f3 	udiv	r3, r2, r3
 8009904:	b29b      	uxth	r3, r3
 8009906:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	2b0f      	cmp	r3, #15
 800990c:	d908      	bls.n	8009920 <UART_SetConfig+0x38c>
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009914:	d204      	bcs.n	8009920 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	693a      	ldr	r2, [r7, #16]
 800991c:	60da      	str	r2, [r3, #12]
 800991e:	e001      	b.n	8009924 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009930:	7fbb      	ldrb	r3, [r7, #30]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3720      	adds	r7, #32
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	007a1200 	.word	0x007a1200

08009940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00a      	beq.n	800996a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	430a      	orrs	r2, r1
 8009968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	f003 0302 	and.w	r3, r3, #2
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00a      	beq.n	800998c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	430a      	orrs	r2, r1
 800998a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	f003 0304 	and.w	r3, r3, #4
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00a      	beq.n	80099ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	430a      	orrs	r2, r1
 80099ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b2:	f003 0308 	and.w	r3, r3, #8
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00a      	beq.n	80099d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	430a      	orrs	r2, r1
 80099ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	f003 0310 	and.w	r3, r3, #16
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00a      	beq.n	80099f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	430a      	orrs	r2, r1
 80099f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f6:	f003 0320 	and.w	r3, r3, #32
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00a      	beq.n	8009a14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	430a      	orrs	r2, r1
 8009a12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d01a      	beq.n	8009a56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	430a      	orrs	r2, r1
 8009a34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a3e:	d10a      	bne.n	8009a56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	430a      	orrs	r2, r1
 8009a54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00a      	beq.n	8009a78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	430a      	orrs	r2, r1
 8009a76:	605a      	str	r2, [r3, #4]
  }
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af02      	add	r7, sp, #8
 8009a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a94:	f7f9 ff5c 	bl	8003950 <HAL_GetTick>
 8009a98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 0308 	and.w	r3, r3, #8
 8009aa4:	2b08      	cmp	r3, #8
 8009aa6:	d10e      	bne.n	8009ac6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009aa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f82d 	bl	8009b16 <UART_WaitOnFlagUntilTimeout>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e023      	b.n	8009b0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 0304 	and.w	r3, r3, #4
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d10e      	bne.n	8009af2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ad8:	9300      	str	r3, [sp, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f817 	bl	8009b16 <UART_WaitOnFlagUntilTimeout>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e00d      	b.n	8009b0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2220      	movs	r2, #32
 8009af6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2220      	movs	r2, #32
 8009afc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b09c      	sub	sp, #112	; 0x70
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	60f8      	str	r0, [r7, #12]
 8009b1e:	60b9      	str	r1, [r7, #8]
 8009b20:	603b      	str	r3, [r7, #0]
 8009b22:	4613      	mov	r3, r2
 8009b24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b26:	e0a5      	b.n	8009c74 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2e:	f000 80a1 	beq.w	8009c74 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b32:	f7f9 ff0d 	bl	8003950 <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d302      	bcc.n	8009b48 <UART_WaitOnFlagUntilTimeout+0x32>
 8009b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d13e      	bne.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b50:	e853 3f00 	ldrex	r3, [r3]
 8009b54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b5c:	667b      	str	r3, [r7, #100]	; 0x64
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b6e:	e841 2300 	strex	r3, r2, [r1]
 8009b72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1e6      	bne.n	8009b48 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3308      	adds	r3, #8
 8009b80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	f023 0301 	bic.w	r3, r3, #1
 8009b90:	663b      	str	r3, [r7, #96]	; 0x60
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	3308      	adds	r3, #8
 8009b98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009b9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ba2:	e841 2300 	strex	r3, r2, [r1]
 8009ba6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1e5      	bne.n	8009b7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2220      	movs	r2, #32
 8009bb2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2220      	movs	r2, #32
 8009bb8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e067      	b.n	8009c96 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0304 	and.w	r3, r3, #4
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d04f      	beq.n	8009c74 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	69db      	ldr	r3, [r3, #28]
 8009bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009be2:	d147      	bne.n	8009c74 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009bec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf6:	e853 3f00 	ldrex	r3, [r3]
 8009bfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c14:	e841 2300 	strex	r3, r2, [r1]
 8009c18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1e6      	bne.n	8009bee <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3308      	adds	r3, #8
 8009c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	e853 3f00 	ldrex	r3, [r3]
 8009c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	f023 0301 	bic.w	r3, r3, #1
 8009c36:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3308      	adds	r3, #8
 8009c3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c40:	623a      	str	r2, [r7, #32]
 8009c42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c44:	69f9      	ldr	r1, [r7, #28]
 8009c46:	6a3a      	ldr	r2, [r7, #32]
 8009c48:	e841 2300 	strex	r3, r2, [r1]
 8009c4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1e5      	bne.n	8009c20 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2220      	movs	r2, #32
 8009c58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2220      	movs	r2, #32
 8009c5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2220      	movs	r2, #32
 8009c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009c70:	2303      	movs	r3, #3
 8009c72:	e010      	b.n	8009c96 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	69da      	ldr	r2, [r3, #28]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	bf0c      	ite	eq
 8009c84:	2301      	moveq	r3, #1
 8009c86:	2300      	movne	r3, #0
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	79fb      	ldrb	r3, [r7, #7]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	f43f af4a 	beq.w	8009b28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3770      	adds	r7, #112	; 0x70
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
	...

08009ca0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b091      	sub	sp, #68	; 0x44
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	4613      	mov	r3, r2
 8009cac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	68ba      	ldr	r2, [r7, #8]
 8009cb2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	88fa      	ldrh	r2, [r7, #6]
 8009cb8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	88fa      	ldrh	r2, [r7, #6]
 8009cc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cd2:	d10e      	bne.n	8009cf2 <UART_Start_Receive_IT+0x52>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d105      	bne.n	8009ce8 <UART_Start_Receive_IT+0x48>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009ce2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ce6:	e02d      	b.n	8009d44 <UART_Start_Receive_IT+0xa4>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	22ff      	movs	r2, #255	; 0xff
 8009cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009cf0:	e028      	b.n	8009d44 <UART_Start_Receive_IT+0xa4>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10d      	bne.n	8009d16 <UART_Start_Receive_IT+0x76>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d104      	bne.n	8009d0c <UART_Start_Receive_IT+0x6c>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	22ff      	movs	r2, #255	; 0xff
 8009d06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d0a:	e01b      	b.n	8009d44 <UART_Start_Receive_IT+0xa4>
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	227f      	movs	r2, #127	; 0x7f
 8009d10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d14:	e016      	b.n	8009d44 <UART_Start_Receive_IT+0xa4>
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d1e:	d10d      	bne.n	8009d3c <UART_Start_Receive_IT+0x9c>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d104      	bne.n	8009d32 <UART_Start_Receive_IT+0x92>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	227f      	movs	r2, #127	; 0x7f
 8009d2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d30:	e008      	b.n	8009d44 <UART_Start_Receive_IT+0xa4>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	223f      	movs	r2, #63	; 0x3f
 8009d36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d3a:	e003      	b.n	8009d44 <UART_Start_Receive_IT+0xa4>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2222      	movs	r2, #34	; 0x22
 8009d50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	3308      	adds	r3, #8
 8009d58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5c:	e853 3f00 	ldrex	r3, [r3]
 8009d60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	f043 0301 	orr.w	r3, r3, #1
 8009d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	3308      	adds	r3, #8
 8009d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d72:	637a      	str	r2, [r7, #52]	; 0x34
 8009d74:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e5      	bne.n	8009d52 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d8e:	d107      	bne.n	8009da0 <UART_Start_Receive_IT+0x100>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d103      	bne.n	8009da0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4a15      	ldr	r2, [pc, #84]	; (8009df0 <UART_Start_Receive_IT+0x150>)
 8009d9c:	665a      	str	r2, [r3, #100]	; 0x64
 8009d9e:	e002      	b.n	8009da6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4a14      	ldr	r2, [pc, #80]	; (8009df4 <UART_Start_Receive_IT+0x154>)
 8009da4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	e853 3f00 	ldrex	r3, [r3]
 8009dba:	613b      	str	r3, [r7, #16]
   return(result);
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dcc:	623b      	str	r3, [r7, #32]
 8009dce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd0:	69f9      	ldr	r1, [r7, #28]
 8009dd2:	6a3a      	ldr	r2, [r7, #32]
 8009dd4:	e841 2300 	strex	r3, r2, [r1]
 8009dd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1e6      	bne.n	8009dae <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3744      	adds	r7, #68	; 0x44
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	0800a09b 	.word	0x0800a09b
 8009df4:	08009f3f 	.word	0x08009f3f

08009df8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b095      	sub	sp, #84	; 0x54
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e08:	e853 3f00 	ldrex	r3, [r3]
 8009e0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e1e:	643b      	str	r3, [r7, #64]	; 0x40
 8009e20:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e26:	e841 2300 	strex	r3, r2, [r1]
 8009e2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1e6      	bne.n	8009e00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3308      	adds	r3, #8
 8009e38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	e853 3f00 	ldrex	r3, [r3]
 8009e40:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	f023 0301 	bic.w	r3, r3, #1
 8009e48:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3308      	adds	r3, #8
 8009e50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e5a:	e841 2300 	strex	r3, r2, [r1]
 8009e5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1e5      	bne.n	8009e32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d118      	bne.n	8009ea0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	e853 3f00 	ldrex	r3, [r3]
 8009e7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	f023 0310 	bic.w	r3, r3, #16
 8009e82:	647b      	str	r3, [r7, #68]	; 0x44
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e8c:	61bb      	str	r3, [r7, #24]
 8009e8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e90:	6979      	ldr	r1, [r7, #20]
 8009e92:	69ba      	ldr	r2, [r7, #24]
 8009e94:	e841 2300 	strex	r3, r2, [r1]
 8009e98:	613b      	str	r3, [r7, #16]
   return(result);
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1e6      	bne.n	8009e6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009eb2:	bf00      	nop
 8009eb4:	3754      	adds	r7, #84	; 0x54
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f7ff fb43 	bl	8009568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ee2:	bf00      	nop
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b088      	sub	sp, #32
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	e853 3f00 	ldrex	r3, [r3]
 8009efe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f06:	61fb      	str	r3, [r7, #28]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	61bb      	str	r3, [r7, #24]
 8009f12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f14:	6979      	ldr	r1, [r7, #20]
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	e841 2300 	strex	r3, r2, [r1]
 8009f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1e6      	bne.n	8009ef2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2220      	movs	r2, #32
 8009f28:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f7ff fb0f 	bl	8009554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f36:	bf00      	nop
 8009f38:	3720      	adds	r7, #32
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b096      	sub	sp, #88	; 0x58
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f4c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f54:	2b22      	cmp	r3, #34	; 0x22
 8009f56:	f040 8094 	bne.w	800a082 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009f60:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f64:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009f68:	b2d9      	uxtb	r1, r3
 8009f6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009f6e:	b2da      	uxtb	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f74:	400a      	ands	r2, r1
 8009f76:	b2d2      	uxtb	r2, r2
 8009f78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f7e:	1c5a      	adds	r2, r3, #1
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d177      	bne.n	800a092 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009faa:	e853 3f00 	ldrex	r3, [r3]
 8009fae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fb6:	653b      	str	r3, [r7, #80]	; 0x50
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8009fc2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fc8:	e841 2300 	strex	r3, r2, [r1]
 8009fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1e6      	bne.n	8009fa2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3308      	adds	r3, #8
 8009fda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	e853 3f00 	ldrex	r3, [r3]
 8009fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8009fe4:	6a3b      	ldr	r3, [r7, #32]
 8009fe6:	f023 0301 	bic.w	r3, r3, #1
 8009fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3308      	adds	r3, #8
 8009ff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ff4:	633a      	str	r2, [r7, #48]	; 0x30
 8009ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ffc:	e841 2300 	strex	r3, r2, [r1]
 800a000:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1e5      	bne.n	8009fd4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2220      	movs	r2, #32
 800a00c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d12e      	bne.n	800a07a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	e853 3f00 	ldrex	r3, [r3]
 800a02e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f023 0310 	bic.w	r3, r3, #16
 800a036:	64bb      	str	r3, [r7, #72]	; 0x48
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	461a      	mov	r2, r3
 800a03e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a040:	61fb      	str	r3, [r7, #28]
 800a042:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a044:	69b9      	ldr	r1, [r7, #24]
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	e841 2300 	strex	r3, r2, [r1]
 800a04c:	617b      	str	r3, [r7, #20]
   return(result);
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1e6      	bne.n	800a022 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	69db      	ldr	r3, [r3, #28]
 800a05a:	f003 0310 	and.w	r3, r3, #16
 800a05e:	2b10      	cmp	r3, #16
 800a060:	d103      	bne.n	800a06a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2210      	movs	r2, #16
 800a068:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7ff fa82 	bl	800957c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a078:	e00b      	b.n	800a092 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7f7 fa8a 	bl	8001594 <HAL_UART_RxCpltCallback>
}
 800a080:	e007      	b.n	800a092 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	699a      	ldr	r2, [r3, #24]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f042 0208 	orr.w	r2, r2, #8
 800a090:	619a      	str	r2, [r3, #24]
}
 800a092:	bf00      	nop
 800a094:	3758      	adds	r7, #88	; 0x58
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b096      	sub	sp, #88	; 0x58
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a0a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0b0:	2b22      	cmp	r3, #34	; 0x22
 800a0b2:	f040 8094 	bne.w	800a1de <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a0bc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a0c6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a0ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0da:	1c9a      	adds	r2, r3, #2
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d177      	bne.n	800a1ee <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a106:	e853 3f00 	ldrex	r3, [r3]
 800a10a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a112:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	461a      	mov	r2, r3
 800a11a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a11c:	643b      	str	r3, [r7, #64]	; 0x40
 800a11e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a120:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a122:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a124:	e841 2300 	strex	r3, r2, [r1]
 800a128:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1e6      	bne.n	800a0fe <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3308      	adds	r3, #8
 800a136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a138:	6a3b      	ldr	r3, [r7, #32]
 800a13a:	e853 3f00 	ldrex	r3, [r3]
 800a13e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	f023 0301 	bic.w	r3, r3, #1
 800a146:	64bb      	str	r3, [r7, #72]	; 0x48
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3308      	adds	r3, #8
 800a14e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a150:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a158:	e841 2300 	strex	r3, r2, [r1]
 800a15c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1e5      	bne.n	800a130 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2220      	movs	r2, #32
 800a168:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a174:	2b01      	cmp	r3, #1
 800a176:	d12e      	bne.n	800a1d6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	e853 3f00 	ldrex	r3, [r3]
 800a18a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	f023 0310 	bic.w	r3, r3, #16
 800a192:	647b      	str	r3, [r7, #68]	; 0x44
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	461a      	mov	r2, r3
 800a19a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a19c:	61bb      	str	r3, [r7, #24]
 800a19e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a0:	6979      	ldr	r1, [r7, #20]
 800a1a2:	69ba      	ldr	r2, [r7, #24]
 800a1a4:	e841 2300 	strex	r3, r2, [r1]
 800a1a8:	613b      	str	r3, [r7, #16]
   return(result);
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1e6      	bne.n	800a17e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	f003 0310 	and.w	r3, r3, #16
 800a1ba:	2b10      	cmp	r3, #16
 800a1bc:	d103      	bne.n	800a1c6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2210      	movs	r2, #16
 800a1c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7ff f9d4 	bl	800957c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a1d4:	e00b      	b.n	800a1ee <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7f7 f9dc 	bl	8001594 <HAL_UART_RxCpltCallback>
}
 800a1dc:	e007      	b.n	800a1ee <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	699a      	ldr	r2, [r3, #24]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f042 0208 	orr.w	r2, r2, #8
 800a1ec:	619a      	str	r2, [r3, #24]
}
 800a1ee:	bf00      	nop
 800a1f0:	3758      	adds	r7, #88	; 0x58
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b083      	sub	sp, #12
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a1fe:	bf00      	nop
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
	...

0800a20c <__libc_init_array>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	4d0d      	ldr	r5, [pc, #52]	; (800a244 <__libc_init_array+0x38>)
 800a210:	4c0d      	ldr	r4, [pc, #52]	; (800a248 <__libc_init_array+0x3c>)
 800a212:	1b64      	subs	r4, r4, r5
 800a214:	10a4      	asrs	r4, r4, #2
 800a216:	2600      	movs	r6, #0
 800a218:	42a6      	cmp	r6, r4
 800a21a:	d109      	bne.n	800a230 <__libc_init_array+0x24>
 800a21c:	4d0b      	ldr	r5, [pc, #44]	; (800a24c <__libc_init_array+0x40>)
 800a21e:	4c0c      	ldr	r4, [pc, #48]	; (800a250 <__libc_init_array+0x44>)
 800a220:	f000 f834 	bl	800a28c <_init>
 800a224:	1b64      	subs	r4, r4, r5
 800a226:	10a4      	asrs	r4, r4, #2
 800a228:	2600      	movs	r6, #0
 800a22a:	42a6      	cmp	r6, r4
 800a22c:	d105      	bne.n	800a23a <__libc_init_array+0x2e>
 800a22e:	bd70      	pop	{r4, r5, r6, pc}
 800a230:	f855 3b04 	ldr.w	r3, [r5], #4
 800a234:	4798      	blx	r3
 800a236:	3601      	adds	r6, #1
 800a238:	e7ee      	b.n	800a218 <__libc_init_array+0xc>
 800a23a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a23e:	4798      	blx	r3
 800a240:	3601      	adds	r6, #1
 800a242:	e7f2      	b.n	800a22a <__libc_init_array+0x1e>
 800a244:	0800a444 	.word	0x0800a444
 800a248:	0800a444 	.word	0x0800a444
 800a24c:	0800a444 	.word	0x0800a444
 800a250:	0800a448 	.word	0x0800a448

0800a254 <memset>:
 800a254:	4402      	add	r2, r0
 800a256:	4603      	mov	r3, r0
 800a258:	4293      	cmp	r3, r2
 800a25a:	d100      	bne.n	800a25e <memset+0xa>
 800a25c:	4770      	bx	lr
 800a25e:	f803 1b01 	strb.w	r1, [r3], #1
 800a262:	e7f9      	b.n	800a258 <memset+0x4>

0800a264 <strncpy>:
 800a264:	b510      	push	{r4, lr}
 800a266:	3901      	subs	r1, #1
 800a268:	4603      	mov	r3, r0
 800a26a:	b132      	cbz	r2, 800a27a <strncpy+0x16>
 800a26c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a270:	f803 4b01 	strb.w	r4, [r3], #1
 800a274:	3a01      	subs	r2, #1
 800a276:	2c00      	cmp	r4, #0
 800a278:	d1f7      	bne.n	800a26a <strncpy+0x6>
 800a27a:	441a      	add	r2, r3
 800a27c:	2100      	movs	r1, #0
 800a27e:	4293      	cmp	r3, r2
 800a280:	d100      	bne.n	800a284 <strncpy+0x20>
 800a282:	bd10      	pop	{r4, pc}
 800a284:	f803 1b01 	strb.w	r1, [r3], #1
 800a288:	e7f9      	b.n	800a27e <strncpy+0x1a>
	...

0800a28c <_init>:
 800a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28e:	bf00      	nop
 800a290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a292:	bc08      	pop	{r3}
 800a294:	469e      	mov	lr, r3
 800a296:	4770      	bx	lr

0800a298 <_fini>:
 800a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29a:	bf00      	nop
 800a29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a29e:	bc08      	pop	{r3}
 800a2a0:	469e      	mov	lr, r3
 800a2a2:	4770      	bx	lr
