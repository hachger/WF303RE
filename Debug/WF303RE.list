
WF303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08008d84  08008d84  00018d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dd4  08008dd4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08008dd4  08008dd4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008dd4  08008dd4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dd4  08008dd4  00018dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dd8  08008dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000018b0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200018bc  200018bc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b9a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000253c  00000000  00000000  00033bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  00036118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ef8  00000000  00000000  000370e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020904  00000000  00000000  00037fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000147f6  00000000  00000000  000588e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d262a  00000000  00000000  0006d0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f704  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004330  00000000  00000000  0013f754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008d6c 	.word	0x08008d6c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08008d6c 	.word	0x08008d6c

080001d4 <HAL_ADC_ConvCpltCallback>:
void Do100ms();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80001d4:	b5b0      	push	{r4, r5, r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80001e4:	f040 8099 	bne.w	800031a <HAL_ADC_ConvCpltCallback+0x146>
		ADCData[indexADCData][7] = ADC3DataAux;
 80001e8:	4b54      	ldr	r3, [pc, #336]	; (800033c <HAL_ADC_ConvCpltCallback+0x168>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	4618      	mov	r0, r3
 80001ee:	4b54      	ldr	r3, [pc, #336]	; (8000340 <HAL_ADC_ConvCpltCallback+0x16c>)
 80001f0:	8819      	ldrh	r1, [r3, #0]
 80001f2:	4a54      	ldr	r2, [pc, #336]	; (8000344 <HAL_ADC_ConvCpltCallback+0x170>)
 80001f4:	0103      	lsls	r3, r0, #4
 80001f6:	4413      	add	r3, r2
 80001f8:	330e      	adds	r3, #14
 80001fa:	460a      	mov	r2, r1
 80001fc:	801a      	strh	r2, [r3, #0]
		sumADCData10ms[0] += ADCData[indexADCData][0];
 80001fe:	4b52      	ldr	r3, [pc, #328]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a4e      	ldr	r2, [pc, #312]	; (800033c <HAL_ADC_ConvCpltCallback+0x168>)
 8000204:	7812      	ldrb	r2, [r2, #0]
 8000206:	494f      	ldr	r1, [pc, #316]	; (8000344 <HAL_ADC_ConvCpltCallback+0x170>)
 8000208:	0112      	lsls	r2, r2, #4
 800020a:	440a      	add	r2, r1
 800020c:	8812      	ldrh	r2, [r2, #0]
 800020e:	4413      	add	r3, r2
 8000210:	4a4d      	ldr	r2, [pc, #308]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 8000212:	6013      	str	r3, [r2, #0]
		sumADCData10ms[1] += ADCData[indexADCData][1];
 8000214:	4b4c      	ldr	r3, [pc, #304]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	4a48      	ldr	r2, [pc, #288]	; (800033c <HAL_ADC_ConvCpltCallback+0x168>)
 800021a:	7812      	ldrb	r2, [r2, #0]
 800021c:	4949      	ldr	r1, [pc, #292]	; (8000344 <HAL_ADC_ConvCpltCallback+0x170>)
 800021e:	0112      	lsls	r2, r2, #4
 8000220:	440a      	add	r2, r1
 8000222:	3202      	adds	r2, #2
 8000224:	8812      	ldrh	r2, [r2, #0]
 8000226:	4413      	add	r3, r2
 8000228:	4a47      	ldr	r2, [pc, #284]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 800022a:	6053      	str	r3, [r2, #4]
		sumADCData10ms[2] += ADCData[indexADCData][2];
 800022c:	4b46      	ldr	r3, [pc, #280]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	4a42      	ldr	r2, [pc, #264]	; (800033c <HAL_ADC_ConvCpltCallback+0x168>)
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	4943      	ldr	r1, [pc, #268]	; (8000344 <HAL_ADC_ConvCpltCallback+0x170>)
 8000236:	0112      	lsls	r2, r2, #4
 8000238:	440a      	add	r2, r1
 800023a:	3204      	adds	r2, #4
 800023c:	8812      	ldrh	r2, [r2, #0]
 800023e:	4413      	add	r3, r2
 8000240:	4a41      	ldr	r2, [pc, #260]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 8000242:	6093      	str	r3, [r2, #8]
		sumADCData10ms[3] += ADCData[indexADCData][3];
 8000244:	4b40      	ldr	r3, [pc, #256]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	4a3c      	ldr	r2, [pc, #240]	; (800033c <HAL_ADC_ConvCpltCallback+0x168>)
 800024a:	7812      	ldrb	r2, [r2, #0]
 800024c:	493d      	ldr	r1, [pc, #244]	; (8000344 <HAL_ADC_ConvCpltCallback+0x170>)
 800024e:	0112      	lsls	r2, r2, #4
 8000250:	440a      	add	r2, r1
 8000252:	3206      	adds	r2, #6
 8000254:	8812      	ldrh	r2, [r2, #0]
 8000256:	4413      	add	r3, r2
 8000258:	4a3b      	ldr	r2, [pc, #236]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 800025a:	60d3      	str	r3, [r2, #12]
		sumADCData10ms[4] += ADCData[indexADCData][4];
 800025c:	4b3a      	ldr	r3, [pc, #232]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 800025e:	691b      	ldr	r3, [r3, #16]
 8000260:	4a36      	ldr	r2, [pc, #216]	; (800033c <HAL_ADC_ConvCpltCallback+0x168>)
 8000262:	7812      	ldrb	r2, [r2, #0]
 8000264:	4937      	ldr	r1, [pc, #220]	; (8000344 <HAL_ADC_ConvCpltCallback+0x170>)
 8000266:	0112      	lsls	r2, r2, #4
 8000268:	440a      	add	r2, r1
 800026a:	3208      	adds	r2, #8
 800026c:	8812      	ldrh	r2, [r2, #0]
 800026e:	4413      	add	r3, r2
 8000270:	4a35      	ldr	r2, [pc, #212]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 8000272:	6113      	str	r3, [r2, #16]
		sumADCData10ms[5] += ADCData[indexADCData][5];
 8000274:	4b34      	ldr	r3, [pc, #208]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a30      	ldr	r2, [pc, #192]	; (800033c <HAL_ADC_ConvCpltCallback+0x168>)
 800027a:	7812      	ldrb	r2, [r2, #0]
 800027c:	4931      	ldr	r1, [pc, #196]	; (8000344 <HAL_ADC_ConvCpltCallback+0x170>)
 800027e:	0112      	lsls	r2, r2, #4
 8000280:	440a      	add	r2, r1
 8000282:	320a      	adds	r2, #10
 8000284:	8812      	ldrh	r2, [r2, #0]
 8000286:	4413      	add	r3, r2
 8000288:	4a2f      	ldr	r2, [pc, #188]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 800028a:	6153      	str	r3, [r2, #20]
		sumADCData10ms[6] += ADCData[indexADCData][6];
 800028c:	4b2e      	ldr	r3, [pc, #184]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a2a      	ldr	r2, [pc, #168]	; (800033c <HAL_ADC_ConvCpltCallback+0x168>)
 8000292:	7812      	ldrb	r2, [r2, #0]
 8000294:	492b      	ldr	r1, [pc, #172]	; (8000344 <HAL_ADC_ConvCpltCallback+0x170>)
 8000296:	0112      	lsls	r2, r2, #4
 8000298:	440a      	add	r2, r1
 800029a:	320c      	adds	r2, #12
 800029c:	8812      	ldrh	r2, [r2, #0]
 800029e:	4413      	add	r3, r2
 80002a0:	4a29      	ldr	r2, [pc, #164]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 80002a2:	6193      	str	r3, [r2, #24]
		sumADCData10ms[7] += ADCData[indexADCData][7];
 80002a4:	4b28      	ldr	r3, [pc, #160]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 80002a6:	69db      	ldr	r3, [r3, #28]
 80002a8:	4a24      	ldr	r2, [pc, #144]	; (800033c <HAL_ADC_ConvCpltCallback+0x168>)
 80002aa:	7812      	ldrb	r2, [r2, #0]
 80002ac:	4925      	ldr	r1, [pc, #148]	; (8000344 <HAL_ADC_ConvCpltCallback+0x170>)
 80002ae:	0112      	lsls	r2, r2, #4
 80002b0:	440a      	add	r2, r1
 80002b2:	320e      	adds	r2, #14
 80002b4:	8812      	ldrh	r2, [r2, #0]
 80002b6:	4413      	add	r3, r2
 80002b8:	4a23      	ldr	r2, [pc, #140]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 80002ba:	61d3      	str	r3, [r2, #28]
		indexADCData++;
 80002bc:	4b1f      	ldr	r3, [pc, #124]	; (800033c <HAL_ADC_ConvCpltCallback+0x168>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	3301      	adds	r3, #1
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	4b1d      	ldr	r3, [pc, #116]	; (800033c <HAL_ADC_ConvCpltCallback+0x168>)
 80002c6:	701a      	strb	r2, [r3, #0]
		indexADCData &= (ADCDATASIZE-1);
 80002c8:	4b1c      	ldr	r3, [pc, #112]	; (800033c <HAL_ADC_ConvCpltCallback+0x168>)
 80002ca:	781a      	ldrb	r2, [r3, #0]
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <HAL_ADC_ConvCpltCallback+0x168>)
 80002ce:	701a      	strb	r2, [r3, #0]
		if(timeOutAnalogAux){
 80002d0:	4b1e      	ldr	r3, [pc, #120]	; (800034c <HAL_ADC_ConvCpltCallback+0x178>)
 80002d2:	881b      	ldrh	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d020      	beq.n	800031a <HAL_ADC_ConvCpltCallback+0x146>
			timeOutAnalogAux--;
 80002d8:	4b1c      	ldr	r3, [pc, #112]	; (800034c <HAL_ADC_ConvCpltCallback+0x178>)
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	3b01      	subs	r3, #1
 80002de:	b29a      	uxth	r2, r3
 80002e0:	4b1a      	ldr	r3, [pc, #104]	; (800034c <HAL_ADC_ConvCpltCallback+0x178>)
 80002e2:	801a      	strh	r2, [r3, #0]
			if(!timeOutAnalogAux){
 80002e4:	4b19      	ldr	r3, [pc, #100]	; (800034c <HAL_ADC_ConvCpltCallback+0x178>)
 80002e6:	881b      	ldrh	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d116      	bne.n	800031a <HAL_ADC_ConvCpltCallback+0x146>
				timeOutAnalogAux = timeOutAnalog;
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <HAL_ADC_ConvCpltCallback+0x17c>)
 80002ee:	881a      	ldrh	r2, [r3, #0]
 80002f0:	4b16      	ldr	r3, [pc, #88]	; (800034c <HAL_ADC_ConvCpltCallback+0x178>)
 80002f2:	801a      	strh	r2, [r3, #0]
				iADCDataReady = indexADCData;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <HAL_ADC_ConvCpltCallback+0x168>)
 80002f6:	781a      	ldrb	r2, [r3, #0]
 80002f8:	4b16      	ldr	r3, [pc, #88]	; (8000354 <HAL_ADC_ConvCpltCallback+0x180>)
 80002fa:	701a      	strb	r2, [r3, #0]
				memcpy(sumADCDataLock, sumADCData10ms, sizeof(sumADCDataLock));
 80002fc:	4a16      	ldr	r2, [pc, #88]	; (8000358 <HAL_ADC_ConvCpltCallback+0x184>)
 80002fe:	4b12      	ldr	r3, [pc, #72]	; (8000348 <HAL_ADC_ConvCpltCallback+0x174>)
 8000300:	4614      	mov	r4, r2
 8000302:	461d      	mov	r5, r3
 8000304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000308:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800030c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				ANALOGREADY = 1;
 8000310:	4a12      	ldr	r2, [pc, #72]	; (800035c <HAL_ADC_ConvCpltCallback+0x188>)
 8000312:	7813      	ldrb	r3, [r2, #0]
 8000314:	f043 0302 	orr.w	r3, r3, #2
 8000318:	7013      	strb	r3, [r2, #0]
			}
		}
	}
	if(hadc->Instance == ADC3){
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a10      	ldr	r2, [pc, #64]	; (8000360 <HAL_ADC_ConvCpltCallback+0x18c>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <HAL_ADC_ConvCpltCallback+0x15e>
		ADC3DataAux = HAL_ADC_GetValue(&hadc3);
 8000324:	480f      	ldr	r0, [pc, #60]	; (8000364 <HAL_ADC_ConvCpltCallback+0x190>)
 8000326:	f002 fd11 	bl	8002d4c <HAL_ADC_GetValue>
 800032a:	4603      	mov	r3, r0
 800032c:	b29a      	uxth	r2, r3
 800032e:	4b04      	ldr	r3, [pc, #16]	; (8000340 <HAL_ADC_ConvCpltCallback+0x16c>)
 8000330:	801a      	strh	r2, [r3, #0]
	}
}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bdb0      	pop	{r4, r5, r7, pc}
 800033a:	bf00      	nop
 800033c:	20001850 	.word	0x20001850
 8000340:	20001854 	.word	0x20001854
 8000344:	20000850 	.word	0x20000850
 8000348:	20001858 	.word	0x20001858
 800034c:	2000189a 	.word	0x2000189a
 8000350:	20001898 	.word	0x20001898
 8000354:	20001852 	.word	0x20001852
 8000358:	20001878 	.word	0x20001878
 800035c:	200002fc 	.word	0x200002fc
 8000360:	50000400 	.word	0x50000400
 8000364:	200000c8 	.word	0x200000c8

08000368 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
//			memcpy(sumADCDataLock, sumADCData10ms, sizeof(sumADCDataLock));
//			ANALOGREADY = 1;
//		}
//	}

	sumADCData10ms[0] -= ADCData[indexADCData10ms][0];
 8000370:	4b3e      	ldr	r3, [pc, #248]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a3e      	ldr	r2, [pc, #248]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000376:	7812      	ldrb	r2, [r2, #0]
 8000378:	493e      	ldr	r1, [pc, #248]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800037a:	0112      	lsls	r2, r2, #4
 800037c:	440a      	add	r2, r1
 800037e:	8812      	ldrh	r2, [r2, #0]
 8000380:	1a9b      	subs	r3, r3, r2
 8000382:	4a3a      	ldr	r2, [pc, #232]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000384:	6013      	str	r3, [r2, #0]
	sumADCData10ms[1] -= ADCData[indexADCData10ms][1];
 8000386:	4b39      	ldr	r3, [pc, #228]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	4a39      	ldr	r2, [pc, #228]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800038c:	7812      	ldrb	r2, [r2, #0]
 800038e:	4939      	ldr	r1, [pc, #228]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000390:	0112      	lsls	r2, r2, #4
 8000392:	440a      	add	r2, r1
 8000394:	3202      	adds	r2, #2
 8000396:	8812      	ldrh	r2, [r2, #0]
 8000398:	1a9b      	subs	r3, r3, r2
 800039a:	4a34      	ldr	r2, [pc, #208]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 800039c:	6053      	str	r3, [r2, #4]
	sumADCData10ms[2] -= ADCData[indexADCData10ms][2];
 800039e:	4b33      	ldr	r3, [pc, #204]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	4a33      	ldr	r2, [pc, #204]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80003a4:	7812      	ldrb	r2, [r2, #0]
 80003a6:	4933      	ldr	r1, [pc, #204]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80003a8:	0112      	lsls	r2, r2, #4
 80003aa:	440a      	add	r2, r1
 80003ac:	3204      	adds	r2, #4
 80003ae:	8812      	ldrh	r2, [r2, #0]
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	4a2e      	ldr	r2, [pc, #184]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80003b4:	6093      	str	r3, [r2, #8]
	sumADCData10ms[3] -= ADCData[indexADCData10ms][3];
 80003b6:	4b2d      	ldr	r3, [pc, #180]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80003b8:	68db      	ldr	r3, [r3, #12]
 80003ba:	4a2d      	ldr	r2, [pc, #180]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80003bc:	7812      	ldrb	r2, [r2, #0]
 80003be:	492d      	ldr	r1, [pc, #180]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80003c0:	0112      	lsls	r2, r2, #4
 80003c2:	440a      	add	r2, r1
 80003c4:	3206      	adds	r2, #6
 80003c6:	8812      	ldrh	r2, [r2, #0]
 80003c8:	1a9b      	subs	r3, r3, r2
 80003ca:	4a28      	ldr	r2, [pc, #160]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80003cc:	60d3      	str	r3, [r2, #12]
	sumADCData10ms[4] -= ADCData[indexADCData10ms][4];
 80003ce:	4b27      	ldr	r3, [pc, #156]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80003d0:	691b      	ldr	r3, [r3, #16]
 80003d2:	4a27      	ldr	r2, [pc, #156]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80003d4:	7812      	ldrb	r2, [r2, #0]
 80003d6:	4927      	ldr	r1, [pc, #156]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80003d8:	0112      	lsls	r2, r2, #4
 80003da:	440a      	add	r2, r1
 80003dc:	3208      	adds	r2, #8
 80003de:	8812      	ldrh	r2, [r2, #0]
 80003e0:	1a9b      	subs	r3, r3, r2
 80003e2:	4a22      	ldr	r2, [pc, #136]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80003e4:	6113      	str	r3, [r2, #16]
	sumADCData10ms[5] -= ADCData[indexADCData10ms][5];
 80003e6:	4b21      	ldr	r3, [pc, #132]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a21      	ldr	r2, [pc, #132]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80003ec:	7812      	ldrb	r2, [r2, #0]
 80003ee:	4921      	ldr	r1, [pc, #132]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80003f0:	0112      	lsls	r2, r2, #4
 80003f2:	440a      	add	r2, r1
 80003f4:	320a      	adds	r2, #10
 80003f6:	8812      	ldrh	r2, [r2, #0]
 80003f8:	1a9b      	subs	r3, r3, r2
 80003fa:	4a1c      	ldr	r2, [pc, #112]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80003fc:	6153      	str	r3, [r2, #20]
	sumADCData10ms[6] -= ADCData[indexADCData10ms][6];
 80003fe:	4b1b      	ldr	r3, [pc, #108]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a1b      	ldr	r2, [pc, #108]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000404:	7812      	ldrb	r2, [r2, #0]
 8000406:	491b      	ldr	r1, [pc, #108]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000408:	0112      	lsls	r2, r2, #4
 800040a:	440a      	add	r2, r1
 800040c:	320c      	adds	r2, #12
 800040e:	8812      	ldrh	r2, [r2, #0]
 8000410:	1a9b      	subs	r3, r3, r2
 8000412:	4a16      	ldr	r2, [pc, #88]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000414:	6193      	str	r3, [r2, #24]
	sumADCData10ms[7] -= ADCData[indexADCData10ms][7];
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a15      	ldr	r2, [pc, #84]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800041c:	7812      	ldrb	r2, [r2, #0]
 800041e:	4915      	ldr	r1, [pc, #84]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000420:	0112      	lsls	r2, r2, #4
 8000422:	440a      	add	r2, r1
 8000424:	320e      	adds	r2, #14
 8000426:	8812      	ldrh	r2, [r2, #0]
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	4a10      	ldr	r2, [pc, #64]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x104>)
 800042c:	61d3      	str	r3, [r2, #28]
	indexADCData10ms++;
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	3301      	adds	r3, #1
 8000434:	b2da      	uxtb	r2, r3
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000438:	701a      	strb	r2, [r3, #0]
	indexADCData10ms &= (ADCDATASIZE - 1);
 800043a:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800043c:	781a      	ldrb	r2, [r3, #0]
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000440:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc3);
 8000442:	480d      	ldr	r0, [pc, #52]	; (8000478 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000444:	f002 fb42 	bl	8002acc <HAL_ADC_Start_IT>
	HAL_ADC_Start(&hadc2);
 8000448:	480c      	ldr	r0, [pc, #48]	; (800047c <HAL_TIM_PeriodElapsedCallback+0x114>)
 800044a:	f002 fa29 	bl	80028a0 <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *)&ADCData[indexADCData], 4);
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	011b      	lsls	r3, r3, #4
 8000454:	4a07      	ldr	r2, [pc, #28]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000456:	4413      	add	r3, r2
 8000458:	2204      	movs	r2, #4
 800045a:	4619      	mov	r1, r3
 800045c:	4809      	ldr	r0, [pc, #36]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800045e:	f002 ff93 	bl	8003388 <HAL_ADCEx_MultiModeStart_DMA>
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20001858 	.word	0x20001858
 8000470:	20001851 	.word	0x20001851
 8000474:	20000850 	.word	0x20000850
 8000478:	200000c8 	.word	0x200000c8
 800047c:	20000078 	.word	0x20000078
 8000480:	20001850 	.word	0x20001850
 8000484:	20000028 	.word	0x20000028

08000488 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a43      	ldr	r2, [pc, #268]	; (80005a4 <HAL_UART_RxCpltCallback+0x11c>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d152      	bne.n	8000540 <HAL_UART_RxCpltCallback+0xb8>
		if(ESP01DEBUG){
 800049a:	4b43      	ldr	r3, [pc, #268]	; (80005a8 <HAL_UART_RxCpltCallback+0x120>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	f003 0304 	and.w	r3, r3, #4
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d033      	beq.n	8000510 <HAL_UART_RxCpltCallback+0x88>
			if(RX.buf[RX.iw] == '+'){
 80004a8:	4b40      	ldr	r3, [pc, #256]	; (80005ac <HAL_UART_RxCpltCallback+0x124>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a3f      	ldr	r2, [pc, #252]	; (80005ac <HAL_UART_RxCpltCallback+0x124>)
 80004ae:	88d2      	ldrh	r2, [r2, #6]
 80004b0:	4413      	add	r3, r2
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b2b      	cmp	r3, #43	; 0x2b
 80004b6:	d11e      	bne.n	80004f6 <HAL_UART_RxCpltCallback+0x6e>
				if(countPlus == 0)
 80004b8:	4b3d      	ldr	r3, [pc, #244]	; (80005b0 <HAL_UART_RxCpltCallback+0x128>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d102      	bne.n	80004c6 <HAL_UART_RxCpltCallback+0x3e>
					timeOutPlus = 3;
 80004c0:	4b3c      	ldr	r3, [pc, #240]	; (80005b4 <HAL_UART_RxCpltCallback+0x12c>)
 80004c2:	2203      	movs	r2, #3
 80004c4:	701a      	strb	r2, [r3, #0]
				countPlus++;
 80004c6:	4b3a      	ldr	r3, [pc, #232]	; (80005b0 <HAL_UART_RxCpltCallback+0x128>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	3301      	adds	r3, #1
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4b38      	ldr	r3, [pc, #224]	; (80005b0 <HAL_UART_RxCpltCallback+0x128>)
 80004d0:	701a      	strb	r2, [r3, #0]
				if(countPlus==3 && timeOutPlus!=0){
 80004d2:	4b37      	ldr	r3, [pc, #220]	; (80005b0 <HAL_UART_RxCpltCallback+0x128>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b03      	cmp	r3, #3
 80004d8:	d110      	bne.n	80004fc <HAL_UART_RxCpltCallback+0x74>
 80004da:	4b36      	ldr	r3, [pc, #216]	; (80005b4 <HAL_UART_RxCpltCallback+0x12c>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d00c      	beq.n	80004fc <HAL_UART_RxCpltCallback+0x74>
					ESP01DEBUG = 0;
 80004e2:	4a31      	ldr	r2, [pc, #196]	; (80005a8 <HAL_UART_RxCpltCallback+0x120>)
 80004e4:	7813      	ldrb	r3, [r2, #0]
 80004e6:	f36f 0382 	bfc	r3, #2, #1
 80004ea:	7013      	strb	r3, [r2, #0]
					ledStatus = LEDIDLE;
 80004ec:	4b32      	ldr	r3, [pc, #200]	; (80005b8 <HAL_UART_RxCpltCallback+0x130>)
 80004ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	e002      	b.n	80004fc <HAL_UART_RxCpltCallback+0x74>
				}
			}
			else
				countPlus = 0;
 80004f6:	4b2e      	ldr	r3, [pc, #184]	; (80005b0 <HAL_UART_RxCpltCallback+0x128>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

			PutByteOnTx(&TXESP01, RX.buf[RX.iw]);
 80004fc:	4b2b      	ldr	r3, [pc, #172]	; (80005ac <HAL_UART_RxCpltCallback+0x124>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a2a      	ldr	r2, [pc, #168]	; (80005ac <HAL_UART_RxCpltCallback+0x124>)
 8000502:	88d2      	ldrh	r2, [r2, #6]
 8000504:	4413      	add	r3, r2
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	4619      	mov	r1, r3
 800050a:	482c      	ldr	r0, [pc, #176]	; (80005bc <HAL_UART_RxCpltCallback+0x134>)
 800050c:	f000 f996 	bl	800083c <PutByteOnTx>
		}

		RX.iw++;
 8000510:	4b26      	ldr	r3, [pc, #152]	; (80005ac <HAL_UART_RxCpltCallback+0x124>)
 8000512:	88db      	ldrh	r3, [r3, #6]
 8000514:	3301      	adds	r3, #1
 8000516:	b29a      	uxth	r2, r3
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <HAL_UART_RxCpltCallback+0x124>)
 800051a:	80da      	strh	r2, [r3, #6]
		RX.iw &= RX.maskSize;
 800051c:	4b23      	ldr	r3, [pc, #140]	; (80005ac <HAL_UART_RxCpltCallback+0x124>)
 800051e:	88da      	ldrh	r2, [r3, #6]
 8000520:	4b22      	ldr	r3, [pc, #136]	; (80005ac <HAL_UART_RxCpltCallback+0x124>)
 8000522:	8a1b      	ldrh	r3, [r3, #16]
 8000524:	4013      	ands	r3, r2
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <HAL_UART_RxCpltCallback+0x124>)
 800052a:	80da      	strh	r2, [r3, #6]
		HAL_UART_Receive_IT(&huart2, &RX.buf[RX.iw], 1);
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <HAL_UART_RxCpltCallback+0x124>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a1e      	ldr	r2, [pc, #120]	; (80005ac <HAL_UART_RxCpltCallback+0x124>)
 8000532:	88d2      	ldrh	r2, [r2, #6]
 8000534:	4413      	add	r3, r2
 8000536:	2201      	movs	r2, #1
 8000538:	4619      	mov	r1, r3
 800053a:	4821      	ldr	r0, [pc, #132]	; (80005c0 <HAL_UART_RxCpltCallback+0x138>)
 800053c:	f007 fa62 	bl	8007a04 <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART3){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1f      	ldr	r2, [pc, #124]	; (80005c4 <HAL_UART_RxCpltCallback+0x13c>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d128      	bne.n	800059c <HAL_UART_RxCpltCallback+0x114>
		if(ESP01DEBUG){
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <HAL_UART_RxCpltCallback+0x120>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	d009      	beq.n	800056c <HAL_UART_RxCpltCallback+0xe4>
			PutByteOnTx(&TX, RXESP01.buf[RXESP01.iw]);
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <HAL_UART_RxCpltCallback+0x140>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a1a      	ldr	r2, [pc, #104]	; (80005c8 <HAL_UART_RxCpltCallback+0x140>)
 800055e:	88d2      	ldrh	r2, [r2, #6]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	4819      	ldr	r0, [pc, #100]	; (80005cc <HAL_UART_RxCpltCallback+0x144>)
 8000568:	f000 f968 	bl	800083c <PutByteOnTx>
		}
		RXESP01.iw++;
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <HAL_UART_RxCpltCallback+0x140>)
 800056e:	88db      	ldrh	r3, [r3, #6]
 8000570:	3301      	adds	r3, #1
 8000572:	b29a      	uxth	r2, r3
 8000574:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <HAL_UART_RxCpltCallback+0x140>)
 8000576:	80da      	strh	r2, [r3, #6]
		RXESP01.iw &= RXESP01.maskSize;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <HAL_UART_RxCpltCallback+0x140>)
 800057a:	88da      	ldrh	r2, [r3, #6]
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <HAL_UART_RxCpltCallback+0x140>)
 800057e:	8a1b      	ldrh	r3, [r3, #16]
 8000580:	4013      	ands	r3, r2
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <HAL_UART_RxCpltCallback+0x140>)
 8000586:	80da      	strh	r2, [r3, #6]
		HAL_UART_Receive_IT(&huart3, &RXESP01.buf[RXESP01.iw], 1);
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <HAL_UART_RxCpltCallback+0x140>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <HAL_UART_RxCpltCallback+0x140>)
 800058e:	88d2      	ldrh	r2, [r2, #6]
 8000590:	4413      	add	r3, r2
 8000592:	2201      	movs	r2, #1
 8000594:	4619      	mov	r1, r3
 8000596:	480e      	ldr	r0, [pc, #56]	; (80005d0 <HAL_UART_RxCpltCallback+0x148>)
 8000598:	f007 fa34 	bl	8007a04 <HAL_UART_Receive_IT>
	}
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40004400 	.word	0x40004400
 80005a8:	200002fc 	.word	0x200002fc
 80005ac:	20000308 	.word	0x20000308
 80005b0:	200018b0 	.word	0x200018b0
 80005b4:	200018b1 	.word	0x200018b1
 80005b8:	200018a4 	.word	0x200018a4
 80005bc:	20000340 	.word	0x20000340
 80005c0:	200001f4 	.word	0x200001f4
 80005c4:	40004800 	.word	0x40004800
 80005c8:	2000031c 	.word	0x2000031c
 80005cc:	20000330 	.word	0x20000330
 80005d0:	20000278 	.word	0x20000278

080005d4 <DecodeHeader>:


void DecodeHeader(_sRx *RX){
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    uint8_t i;

    i = RX->iw;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	88db      	ldrh	r3, [r3, #6]
 80005e0:	73fb      	strb	r3, [r7, #15]

    while(RX->ir != i){
 80005e2:	e0e5      	b.n	80007b0 <DecodeHeader+0x1dc>
       switch(RX->header){
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	2b06      	cmp	r3, #6
 80005ea:	f200 80c4 	bhi.w	8000776 <DecodeHeader+0x1a2>
 80005ee:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <DecodeHeader+0x20>)
 80005f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f4:	08000611 	.word	0x08000611
 80005f8:	08000631 	.word	0x08000631
 80005fc:	0800065d 	.word	0x0800065d
 8000600:	08000689 	.word	0x08000689
 8000604:	080006b5 	.word	0x080006b5
 8000608:	080006cf 	.word	0x080006cf
 800060c:	08000727 	.word	0x08000727
        case 0:
            if(RX->buf[RX->ir] == 'U'){
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	8912      	ldrh	r2, [r2, #8]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b55      	cmp	r3, #85	; 0x55
 800061e:	f040 80ae 	bne.w	800077e <DecodeHeader+0x1aa>
                RX->header = 1;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2201      	movs	r2, #1
 8000626:	711a      	strb	r2, [r3, #4]
                RX->timeout = 5;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2205      	movs	r2, #5
 800062c:	731a      	strb	r2, [r3, #12]
            }
            break;
 800062e:	e0a6      	b.n	800077e <DecodeHeader+0x1aa>
        case 1:
            if(RX->buf[RX->ir] == 'N')
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	8912      	ldrh	r2, [r2, #8]
 8000638:	4413      	add	r3, r2
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b4e      	cmp	r3, #78	; 0x4e
 800063e:	d103      	bne.n	8000648 <DecodeHeader+0x74>
                RX->header = 2;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2202      	movs	r2, #2
 8000644:	711a      	strb	r2, [r3, #4]
            else{
                RX->header = 0;
                RX->ir--;
            }
            break;
 8000646:	e09d      	b.n	8000784 <DecodeHeader+0x1b0>
                RX->header = 0;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	711a      	strb	r2, [r3, #4]
                RX->ir--;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	891b      	ldrh	r3, [r3, #8]
 8000652:	3b01      	subs	r3, #1
 8000654:	b29a      	uxth	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	811a      	strh	r2, [r3, #8]
            break;
 800065a:	e093      	b.n	8000784 <DecodeHeader+0x1b0>
        case 2:
            if(RX->buf[RX->ir] == 'E')
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	8912      	ldrh	r2, [r2, #8]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b45      	cmp	r3, #69	; 0x45
 800066a:	d103      	bne.n	8000674 <DecodeHeader+0xa0>
                RX->header = 3;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2203      	movs	r2, #3
 8000670:	711a      	strb	r2, [r3, #4]
            else{
                RX->header = 0;
                RX->ir--;
            }
            break;
 8000672:	e087      	b.n	8000784 <DecodeHeader+0x1b0>
                RX->header = 0;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	711a      	strb	r2, [r3, #4]
                RX->ir--;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	891b      	ldrh	r3, [r3, #8]
 800067e:	3b01      	subs	r3, #1
 8000680:	b29a      	uxth	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	811a      	strh	r2, [r3, #8]
            break;
 8000686:	e07d      	b.n	8000784 <DecodeHeader+0x1b0>
        case 3:
            if(RX->buf[RX->ir] == 'R')
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	8912      	ldrh	r2, [r2, #8]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b52      	cmp	r3, #82	; 0x52
 8000696:	d103      	bne.n	80006a0 <DecodeHeader+0xcc>
                RX->header = 4;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2204      	movs	r2, #4
 800069c:	711a      	strb	r2, [r3, #4]
            else{
                RX->header = 0;
                RX->ir--;
            }
            break;
 800069e:	e071      	b.n	8000784 <DecodeHeader+0x1b0>
                RX->header = 0;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2200      	movs	r2, #0
 80006a4:	711a      	strb	r2, [r3, #4]
                RX->ir--;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	891b      	ldrh	r3, [r3, #8]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	811a      	strh	r2, [r3, #8]
            break;
 80006b2:	e067      	b.n	8000784 <DecodeHeader+0x1b0>
        case 4:
            RX->nbytes = RX->buf[RX->ir];
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	8912      	ldrh	r2, [r2, #8]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	81da      	strh	r2, [r3, #14]
            RX->header = 5;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2205      	movs	r2, #5
 80006ca:	711a      	strb	r2, [r3, #4]
            break;
 80006cc:	e05a      	b.n	8000784 <DecodeHeader+0x1b0>
        case 5:
            if(RX->buf[RX->ir] == ':'){
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	8912      	ldrh	r2, [r2, #8]
 80006d6:	4413      	add	r3, r2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b3a      	cmp	r3, #58	; 0x3a
 80006dc:	d119      	bne.n	8000712 <DecodeHeader+0x13e>
                RX->header = 6;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2206      	movs	r2, #6
 80006e2:	711a      	strb	r2, [r3, #4]
                RX->iData = RX->ir + 1;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	891b      	ldrh	r3, [r3, #8]
 80006e8:	3301      	adds	r3, #1
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	815a      	strh	r2, [r3, #10]
                RX->iData &= RX->maskSize;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	895a      	ldrh	r2, [r3, #10]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	8a1b      	ldrh	r3, [r3, #16]
 80006f8:	4013      	ands	r3, r2
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	815a      	strh	r2, [r3, #10]
                RX->cks = 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ RX->nbytes;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	89db      	ldrh	r3, [r3, #14]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 800070a:	b2da      	uxtb	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	735a      	strb	r2, [r3, #13]
            }
            else{
                RX->header = 0;
                RX->ir--;
            }
            break;
 8000710:	e038      	b.n	8000784 <DecodeHeader+0x1b0>
                RX->header = 0;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2200      	movs	r2, #0
 8000716:	711a      	strb	r2, [r3, #4]
                RX->ir--;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	891b      	ldrh	r3, [r3, #8]
 800071c:	3b01      	subs	r3, #1
 800071e:	b29a      	uxth	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	811a      	strh	r2, [r3, #8]
            break;
 8000724:	e02e      	b.n	8000784 <DecodeHeader+0x1b0>
        case 6:
            RX->nbytes--;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	89db      	ldrh	r3, [r3, #14]
 800072a:	3b01      	subs	r3, #1
 800072c:	b29a      	uxth	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	81da      	strh	r2, [r3, #14]
            if(RX->nbytes > 0){
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	89db      	ldrh	r3, [r3, #14]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d00c      	beq.n	8000754 <DecodeHeader+0x180>
                RX->cks ^= RX->buf[RX->ir];
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	7b5a      	ldrb	r2, [r3, #13]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	8909      	ldrh	r1, [r1, #8]
 8000746:	440b      	add	r3, r1
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	4053      	eors	r3, r2
 800074c:	b2da      	uxtb	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	735a      	strb	r2, [r3, #13]
            else{
                RX->header = 0;
                if(RX->cks == RX->buf[RX->ir])
                    RX->ISCMD = 1;
            }
            break;
 8000752:	e016      	b.n	8000782 <DecodeHeader+0x1ae>
                RX->header = 0;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	711a      	strb	r2, [r3, #4]
                if(RX->cks == RX->buf[RX->ir])
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	7b5a      	ldrb	r2, [r3, #13]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	8909      	ldrh	r1, [r1, #8]
 8000766:	440b      	add	r3, r1
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	d109      	bne.n	8000782 <DecodeHeader+0x1ae>
                    RX->ISCMD = 1;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2201      	movs	r2, #1
 8000772:	749a      	strb	r2, [r3, #18]
            break;
 8000774:	e005      	b.n	8000782 <DecodeHeader+0x1ae>
        default:
            RX->header = 0;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	711a      	strb	r2, [r3, #4]
 800077c:	e002      	b.n	8000784 <DecodeHeader+0x1b0>
            break;
 800077e:	bf00      	nop
 8000780:	e000      	b.n	8000784 <DecodeHeader+0x1b0>
            break;
 8000782:	bf00      	nop
        }

        RX->ir &= RX->maskSize;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	891a      	ldrh	r2, [r3, #8]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	8a1b      	ldrh	r3, [r3, #16]
 800078c:	4013      	ands	r3, r2
 800078e:	b29a      	uxth	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	811a      	strh	r2, [r3, #8]
        RX->ir++;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	891b      	ldrh	r3, [r3, #8]
 8000798:	3301      	adds	r3, #1
 800079a:	b29a      	uxth	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	811a      	strh	r2, [r3, #8]
        RX->ir &= RX->maskSize;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	891a      	ldrh	r2, [r3, #8]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	8a1b      	ldrh	r3, [r3, #16]
 80007a8:	4013      	ands	r3, r2
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	811a      	strh	r2, [r3, #8]
    while(RX->ir != i){
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	891a      	ldrh	r2, [r3, #8]
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	429a      	cmp	r2, r3
 80007ba:	f47f af13 	bne.w	80005e4 <DecodeHeader+0x10>
    }

}
 80007be:	bf00      	nop
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <PutBufOnTx>:

uint8_t PutBufOnTx(_sTx *TX, uint8_t *buf, uint8_t length){
 80007cc:	b490      	push	{r4, r7}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	4613      	mov	r3, r2
 80007d8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

    for(i=0; i<length; i++){
 80007da:	2300      	movs	r3, #0
 80007dc:	75fb      	strb	r3, [r7, #23]
 80007de:	e022      	b.n	8000826 <PutBufOnTx+0x5a>
        TX->cks ^= buf[i];
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	7a1a      	ldrb	r2, [r3, #8]
 80007e4:	7dfb      	ldrb	r3, [r7, #23]
 80007e6:	68b9      	ldr	r1, [r7, #8]
 80007e8:	440b      	add	r3, r1
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4053      	eors	r3, r2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	721a      	strb	r2, [r3, #8]
        TX->buf[TX->iw++] = buf[i];
 80007f4:	7dfb      	ldrb	r3, [r7, #23]
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	441a      	add	r2, r3
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6819      	ldr	r1, [r3, #0]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	889b      	ldrh	r3, [r3, #4]
 8000802:	1c58      	adds	r0, r3, #1
 8000804:	b284      	uxth	r4, r0
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	8084      	strh	r4, [r0, #4]
 800080a:	440b      	add	r3, r1
 800080c:	7812      	ldrb	r2, [r2, #0]
 800080e:	701a      	strb	r2, [r3, #0]
        TX->iw &= TX->maskSize;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	889a      	ldrh	r2, [r3, #4]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	899b      	ldrh	r3, [r3, #12]
 8000818:	4013      	ands	r3, r2
 800081a:	b29a      	uxth	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	809a      	strh	r2, [r3, #4]
    for(i=0; i<length; i++){
 8000820:	7dfb      	ldrb	r3, [r7, #23]
 8000822:	3301      	adds	r3, #1
 8000824:	75fb      	strb	r3, [r7, #23]
 8000826:	7dfa      	ldrb	r2, [r7, #23]
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	429a      	cmp	r2, r3
 800082c:	d3d8      	bcc.n	80007e0 <PutBufOnTx+0x14>
    }

    return TX->cks;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	7a1b      	ldrb	r3, [r3, #8]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bc90      	pop	{r4, r7}
 800083a:	4770      	bx	lr

0800083c <PutByteOnTx>:

uint8_t PutByteOnTx(_sTx *TX, uint8_t value){
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
	TX->cks ^= value;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	7a1a      	ldrb	r2, [r3, #8]
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	4053      	eors	r3, r2
 8000850:	b2da      	uxtb	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	721a      	strb	r2, [r3, #8]
	TX->buf[TX->iw++] = value;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	889b      	ldrh	r3, [r3, #4]
 800085e:	1c59      	adds	r1, r3, #1
 8000860:	b288      	uxth	r0, r1
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	8088      	strh	r0, [r1, #4]
 8000866:	4413      	add	r3, r2
 8000868:	78fa      	ldrb	r2, [r7, #3]
 800086a:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	889a      	ldrh	r2, [r3, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	899b      	ldrh	r3, [r3, #12]
 8000874:	4013      	ands	r3, r2
 8000876:	b29a      	uxth	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	809a      	strh	r2, [r3, #4]

    return TX->cks;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7a1b      	ldrb	r3, [r3, #8]
}
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <PutHeaderOnTx>:

uint8_t PutHeaderOnTx(_sTx *TX, uint8_t id, uint8_t lCmd){
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
 8000898:	4613      	mov	r3, r2
 800089a:	70bb      	strb	r3, [r7, #2]
    TX->buf[TX->iw++] = 'U';
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	889b      	ldrh	r3, [r3, #4]
 80008a4:	1c59      	adds	r1, r3, #1
 80008a6:	b288      	uxth	r0, r1
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	8088      	strh	r0, [r1, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	2255      	movs	r2, #85	; 0x55
 80008b0:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	889a      	ldrh	r2, [r3, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	899b      	ldrh	r3, [r3, #12]
 80008ba:	4013      	ands	r3, r2
 80008bc:	b29a      	uxth	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = 'N';
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	889b      	ldrh	r3, [r3, #4]
 80008ca:	1c59      	adds	r1, r3, #1
 80008cc:	b288      	uxth	r0, r1
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	8088      	strh	r0, [r1, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	224e      	movs	r2, #78	; 0x4e
 80008d6:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	889a      	ldrh	r2, [r3, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	899b      	ldrh	r3, [r3, #12]
 80008e0:	4013      	ands	r3, r2
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = 'E';
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	889b      	ldrh	r3, [r3, #4]
 80008f0:	1c59      	adds	r1, r3, #1
 80008f2:	b288      	uxth	r0, r1
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	8088      	strh	r0, [r1, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	2245      	movs	r2, #69	; 0x45
 80008fc:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	889a      	ldrh	r2, [r3, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	899b      	ldrh	r3, [r3, #12]
 8000906:	4013      	ands	r3, r2
 8000908:	b29a      	uxth	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = 'R';
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	889b      	ldrh	r3, [r3, #4]
 8000916:	1c59      	adds	r1, r3, #1
 8000918:	b288      	uxth	r0, r1
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	8088      	strh	r0, [r1, #4]
 800091e:	4413      	add	r3, r2
 8000920:	2252      	movs	r2, #82	; 0x52
 8000922:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	889a      	ldrh	r2, [r3, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	899b      	ldrh	r3, [r3, #12]
 800092c:	4013      	ands	r3, r2
 800092e:	b29a      	uxth	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = lCmd + 1;//id + payload + cks
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	889b      	ldrh	r3, [r3, #4]
 800093c:	1c59      	adds	r1, r3, #1
 800093e:	b288      	uxth	r0, r1
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	8088      	strh	r0, [r1, #4]
 8000944:	4413      	add	r3, r2
 8000946:	78ba      	ldrb	r2, [r7, #2]
 8000948:	3201      	adds	r2, #1
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	889a      	ldrh	r2, [r3, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	899b      	ldrh	r3, [r3, #12]
 8000956:	4013      	ands	r3, r2
 8000958:	b29a      	uxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = ':';
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	889b      	ldrh	r3, [r3, #4]
 8000966:	1c59      	adds	r1, r3, #1
 8000968:	b288      	uxth	r0, r1
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	8088      	strh	r0, [r1, #4]
 800096e:	4413      	add	r3, r2
 8000970:	223a      	movs	r2, #58	; 0x3a
 8000972:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	889a      	ldrh	r2, [r3, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	899b      	ldrh	r3, [r3, #12]
 800097c:	4013      	ands	r3, r2
 800097e:	b29a      	uxth	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = id;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	889b      	ldrh	r3, [r3, #4]
 800098c:	1c59      	adds	r1, r3, #1
 800098e:	b288      	uxth	r0, r1
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	8088      	strh	r0, [r1, #4]
 8000994:	4413      	add	r3, r2
 8000996:	78fa      	ldrb	r2, [r7, #3]
 8000998:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	889a      	ldrh	r2, [r3, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	899b      	ldrh	r3, [r3, #12]
 80009a2:	4013      	ands	r3, r2
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	809a      	strh	r2, [r3, #4]

    TX->cks ^= (lCmd + 1);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	7a1b      	ldrb	r3, [r3, #8]
 80009ae:	b25a      	sxtb	r2, r3
 80009b0:	78bb      	ldrb	r3, [r7, #2]
 80009b2:	3301      	adds	r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	b25b      	sxtb	r3, r3
 80009b8:	4053      	eors	r3, r2
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	721a      	strb	r2, [r3, #8]
    TX->cks ^= ('U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ id);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	7a1a      	ldrb	r2, [r3, #8]
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	4053      	eors	r3, r2
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	721a      	strb	r2, [r3, #8]

    return TX->cks;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	7a1b      	ldrb	r3, [r3, #8]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PutStrOntx>:
//
//    TX->buf[TX->iw++] = cks;
//    TX->iw &= TX->maskSize;
//}

uint8_t PutStrOntx(_sTx *TX, const char *str){
 80009e6:	b490      	push	{r4, r7}
 80009e8:	b084      	sub	sp, #16
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	73fb      	strb	r3, [r7, #15]

    while(str[i]){
 80009f4:	e022      	b.n	8000a3c <PutStrOntx+0x56>
        TX->cks |= str[i];
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7a1a      	ldrb	r2, [r3, #8]
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	6839      	ldr	r1, [r7, #0]
 80009fe:	440b      	add	r3, r1
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	721a      	strb	r2, [r3, #8]
    	TX->buf[TX->iw++] = str[i++];
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	73fa      	strb	r2, [r7, #15]
 8000a10:	461a      	mov	r2, r3
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	441a      	add	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6819      	ldr	r1, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	889b      	ldrh	r3, [r3, #4]
 8000a1e:	1c58      	adds	r0, r3, #1
 8000a20:	b284      	uxth	r4, r0
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	8084      	strh	r4, [r0, #4]
 8000a26:	440b      	add	r3, r1
 8000a28:	7812      	ldrb	r2, [r2, #0]
 8000a2a:	701a      	strb	r2, [r3, #0]
        TX->iw &= TX->maskSize;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	889a      	ldrh	r2, [r3, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	899b      	ldrh	r3, [r3, #12]
 8000a34:	4013      	ands	r3, r2
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	809a      	strh	r2, [r3, #4]
    while(str[i]){
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1d6      	bne.n	80009f6 <PutStrOntx+0x10>

    }

    return TX->cks;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7a1b      	ldrb	r3, [r3, #8]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc90      	pop	{r4, r7}
 8000a54:	4770      	bx	lr

08000a56 <GetByteFromRx>:

uint8_t GetByteFromRx(_sRx *RX, int8_t pre, int8_t pos){
 8000a56:	b480      	push	{r7}
 8000a58:	b085      	sub	sp, #20
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	70fb      	strb	r3, [r7, #3]
 8000a62:	4613      	mov	r3, r2
 8000a64:	70bb      	strb	r3, [r7, #2]
    uint8_t aux;

    RX->iData += pre;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	895a      	ldrh	r2, [r3, #10]
 8000a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	4413      	add	r3, r2
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	815a      	strh	r2, [r3, #10]
    RX->iData &= RX->maskSize;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	895a      	ldrh	r2, [r3, #10]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	8a1b      	ldrh	r3, [r3, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	815a      	strh	r2, [r3, #10]
    aux = RX->buf[RX->iData];
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	8952      	ldrh	r2, [r2, #10]
 8000a90:	4413      	add	r3, r2
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	73fb      	strb	r3, [r7, #15]
    RX->iData += pos;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	895a      	ldrh	r2, [r3, #10]
 8000a9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	815a      	strh	r2, [r3, #10]
    RX->iData &= RX->maskSize;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	895a      	ldrh	r2, [r3, #10]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	8a1b      	ldrh	r3, [r3, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	815a      	strh	r2, [r3, #10]

    return aux;
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <DecodeCmd>:
        RX->iData++;
        RX->iData &= RX->maskSize;
    }
}

void DecodeCmd(_sRx *RX, _sTx *TX){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
	RX->ISCMD = 0;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	749a      	strb	r2, [r3, #18]

    TX->cks = 0;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	2200      	movs	r2, #0
 8000adc:	721a      	strb	r2, [r3, #8]
    switch (RX->buf[RX->iData])
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	8952      	ldrh	r2, [r2, #10]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2bf1      	cmp	r3, #241	; 0xf1
 8000aec:	f000 82b2 	beq.w	8001054 <DecodeCmd+0x58c>
 8000af0:	2bf1      	cmp	r3, #241	; 0xf1
 8000af2:	f300 82bc 	bgt.w	800106e <DecodeCmd+0x5a6>
 8000af6:	2bb1      	cmp	r3, #177	; 0xb1
 8000af8:	dc2e      	bgt.n	8000b58 <DecodeCmd+0x90>
 8000afa:	2ba0      	cmp	r3, #160	; 0xa0
 8000afc:	f2c0 82b7 	blt.w	800106e <DecodeCmd+0x5a6>
 8000b00:	3ba0      	subs	r3, #160	; 0xa0
 8000b02:	2b11      	cmp	r3, #17
 8000b04:	f200 82b3 	bhi.w	800106e <DecodeCmd+0x5a6>
 8000b08:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <DecodeCmd+0x48>)
 8000b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0e:	bf00      	nop
 8000b10:	08000b61 	.word	0x08000b61
 8000b14:	08000bff 	.word	0x08000bff
 8000b18:	08000cb9 	.word	0x08000cb9
 8000b1c:	08000d6d 	.word	0x08000d6d
 8000b20:	08000e57 	.word	0x08000e57
 8000b24:	0800106f 	.word	0x0800106f
 8000b28:	0800106f 	.word	0x0800106f
 8000b2c:	0800106f 	.word	0x0800106f
 8000b30:	0800106f 	.word	0x0800106f
 8000b34:	0800106f 	.word	0x0800106f
 8000b38:	0800106f 	.word	0x0800106f
 8000b3c:	0800106f 	.word	0x0800106f
 8000b40:	0800106f 	.word	0x0800106f
 8000b44:	0800106f 	.word	0x0800106f
 8000b48:	0800106f 	.word	0x0800106f
 8000b4c:	0800106f 	.word	0x0800106f
 8000b50:	0800101d 	.word	0x0800101d
 8000b54:	0800109b 	.word	0x0800109b
 8000b58:	2bf0      	cmp	r3, #240	; 0xf0
 8000b5a:	f000 826b 	beq.w	8001034 <DecodeCmd+0x56c>
 8000b5e:	e286      	b.n	800106e <DecodeCmd+0x5a6>
    {
    case 0xA0://READ LAST ANALOG INPUTS
		ledStatus = LEDIDLE;
 8000b60:	4b77      	ldr	r3, [pc, #476]	; (8000d40 <DecodeCmd+0x278>)
 8000b62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b66:	601a      	str	r2, [r3, #0]
		w.u8[0] = indexADCData;
 8000b68:	4b76      	ldr	r3, [pc, #472]	; (8000d44 <DecodeCmd+0x27c>)
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	4b76      	ldr	r3, [pc, #472]	; (8000d48 <DecodeCmd+0x280>)
 8000b6e:	701a      	strb	r2, [r3, #0]
		w.u8[0]--;
 8000b70:	4b75      	ldr	r3, [pc, #468]	; (8000d48 <DecodeCmd+0x280>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b73      	ldr	r3, [pc, #460]	; (8000d48 <DecodeCmd+0x280>)
 8000b7a:	701a      	strb	r2, [r3, #0]
		w.u8[0] &= (ADCDATASIZE - 1);
 8000b7c:	4b72      	ldr	r3, [pc, #456]	; (8000d48 <DecodeCmd+0x280>)
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	4b71      	ldr	r3, [pc, #452]	; (8000d48 <DecodeCmd+0x280>)
 8000b82:	701a      	strb	r2, [r3, #0]
		PutHeaderOnTx(TX, 0xA0, 2*16+1);
 8000b84:	2221      	movs	r2, #33	; 0x21
 8000b86:	21a0      	movs	r1, #160	; 0xa0
 8000b88:	6838      	ldr	r0, [r7, #0]
 8000b8a:	f7ff fe7f 	bl	800088c <PutHeaderOnTx>
		PutBufOnTx(TX, (uint8_t *)&ADCData[w.u8[0]], 16);
 8000b8e:	4b6e      	ldr	r3, [pc, #440]	; (8000d48 <DecodeCmd+0x280>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	4a6d      	ldr	r2, [pc, #436]	; (8000d4c <DecodeCmd+0x284>)
 8000b96:	4413      	add	r3, r2
 8000b98:	2210      	movs	r2, #16
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	6838      	ldr	r0, [r7, #0]
 8000b9e:	f7ff fe15 	bl	80007cc <PutBufOnTx>
		for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 8000ba2:	4b69      	ldr	r3, [pc, #420]	; (8000d48 <DecodeCmd+0x280>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	709a      	strb	r2, [r3, #2]
 8000ba8:	e01e      	b.n	8000be8 <DecodeCmd+0x120>
			w.u16[0] = sumADCData10ms[w.u8[2]]/40;
 8000baa:	4b67      	ldr	r3, [pc, #412]	; (8000d48 <DecodeCmd+0x280>)
 8000bac:	789b      	ldrb	r3, [r3, #2]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b67      	ldr	r3, [pc, #412]	; (8000d50 <DecodeCmd+0x288>)
 8000bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb6:	4a67      	ldr	r2, [pc, #412]	; (8000d54 <DecodeCmd+0x28c>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	095b      	lsrs	r3, r3, #5
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4b61      	ldr	r3, [pc, #388]	; (8000d48 <DecodeCmd+0x280>)
 8000bc2:	801a      	strh	r2, [r3, #0]
			PutByteOnTx(TX, w.u8[0]);
 8000bc4:	4b60      	ldr	r3, [pc, #384]	; (8000d48 <DecodeCmd+0x280>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	6838      	ldr	r0, [r7, #0]
 8000bcc:	f7ff fe36 	bl	800083c <PutByteOnTx>
			PutByteOnTx(TX, w.u8[1]);
 8000bd0:	4b5d      	ldr	r3, [pc, #372]	; (8000d48 <DecodeCmd+0x280>)
 8000bd2:	785b      	ldrb	r3, [r3, #1]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	6838      	ldr	r0, [r7, #0]
 8000bd8:	f7ff fe30 	bl	800083c <PutByteOnTx>
		for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 8000bdc:	4b5a      	ldr	r3, [pc, #360]	; (8000d48 <DecodeCmd+0x280>)
 8000bde:	789b      	ldrb	r3, [r3, #2]
 8000be0:	3301      	adds	r3, #1
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b58      	ldr	r3, [pc, #352]	; (8000d48 <DecodeCmd+0x280>)
 8000be6:	709a      	strb	r2, [r3, #2]
 8000be8:	4b57      	ldr	r3, [pc, #348]	; (8000d48 <DecodeCmd+0x280>)
 8000bea:	789b      	ldrb	r3, [r3, #2]
 8000bec:	2b07      	cmp	r3, #7
 8000bee:	d9dc      	bls.n	8000baa <DecodeCmd+0xe2>
		}
		PutByteOnTx(TX, TX->cks);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	7a1b      	ldrb	r3, [r3, #8]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	6838      	ldr	r0, [r7, #0]
 8000bf8:	f7ff fe20 	bl	800083c <PutByteOnTx>
        break;
 8000bfc:	e24e      	b.n	800109c <DecodeCmd+0x5d4>
    case 0xA1://READ Continuous every Nx10ms Nx5 Samples and Average
    	w.u8[0] =  GetByteFromRx(RX, 1, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2101      	movs	r1, #1
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ff27 	bl	8000a56 <GetByteFromRx>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b4e      	ldr	r3, [pc, #312]	; (8000d48 <DecodeCmd+0x280>)
 8000c0e:	701a      	strb	r2, [r3, #0]
    	if(w.u8[0] != 0){
 8000c10:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <DecodeCmd+0x280>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d035      	beq.n	8000c84 <DecodeCmd+0x1bc>
    		w.u8[0] /= 10;
 8000c18:	4b4b      	ldr	r3, [pc, #300]	; (8000d48 <DecodeCmd+0x280>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4a4d      	ldr	r2, [pc, #308]	; (8000d54 <DecodeCmd+0x28c>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	08db      	lsrs	r3, r3, #3
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b48      	ldr	r3, [pc, #288]	; (8000d48 <DecodeCmd+0x280>)
 8000c28:	701a      	strb	r2, [r3, #0]
    		if(w.u8[0] == 0)
 8000c2a:	4b47      	ldr	r3, [pc, #284]	; (8000d48 <DecodeCmd+0x280>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d102      	bne.n	8000c38 <DecodeCmd+0x170>
    			w.u8[0] = 1;
 8000c32:	4b45      	ldr	r3, [pc, #276]	; (8000d48 <DecodeCmd+0x280>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]
    		if(w.u8[0] > 6)
 8000c38:	4b43      	ldr	r3, [pc, #268]	; (8000d48 <DecodeCmd+0x280>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b06      	cmp	r3, #6
 8000c3e:	d902      	bls.n	8000c46 <DecodeCmd+0x17e>
    			w.u8[0] = 6;
 8000c40:	4b41      	ldr	r3, [pc, #260]	; (8000d48 <DecodeCmd+0x280>)
 8000c42:	2206      	movs	r2, #6
 8000c44:	701a      	strb	r2, [r3, #0]
    		n10msData = w.u8[0];
 8000c46:	4b40      	ldr	r3, [pc, #256]	; (8000d48 <DecodeCmd+0x280>)
 8000c48:	781a      	ldrb	r2, [r3, #0]
 8000c4a:	4b43      	ldr	r3, [pc, #268]	; (8000d58 <DecodeCmd+0x290>)
 8000c4c:	701a      	strb	r2, [r3, #0]
    		timeOutAnalog = n10msData*40;
 8000c4e:	4b42      	ldr	r3, [pc, #264]	; (8000d58 <DecodeCmd+0x290>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <DecodeCmd+0x294>)
 8000c60:	801a      	strh	r2, [r3, #0]
    		timeOutAnalogAux = timeOutAnalog;
 8000c62:	4b3e      	ldr	r3, [pc, #248]	; (8000d5c <DecodeCmd+0x294>)
 8000c64:	881a      	ldrh	r2, [r3, #0]
 8000c66:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <DecodeCmd+0x298>)
 8000c68:	801a      	strh	r2, [r3, #0]
    		ledStatus = LEDTXANALOG;
 8000c6a:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <DecodeCmd+0x278>)
 8000c6c:	f04f 426a 	mov.w	r2, #3925868544	; 0xea000000
 8000c70:	601a      	str	r2, [r3, #0]
    		stateSendSamples = 0;
 8000c72:	4b3c      	ldr	r3, [pc, #240]	; (8000d64 <DecodeCmd+0x29c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
    		CONTAVERAGE = 0;
 8000c78:	4a3b      	ldr	r2, [pc, #236]	; (8000d68 <DecodeCmd+0x2a0>)
 8000c7a:	7813      	ldrb	r3, [r2, #0]
 8000c7c:	f36f 03c3 	bfc	r3, #3, #1
 8000c80:	7013      	strb	r3, [r2, #0]
 8000c82:	e009      	b.n	8000c98 <DecodeCmd+0x1d0>
    	}
    	else{
    		timeOutAnalog = 0;
 8000c84:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <DecodeCmd+0x294>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	801a      	strh	r2, [r3, #0]
    		timeOutAnalogAux = 0;
 8000c8a:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <DecodeCmd+0x298>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	801a      	strh	r2, [r3, #0]
    		ledStatus = LEDIDLE;
 8000c90:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <DecodeCmd+0x278>)
 8000c92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c96:	601a      	str	r2, [r3, #0]
    	}
    	PutHeaderOnTx(TX, 0xA1, 2);
 8000c98:	2202      	movs	r2, #2
 8000c9a:	21a1      	movs	r1, #161	; 0xa1
 8000c9c:	6838      	ldr	r0, [r7, #0]
 8000c9e:	f7ff fdf5 	bl	800088c <PutHeaderOnTx>
    	PutByteOnTx(TX, 0x0D);
 8000ca2:	210d      	movs	r1, #13
 8000ca4:	6838      	ldr	r0, [r7, #0]
 8000ca6:	f7ff fdc9 	bl	800083c <PutByteOnTx>
    	PutByteOnTx(TX, TX->cks);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	7a1b      	ldrb	r3, [r3, #8]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	6838      	ldr	r0, [r7, #0]
 8000cb2:	f7ff fdc3 	bl	800083c <PutByteOnTx>
    	break;
 8000cb6:	e1f1      	b.n	800109c <DecodeCmd+0x5d4>
    case 0xA2://Read Continuous Average every N ms
    	w.u8[0] =  GetByteFromRx(RX, 1, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2101      	movs	r1, #1
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff feca 	bl	8000a56 <GetByteFromRx>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <DecodeCmd+0x280>)
 8000cc8:	701a      	strb	r2, [r3, #0]
    	if(w.u8[0] != 0){
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <DecodeCmd+0x280>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d01b      	beq.n	8000d0a <DecodeCmd+0x242>
    		if(w.u8[0] < 10)
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <DecodeCmd+0x280>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b09      	cmp	r3, #9
 8000cd8:	d802      	bhi.n	8000ce0 <DecodeCmd+0x218>
    			w.u8[0] = 10;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <DecodeCmd+0x280>)
 8000cdc:	220a      	movs	r2, #10
 8000cde:	701a      	strb	r2, [r3, #0]
    		timeOutAnalog = w.u8[0]*4;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <DecodeCmd+0x280>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <DecodeCmd+0x294>)
 8000cec:	801a      	strh	r2, [r3, #0]
    		timeOutAnalogAux = timeOutAnalog;
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <DecodeCmd+0x294>)
 8000cf0:	881a      	ldrh	r2, [r3, #0]
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <DecodeCmd+0x298>)
 8000cf4:	801a      	strh	r2, [r3, #0]
    		ledStatus = LEDTXANALOG;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <DecodeCmd+0x278>)
 8000cf8:	f04f 426a 	mov.w	r2, #3925868544	; 0xea000000
 8000cfc:	601a      	str	r2, [r3, #0]
    		CONTAVERAGE = 1;
 8000cfe:	4a1a      	ldr	r2, [pc, #104]	; (8000d68 <DecodeCmd+0x2a0>)
 8000d00:	7813      	ldrb	r3, [r2, #0]
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	7013      	strb	r3, [r2, #0]
 8000d08:	e009      	b.n	8000d1e <DecodeCmd+0x256>
    	}
    	else{
    		timeOutAnalog = 0;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <DecodeCmd+0x294>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	801a      	strh	r2, [r3, #0]
    		timeOutAnalogAux = 0;
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <DecodeCmd+0x298>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	801a      	strh	r2, [r3, #0]
    		ledStatus = LEDIDLE;
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <DecodeCmd+0x278>)
 8000d18:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d1c:	601a      	str	r2, [r3, #0]
    	}
    	PutHeaderOnTx(TX, 0xA2, 2);
 8000d1e:	2202      	movs	r2, #2
 8000d20:	21a2      	movs	r1, #162	; 0xa2
 8000d22:	6838      	ldr	r0, [r7, #0]
 8000d24:	f7ff fdb2 	bl	800088c <PutHeaderOnTx>
    	PutByteOnTx(TX, 0x0D);
 8000d28:	210d      	movs	r1, #13
 8000d2a:	6838      	ldr	r0, [r7, #0]
 8000d2c:	f7ff fd86 	bl	800083c <PutByteOnTx>
    	PutByteOnTx(TX, TX->cks);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	7a1b      	ldrb	r3, [r3, #8]
 8000d34:	4619      	mov	r1, r3
 8000d36:	6838      	ldr	r0, [r7, #0]
 8000d38:	f7ff fd80 	bl	800083c <PutByteOnTx>
    	break;
 8000d3c:	e1ae      	b.n	800109c <DecodeCmd+0x5d4>
 8000d3e:	bf00      	nop
 8000d40:	200018a4 	.word	0x200018a4
 8000d44:	20001850 	.word	0x20001850
 8000d48:	20000300 	.word	0x20000300
 8000d4c:	20000850 	.word	0x20000850
 8000d50:	20001858 	.word	0x20001858
 8000d54:	cccccccd 	.word	0xcccccccd
 8000d58:	2000189c 	.word	0x2000189c
 8000d5c:	20001898 	.word	0x20001898
 8000d60:	2000189a 	.word	0x2000189a
 8000d64:	2000189d 	.word	0x2000189d
 8000d68:	200002fc 	.word	0x200002fc
    case 0xA3://SET Motor Period
    	w.u8[0] = GetByteFromRx(RX, 1, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2101      	movs	r1, #1
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fe70 	bl	8000a56 <GetByteFromRx>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4ba4      	ldr	r3, [pc, #656]	; (800100c <DecodeCmd+0x544>)
 8000d7c:	701a      	strb	r2, [r3, #0]
    	w.u8[1] = GetByteFromRx(RX, 1, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2101      	movs	r1, #1
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff fe67 	bl	8000a56 <GetByteFromRx>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b9f      	ldr	r3, [pc, #636]	; (800100c <DecodeCmd+0x544>)
 8000d8e:	705a      	strb	r2, [r3, #1]
    	if(w.u16[0] < 100){
 8000d90:	4b9e      	ldr	r3, [pc, #632]	; (800100c <DecodeCmd+0x544>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	2b63      	cmp	r3, #99	; 0x63
 8000d96:	d802      	bhi.n	8000d9e <DecodeCmd+0x2d6>
    		w.u16[0] = 100;
 8000d98:	4b9c      	ldr	r3, [pc, #624]	; (800100c <DecodeCmd+0x544>)
 8000d9a:	2264      	movs	r2, #100	; 0x64
 8000d9c:	801a      	strh	r2, [r3, #0]
    	}
    	if(w.u16[0] > 9000){
 8000d9e:	4b9b      	ldr	r3, [pc, #620]	; (800100c <DecodeCmd+0x544>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	f242 3228 	movw	r2, #9000	; 0x2328
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d903      	bls.n	8000db2 <DecodeCmd+0x2ea>
    		w.u16[0] = 9000;
 8000daa:	4b98      	ldr	r3, [pc, #608]	; (800100c <DecodeCmd+0x544>)
 8000dac:	f242 3228 	movw	r2, #9000	; 0x2328
 8000db0:	801a      	strh	r2, [r3, #0]
    	}

		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000db2:	2100      	movs	r1, #0
 8000db4:	4896      	ldr	r0, [pc, #600]	; (8001010 <DecodeCmd+0x548>)
 8000db6:	f005 fd07 	bl	80067c8 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000dba:	2104      	movs	r1, #4
 8000dbc:	4894      	ldr	r0, [pc, #592]	; (8001010 <DecodeCmd+0x548>)
 8000dbe:	f005 fd03 	bl	80067c8 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000dc2:	2108      	movs	r1, #8
 8000dc4:	4892      	ldr	r0, [pc, #584]	; (8001010 <DecodeCmd+0x548>)
 8000dc6:	f005 fcff 	bl	80067c8 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8000dca:	210c      	movs	r1, #12
 8000dcc:	4890      	ldr	r0, [pc, #576]	; (8001010 <DecodeCmd+0x548>)
 8000dce:	f005 fcfb 	bl	80067c8 <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000dd2:	4b8f      	ldr	r3, [pc, #572]	; (8001010 <DecodeCmd+0x548>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000dda:	4b8d      	ldr	r3, [pc, #564]	; (8001010 <DecodeCmd+0x548>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2200      	movs	r2, #0
 8000de0:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000de2:	4b8b      	ldr	r3, [pc, #556]	; (8001010 <DecodeCmd+0x548>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2200      	movs	r2, #0
 8000de8:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8000dea:	4b89      	ldr	r3, [pc, #548]	; (8001010 <DecodeCmd+0x548>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2200      	movs	r2, #0
 8000df0:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_AUTORELOAD(&htim3, w.u16[0]);
 8000df2:	4b86      	ldr	r3, [pc, #536]	; (800100c <DecodeCmd+0x544>)
 8000df4:	881a      	ldrh	r2, [r3, #0]
 8000df6:	4b86      	ldr	r3, [pc, #536]	; (8001010 <DecodeCmd+0x548>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dfc:	4b83      	ldr	r3, [pc, #524]	; (800100c <DecodeCmd+0x544>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b83      	ldr	r3, [pc, #524]	; (8001010 <DecodeCmd+0x548>)
 8000e04:	60da      	str	r2, [r3, #12]

		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e06:	2100      	movs	r1, #0
 8000e08:	4881      	ldr	r0, [pc, #516]	; (8001010 <DecodeCmd+0x548>)
 8000e0a:	f005 fbd1 	bl	80065b0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e0e:	2104      	movs	r1, #4
 8000e10:	487f      	ldr	r0, [pc, #508]	; (8001010 <DecodeCmd+0x548>)
 8000e12:	f005 fbcd 	bl	80065b0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000e16:	2108      	movs	r1, #8
 8000e18:	487d      	ldr	r0, [pc, #500]	; (8001010 <DecodeCmd+0x548>)
 8000e1a:	f005 fbc9 	bl	80065b0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e1e:	210c      	movs	r1, #12
 8000e20:	487b      	ldr	r0, [pc, #492]	; (8001010 <DecodeCmd+0x548>)
 8000e22:	f005 fbc5 	bl	80065b0 <HAL_TIM_PWM_Start>

		PutHeaderOnTx(TX, 0xA3, 3);
 8000e26:	2203      	movs	r2, #3
 8000e28:	21a3      	movs	r1, #163	; 0xa3
 8000e2a:	6838      	ldr	r0, [r7, #0]
 8000e2c:	f7ff fd2e 	bl	800088c <PutHeaderOnTx>
    	PutByteOnTx(TX, w.u8[0]);
 8000e30:	4b76      	ldr	r3, [pc, #472]	; (800100c <DecodeCmd+0x544>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	6838      	ldr	r0, [r7, #0]
 8000e38:	f7ff fd00 	bl	800083c <PutByteOnTx>
    	PutByteOnTx(TX, w.u8[1]);
 8000e3c:	4b73      	ldr	r3, [pc, #460]	; (800100c <DecodeCmd+0x544>)
 8000e3e:	785b      	ldrb	r3, [r3, #1]
 8000e40:	4619      	mov	r1, r3
 8000e42:	6838      	ldr	r0, [r7, #0]
 8000e44:	f7ff fcfa 	bl	800083c <PutByteOnTx>
    	PutByteOnTx(TX, TX->cks);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	7a1b      	ldrb	r3, [r3, #8]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	6838      	ldr	r0, [r7, #0]
 8000e50:	f7ff fcf4 	bl	800083c <PutByteOnTx>
    	break;
 8000e54:	e122      	b.n	800109c <DecodeCmd+0x5d4>
    case 0xA4://Test Motors
    	w.i8[0] = GetByteFromRx(RX, 1, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2101      	movs	r1, #1
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fdfb 	bl	8000a56 <GetByteFromRx>
 8000e60:	4603      	mov	r3, r0
 8000e62:	b25a      	sxtb	r2, r3
 8000e64:	4b69      	ldr	r3, [pc, #420]	; (800100c <DecodeCmd+0x544>)
 8000e66:	701a      	strb	r2, [r3, #0]
    	w.i8[1] = GetByteFromRx(RX, 1, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff fdf2 	bl	8000a56 <GetByteFromRx>
 8000e72:	4603      	mov	r3, r0
 8000e74:	b25a      	sxtb	r2, r3
 8000e76:	4b65      	ldr	r3, [pc, #404]	; (800100c <DecodeCmd+0x544>)
 8000e78:	705a      	strb	r2, [r3, #1]
    	w.i8[2] = GetByteFromRx(RX, 1, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff fde9 	bl	8000a56 <GetByteFromRx>
 8000e84:	4603      	mov	r3, r0
 8000e86:	b25a      	sxtb	r2, r3
 8000e88:	4b60      	ldr	r3, [pc, #384]	; (800100c <DecodeCmd+0x544>)
 8000e8a:	709a      	strb	r2, [r3, #2]
    	w.i8[3] = GetByteFromRx(RX, 1, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2101      	movs	r1, #1
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff fde0 	bl	8000a56 <GetByteFromRx>
 8000e96:	4603      	mov	r3, r0
 8000e98:	b25a      	sxtb	r2, r3
 8000e9a:	4b5c      	ldr	r3, [pc, #368]	; (800100c <DecodeCmd+0x544>)
 8000e9c:	70da      	strb	r2, [r3, #3]
    	if(w.i8[0] > 100)
 8000e9e:	4b5b      	ldr	r3, [pc, #364]	; (800100c <DecodeCmd+0x544>)
 8000ea0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ea4:	2b64      	cmp	r3, #100	; 0x64
 8000ea6:	dd02      	ble.n	8000eae <DecodeCmd+0x3e6>
    		w.i8[0] = 90;
 8000ea8:	4b58      	ldr	r3, [pc, #352]	; (800100c <DecodeCmd+0x544>)
 8000eaa:	225a      	movs	r2, #90	; 0x5a
 8000eac:	701a      	strb	r2, [r3, #0]
    	if(w.i8[0] < -100)
 8000eae:	4b57      	ldr	r3, [pc, #348]	; (800100c <DecodeCmd+0x544>)
 8000eb0:	f993 3000 	ldrsb.w	r3, [r3]
 8000eb4:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000eb8:	da02      	bge.n	8000ec0 <DecodeCmd+0x3f8>
    		w.i8[0] = -90;
 8000eba:	4b54      	ldr	r3, [pc, #336]	; (800100c <DecodeCmd+0x544>)
 8000ebc:	22a6      	movs	r2, #166	; 0xa6
 8000ebe:	701a      	strb	r2, [r3, #0]
    	if(w.i8[1] > 100)
 8000ec0:	4b52      	ldr	r3, [pc, #328]	; (800100c <DecodeCmd+0x544>)
 8000ec2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ec6:	2b64      	cmp	r3, #100	; 0x64
 8000ec8:	dd02      	ble.n	8000ed0 <DecodeCmd+0x408>
    		w.i8[1] = 90;
 8000eca:	4b50      	ldr	r3, [pc, #320]	; (800100c <DecodeCmd+0x544>)
 8000ecc:	225a      	movs	r2, #90	; 0x5a
 8000ece:	705a      	strb	r2, [r3, #1]
    	if(w.i8[1] < -100)
 8000ed0:	4b4e      	ldr	r3, [pc, #312]	; (800100c <DecodeCmd+0x544>)
 8000ed2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ed6:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000eda:	da02      	bge.n	8000ee2 <DecodeCmd+0x41a>
    		w.i8[1] = -90;
 8000edc:	4b4b      	ldr	r3, [pc, #300]	; (800100c <DecodeCmd+0x544>)
 8000ede:	22a6      	movs	r2, #166	; 0xa6
 8000ee0:	705a      	strb	r2, [r3, #1]
    	w1.i16[0] = (w.i8[0]*100)/__HAL_TIM_GET_AUTORELOAD(&htim3);
 8000ee2:	4b4a      	ldr	r3, [pc, #296]	; (800100c <DecodeCmd+0x544>)
 8000ee4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2364      	movs	r3, #100	; 0x64
 8000eec:	fb02 f303 	mul.w	r3, r2, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b47      	ldr	r3, [pc, #284]	; (8001010 <DecodeCmd+0x548>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	4b45      	ldr	r3, [pc, #276]	; (8001014 <DecodeCmd+0x54c>)
 8000f00:	801a      	strh	r2, [r3, #0]
    	w1.i16[1] = (w.i8[1]*100)/__HAL_TIM_GET_AUTORELOAD(&htim3);
 8000f02:	4b42      	ldr	r3, [pc, #264]	; (800100c <DecodeCmd+0x544>)
 8000f04:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2364      	movs	r3, #100	; 0x64
 8000f0c:	fb02 f303 	mul.w	r3, r2, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b3f      	ldr	r3, [pc, #252]	; (8001010 <DecodeCmd+0x548>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	4b3d      	ldr	r3, [pc, #244]	; (8001014 <DecodeCmd+0x54c>)
 8000f20:	805a      	strh	r2, [r3, #2]
    	if(w.u16[1] > 100)
 8000f22:	4b3a      	ldr	r3, [pc, #232]	; (800100c <DecodeCmd+0x544>)
 8000f24:	885b      	ldrh	r3, [r3, #2]
 8000f26:	2b64      	cmp	r3, #100	; 0x64
 8000f28:	d902      	bls.n	8000f30 <DecodeCmd+0x468>
    		w.u16[1] = 100;
 8000f2a:	4b38      	ldr	r3, [pc, #224]	; (800100c <DecodeCmd+0x544>)
 8000f2c:	2264      	movs	r2, #100	; 0x64
 8000f2e:	805a      	strh	r2, [r3, #2]
    	timeOutTestMotors = w.u16[1];
 8000f30:	4b36      	ldr	r3, [pc, #216]	; (800100c <DecodeCmd+0x544>)
 8000f32:	885a      	ldrh	r2, [r3, #2]
 8000f34:	4b38      	ldr	r3, [pc, #224]	; (8001018 <DecodeCmd+0x550>)
 8000f36:	801a      	strh	r2, [r3, #0]
    	if(w1.i16[0] < 0){
 8000f38:	4b36      	ldr	r3, [pc, #216]	; (8001014 <DecodeCmd+0x54c>)
 8000f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da13      	bge.n	8000f6a <DecodeCmd+0x4a2>
    		w1.i16[0] *= -1;
 8000f42:	4b34      	ldr	r3, [pc, #208]	; (8001014 <DecodeCmd+0x54c>)
 8000f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	425b      	negs	r3, r3
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	4b30      	ldr	r3, [pc, #192]	; (8001014 <DecodeCmd+0x54c>)
 8000f52:	801a      	strh	r2, [r3, #0]
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, w1.i16[0]);
 8000f54:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <DecodeCmd+0x54c>)
 8000f56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <DecodeCmd+0x548>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	635a      	str	r2, [r3, #52]	; 0x34
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <DecodeCmd+0x548>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2200      	movs	r2, #0
 8000f66:	639a      	str	r2, [r3, #56]	; 0x38
 8000f68:	e009      	b.n	8000f7e <DecodeCmd+0x4b6>
    	}
    	else{
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <DecodeCmd+0x548>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, w1.i16[0]);
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <DecodeCmd+0x54c>)
 8000f74:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <DecodeCmd+0x548>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	639a      	str	r2, [r3, #56]	; 0x38
    	}
    	if(w1.i16[1] < 0){
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <DecodeCmd+0x54c>)
 8000f80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	da13      	bge.n	8000fb0 <DecodeCmd+0x4e8>
    		w1.i16[1] *= -1;
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <DecodeCmd+0x54c>)
 8000f8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	425b      	negs	r3, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <DecodeCmd+0x54c>)
 8000f98:	805a      	strh	r2, [r3, #2]
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, w1.i16[1]);
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <DecodeCmd+0x54c>)
 8000f9c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <DecodeCmd+0x548>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	63da      	str	r2, [r3, #60]	; 0x3c
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <DecodeCmd+0x548>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2200      	movs	r2, #0
 8000fac:	641a      	str	r2, [r3, #64]	; 0x40
 8000fae:	e009      	b.n	8000fc4 <DecodeCmd+0x4fc>
    	}
    	else{
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <DecodeCmd+0x548>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, w1.i16[1]);
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <DecodeCmd+0x54c>)
 8000fba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <DecodeCmd+0x548>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	641a      	str	r2, [r3, #64]	; 0x40
    	}
    	PutHeaderOnTx(TX, 0xA4, 5);
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	21a4      	movs	r1, #164	; 0xa4
 8000fc8:	6838      	ldr	r0, [r7, #0]
 8000fca:	f7ff fc5f 	bl	800088c <PutHeaderOnTx>
    	PutByteOnTx(TX, w.u8[0]);
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <DecodeCmd+0x544>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	6838      	ldr	r0, [r7, #0]
 8000fd6:	f7ff fc31 	bl	800083c <PutByteOnTx>
    	PutByteOnTx(TX, w.u8[1]);
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <DecodeCmd+0x544>)
 8000fdc:	785b      	ldrb	r3, [r3, #1]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	6838      	ldr	r0, [r7, #0]
 8000fe2:	f7ff fc2b 	bl	800083c <PutByteOnTx>
    	PutByteOnTx(TX, w.u8[2]);
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <DecodeCmd+0x544>)
 8000fe8:	789b      	ldrb	r3, [r3, #2]
 8000fea:	4619      	mov	r1, r3
 8000fec:	6838      	ldr	r0, [r7, #0]
 8000fee:	f7ff fc25 	bl	800083c <PutByteOnTx>
    	PutByteOnTx(TX, w.u8[3]);
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <DecodeCmd+0x544>)
 8000ff4:	78db      	ldrb	r3, [r3, #3]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6838      	ldr	r0, [r7, #0]
 8000ffa:	f7ff fc1f 	bl	800083c <PutByteOnTx>
    	PutByteOnTx(TX, TX->cks);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	7a1b      	ldrb	r3, [r3, #8]
 8001002:	4619      	mov	r1, r3
 8001004:	6838      	ldr	r0, [r7, #0]
 8001006:	f7ff fc19 	bl	800083c <PutByteOnTx>
    	break;
 800100a:	e047      	b.n	800109c <DecodeCmd+0x5d4>
 800100c:	20000300 	.word	0x20000300
 8001010:	200001a8 	.word	0x200001a8
 8001014:	20000304 	.word	0x20000304
 8001018:	200018ae 	.word	0x200018ae
    case 0xB0://SET transparent ESP01
   		ESP01DEBUG  = 1;
 800101c:	4a21      	ldr	r2, [pc, #132]	; (80010a4 <DecodeCmd+0x5dc>)
 800101e:	7813      	ldrb	r3, [r2, #0]
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	7013      	strb	r3, [r2, #0]
   		ledStatus = LEDESP01DBG;
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <DecodeCmd+0x5e0>)
 8001028:	4a20      	ldr	r2, [pc, #128]	; (80010ac <DecodeCmd+0x5e4>)
 800102a:	601a      	str	r2, [r3, #0]
   		countPlus = 0;
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <DecodeCmd+0x5e8>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
    	break;
 8001032:	e033      	b.n	800109c <DecodeCmd+0x5d4>
    case 0xB1:
    	break;
    case 0xF0://ALIVE
    	PutHeaderOnTx(TX, 0xF0, 2);
 8001034:	2202      	movs	r2, #2
 8001036:	21f0      	movs	r1, #240	; 0xf0
 8001038:	6838      	ldr	r0, [r7, #0]
 800103a:	f7ff fc27 	bl	800088c <PutHeaderOnTx>
        PutByteOnTx(TX, 0x0D);
 800103e:	210d      	movs	r1, #13
 8001040:	6838      	ldr	r0, [r7, #0]
 8001042:	f7ff fbfb 	bl	800083c <PutByteOnTx>
        PutByteOnTx(TX, TX->cks);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	7a1b      	ldrb	r3, [r3, #8]
 800104a:	4619      	mov	r1, r3
 800104c:	6838      	ldr	r0, [r7, #0]
 800104e:	f7ff fbf5 	bl	800083c <PutByteOnTx>
        break;
 8001052:	e023      	b.n	800109c <DecodeCmd+0x5d4>
    case 0xF1://FIRMWARE
        PutStrOntx(TX, "+&DBG");
 8001054:	4917      	ldr	r1, [pc, #92]	; (80010b4 <DecodeCmd+0x5ec>)
 8001056:	6838      	ldr	r0, [r7, #0]
 8001058:	f7ff fcc5 	bl	80009e6 <PutStrOntx>
        PutStrOntx(TX, FIRMWARE);
 800105c:	4916      	ldr	r1, [pc, #88]	; (80010b8 <DecodeCmd+0x5f0>)
 800105e:	6838      	ldr	r0, [r7, #0]
 8001060:	f7ff fcc1 	bl	80009e6 <PutStrOntx>
        PutByteOnTx(TX, '\n');
 8001064:	210a      	movs	r1, #10
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f7ff fbe8 	bl	800083c <PutByteOnTx>
        break;
 800106c:	e016      	b.n	800109c <DecodeCmd+0x5d4>
    default:
        PutHeaderOnTx(TX, RX->buf[RX->iData], 2);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	8952      	ldrh	r2, [r2, #10]
 8001076:	4413      	add	r3, r2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2202      	movs	r2, #2
 800107c:	4619      	mov	r1, r3
 800107e:	6838      	ldr	r0, [r7, #0]
 8001080:	f7ff fc04 	bl	800088c <PutHeaderOnTx>
        PutByteOnTx(TX, 0xFF);
 8001084:	21ff      	movs	r1, #255	; 0xff
 8001086:	6838      	ldr	r0, [r7, #0]
 8001088:	f7ff fbd8 	bl	800083c <PutByteOnTx>
        PutByteOnTx(TX, TX->cks);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	7a1b      	ldrb	r3, [r3, #8]
 8001090:	4619      	mov	r1, r3
 8001092:	6838      	ldr	r0, [r7, #0]
 8001094:	f7ff fbd2 	bl	800083c <PutByteOnTx>
        break;
 8001098:	e000      	b.n	800109c <DecodeCmd+0x5d4>
    	break;
 800109a:	bf00      	nop
    }

}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200002fc 	.word	0x200002fc
 80010a8:	200018a4 	.word	0x200018a4
 80010ac:	eaeaea00 	.word	0xeaeaea00
 80010b0:	200018b0 	.word	0x200018b0
 80010b4:	08008d84 	.word	0x08008d84
 80010b8:	08008d8c 	.word	0x08008d8c

080010bc <Do100ms>:

void Do100ms(){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	timeOut100ms = 10;
 80010c0:	4b21      	ldr	r3, [pc, #132]	; (8001148 <Do100ms+0x8c>)
 80010c2:	220a      	movs	r2, #10
 80010c4:	701a      	strb	r2, [r3, #0]

	if(maskLedStatus & ledStatus)
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <Do100ms+0x90>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <Do100ms+0x94>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <Do100ms+0x26>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2120      	movs	r1, #32
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f003 fc20 	bl	8004920 <HAL_GPIO_WritePin>
 80010e0:	e005      	b.n	80010ee <Do100ms+0x32>
	else
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2120      	movs	r1, #32
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ea:	f003 fc19 	bl	8004920 <HAL_GPIO_WritePin>
	maskLedStatus >>= 1;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <Do100ms+0x90>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	085b      	lsrs	r3, r3, #1
 80010f4:	4a15      	ldr	r2, [pc, #84]	; (800114c <Do100ms+0x90>)
 80010f6:	6013      	str	r3, [r2, #0]
	if(!maskLedStatus)
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <Do100ms+0x90>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d103      	bne.n	8001108 <Do100ms+0x4c>
		maskLedStatus = 0x80000000;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <Do100ms+0x90>)
 8001102:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001106:	601a      	str	r2, [r3, #0]

	if(timeOutTestMotors){
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <Do100ms+0x98>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d019      	beq.n	8001144 <Do100ms+0x88>
		timeOutTestMotors--;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <Do100ms+0x98>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <Do100ms+0x98>)
 800111a:	801a      	strh	r2, [r3, #0]
		if(!timeOutTestMotors){
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <Do100ms+0x98>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10f      	bne.n	8001144 <Do100ms+0x88>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <Do100ms+0x9c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2200      	movs	r2, #0
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <Do100ms+0x9c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2200      	movs	r2, #0
 8001132:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <Do100ms+0x9c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2200      	movs	r2, #0
 800113a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <Do100ms+0x9c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2200      	movs	r2, #0
 8001142:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200018ac 	.word	0x200018ac
 800114c:	200018a0 	.word	0x200018a0
 8001150:	200018a4 	.word	0x200018a4
 8001154:	200018ae 	.word	0x200018ae
 8001158:	200001a8 	.word	0x200001a8

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	flag1.byte = 0;
 8001160:	4b91      	ldr	r3, [pc, #580]	; (80013a8 <main+0x24c>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
	RX.buf = bufRX;
 8001166:	4b91      	ldr	r3, [pc, #580]	; (80013ac <main+0x250>)
 8001168:	4a91      	ldr	r2, [pc, #580]	; (80013b0 <main+0x254>)
 800116a:	601a      	str	r2, [r3, #0]
	RX.header = 0;
 800116c:	4b8f      	ldr	r3, [pc, #572]	; (80013ac <main+0x250>)
 800116e:	2200      	movs	r2, #0
 8001170:	711a      	strb	r2, [r3, #4]
	RX.ir = 0;
 8001172:	4b8e      	ldr	r3, [pc, #568]	; (80013ac <main+0x250>)
 8001174:	2200      	movs	r2, #0
 8001176:	811a      	strh	r2, [r3, #8]
	RX.iw = 0;
 8001178:	4b8c      	ldr	r3, [pc, #560]	; (80013ac <main+0x250>)
 800117a:	2200      	movs	r2, #0
 800117c:	80da      	strh	r2, [r3, #6]
	RX.maskSize = RXBUFSIZE - 1;
 800117e:	4b8b      	ldr	r3, [pc, #556]	; (80013ac <main+0x250>)
 8001180:	22ff      	movs	r2, #255	; 0xff
 8001182:	821a      	strh	r2, [r3, #16]

	TX.buf = bufTX;
 8001184:	4b8b      	ldr	r3, [pc, #556]	; (80013b4 <main+0x258>)
 8001186:	4a8c      	ldr	r2, [pc, #560]	; (80013b8 <main+0x25c>)
 8001188:	601a      	str	r2, [r3, #0]
	TX.ir = 0;
 800118a:	4b8a      	ldr	r3, [pc, #552]	; (80013b4 <main+0x258>)
 800118c:	2200      	movs	r2, #0
 800118e:	80da      	strh	r2, [r3, #6]
	TX.iw = 0;
 8001190:	4b88      	ldr	r3, [pc, #544]	; (80013b4 <main+0x258>)
 8001192:	2200      	movs	r2, #0
 8001194:	809a      	strh	r2, [r3, #4]
	TX.maskSize = TXBUFSIZE - 1;
 8001196:	4b87      	ldr	r3, [pc, #540]	; (80013b4 <main+0x258>)
 8001198:	22ff      	movs	r2, #255	; 0xff
 800119a:	819a      	strh	r2, [r3, #12]

	RXESP01.buf = bufRXESP01;
 800119c:	4b87      	ldr	r3, [pc, #540]	; (80013bc <main+0x260>)
 800119e:	4a88      	ldr	r2, [pc, #544]	; (80013c0 <main+0x264>)
 80011a0:	601a      	str	r2, [r3, #0]
	RXESP01.header = 0;
 80011a2:	4b86      	ldr	r3, [pc, #536]	; (80013bc <main+0x260>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	711a      	strb	r2, [r3, #4]
	RXESP01.ir = 0;
 80011a8:	4b84      	ldr	r3, [pc, #528]	; (80013bc <main+0x260>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	811a      	strh	r2, [r3, #8]
	RXESP01.iw = 0;
 80011ae:	4b83      	ldr	r3, [pc, #524]	; (80013bc <main+0x260>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	80da      	strh	r2, [r3, #6]
	RXESP01.maskSize = RXESP01BUFSIZE - 1;
 80011b4:	4b81      	ldr	r3, [pc, #516]	; (80013bc <main+0x260>)
 80011b6:	22ff      	movs	r2, #255	; 0xff
 80011b8:	821a      	strh	r2, [r3, #16]

	TXESP01.buf = bufTXESP01;
 80011ba:	4b82      	ldr	r3, [pc, #520]	; (80013c4 <main+0x268>)
 80011bc:	4a82      	ldr	r2, [pc, #520]	; (80013c8 <main+0x26c>)
 80011be:	601a      	str	r2, [r3, #0]
	TXESP01.ir = 0;
 80011c0:	4b80      	ldr	r3, [pc, #512]	; (80013c4 <main+0x268>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	80da      	strh	r2, [r3, #6]
	TXESP01.iw = 0;
 80011c6:	4b7f      	ldr	r3, [pc, #508]	; (80013c4 <main+0x268>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	809a      	strh	r2, [r3, #4]
	TXESP01.maskSize = TXESP01BUFSIZE - 1;
 80011cc:	4b7d      	ldr	r3, [pc, #500]	; (80013c4 <main+0x268>)
 80011ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80011d2:	819a      	strh	r2, [r3, #12]

	timeOut100ms = 10;
 80011d4:	4b7d      	ldr	r3, [pc, #500]	; (80013cc <main+0x270>)
 80011d6:	220a      	movs	r2, #10
 80011d8:	701a      	strb	r2, [r3, #0]
	ledStatus = LEDIDLE;
 80011da:	4b7d      	ldr	r3, [pc, #500]	; (80013d0 <main+0x274>)
 80011dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011e0:	601a      	str	r2, [r3, #0]

	indexADCData = 0;
 80011e2:	4b7c      	ldr	r3, [pc, #496]	; (80013d4 <main+0x278>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
	indexADCData10ms -= 40;
 80011e8:	4b7b      	ldr	r3, [pc, #492]	; (80013d8 <main+0x27c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3b28      	subs	r3, #40	; 0x28
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b79      	ldr	r3, [pc, #484]	; (80013d8 <main+0x27c>)
 80011f2:	701a      	strb	r2, [r3, #0]
	indexADCData10ms &= (ADCDATASIZE - 1);
 80011f4:	4b78      	ldr	r3, [pc, #480]	; (80013d8 <main+0x27c>)
 80011f6:	781a      	ldrb	r2, [r3, #0]
 80011f8:	4b77      	ldr	r3, [pc, #476]	; (80013d8 <main+0x27c>)
 80011fa:	701a      	strb	r2, [r3, #0]

	timeOutTestMotors = 0;
 80011fc:	4b77      	ldr	r3, [pc, #476]	; (80013dc <main+0x280>)
 80011fe:	2200      	movs	r2, #0
 8001200:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001202:	f001 f8cf 	bl	80023a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001206:	f000 fa1d 	bl	8001644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120a:	f000 fd65 	bl	8001cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 800120e:	f000 fd45 	bl	8001c9c <MX_DMA_Init>
  MX_ADC1_Init();
 8001212:	f000 fa83 	bl	800171c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001216:	f000 fb1f 	bl	8001858 <MX_ADC2_Init>
  MX_ADC3_Init();
 800121a:	f000 fb9f 	bl	800195c <MX_ADC3_Init>
  MX_TIM3_Init();
 800121e:	f000 fc61 	bl	8001ae4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001222:	f000 fcdb 	bl	8001bdc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001226:	f000 fd09 	bl	8001c3c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800122a:	f000 fc07 	bl	8001a3c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  indexADCData = 0;
 800122e:	4b69      	ldr	r3, [pc, #420]	; (80013d4 <main+0x278>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim1);
 8001234:	486a      	ldr	r0, [pc, #424]	; (80013e0 <main+0x284>)
 8001236:	f005 f8f3 	bl	8006420 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &RX.buf[RX.iw], 1);
 800123a:	4b5c      	ldr	r3, [pc, #368]	; (80013ac <main+0x250>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a5b      	ldr	r2, [pc, #364]	; (80013ac <main+0x250>)
 8001240:	88d2      	ldrh	r2, [r2, #6]
 8001242:	4413      	add	r3, r2
 8001244:	2201      	movs	r2, #1
 8001246:	4619      	mov	r1, r3
 8001248:	4866      	ldr	r0, [pc, #408]	; (80013e4 <main+0x288>)
 800124a:	f006 fbdb 	bl	8007a04 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &RXESP01.buf[RXESP01.iw], 1);
 800124e:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <main+0x260>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a5a      	ldr	r2, [pc, #360]	; (80013bc <main+0x260>)
 8001254:	88d2      	ldrh	r2, [r2, #6]
 8001256:	4413      	add	r3, r2
 8001258:	2201      	movs	r2, #1
 800125a:	4619      	mov	r1, r3
 800125c:	4862      	ldr	r0, [pc, #392]	; (80013e8 <main+0x28c>)
 800125e:	f006 fbd1 	bl	8007a04 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start(&htim3);
 8001262:	4862      	ldr	r0, [pc, #392]	; (80013ec <main+0x290>)
 8001264:	f005 f874 	bl	8006350 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001268:	2100      	movs	r1, #0
 800126a:	4860      	ldr	r0, [pc, #384]	; (80013ec <main+0x290>)
 800126c:	f005 f9a0 	bl	80065b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001270:	2104      	movs	r1, #4
 8001272:	485e      	ldr	r0, [pc, #376]	; (80013ec <main+0x290>)
 8001274:	f005 f99c 	bl	80065b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001278:	2108      	movs	r1, #8
 800127a:	485c      	ldr	r0, [pc, #368]	; (80013ec <main+0x290>)
 800127c:	f005 f998 	bl	80065b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001280:	210c      	movs	r1, #12
 8001282:	485a      	ldr	r0, [pc, #360]	; (80013ec <main+0x290>)
 8001284:	f005 f994 	bl	80065b0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001288:	4b58      	ldr	r3, [pc, #352]	; (80013ec <main+0x290>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2200      	movs	r2, #0
 800128e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001290:	4b56      	ldr	r3, [pc, #344]	; (80013ec <main+0x290>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2200      	movs	r2, #0
 8001296:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001298:	4b54      	ldr	r3, [pc, #336]	; (80013ec <main+0x290>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80012a0:	4b52      	ldr	r3, [pc, #328]	; (80013ec <main+0x290>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(CH_ENA_GPIO_Port, CH_ENA_Pin, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ae:	4850      	ldr	r0, [pc, #320]	; (80013f0 <main+0x294>)
 80012b0:	f003 fb36 	bl	8004920 <HAL_GPIO_WritePin>

  lastTickValue = HAL_GetTick();
 80012b4:	f001 f8d0 	bl	8002458 <HAL_GetTick>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a4e      	ldr	r2, [pc, #312]	; (80013f4 <main+0x298>)
 80012bc:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!timeOut100ms)
 80012be:	4b43      	ldr	r3, [pc, #268]	; (80013cc <main+0x270>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <main+0x16e>
		  Do100ms();
 80012c6:	f7ff fef9 	bl	80010bc <Do100ms>

	  if((HAL_GetTick()-lastTickValue) >= 10){
 80012ca:	f001 f8c5 	bl	8002458 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b48      	ldr	r3, [pc, #288]	; (80013f4 <main+0x298>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b09      	cmp	r3, #9
 80012d8:	d930      	bls.n	800133c <main+0x1e0>
		  lastTickValue = HAL_GetTick();
 80012da:	f001 f8bd 	bl	8002458 <HAL_GetTick>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a44      	ldr	r2, [pc, #272]	; (80013f4 <main+0x298>)
 80012e2:	6013      	str	r3, [r2, #0]

		  if(RX.header){
 80012e4:	4b31      	ldr	r3, [pc, #196]	; (80013ac <main+0x250>)
 80012e6:	791b      	ldrb	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00c      	beq.n	8001306 <main+0x1aa>
			  RX.timeout--;
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <main+0x250>)
 80012ee:	7b1b      	ldrb	r3, [r3, #12]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <main+0x250>)
 80012f6:	731a      	strb	r2, [r3, #12]
			  if(!RX.timeout)
 80012f8:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <main+0x250>)
 80012fa:	7b1b      	ldrb	r3, [r3, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <main+0x1aa>
				  RX.header = 0;
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <main+0x250>)
 8001302:	2200      	movs	r2, #0
 8001304:	711a      	strb	r2, [r3, #4]
		  }

		  if(timeOut100ms)
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <main+0x270>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <main+0x1be>
			  timeOut100ms--;
 800130e:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <main+0x270>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	3b01      	subs	r3, #1
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <main+0x270>)
 8001318:	701a      	strb	r2, [r3, #0]

		  if(timeOutPlus){
 800131a:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <main+0x29c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00c      	beq.n	800133c <main+0x1e0>
			  timeOutPlus--;
 8001322:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <main+0x29c>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	3b01      	subs	r3, #1
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b33      	ldr	r3, [pc, #204]	; (80013f8 <main+0x29c>)
 800132c:	701a      	strb	r2, [r3, #0]
			  if(!timeOutPlus)
 800132e:	4b32      	ldr	r3, [pc, #200]	; (80013f8 <main+0x29c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <main+0x1e0>
				  countPlus = 0;
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <main+0x2a0>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(RX.ISCMD)
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <main+0x250>)
 800133e:	7c9b      	ldrb	r3, [r3, #18]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <main+0x1f0>
		  DecodeCmd(&RX, &TX);
 8001344:	491b      	ldr	r1, [pc, #108]	; (80013b4 <main+0x258>)
 8001346:	4819      	ldr	r0, [pc, #100]	; (80013ac <main+0x250>)
 8001348:	f7ff fbbe 	bl	8000ac8 <DecodeCmd>

	  if(RX.ir != RX.iw)
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <main+0x250>)
 800134e:	891a      	ldrh	r2, [r3, #8]
 8001350:	4b16      	ldr	r3, [pc, #88]	; (80013ac <main+0x250>)
 8001352:	88db      	ldrh	r3, [r3, #6]
 8001354:	429a      	cmp	r2, r3
 8001356:	d002      	beq.n	800135e <main+0x202>
		  DecodeHeader(&RX);
 8001358:	4814      	ldr	r0, [pc, #80]	; (80013ac <main+0x250>)
 800135a:	f7ff f93b 	bl	80005d4 <DecodeHeader>

	  if(ANALOGREADY){
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <main+0x24c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 810d 	beq.w	8001588 <main+0x42c>
		  ANALOGREADY = 0;
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <main+0x24c>)
 8001370:	7813      	ldrb	r3, [r2, #0]
 8001372:	f36f 0341 	bfc	r3, #1, #1
 8001376:	7013      	strb	r3, [r2, #0]
		  if(CONTAVERAGE){
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <main+0x24c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d068      	beq.n	8001458 <main+0x2fc>
			  TX.cks = 0;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <main+0x258>)
 8001388:	2200      	movs	r2, #0
 800138a:	721a      	strb	r2, [r3, #8]
			  PutHeaderOnTx(&TX, 0xA2, 16+2);
 800138c:	2212      	movs	r2, #18
 800138e:	21a2      	movs	r1, #162	; 0xa2
 8001390:	4808      	ldr	r0, [pc, #32]	; (80013b4 <main+0x258>)
 8001392:	f7ff fa7b 	bl	800088c <PutHeaderOnTx>
			  PutByteOnTx(&TX, 0x0A);
 8001396:	210a      	movs	r1, #10
 8001398:	4806      	ldr	r0, [pc, #24]	; (80013b4 <main+0x258>)
 800139a:	f7ff fa4f 	bl	800083c <PutByteOnTx>
			  for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <main+0x2a4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	709a      	strb	r2, [r3, #2]
 80013a4:	e04d      	b.n	8001442 <main+0x2e6>
 80013a6:	bf00      	nop
 80013a8:	200002fc 	.word	0x200002fc
 80013ac:	20000308 	.word	0x20000308
 80013b0:	20000350 	.word	0x20000350
 80013b4:	20000330 	.word	0x20000330
 80013b8:	20000550 	.word	0x20000550
 80013bc:	2000031c 	.word	0x2000031c
 80013c0:	20000450 	.word	0x20000450
 80013c4:	20000340 	.word	0x20000340
 80013c8:	20000650 	.word	0x20000650
 80013cc:	200018ac 	.word	0x200018ac
 80013d0:	200018a4 	.word	0x200018a4
 80013d4:	20001850 	.word	0x20001850
 80013d8:	20001851 	.word	0x20001851
 80013dc:	200018ae 	.word	0x200018ae
 80013e0:	2000015c 	.word	0x2000015c
 80013e4:	200001f4 	.word	0x200001f4
 80013e8:	20000278 	.word	0x20000278
 80013ec:	200001a8 	.word	0x200001a8
 80013f0:	48000800 	.word	0x48000800
 80013f4:	200018a8 	.word	0x200018a8
 80013f8:	200018b1 	.word	0x200018b1
 80013fc:	200018b0 	.word	0x200018b0
 8001400:	20000300 	.word	0x20000300
				  w.u16[0] = sumADCDataLock[w.u8[2]]/40;
 8001404:	4b85      	ldr	r3, [pc, #532]	; (800161c <main+0x4c0>)
 8001406:	789b      	ldrb	r3, [r3, #2]
 8001408:	461a      	mov	r2, r3
 800140a:	4b85      	ldr	r3, [pc, #532]	; (8001620 <main+0x4c4>)
 800140c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001410:	4a84      	ldr	r2, [pc, #528]	; (8001624 <main+0x4c8>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	b29a      	uxth	r2, r3
 800141a:	4b80      	ldr	r3, [pc, #512]	; (800161c <main+0x4c0>)
 800141c:	801a      	strh	r2, [r3, #0]
				  PutByteOnTx(&TX, w.u8[0]);
 800141e:	4b7f      	ldr	r3, [pc, #508]	; (800161c <main+0x4c0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	4880      	ldr	r0, [pc, #512]	; (8001628 <main+0x4cc>)
 8001426:	f7ff fa09 	bl	800083c <PutByteOnTx>
				  PutByteOnTx(&TX, w.u8[1]);
 800142a:	4b7c      	ldr	r3, [pc, #496]	; (800161c <main+0x4c0>)
 800142c:	785b      	ldrb	r3, [r3, #1]
 800142e:	4619      	mov	r1, r3
 8001430:	487d      	ldr	r0, [pc, #500]	; (8001628 <main+0x4cc>)
 8001432:	f7ff fa03 	bl	800083c <PutByteOnTx>
			  for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 8001436:	4b79      	ldr	r3, [pc, #484]	; (800161c <main+0x4c0>)
 8001438:	789b      	ldrb	r3, [r3, #2]
 800143a:	3301      	adds	r3, #1
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4b77      	ldr	r3, [pc, #476]	; (800161c <main+0x4c0>)
 8001440:	709a      	strb	r2, [r3, #2]
 8001442:	4b76      	ldr	r3, [pc, #472]	; (800161c <main+0x4c0>)
 8001444:	789b      	ldrb	r3, [r3, #2]
 8001446:	2b07      	cmp	r3, #7
 8001448:	d9dc      	bls.n	8001404 <main+0x2a8>
			  }
			  PutByteOnTx(&TX, TX.cks);
 800144a:	4b77      	ldr	r3, [pc, #476]	; (8001628 <main+0x4cc>)
 800144c:	7a1b      	ldrb	r3, [r3, #8]
 800144e:	4619      	mov	r1, r3
 8001450:	4875      	ldr	r0, [pc, #468]	; (8001628 <main+0x4cc>)
 8001452:	f7ff f9f3 	bl	800083c <PutByteOnTx>
 8001456:	e097      	b.n	8001588 <main+0x42c>
		  }
		  else{
			  TX.cks = 0;
 8001458:	4b73      	ldr	r3, [pc, #460]	; (8001628 <main+0x4cc>)
 800145a:	2200      	movs	r2, #0
 800145c:	721a      	strb	r2, [r3, #8]
			  w.u8[3] = iADCDataReady;
 800145e:	4b73      	ldr	r3, [pc, #460]	; (800162c <main+0x4d0>)
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	4b6e      	ldr	r3, [pc, #440]	; (800161c <main+0x4c0>)
 8001464:	70da      	strb	r2, [r3, #3]
			  w.u8[3] -= (n10msData*40);
 8001466:	4b6d      	ldr	r3, [pc, #436]	; (800161c <main+0x4c0>)
 8001468:	78da      	ldrb	r2, [r3, #3]
 800146a:	4b71      	ldr	r3, [pc, #452]	; (8001630 <main+0x4d4>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4619      	mov	r1, r3
 8001470:	0049      	lsls	r1, r1, #1
 8001472:	440b      	add	r3, r1
 8001474:	4619      	mov	r1, r3
 8001476:	00c8      	lsls	r0, r1, #3
 8001478:	4619      	mov	r1, r3
 800147a:	4603      	mov	r3, r0
 800147c:	440b      	add	r3, r1
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4413      	add	r3, r2
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b65      	ldr	r3, [pc, #404]	; (800161c <main+0x4c0>)
 8001488:	70da      	strb	r2, [r3, #3]
			  w.u8[3] &= (ADCDATASIZE - 1);
 800148a:	4b64      	ldr	r3, [pc, #400]	; (800161c <main+0x4c0>)
 800148c:	78da      	ldrb	r2, [r3, #3]
 800148e:	4b63      	ldr	r3, [pc, #396]	; (800161c <main+0x4c0>)
 8001490:	70da      	strb	r2, [r3, #3]
			  w.u8[2] = n10msData*5 + 1;
 8001492:	4b67      	ldr	r3, [pc, #412]	; (8001630 <main+0x4d4>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	4413      	add	r3, r2
 800149c:	b2db      	uxtb	r3, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b5e      	ldr	r3, [pc, #376]	; (800161c <main+0x4c0>)
 80014a4:	709a      	strb	r2, [r3, #2]
			  w.u8[2] *= 16;
 80014a6:	4b5d      	ldr	r3, [pc, #372]	; (800161c <main+0x4c0>)
 80014a8:	789b      	ldrb	r3, [r3, #2]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b5b      	ldr	r3, [pc, #364]	; (800161c <main+0x4c0>)
 80014b0:	709a      	strb	r2, [r3, #2]
			  PutHeaderOnTx(&TX, 0xA1, w.u8[2]+3);
 80014b2:	4b5a      	ldr	r3, [pc, #360]	; (800161c <main+0x4c0>)
 80014b4:	789b      	ldrb	r3, [r3, #2]
 80014b6:	3303      	adds	r3, #3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	21a1      	movs	r1, #161	; 0xa1
 80014be:	485a      	ldr	r0, [pc, #360]	; (8001628 <main+0x4cc>)
 80014c0:	f7ff f9e4 	bl	800088c <PutHeaderOnTx>
			  PutByteOnTx(&TX, 0x0A);
 80014c4:	210a      	movs	r1, #10
 80014c6:	4858      	ldr	r0, [pc, #352]	; (8001628 <main+0x4cc>)
 80014c8:	f7ff f9b8 	bl	800083c <PutByteOnTx>
			  w.u8[2] /= 16;
 80014cc:	4b53      	ldr	r3, [pc, #332]	; (800161c <main+0x4c0>)
 80014ce:	789b      	ldrb	r3, [r3, #2]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b51      	ldr	r3, [pc, #324]	; (800161c <main+0x4c0>)
 80014d6:	709a      	strb	r2, [r3, #2]
			  w.u8[2]--;
 80014d8:	4b50      	ldr	r3, [pc, #320]	; (800161c <main+0x4c0>)
 80014da:	789b      	ldrb	r3, [r3, #2]
 80014dc:	3b01      	subs	r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b4e      	ldr	r3, [pc, #312]	; (800161c <main+0x4c0>)
 80014e2:	709a      	strb	r2, [r3, #2]
			  PutByteOnTx(&TX, w.u8[2]);
 80014e4:	4b4d      	ldr	r3, [pc, #308]	; (800161c <main+0x4c0>)
 80014e6:	789b      	ldrb	r3, [r3, #2]
 80014e8:	4619      	mov	r1, r3
 80014ea:	484f      	ldr	r0, [pc, #316]	; (8001628 <main+0x4cc>)
 80014ec:	f7ff f9a6 	bl	800083c <PutByteOnTx>
			  while(w.u8[2]){
 80014f0:	e019      	b.n	8001526 <main+0x3ca>
				  PutBufOnTx(&TX, (uint8_t *)&ADCData[w.u8[3]], 16);
 80014f2:	4b4a      	ldr	r3, [pc, #296]	; (800161c <main+0x4c0>)
 80014f4:	78db      	ldrb	r3, [r3, #3]
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	4a4e      	ldr	r2, [pc, #312]	; (8001634 <main+0x4d8>)
 80014fa:	4413      	add	r3, r2
 80014fc:	2210      	movs	r2, #16
 80014fe:	4619      	mov	r1, r3
 8001500:	4849      	ldr	r0, [pc, #292]	; (8001628 <main+0x4cc>)
 8001502:	f7ff f963 	bl	80007cc <PutBufOnTx>
				  w.u8[3] += 8;
 8001506:	4b45      	ldr	r3, [pc, #276]	; (800161c <main+0x4c0>)
 8001508:	78db      	ldrb	r3, [r3, #3]
 800150a:	3308      	adds	r3, #8
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4b43      	ldr	r3, [pc, #268]	; (800161c <main+0x4c0>)
 8001510:	70da      	strb	r2, [r3, #3]
				  w.u8[3] &= (ADCDATASIZE-1);
 8001512:	4b42      	ldr	r3, [pc, #264]	; (800161c <main+0x4c0>)
 8001514:	78da      	ldrb	r2, [r3, #3]
 8001516:	4b41      	ldr	r3, [pc, #260]	; (800161c <main+0x4c0>)
 8001518:	70da      	strb	r2, [r3, #3]
				  w.u8[2]--;
 800151a:	4b40      	ldr	r3, [pc, #256]	; (800161c <main+0x4c0>)
 800151c:	789b      	ldrb	r3, [r3, #2]
 800151e:	3b01      	subs	r3, #1
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b3e      	ldr	r3, [pc, #248]	; (800161c <main+0x4c0>)
 8001524:	709a      	strb	r2, [r3, #2]
			  while(w.u8[2]){
 8001526:	4b3d      	ldr	r3, [pc, #244]	; (800161c <main+0x4c0>)
 8001528:	789b      	ldrb	r3, [r3, #2]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1e1      	bne.n	80014f2 <main+0x396>
			  }
			  for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 800152e:	4b3b      	ldr	r3, [pc, #236]	; (800161c <main+0x4c0>)
 8001530:	2200      	movs	r2, #0
 8001532:	709a      	strb	r2, [r3, #2]
 8001534:	e01e      	b.n	8001574 <main+0x418>
				  w.u16[0] = sumADCDataLock[w.u8[2]]/40;
 8001536:	4b39      	ldr	r3, [pc, #228]	; (800161c <main+0x4c0>)
 8001538:	789b      	ldrb	r3, [r3, #2]
 800153a:	461a      	mov	r2, r3
 800153c:	4b38      	ldr	r3, [pc, #224]	; (8001620 <main+0x4c4>)
 800153e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001542:	4a38      	ldr	r2, [pc, #224]	; (8001624 <main+0x4c8>)
 8001544:	fba2 2303 	umull	r2, r3, r2, r3
 8001548:	095b      	lsrs	r3, r3, #5
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b33      	ldr	r3, [pc, #204]	; (800161c <main+0x4c0>)
 800154e:	801a      	strh	r2, [r3, #0]
				  PutByteOnTx(&TX, w.u8[0]);
 8001550:	4b32      	ldr	r3, [pc, #200]	; (800161c <main+0x4c0>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	4834      	ldr	r0, [pc, #208]	; (8001628 <main+0x4cc>)
 8001558:	f7ff f970 	bl	800083c <PutByteOnTx>
				  PutByteOnTx(&TX, w.u8[1]);
 800155c:	4b2f      	ldr	r3, [pc, #188]	; (800161c <main+0x4c0>)
 800155e:	785b      	ldrb	r3, [r3, #1]
 8001560:	4619      	mov	r1, r3
 8001562:	4831      	ldr	r0, [pc, #196]	; (8001628 <main+0x4cc>)
 8001564:	f7ff f96a 	bl	800083c <PutByteOnTx>
			  for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 8001568:	4b2c      	ldr	r3, [pc, #176]	; (800161c <main+0x4c0>)
 800156a:	789b      	ldrb	r3, [r3, #2]
 800156c:	3301      	adds	r3, #1
 800156e:	b2da      	uxtb	r2, r3
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <main+0x4c0>)
 8001572:	709a      	strb	r2, [r3, #2]
 8001574:	4b29      	ldr	r3, [pc, #164]	; (800161c <main+0x4c0>)
 8001576:	789b      	ldrb	r3, [r3, #2]
 8001578:	2b07      	cmp	r3, #7
 800157a:	d9dc      	bls.n	8001536 <main+0x3da>
			  }
			  PutByteOnTx(&TX, TX.cks);
 800157c:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <main+0x4cc>)
 800157e:	7a1b      	ldrb	r3, [r3, #8]
 8001580:	4619      	mov	r1, r3
 8001582:	4829      	ldr	r0, [pc, #164]	; (8001628 <main+0x4cc>)
 8001584:	f7ff f95a 	bl	800083c <PutByteOnTx>
		  }
	  }

	  if(TX.ir != TX.iw){
 8001588:	4b27      	ldr	r3, [pc, #156]	; (8001628 <main+0x4cc>)
 800158a:	88da      	ldrh	r2, [r3, #6]
 800158c:	4b26      	ldr	r3, [pc, #152]	; (8001628 <main+0x4cc>)
 800158e:	889b      	ldrh	r3, [r3, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	d01c      	beq.n	80015ce <main+0x472>
		  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE)){
 8001594:	4b28      	ldr	r3, [pc, #160]	; (8001638 <main+0x4dc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159e:	2b80      	cmp	r3, #128	; 0x80
 80015a0:	d115      	bne.n	80015ce <main+0x472>
			  huart2.Instance->TDR = TX.buf[TX.ir++];
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <main+0x4cc>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <main+0x4cc>)
 80015a8:	88db      	ldrh	r3, [r3, #6]
 80015aa:	1c59      	adds	r1, r3, #1
 80015ac:	b288      	uxth	r0, r1
 80015ae:	491e      	ldr	r1, [pc, #120]	; (8001628 <main+0x4cc>)
 80015b0:	80c8      	strh	r0, [r1, #6]
 80015b2:	4413      	add	r3, r2
 80015b4:	781a      	ldrb	r2, [r3, #0]
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <main+0x4dc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b292      	uxth	r2, r2
 80015bc:	851a      	strh	r2, [r3, #40]	; 0x28
			  TX.ir &= TX.maskSize;
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <main+0x4cc>)
 80015c0:	88da      	ldrh	r2, [r3, #6]
 80015c2:	4b19      	ldr	r3, [pc, #100]	; (8001628 <main+0x4cc>)
 80015c4:	899b      	ldrh	r3, [r3, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <main+0x4cc>)
 80015cc:	80da      	strh	r2, [r3, #6]
		  }
	  }

	  if(TXESP01.ir != TXESP01.iw){
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <main+0x4e0>)
 80015d0:	88da      	ldrh	r2, [r3, #6]
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <main+0x4e0>)
 80015d4:	889b      	ldrh	r3, [r3, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	f43f ae71 	beq.w	80012be <main+0x162>
		  if(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE)){
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <main+0x4e4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e6:	2b80      	cmp	r3, #128	; 0x80
 80015e8:	f47f ae69 	bne.w	80012be <main+0x162>
			  huart3.Instance->TDR = TXESP01.buf[TXESP01.ir++];
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <main+0x4e0>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <main+0x4e0>)
 80015f2:	88db      	ldrh	r3, [r3, #6]
 80015f4:	1c59      	adds	r1, r3, #1
 80015f6:	b288      	uxth	r0, r1
 80015f8:	4910      	ldr	r1, [pc, #64]	; (800163c <main+0x4e0>)
 80015fa:	80c8      	strh	r0, [r1, #6]
 80015fc:	4413      	add	r3, r2
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <main+0x4e4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	b292      	uxth	r2, r2
 8001606:	851a      	strh	r2, [r3, #40]	; 0x28
			  TXESP01.ir &= TXESP01.maskSize;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <main+0x4e0>)
 800160a:	88da      	ldrh	r2, [r3, #6]
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <main+0x4e0>)
 800160e:	899b      	ldrh	r3, [r3, #12]
 8001610:	4013      	ands	r3, r2
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <main+0x4e0>)
 8001616:	80da      	strh	r2, [r3, #6]
	  if(!timeOut100ms)
 8001618:	e651      	b.n	80012be <main+0x162>
 800161a:	bf00      	nop
 800161c:	20000300 	.word	0x20000300
 8001620:	20001878 	.word	0x20001878
 8001624:	cccccccd 	.word	0xcccccccd
 8001628:	20000330 	.word	0x20000330
 800162c:	20001852 	.word	0x20001852
 8001630:	2000189c 	.word	0x2000189c
 8001634:	20000850 	.word	0x20000850
 8001638:	200001f4 	.word	0x200001f4
 800163c:	20000340 	.word	0x20000340
 8001640:	20000278 	.word	0x20000278

08001644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0a6      	sub	sp, #152	; 0x98
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800164e:	2228      	movs	r2, #40	; 0x28
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f007 fb82 	bl	8008d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001658:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2258      	movs	r2, #88	; 0x58
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f007 fb74 	bl	8008d5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001674:	2301      	movs	r3, #1
 8001676:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800167c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800167e:	2301      	movs	r3, #1
 8001680:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001690:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001694:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 f954 	bl	8004950 <HAL_RCC_OscConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80016ae:	f000 fba1 	bl	8001df4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b2:	230f      	movs	r3, #15
 80016b4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b6:	2302      	movs	r3, #2
 80016b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016cc:	2102      	movs	r1, #2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 f992 	bl	80059f8 <HAL_RCC_ClockConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016da:	f000 fb8b 	bl	8001df4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <SystemClock_Config+0xd4>)
 80016e0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC34|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV6;
 80016ea:	f44f 7398 	mov.w	r3, #304	; 0x130
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV6;
 80016f0:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	4618      	mov	r0, r3
 8001702:	f004 fbaf 	bl	8005e64 <HAL_RCCEx_PeriphCLKConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800170c:	f000 fb72 	bl	8001df4 <Error_Handler>
  }
}
 8001710:	bf00      	nop
 8001712:	3798      	adds	r7, #152	; 0x98
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	00201186 	.word	0x00201186

0800171c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
 800173c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800173e:	4b45      	ldr	r3, [pc, #276]	; (8001854 <MX_ADC1_Init+0x138>)
 8001740:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001744:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001746:	4b43      	ldr	r3, [pc, #268]	; (8001854 <MX_ADC1_Init+0x138>)
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800174c:	4b41      	ldr	r3, [pc, #260]	; (8001854 <MX_ADC1_Init+0x138>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001752:	4b40      	ldr	r3, [pc, #256]	; (8001854 <MX_ADC1_Init+0x138>)
 8001754:	2201      	movs	r2, #1
 8001756:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001758:	4b3e      	ldr	r3, [pc, #248]	; (8001854 <MX_ADC1_Init+0x138>)
 800175a:	2200      	movs	r2, #0
 800175c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800175e:	4b3d      	ldr	r3, [pc, #244]	; (8001854 <MX_ADC1_Init+0x138>)
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001766:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <MX_ADC1_Init+0x138>)
 8001768:	2200      	movs	r2, #0
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800176c:	4b39      	ldr	r3, [pc, #228]	; (8001854 <MX_ADC1_Init+0x138>)
 800176e:	2201      	movs	r2, #1
 8001770:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001772:	4b38      	ldr	r3, [pc, #224]	; (8001854 <MX_ADC1_Init+0x138>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001778:	4b36      	ldr	r3, [pc, #216]	; (8001854 <MX_ADC1_Init+0x138>)
 800177a:	2204      	movs	r2, #4
 800177c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800177e:	4b35      	ldr	r3, [pc, #212]	; (8001854 <MX_ADC1_Init+0x138>)
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001786:	4b33      	ldr	r3, [pc, #204]	; (8001854 <MX_ADC1_Init+0x138>)
 8001788:	2208      	movs	r2, #8
 800178a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800178c:	4b31      	ldr	r3, [pc, #196]	; (8001854 <MX_ADC1_Init+0x138>)
 800178e:	2200      	movs	r2, #0
 8001790:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001792:	4b30      	ldr	r3, [pc, #192]	; (8001854 <MX_ADC1_Init+0x138>)
 8001794:	2200      	movs	r2, #0
 8001796:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001798:	482e      	ldr	r0, [pc, #184]	; (8001854 <MX_ADC1_Init+0x138>)
 800179a:	f000 fe87 	bl	80024ac <HAL_ADC_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80017a4:	f000 fb26 	bl	8001df4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80017a8:	2306      	movs	r3, #6
 80017aa:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 80017ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017b0:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	4619      	mov	r1, r3
 80017bc:	4825      	ldr	r0, [pc, #148]	; (8001854 <MX_ADC1_Init+0x138>)
 80017be:	f002 f9c7 	bl	8003b50 <HAL_ADCEx_MultiModeConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80017c8:	f000 fb14 	bl	8001df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017d0:	2301      	movs	r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	4619      	mov	r1, r3
 80017e8:	481a      	ldr	r0, [pc, #104]	; (8001854 <MX_ADC1_Init+0x138>)
 80017ea:	f001 fec5 	bl	8003578 <HAL_ADC_ConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80017f4:	f000 fafe 	bl	8001df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	4619      	mov	r1, r3
 8001804:	4813      	ldr	r0, [pc, #76]	; (8001854 <MX_ADC1_Init+0x138>)
 8001806:	f001 feb7 	bl	8003578 <HAL_ADC_ConfigChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8001810:	f000 faf0 	bl	8001df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001814:	2306      	movs	r3, #6
 8001816:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001818:	2303      	movs	r3, #3
 800181a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	4619      	mov	r1, r3
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <MX_ADC1_Init+0x138>)
 8001822:	f001 fea9 	bl	8003578 <HAL_ADC_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 800182c:	f000 fae2 	bl	8001df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001830:	2307      	movs	r3, #7
 8001832:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001834:	2304      	movs	r3, #4
 8001836:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_ADC1_Init+0x138>)
 800183e:	f001 fe9b 	bl	8003578 <HAL_ADC_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8001848:	f000 fad4 	bl	8001df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	; 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000028 	.word	0x20000028

08001858 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800185e:	463b      	mov	r3, r7
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
 800186c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800186e:	4b39      	ldr	r3, [pc, #228]	; (8001954 <MX_ADC2_Init+0xfc>)
 8001870:	4a39      	ldr	r2, [pc, #228]	; (8001958 <MX_ADC2_Init+0x100>)
 8001872:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001874:	4b37      	ldr	r3, [pc, #220]	; (8001954 <MX_ADC2_Init+0xfc>)
 8001876:	2200      	movs	r2, #0
 8001878:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800187a:	4b36      	ldr	r3, [pc, #216]	; (8001954 <MX_ADC2_Init+0xfc>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001880:	4b34      	ldr	r3, [pc, #208]	; (8001954 <MX_ADC2_Init+0xfc>)
 8001882:	2201      	movs	r2, #1
 8001884:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001886:	4b33      	ldr	r3, [pc, #204]	; (8001954 <MX_ADC2_Init+0xfc>)
 8001888:	2200      	movs	r2, #0
 800188a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800188c:	4b31      	ldr	r3, [pc, #196]	; (8001954 <MX_ADC2_Init+0xfc>)
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001894:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <MX_ADC2_Init+0xfc>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 800189a:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <MX_ADC2_Init+0xfc>)
 800189c:	2204      	movs	r2, #4
 800189e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80018a0:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <MX_ADC2_Init+0xfc>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <MX_ADC2_Init+0xfc>)
 80018aa:	2208      	movs	r2, #8
 80018ac:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80018ae:	4b29      	ldr	r3, [pc, #164]	; (8001954 <MX_ADC2_Init+0xfc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <MX_ADC2_Init+0xfc>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018ba:	4826      	ldr	r0, [pc, #152]	; (8001954 <MX_ADC2_Init+0xfc>)
 80018bc:	f000 fdf6 	bl	80024ac <HAL_ADC_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 80018c6:	f000 fa95 	bl	8001df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018ca:	2301      	movs	r3, #1
 80018cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018e2:	463b      	mov	r3, r7
 80018e4:	4619      	mov	r1, r3
 80018e6:	481b      	ldr	r0, [pc, #108]	; (8001954 <MX_ADC2_Init+0xfc>)
 80018e8:	f001 fe46 	bl	8003578 <HAL_ADC_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 80018f2:	f000 fa7f 	bl	8001df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80018f6:	2308      	movs	r3, #8
 80018f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018fa:	2302      	movs	r3, #2
 80018fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018fe:	463b      	mov	r3, r7
 8001900:	4619      	mov	r1, r3
 8001902:	4814      	ldr	r0, [pc, #80]	; (8001954 <MX_ADC2_Init+0xfc>)
 8001904:	f001 fe38 	bl	8003578 <HAL_ADC_ConfigChannel>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800190e:	f000 fa71 	bl	8001df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001912:	2309      	movs	r3, #9
 8001914:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001916:	2303      	movs	r3, #3
 8001918:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800191a:	463b      	mov	r3, r7
 800191c:	4619      	mov	r1, r3
 800191e:	480d      	ldr	r0, [pc, #52]	; (8001954 <MX_ADC2_Init+0xfc>)
 8001920:	f001 fe2a 	bl	8003578 <HAL_ADC_ConfigChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 800192a:	f000 fa63 	bl	8001df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800192e:	2312      	movs	r3, #18
 8001930:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001932:	2304      	movs	r3, #4
 8001934:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001936:	463b      	mov	r3, r7
 8001938:	4619      	mov	r1, r3
 800193a:	4806      	ldr	r0, [pc, #24]	; (8001954 <MX_ADC2_Init+0xfc>)
 800193c:	f001 fe1c 	bl	8003578 <HAL_ADC_ConfigChannel>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 8001946:	f000 fa55 	bl	8001df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000078 	.word	0x20000078
 8001958:	50000100 	.word	0x50000100

0800195c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
 800197c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <MX_ADC3_Init+0xd8>)
 8001980:	4a2d      	ldr	r2, [pc, #180]	; (8001a38 <MX_ADC3_Init+0xdc>)
 8001982:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001984:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <MX_ADC3_Init+0xd8>)
 8001986:	2200      	movs	r2, #0
 8001988:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800198a:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <MX_ADC3_Init+0xd8>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001990:	4b28      	ldr	r3, [pc, #160]	; (8001a34 <MX_ADC3_Init+0xd8>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <MX_ADC3_Init+0xd8>)
 8001998:	2200      	movs	r2, #0
 800199a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800199c:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <MX_ADC3_Init+0xd8>)
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019a4:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <MX_ADC3_Init+0xd8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <MX_ADC3_Init+0xd8>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019b0:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <MX_ADC3_Init+0xd8>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80019b6:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <MX_ADC3_Init+0xd8>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <MX_ADC3_Init+0xd8>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <MX_ADC3_Init+0xd8>)
 80019c6:	2204      	movs	r2, #4
 80019c8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <MX_ADC3_Init+0xd8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80019d0:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <MX_ADC3_Init+0xd8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80019d6:	4817      	ldr	r0, [pc, #92]	; (8001a34 <MX_ADC3_Init+0xd8>)
 80019d8:	f000 fd68 	bl	80024ac <HAL_ADC_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80019e2:	f000 fa07 	bl	8001df4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	4810      	ldr	r0, [pc, #64]	; (8001a34 <MX_ADC3_Init+0xd8>)
 80019f2:	f002 f8ad 	bl	8003b50 <HAL_ADCEx_MultiModeConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80019fc:	f000 f9fa 	bl	8001df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001a00:	230c      	movs	r3, #12
 8001a02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_ADC3_Init+0xd8>)
 8001a1e:	f001 fdab 	bl	8003578 <HAL_ADC_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001a28:	f000 f9e4 	bl	8001df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	3728      	adds	r7, #40	; 0x28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200000c8 	.word	0x200000c8
 8001a38:	50000400 	.word	0x50000400

08001a3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <MX_TIM1_Init+0xa0>)
 8001a5c:	4a20      	ldr	r2, [pc, #128]	; (8001ae0 <MX_TIM1_Init+0xa4>)
 8001a5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <MX_TIM1_Init+0xa0>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <MX_TIM1_Init+0xa0>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 18000;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <MX_TIM1_Init+0xa0>)
 8001a6e:	f244 6250 	movw	r2, #18000	; 0x4650
 8001a72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <MX_TIM1_Init+0xa0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <MX_TIM1_Init+0xa0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <MX_TIM1_Init+0xa0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a86:	4815      	ldr	r0, [pc, #84]	; (8001adc <MX_TIM1_Init+0xa0>)
 8001a88:	f004 fc0a 	bl	80062a0 <HAL_TIM_Base_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a92:	f000 f9af 	bl	8001df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480e      	ldr	r0, [pc, #56]	; (8001adc <MX_TIM1_Init+0xa0>)
 8001aa4:	f005 f960 	bl	8006d68 <HAL_TIM_ConfigClockSource>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001aae:	f000 f9a1 	bl	8001df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4806      	ldr	r0, [pc, #24]	; (8001adc <MX_TIM1_Init+0xa0>)
 8001ac4:	f005 fea6 	bl	8007814 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001ace:	f000 f991 	bl	8001df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000015c 	.word	0x2000015c
 8001ae0:	40012c00 	.word	0x40012c00

08001ae4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aea:	f107 031c 	add.w	r3, r7, #28
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af6:	463b      	mov	r3, r7
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
 8001b04:	615a      	str	r2, [r3, #20]
 8001b06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b08:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <MX_TIM3_Init+0xf0>)
 8001b0a:	4a33      	ldr	r2, [pc, #204]	; (8001bd8 <MX_TIM3_Init+0xf4>)
 8001b0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001b0e:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <MX_TIM3_Init+0xf0>)
 8001b10:	2263      	movs	r2, #99	; 0x63
 8001b12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <MX_TIM3_Init+0xf0>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9000;
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <MX_TIM3_Init+0xf0>)
 8001b1c:	f242 3228 	movw	r2, #9000	; 0x2328
 8001b20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b22:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <MX_TIM3_Init+0xf0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b28:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <MX_TIM3_Init+0xf0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b2e:	4829      	ldr	r0, [pc, #164]	; (8001bd4 <MX_TIM3_Init+0xf0>)
 8001b30:	f004 fce6 	bl	8006500 <HAL_TIM_PWM_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001b3a:	f000 f95b 	bl	8001df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4821      	ldr	r0, [pc, #132]	; (8001bd4 <MX_TIM3_Init+0xf0>)
 8001b4e:	f005 fe61 	bl	8007814 <HAL_TIMEx_MasterConfigSynchronization>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001b58:	f000 f94c 	bl	8001df4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b5c:	2360      	movs	r3, #96	; 0x60
 8001b5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	2200      	movs	r2, #0
 8001b70:	4619      	mov	r1, r3
 8001b72:	4818      	ldr	r0, [pc, #96]	; (8001bd4 <MX_TIM3_Init+0xf0>)
 8001b74:	f004 ffe4 	bl	8006b40 <HAL_TIM_PWM_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001b7e:	f000 f939 	bl	8001df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b82:	463b      	mov	r3, r7
 8001b84:	2204      	movs	r2, #4
 8001b86:	4619      	mov	r1, r3
 8001b88:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <MX_TIM3_Init+0xf0>)
 8001b8a:	f004 ffd9 	bl	8006b40 <HAL_TIM_PWM_ConfigChannel>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001b94:	f000 f92e 	bl	8001df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <MX_TIM3_Init+0xf0>)
 8001ba0:	f004 ffce 	bl	8006b40 <HAL_TIM_PWM_ConfigChannel>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001baa:	f000 f923 	bl	8001df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	220c      	movs	r2, #12
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <MX_TIM3_Init+0xf0>)
 8001bb6:	f004 ffc3 	bl	8006b40 <HAL_TIM_PWM_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001bc0:	f000 f918 	bl	8001df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bc4:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <MX_TIM3_Init+0xf0>)
 8001bc6:	f000 fa97 	bl	80020f8 <HAL_TIM_MspPostInit>

}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	; 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200001a8 	.word	0x200001a8
 8001bd8:	40000400 	.word	0x40000400

08001bdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_USART2_UART_Init+0x58>)
 8001be2:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <MX_USART2_UART_Init+0x5c>)
 8001be4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <MX_USART2_UART_Init+0x58>)
 8001be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_USART2_UART_Init+0x58>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_USART2_UART_Init+0x58>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <MX_USART2_UART_Init+0x58>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_USART2_UART_Init+0x58>)
 8001c02:	220c      	movs	r2, #12
 8001c04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <MX_USART2_UART_Init+0x58>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_USART2_UART_Init+0x58>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <MX_USART2_UART_Init+0x58>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_USART2_UART_Init+0x58>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_USART2_UART_Init+0x58>)
 8001c20:	f005 fea2 	bl	8007968 <HAL_UART_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c2a:	f000 f8e3 	bl	8001df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200001f4 	.word	0x200001f4
 8001c38:	40004400 	.word	0x40004400

08001c3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_USART3_UART_Init+0x58>)
 8001c42:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <MX_USART3_UART_Init+0x5c>)
 8001c44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <MX_USART3_UART_Init+0x58>)
 8001c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_USART3_UART_Init+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_USART3_UART_Init+0x58>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_USART3_UART_Init+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_USART3_UART_Init+0x58>)
 8001c62:	220c      	movs	r2, #12
 8001c64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <MX_USART3_UART_Init+0x58>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_USART3_UART_Init+0x58>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <MX_USART3_UART_Init+0x58>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_USART3_UART_Init+0x58>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_USART3_UART_Init+0x58>)
 8001c80:	f005 fe72 	bl	8007968 <HAL_UART_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001c8a:	f000 f8b3 	bl	8001df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000278 	.word	0x20000278
 8001c98:	40004800 	.word	0x40004800

08001c9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <MX_DMA_Init+0x38>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <MX_DMA_Init+0x38>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6153      	str	r3, [r2, #20]
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_DMA_Init+0x38>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	200b      	movs	r0, #11
 8001cc0:	f002 fa43 	bl	800414a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001cc4:	200b      	movs	r0, #11
 8001cc6:	f002 fa5c 	bl	8004182 <HAL_NVIC_EnableIRQ>

}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	; 0x28
 8001cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
 8001cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cee:	4b3e      	ldr	r3, [pc, #248]	; (8001de8 <MX_GPIO_Init+0x110>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	4a3d      	ldr	r2, [pc, #244]	; (8001de8 <MX_GPIO_Init+0x110>)
 8001cf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cf8:	6153      	str	r3, [r2, #20]
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <MX_GPIO_Init+0x110>)
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d06:	4b38      	ldr	r3, [pc, #224]	; (8001de8 <MX_GPIO_Init+0x110>)
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	4a37      	ldr	r2, [pc, #220]	; (8001de8 <MX_GPIO_Init+0x110>)
 8001d0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d10:	6153      	str	r3, [r2, #20]
 8001d12:	4b35      	ldr	r3, [pc, #212]	; (8001de8 <MX_GPIO_Init+0x110>)
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <MX_GPIO_Init+0x110>)
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	4a31      	ldr	r2, [pc, #196]	; (8001de8 <MX_GPIO_Init+0x110>)
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	6153      	str	r3, [r2, #20]
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <MX_GPIO_Init+0x110>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <MX_GPIO_Init+0x110>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <MX_GPIO_Init+0x110>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d40:	6153      	str	r3, [r2, #20]
 8001d42:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <MX_GPIO_Init+0x110>)
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2120      	movs	r1, #32
 8001d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d56:	f002 fde3 	bl	8004920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CH_ENA_GPIO_Port, CH_ENA_Pin, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d60:	4822      	ldr	r0, [pc, #136]	; (8001dec <MX_GPIO_Init+0x114>)
 8001d62:	f002 fddd 	bl	8004920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	481c      	ldr	r0, [pc, #112]	; (8001dec <MX_GPIO_Init+0x114>)
 8001d7c:	f002 fc46 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001d80:	2320      	movs	r3, #32
 8001d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d9a:	f002 fc37 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pin : CH_ENA_Pin */
  GPIO_InitStruct.Pin = CH_ENA_Pin;
 8001d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CH_ENA_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	480d      	ldr	r0, [pc, #52]	; (8001dec <MX_GPIO_Init+0x114>)
 8001db8:	f002 fc28 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc2:	2312      	movs	r3, #18
 8001dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4805      	ldr	r0, [pc, #20]	; (8001df0 <MX_GPIO_Init+0x118>)
 8001dda:	f002 fc17 	bl	800460c <HAL_GPIO_Init>

}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	; 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	48000800 	.word	0x48000800
 8001df0:	48000400 	.word	0x48000400

08001df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df8:	b672      	cpsid	i
}
 8001dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <Error_Handler+0x8>
	...

08001e00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_MspInit+0x44>)
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <HAL_MspInit+0x44>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6193      	str	r3, [r2, #24]
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_MspInit+0x44>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_MspInit+0x44>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <HAL_MspInit+0x44>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	61d3      	str	r3, [r2, #28]
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_MspInit+0x44>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000

08001e48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b090      	sub	sp, #64	; 0x40
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e68:	d16e      	bne.n	8001f48 <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e6a:	4b78      	ldr	r3, [pc, #480]	; (800204c <HAL_ADC_MspInit+0x204>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	4a76      	ldr	r2, [pc, #472]	; (800204c <HAL_ADC_MspInit+0x204>)
 8001e72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e74:	4b75      	ldr	r3, [pc, #468]	; (800204c <HAL_ADC_MspInit+0x204>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d10b      	bne.n	8001e94 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e7c:	4b74      	ldr	r3, [pc, #464]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	4a73      	ldr	r2, [pc, #460]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e86:	6153      	str	r3, [r2, #20]
 8001e88:	4b71      	ldr	r3, [pc, #452]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e94:	4b6e      	ldr	r3, [pc, #440]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	4a6d      	ldr	r2, [pc, #436]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001e9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e9e:	6153      	str	r3, [r2, #20]
 8001ea0:	4b6b      	ldr	r3, [pc, #428]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eac:	4b68      	ldr	r3, [pc, #416]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	4a67      	ldr	r2, [pc, #412]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb6:	6153      	str	r3, [r2, #20]
 8001eb8:	4b65      	ldr	r3, [pc, #404]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	623b      	str	r3, [r7, #32]
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
    PC1     ------> ADC1_IN7
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8001ec4:	230b      	movs	r3, #11
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	485f      	ldr	r0, [pc, #380]	; (8002054 <HAL_ADC_MspInit+0x20c>)
 8001ed8:	f002 fb98 	bl	800460c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001edc:	2303      	movs	r3, #3
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eec:	4619      	mov	r1, r3
 8001eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef2:	f002 fb8b 	bl	800460c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ef6:	4b58      	ldr	r3, [pc, #352]	; (8002058 <HAL_ADC_MspInit+0x210>)
 8001ef8:	4a58      	ldr	r2, [pc, #352]	; (800205c <HAL_ADC_MspInit+0x214>)
 8001efa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001efc:	4b56      	ldr	r3, [pc, #344]	; (8002058 <HAL_ADC_MspInit+0x210>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f02:	4b55      	ldr	r3, [pc, #340]	; (8002058 <HAL_ADC_MspInit+0x210>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f08:	4b53      	ldr	r3, [pc, #332]	; (8002058 <HAL_ADC_MspInit+0x210>)
 8001f0a:	2280      	movs	r2, #128	; 0x80
 8001f0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f0e:	4b52      	ldr	r3, [pc, #328]	; (8002058 <HAL_ADC_MspInit+0x210>)
 8001f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f14:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f16:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_ADC_MspInit+0x210>)
 8001f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f1c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f1e:	4b4e      	ldr	r3, [pc, #312]	; (8002058 <HAL_ADC_MspInit+0x210>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f24:	4b4c      	ldr	r3, [pc, #304]	; (8002058 <HAL_ADC_MspInit+0x210>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f2a:	484b      	ldr	r0, [pc, #300]	; (8002058 <HAL_ADC_MspInit+0x210>)
 8001f2c:	f002 f943 	bl	80041b6 <HAL_DMA_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8001f36:	f7ff ff5d 	bl	8001df4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a46      	ldr	r2, [pc, #280]	; (8002058 <HAL_ADC_MspInit+0x210>)
 8001f3e:	639a      	str	r2, [r3, #56]	; 0x38
 8001f40:	4a45      	ldr	r2, [pc, #276]	; (8002058 <HAL_ADC_MspInit+0x210>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f46:	e07c      	b.n	8002042 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a44      	ldr	r2, [pc, #272]	; (8002060 <HAL_ADC_MspInit+0x218>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d146      	bne.n	8001fe0 <HAL_ADC_MspInit+0x198>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f52:	4b3e      	ldr	r3, [pc, #248]	; (800204c <HAL_ADC_MspInit+0x204>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	4a3c      	ldr	r2, [pc, #240]	; (800204c <HAL_ADC_MspInit+0x204>)
 8001f5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_ADC_MspInit+0x204>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d10b      	bne.n	8001f7c <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f64:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	4a39      	ldr	r2, [pc, #228]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6153      	str	r3, [r2, #20]
 8001f70:	4b37      	ldr	r3, [pc, #220]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7c:	4b34      	ldr	r3, [pc, #208]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	4a33      	ldr	r2, [pc, #204]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001f82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f86:	6153      	str	r3, [r2, #20]
 8001f88:	4b31      	ldr	r3, [pc, #196]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f94:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9e:	6153      	str	r3, [r2, #20]
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001fac:	230e      	movs	r3, #14
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4825      	ldr	r0, [pc, #148]	; (8002054 <HAL_ADC_MspInit+0x20c>)
 8001fc0:	f002 fb24 	bl	800460c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fda:	f002 fb17 	bl	800460c <HAL_GPIO_Init>
}
 8001fde:	e030      	b.n	8002042 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC3)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <HAL_ADC_MspInit+0x21c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d12b      	bne.n	8002042 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001fea:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	4a18      	ldr	r2, [pc, #96]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001ff0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ff4:	6153      	str	r3, [r2, #20]
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8002008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200c:	6153      	str	r3, [r2, #20]
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_ADC_MspInit+0x208>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800201a:	2301      	movs	r3, #1
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800201e:	2303      	movs	r3, #3
 8002020:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800202a:	4619      	mov	r1, r3
 800202c:	480e      	ldr	r0, [pc, #56]	; (8002068 <HAL_ADC_MspInit+0x220>)
 800202e:	f002 faed 	bl	800460c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	202f      	movs	r0, #47	; 0x2f
 8002038:	f002 f887 	bl	800414a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800203c:	202f      	movs	r0, #47	; 0x2f
 800203e:	f002 f8a0 	bl	8004182 <HAL_NVIC_EnableIRQ>
}
 8002042:	bf00      	nop
 8002044:	3740      	adds	r7, #64	; 0x40
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200018b4 	.word	0x200018b4
 8002050:	40021000 	.word	0x40021000
 8002054:	48000800 	.word	0x48000800
 8002058:	20000118 	.word	0x20000118
 800205c:	40020008 	.word	0x40020008
 8002060:	50000100 	.word	0x50000100
 8002064:	50000400 	.word	0x50000400
 8002068:	48000400 	.word	0x48000400

0800206c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <HAL_TIM_Base_MspInit+0x44>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d113      	bne.n	80020a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_TIM_Base_MspInit+0x48>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <HAL_TIM_Base_MspInit+0x48>)
 8002084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002088:	6193      	str	r3, [r2, #24]
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_TIM_Base_MspInit+0x48>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	2019      	movs	r0, #25
 800209c:	f002 f855 	bl	800414a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80020a0:	2019      	movs	r0, #25
 80020a2:	f002 f86e 	bl	8004182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40012c00 	.word	0x40012c00
 80020b4:	40021000 	.word	0x40021000

080020b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_TIM_PWM_MspInit+0x38>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10b      	bne.n	80020e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	61d3      	str	r3, [r2, #28]
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40000400 	.word	0x40000400
 80020f4:	40021000 	.word	0x40021000

080020f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a11      	ldr	r2, [pc, #68]	; (800215c <HAL_TIM_MspPostInit+0x64>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d11c      	bne.n	8002154 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_TIM_MspPostInit+0x68>)
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	4a10      	ldr	r2, [pc, #64]	; (8002160 <HAL_TIM_MspPostInit+0x68>)
 8002120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002124:	6153      	str	r3, [r2, #20]
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_TIM_MspPostInit+0x68>)
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002132:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002136:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002144:	2302      	movs	r3, #2
 8002146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	4619      	mov	r1, r3
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <HAL_TIM_MspPostInit+0x6c>)
 8002150:	f002 fa5c 	bl	800460c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002154:	bf00      	nop
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40000400 	.word	0x40000400
 8002160:	40021000 	.word	0x40021000
 8002164:	48000800 	.word	0x48000800

08002168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08c      	sub	sp, #48	; 0x30
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a37      	ldr	r2, [pc, #220]	; (8002264 <HAL_UART_MspInit+0xfc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d131      	bne.n	80021ee <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800218a:	4b37      	ldr	r3, [pc, #220]	; (8002268 <HAL_UART_MspInit+0x100>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4a36      	ldr	r2, [pc, #216]	; (8002268 <HAL_UART_MspInit+0x100>)
 8002190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002194:	61d3      	str	r3, [r2, #28]
 8002196:	4b34      	ldr	r3, [pc, #208]	; (8002268 <HAL_UART_MspInit+0x100>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	61bb      	str	r3, [r7, #24]
 80021a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	4b31      	ldr	r3, [pc, #196]	; (8002268 <HAL_UART_MspInit+0x100>)
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	4a30      	ldr	r2, [pc, #192]	; (8002268 <HAL_UART_MspInit+0x100>)
 80021a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ac:	6153      	str	r3, [r2, #20]
 80021ae:	4b2e      	ldr	r3, [pc, #184]	; (8002268 <HAL_UART_MspInit+0x100>)
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021ba:	230c      	movs	r3, #12
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021ca:	2307      	movs	r3, #7
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f107 031c 	add.w	r3, r7, #28
 80021d2:	4619      	mov	r1, r3
 80021d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d8:	f002 fa18 	bl	800460c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	2026      	movs	r0, #38	; 0x26
 80021e2:	f001 ffb2 	bl	800414a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021e6:	2026      	movs	r0, #38	; 0x26
 80021e8:	f001 ffcb 	bl	8004182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021ec:	e035      	b.n	800225a <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1e      	ldr	r2, [pc, #120]	; (800226c <HAL_UART_MspInit+0x104>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d130      	bne.n	800225a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_UART_MspInit+0x100>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	4a1a      	ldr	r2, [pc, #104]	; (8002268 <HAL_UART_MspInit+0x100>)
 80021fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002202:	61d3      	str	r3, [r2, #28]
 8002204:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_UART_MspInit+0x100>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002210:	4b15      	ldr	r3, [pc, #84]	; (8002268 <HAL_UART_MspInit+0x100>)
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <HAL_UART_MspInit+0x100>)
 8002216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800221a:	6153      	str	r3, [r2, #20]
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_UART_MspInit+0x100>)
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002228:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800223a:	2307      	movs	r3, #7
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223e:	f107 031c 	add.w	r3, r7, #28
 8002242:	4619      	mov	r1, r3
 8002244:	480a      	ldr	r0, [pc, #40]	; (8002270 <HAL_UART_MspInit+0x108>)
 8002246:	f002 f9e1 	bl	800460c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	2027      	movs	r0, #39	; 0x27
 8002250:	f001 ff7b 	bl	800414a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002254:	2027      	movs	r0, #39	; 0x27
 8002256:	f001 ff94 	bl	8004182 <HAL_NVIC_EnableIRQ>
}
 800225a:	bf00      	nop
 800225c:	3730      	adds	r7, #48	; 0x30
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40004400 	.word	0x40004400
 8002268:	40021000 	.word	0x40021000
 800226c:	40004800 	.word	0x40004800
 8002270:	48000800 	.word	0x48000800

08002274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <NMI_Handler+0x4>

0800227a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <HardFault_Handler+0x4>

08002280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <MemManage_Handler+0x4>

08002286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <BusFault_Handler+0x4>

0800228c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <UsageFault_Handler+0x4>

08002292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c0:	f000 f8b6 	bl	8002430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <DMA1_Channel1_IRQHandler+0x10>)
 80022ce:	f002 f88f 	bl	80043f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000118 	.word	0x20000118

080022dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80022e2:	f004 fb0d 	bl	8006900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000015c 	.word	0x2000015c

080022f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <USART2_IRQHandler+0x10>)
 80022f6:	f005 fbd3 	bl	8007aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200001f4 	.word	0x200001f4

08002304 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <USART3_IRQHandler+0x10>)
 800230a:	f005 fbc9 	bl	8007aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000278 	.word	0x20000278

08002318 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <ADC3_IRQHandler+0x10>)
 800231e:	f000 fd23 	bl	8002d68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200000c8 	.word	0x200000c8

0800232c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <SystemInit+0x20>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <SystemInit+0x20>)
 8002338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800233c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002388 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002354:	480d      	ldr	r0, [pc, #52]	; (800238c <LoopForever+0x6>)
  ldr r1, =_edata
 8002356:	490e      	ldr	r1, [pc, #56]	; (8002390 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002358:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <LoopForever+0xe>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800235c:	e002      	b.n	8002364 <LoopCopyDataInit>

0800235e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002362:	3304      	adds	r3, #4

08002364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002368:	d3f9      	bcc.n	800235e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <LoopForever+0x12>)
  ldr r4, =_ebss
 800236c:	4c0b      	ldr	r4, [pc, #44]	; (800239c <LoopForever+0x16>)
  movs r3, #0
 800236e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002370:	e001      	b.n	8002376 <LoopFillZerobss>

08002372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002374:	3204      	adds	r2, #4

08002376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002378:	d3fb      	bcc.n	8002372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800237a:	f7ff ffd7 	bl	800232c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800237e:	f006 fcc9 	bl	8008d14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002382:	f7fe feeb 	bl	800115c <main>

08002386 <LoopForever>:

LoopForever:
    b LoopForever
 8002386:	e7fe      	b.n	8002386 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002388:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800238c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002390:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002394:	08008ddc 	.word	0x08008ddc
  ldr r2, =_sbss
 8002398:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800239c:	200018bc 	.word	0x200018bc

080023a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023a0:	e7fe      	b.n	80023a0 <ADC1_2_IRQHandler>
	...

080023a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_Init+0x28>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a07      	ldr	r2, [pc, #28]	; (80023cc <HAL_Init+0x28>)
 80023ae:	f043 0310 	orr.w	r3, r3, #16
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b4:	2003      	movs	r0, #3
 80023b6:	f001 febd 	bl	8004134 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ba:	200f      	movs	r0, #15
 80023bc:	f000 f808 	bl	80023d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c0:	f7ff fd1e 	bl	8001e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40022000 	.word	0x40022000

080023d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_InitTick+0x54>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <HAL_InitTick+0x58>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	4619      	mov	r1, r3
 80023e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f001 fed5 	bl	800419e <HAL_SYSTICK_Config>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00e      	b.n	800241c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b0f      	cmp	r3, #15
 8002402:	d80a      	bhi.n	800241a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002404:	2200      	movs	r2, #0
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f001 fe9d 	bl	800414a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002410:	4a06      	ldr	r2, [pc, #24]	; (800242c <HAL_InitTick+0x5c>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	e000      	b.n	800241c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000000 	.word	0x20000000
 8002428:	20000008 	.word	0x20000008
 800242c:	20000004 	.word	0x20000004

08002430 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_IncTick+0x20>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_IncTick+0x24>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4413      	add	r3, r2
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <HAL_IncTick+0x24>)
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000008 	.word	0x20000008
 8002454:	200018b8 	.word	0x200018b8

08002458 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return uwTick;  
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_GetTick+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	200018b8 	.word	0x200018b8

08002470 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b09a      	sub	sp, #104	; 0x68
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e1e3      	b.n	8002894 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d176      	bne.n	80025cc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d152      	bne.n	800258c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff fca1 	bl	8001e48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d13b      	bne.n	800258c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f001 fcd7 	bl	8003ec8 <ADC_Disable>
 800251a:	4603      	mov	r3, r0
 800251c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b00      	cmp	r3, #0
 800252a:	d12f      	bne.n	800258c <HAL_ADC_Init+0xe0>
 800252c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002530:	2b00      	cmp	r3, #0
 8002532:	d12b      	bne.n	800258c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800253c:	f023 0302 	bic.w	r3, r3, #2
 8002540:	f043 0202 	orr.w	r2, r3, #2
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002556:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002566:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002568:	4b92      	ldr	r3, [pc, #584]	; (80027b4 <HAL_ADC_Init+0x308>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a92      	ldr	r2, [pc, #584]	; (80027b8 <HAL_ADC_Init+0x30c>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0c9a      	lsrs	r2, r3, #18
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800257e:	e002      	b.n	8002586 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	3b01      	subs	r3, #1
 8002584:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f9      	bne.n	8002580 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80025a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025a8:	d110      	bne.n	80025cc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f023 0312 	bic.w	r3, r3, #18
 80025b2:	f043 0210 	orr.w	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 8150 	bne.w	800287a <HAL_ADC_Init+0x3ce>
 80025da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 814b 	bne.w	800287a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f040 8143 	bne.w	800287a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025fc:	f043 0202 	orr.w	r2, r3, #2
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800260c:	d004      	beq.n	8002618 <HAL_ADC_Init+0x16c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6a      	ldr	r2, [pc, #424]	; (80027bc <HAL_ADC_Init+0x310>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d101      	bne.n	800261c <HAL_ADC_Init+0x170>
 8002618:	4b69      	ldr	r3, [pc, #420]	; (80027c0 <HAL_ADC_Init+0x314>)
 800261a:	e000      	b.n	800261e <HAL_ADC_Init+0x172>
 800261c:	4b69      	ldr	r3, [pc, #420]	; (80027c4 <HAL_ADC_Init+0x318>)
 800261e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002628:	d102      	bne.n	8002630 <HAL_ADC_Init+0x184>
 800262a:	4b64      	ldr	r3, [pc, #400]	; (80027bc <HAL_ADC_Init+0x310>)
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	e01a      	b.n	8002666 <HAL_ADC_Init+0x1ba>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a61      	ldr	r2, [pc, #388]	; (80027bc <HAL_ADC_Init+0x310>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d103      	bne.n	8002642 <HAL_ADC_Init+0x196>
 800263a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	e011      	b.n	8002666 <HAL_ADC_Init+0x1ba>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a60      	ldr	r2, [pc, #384]	; (80027c8 <HAL_ADC_Init+0x31c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d102      	bne.n	8002652 <HAL_ADC_Init+0x1a6>
 800264c:	4b5f      	ldr	r3, [pc, #380]	; (80027cc <HAL_ADC_Init+0x320>)
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e009      	b.n	8002666 <HAL_ADC_Init+0x1ba>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a5d      	ldr	r2, [pc, #372]	; (80027cc <HAL_ADC_Init+0x320>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d102      	bne.n	8002662 <HAL_ADC_Init+0x1b6>
 800265c:	4b5a      	ldr	r3, [pc, #360]	; (80027c8 <HAL_ADC_Init+0x31c>)
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	e001      	b.n	8002666 <HAL_ADC_Init+0x1ba>
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d108      	bne.n	8002686 <HAL_ADC_Init+0x1da>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_ADC_Init+0x1da>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_ADC_Init+0x1dc>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d11c      	bne.n	80026c6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800268c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800268e:	2b00      	cmp	r3, #0
 8002690:	d010      	beq.n	80026b4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d107      	bne.n	80026ae <HAL_ADC_Init+0x202>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_Init+0x202>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_ADC_Init+0x204>
 80026ae:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d108      	bne.n	80026c6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80026b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	7e5b      	ldrb	r3, [r3, #25]
 80026ca:	035b      	lsls	r3, r3, #13
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026d0:	2a01      	cmp	r2, #1
 80026d2:	d002      	beq.n	80026da <HAL_ADC_Init+0x22e>
 80026d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026d8:	e000      	b.n	80026dc <HAL_ADC_Init+0x230>
 80026da:	2200      	movs	r2, #0
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026ec:	4313      	orrs	r3, r2
 80026ee:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d11b      	bne.n	8002732 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7e5b      	ldrb	r3, [r3, #25]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	3b01      	subs	r3, #1
 8002708:	045a      	lsls	r2, r3, #17
 800270a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800270c:	4313      	orrs	r3, r2
 800270e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002712:	663b      	str	r3, [r7, #96]	; 0x60
 8002714:	e00d      	b.n	8002732 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800271e:	f043 0220 	orr.w	r2, r3, #32
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	f043 0201 	orr.w	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	2b01      	cmp	r3, #1
 8002738:	d054      	beq.n	80027e4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a22      	ldr	r2, [pc, #136]	; (80027c8 <HAL_ADC_Init+0x31c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d004      	beq.n	800274e <HAL_ADC_Init+0x2a2>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a20      	ldr	r2, [pc, #128]	; (80027cc <HAL_ADC_Init+0x320>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d140      	bne.n	80027d0 <HAL_ADC_Init+0x324>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002756:	d02a      	beq.n	80027ae <HAL_ADC_Init+0x302>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002760:	d022      	beq.n	80027a8 <HAL_ADC_Init+0x2fc>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800276a:	d01a      	beq.n	80027a2 <HAL_ADC_Init+0x2f6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002774:	d012      	beq.n	800279c <HAL_ADC_Init+0x2f0>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800277e:	d00a      	beq.n	8002796 <HAL_ADC_Init+0x2ea>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002788:	d002      	beq.n	8002790 <HAL_ADC_Init+0x2e4>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	e023      	b.n	80027d8 <HAL_ADC_Init+0x32c>
 8002790:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002794:	e020      	b.n	80027d8 <HAL_ADC_Init+0x32c>
 8002796:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800279a:	e01d      	b.n	80027d8 <HAL_ADC_Init+0x32c>
 800279c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80027a0:	e01a      	b.n	80027d8 <HAL_ADC_Init+0x32c>
 80027a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027a6:	e017      	b.n	80027d8 <HAL_ADC_Init+0x32c>
 80027a8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80027ac:	e014      	b.n	80027d8 <HAL_ADC_Init+0x32c>
 80027ae:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80027b2:	e011      	b.n	80027d8 <HAL_ADC_Init+0x32c>
 80027b4:	20000000 	.word	0x20000000
 80027b8:	431bde83 	.word	0x431bde83
 80027bc:	50000100 	.word	0x50000100
 80027c0:	50000300 	.word	0x50000300
 80027c4:	50000700 	.word	0x50000700
 80027c8:	50000400 	.word	0x50000400
 80027cc:	50000500 	.word	0x50000500
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027dc:	4313      	orrs	r3, r2
 80027de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027e0:	4313      	orrs	r3, r2
 80027e2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d114      	bne.n	800281c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002800:	f023 0302 	bic.w	r3, r3, #2
 8002804:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	7e1b      	ldrb	r3, [r3, #24]
 800280a:	039a      	lsls	r2, r3, #14
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4313      	orrs	r3, r2
 8002816:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002818:	4313      	orrs	r3, r2
 800281a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	4b1e      	ldr	r3, [pc, #120]	; (800289c <HAL_ADC_Init+0x3f0>)
 8002824:	4013      	ands	r3, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800282c:	430b      	orrs	r3, r1
 800282e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d10c      	bne.n	8002852 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f023 010f 	bic.w	r1, r3, #15
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	1e5a      	subs	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
 8002850:	e007      	b.n	8002862 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 020f 	bic.w	r2, r2, #15
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f023 0303 	bic.w	r3, r3, #3
 8002870:	f043 0201 	orr.w	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
 8002878:	e00a      	b.n	8002890 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f023 0312 	bic.w	r3, r3, #18
 8002882:	f043 0210 	orr.w	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800288a:	2301      	movs	r3, #1
 800288c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002890:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002894:	4618      	mov	r0, r3
 8002896:	3768      	adds	r7, #104	; 0x68
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	fff0c007 	.word	0xfff0c007

080028a0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f040 80f9 	bne.w	8002aae <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_Start+0x2a>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e0f4      	b.n	8002ab4 <HAL_ADC_Start+0x214>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f001 fa94 	bl	8003e00 <ADC_Enable>
 80028d8:	4603      	mov	r3, r0
 80028da:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 80e0 	bne.w	8002aa4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002900:	d004      	beq.n	800290c <HAL_ADC_Start+0x6c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6d      	ldr	r2, [pc, #436]	; (8002abc <HAL_ADC_Start+0x21c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d106      	bne.n	800291a <HAL_ADC_Start+0x7a>
 800290c:	4b6c      	ldr	r3, [pc, #432]	; (8002ac0 <HAL_ADC_Start+0x220>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	2b00      	cmp	r3, #0
 8002916:	d010      	beq.n	800293a <HAL_ADC_Start+0x9a>
 8002918:	e005      	b.n	8002926 <HAL_ADC_Start+0x86>
 800291a:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <HAL_ADC_Start+0x224>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_ADC_Start+0x9a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800292e:	d004      	beq.n	800293a <HAL_ADC_Start+0x9a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a64      	ldr	r2, [pc, #400]	; (8002ac8 <HAL_ADC_Start+0x228>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d115      	bne.n	8002966 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d036      	beq.n	80029c2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800295c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002964:	e02d      	b.n	80029c2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800297a:	d004      	beq.n	8002986 <HAL_ADC_Start+0xe6>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a4e      	ldr	r2, [pc, #312]	; (8002abc <HAL_ADC_Start+0x21c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10a      	bne.n	800299c <HAL_ADC_Start+0xfc>
 8002986:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf14      	ite	ne
 8002994:	2301      	movne	r3, #1
 8002996:	2300      	moveq	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	e008      	b.n	80029ae <HAL_ADC_Start+0x10e>
 800299c:	4b4a      	ldr	r3, [pc, #296]	; (8002ac8 <HAL_ADC_Start+0x228>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ce:	d106      	bne.n	80029de <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	f023 0206 	bic.w	r2, r3, #6
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	645a      	str	r2, [r3, #68]	; 0x44
 80029dc:	e002      	b.n	80029e4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	221c      	movs	r2, #28
 80029f2:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029fc:	d004      	beq.n	8002a08 <HAL_ADC_Start+0x168>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <HAL_ADC_Start+0x21c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d106      	bne.n	8002a16 <HAL_ADC_Start+0x176>
 8002a08:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_ADC_Start+0x220>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d03e      	beq.n	8002a92 <HAL_ADC_Start+0x1f2>
 8002a14:	e005      	b.n	8002a22 <HAL_ADC_Start+0x182>
 8002a16:	4b2b      	ldr	r3, [pc, #172]	; (8002ac4 <HAL_ADC_Start+0x224>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d037      	beq.n	8002a92 <HAL_ADC_Start+0x1f2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a2a:	d004      	beq.n	8002a36 <HAL_ADC_Start+0x196>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a22      	ldr	r2, [pc, #136]	; (8002abc <HAL_ADC_Start+0x21c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d106      	bne.n	8002a44 <HAL_ADC_Start+0x1a4>
 8002a36:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <HAL_ADC_Start+0x220>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d027      	beq.n	8002a92 <HAL_ADC_Start+0x1f2>
 8002a42:	e005      	b.n	8002a50 <HAL_ADC_Start+0x1b0>
 8002a44:	4b1f      	ldr	r3, [pc, #124]	; (8002ac4 <HAL_ADC_Start+0x224>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	2b05      	cmp	r3, #5
 8002a4e:	d020      	beq.n	8002a92 <HAL_ADC_Start+0x1f2>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a58:	d004      	beq.n	8002a64 <HAL_ADC_Start+0x1c4>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a17      	ldr	r2, [pc, #92]	; (8002abc <HAL_ADC_Start+0x21c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d106      	bne.n	8002a72 <HAL_ADC_Start+0x1d2>
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <HAL_ADC_Start+0x220>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2b09      	cmp	r3, #9
 8002a6e:	d010      	beq.n	8002a92 <HAL_ADC_Start+0x1f2>
 8002a70:	e005      	b.n	8002a7e <HAL_ADC_Start+0x1de>
 8002a72:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <HAL_ADC_Start+0x224>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	2b09      	cmp	r3, #9
 8002a7c:	d009      	beq.n	8002a92 <HAL_ADC_Start+0x1f2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a86:	d004      	beq.n	8002a92 <HAL_ADC_Start+0x1f2>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <HAL_ADC_Start+0x228>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d10f      	bne.n	8002ab2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0204 	orr.w	r2, r2, #4
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	e006      	b.n	8002ab2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002aac:	e001      	b.n	8002ab2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	50000100 	.word	0x50000100
 8002ac0:	50000300 	.word	0x50000300
 8002ac4:	50000700 	.word	0x50000700
 8002ac8:	50000400 	.word	0x50000400

08002acc <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f040 8123 	bne.w	8002d2e <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_Start_IT+0x2a>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e11e      	b.n	8002d34 <HAL_ADC_Start_IT+0x268>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f001 f97e 	bl	8003e00 <ADC_Enable>
 8002b04:	4603      	mov	r3, r0
 8002b06:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 810a 	bne.w	8002d24 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b2c:	d004      	beq.n	8002b38 <HAL_ADC_Start_IT+0x6c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a82      	ldr	r2, [pc, #520]	; (8002d3c <HAL_ADC_Start_IT+0x270>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d106      	bne.n	8002b46 <HAL_ADC_Start_IT+0x7a>
 8002b38:	4b81      	ldr	r3, [pc, #516]	; (8002d40 <HAL_ADC_Start_IT+0x274>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <HAL_ADC_Start_IT+0x9a>
 8002b44:	e005      	b.n	8002b52 <HAL_ADC_Start_IT+0x86>
 8002b46:	4b7f      	ldr	r3, [pc, #508]	; (8002d44 <HAL_ADC_Start_IT+0x278>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_ADC_Start_IT+0x9a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b5a:	d004      	beq.n	8002b66 <HAL_ADC_Start_IT+0x9a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a79      	ldr	r2, [pc, #484]	; (8002d48 <HAL_ADC_Start_IT+0x27c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d115      	bne.n	8002b92 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d036      	beq.n	8002bee <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b90:	e02d      	b.n	8002bee <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ba6:	d004      	beq.n	8002bb2 <HAL_ADC_Start_IT+0xe6>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a63      	ldr	r2, [pc, #396]	; (8002d3c <HAL_ADC_Start_IT+0x270>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_ADC_Start_IT+0xfc>
 8002bb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e008      	b.n	8002bda <HAL_ADC_Start_IT+0x10e>
 8002bc8:	4b5f      	ldr	r3, [pc, #380]	; (8002d48 <HAL_ADC_Start_IT+0x27c>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf14      	ite	ne
 8002bd4:	2301      	movne	r3, #1
 8002bd6:	2300      	moveq	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002be6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfa:	d106      	bne.n	8002c0a <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	f023 0206 	bic.w	r2, r3, #6
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	645a      	str	r2, [r3, #68]	; 0x44
 8002c08:	e002      	b.n	8002c10 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	221c      	movs	r2, #28
 8002c1e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d110      	bne.n	8002c4a <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0204 	bic.w	r2, r2, #4
 8002c36:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0208 	orr.w	r2, r2, #8
 8002c46:	605a      	str	r2, [r3, #4]
          break;
 8002c48:	e008      	b.n	8002c5c <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 020c 	orr.w	r2, r2, #12
 8002c58:	605a      	str	r2, [r3, #4]
          break;
 8002c5a:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d107      	bne.n	8002c74 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0210 	bic.w	r2, r2, #16
 8002c72:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c7c:	d004      	beq.n	8002c88 <HAL_ADC_Start_IT+0x1bc>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a2e      	ldr	r2, [pc, #184]	; (8002d3c <HAL_ADC_Start_IT+0x270>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d106      	bne.n	8002c96 <HAL_ADC_Start_IT+0x1ca>
 8002c88:	4b2d      	ldr	r3, [pc, #180]	; (8002d40 <HAL_ADC_Start_IT+0x274>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d03e      	beq.n	8002d12 <HAL_ADC_Start_IT+0x246>
 8002c94:	e005      	b.n	8002ca2 <HAL_ADC_Start_IT+0x1d6>
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <HAL_ADC_Start_IT+0x278>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d037      	beq.n	8002d12 <HAL_ADC_Start_IT+0x246>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002caa:	d004      	beq.n	8002cb6 <HAL_ADC_Start_IT+0x1ea>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a22      	ldr	r2, [pc, #136]	; (8002d3c <HAL_ADC_Start_IT+0x270>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d106      	bne.n	8002cc4 <HAL_ADC_Start_IT+0x1f8>
 8002cb6:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_ADC_Start_IT+0x274>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	d027      	beq.n	8002d12 <HAL_ADC_Start_IT+0x246>
 8002cc2:	e005      	b.n	8002cd0 <HAL_ADC_Start_IT+0x204>
 8002cc4:	4b1f      	ldr	r3, [pc, #124]	; (8002d44 <HAL_ADC_Start_IT+0x278>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d020      	beq.n	8002d12 <HAL_ADC_Start_IT+0x246>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd8:	d004      	beq.n	8002ce4 <HAL_ADC_Start_IT+0x218>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a17      	ldr	r2, [pc, #92]	; (8002d3c <HAL_ADC_Start_IT+0x270>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d106      	bne.n	8002cf2 <HAL_ADC_Start_IT+0x226>
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <HAL_ADC_Start_IT+0x274>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	2b09      	cmp	r3, #9
 8002cee:	d010      	beq.n	8002d12 <HAL_ADC_Start_IT+0x246>
 8002cf0:	e005      	b.n	8002cfe <HAL_ADC_Start_IT+0x232>
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_ADC_Start_IT+0x278>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	2b09      	cmp	r3, #9
 8002cfc:	d009      	beq.n	8002d12 <HAL_ADC_Start_IT+0x246>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d06:	d004      	beq.n	8002d12 <HAL_ADC_Start_IT+0x246>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_ADC_Start_IT+0x27c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d10f      	bne.n	8002d32 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0204 	orr.w	r2, r2, #4
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	e006      	b.n	8002d32 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d2c:	e001      	b.n	8002d32 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	50000100 	.word	0x50000100
 8002d40:	50000300 	.word	0x50000300
 8002d44:	50000700 	.word	0x50000700
 8002d48:	50000400 	.word	0x50000400

08002d4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d106      	bne.n	8002d98 <HAL_ADC_IRQHandler+0x30>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d00f      	beq.n	8002db8 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	f040 80c0 	bne.w	8002f28 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	f040 80b8 	bne.w	8002f28 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dd8:	d004      	beq.n	8002de4 <HAL_ADC_IRQHandler+0x7c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a8e      	ldr	r2, [pc, #568]	; (8003018 <HAL_ADC_IRQHandler+0x2b0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d106      	bne.n	8002df2 <HAL_ADC_IRQHandler+0x8a>
 8002de4:	4b8d      	ldr	r3, [pc, #564]	; (800301c <HAL_ADC_IRQHandler+0x2b4>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d03e      	beq.n	8002e6e <HAL_ADC_IRQHandler+0x106>
 8002df0:	e005      	b.n	8002dfe <HAL_ADC_IRQHandler+0x96>
 8002df2:	4b8b      	ldr	r3, [pc, #556]	; (8003020 <HAL_ADC_IRQHandler+0x2b8>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d037      	beq.n	8002e6e <HAL_ADC_IRQHandler+0x106>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e06:	d004      	beq.n	8002e12 <HAL_ADC_IRQHandler+0xaa>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a82      	ldr	r2, [pc, #520]	; (8003018 <HAL_ADC_IRQHandler+0x2b0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d106      	bne.n	8002e20 <HAL_ADC_IRQHandler+0xb8>
 8002e12:	4b82      	ldr	r3, [pc, #520]	; (800301c <HAL_ADC_IRQHandler+0x2b4>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d027      	beq.n	8002e6e <HAL_ADC_IRQHandler+0x106>
 8002e1e:	e005      	b.n	8002e2c <HAL_ADC_IRQHandler+0xc4>
 8002e20:	4b7f      	ldr	r3, [pc, #508]	; (8003020 <HAL_ADC_IRQHandler+0x2b8>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	2b05      	cmp	r3, #5
 8002e2a:	d020      	beq.n	8002e6e <HAL_ADC_IRQHandler+0x106>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e34:	d004      	beq.n	8002e40 <HAL_ADC_IRQHandler+0xd8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a77      	ldr	r2, [pc, #476]	; (8003018 <HAL_ADC_IRQHandler+0x2b0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d106      	bne.n	8002e4e <HAL_ADC_IRQHandler+0xe6>
 8002e40:	4b76      	ldr	r3, [pc, #472]	; (800301c <HAL_ADC_IRQHandler+0x2b4>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	2b09      	cmp	r3, #9
 8002e4a:	d010      	beq.n	8002e6e <HAL_ADC_IRQHandler+0x106>
 8002e4c:	e005      	b.n	8002e5a <HAL_ADC_IRQHandler+0xf2>
 8002e4e:	4b74      	ldr	r3, [pc, #464]	; (8003020 <HAL_ADC_IRQHandler+0x2b8>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 031f 	and.w	r3, r3, #31
 8002e56:	2b09      	cmp	r3, #9
 8002e58:	d009      	beq.n	8002e6e <HAL_ADC_IRQHandler+0x106>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e62:	d004      	beq.n	8002e6e <HAL_ADC_IRQHandler+0x106>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a6e      	ldr	r2, [pc, #440]	; (8003024 <HAL_ADC_IRQHandler+0x2bc>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d104      	bne.n	8002e78 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	e00f      	b.n	8002e98 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e80:	d004      	beq.n	8002e8c <HAL_ADC_IRQHandler+0x124>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a64      	ldr	r2, [pc, #400]	; (8003018 <HAL_ADC_IRQHandler+0x2b0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d102      	bne.n	8002e92 <HAL_ADC_IRQHandler+0x12a>
 8002e8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e90:	e000      	b.n	8002e94 <HAL_ADC_IRQHandler+0x12c>
 8002e92:	4b64      	ldr	r3, [pc, #400]	; (8003024 <HAL_ADC_IRQHandler+0x2bc>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d139      	bne.n	8002f1a <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d134      	bne.n	8002f1a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d12d      	bne.n	8002f1a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d11a      	bne.n	8002f02 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 020c 	bic.w	r2, r2, #12
 8002eda:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d112      	bne.n	8002f1a <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	f043 0201 	orr.w	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
 8002f00:	e00b      	b.n	8002f1a <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f043 0210 	orr.w	r2, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f043 0201 	orr.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd f95a 	bl	80001d4 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	220c      	movs	r2, #12
 8002f26:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d106      	bne.n	8002f44 <HAL_ADC_IRQHandler+0x1dc>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d00f      	beq.n	8002f64 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002f4e:	2b40      	cmp	r3, #64	; 0x40
 8002f50:	f040 8143 	bne.w	80031da <HAL_ADC_IRQHandler+0x472>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5e:	2b40      	cmp	r3, #64	; 0x40
 8002f60:	f040 813b 	bne.w	80031da <HAL_ADC_IRQHandler+0x472>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f78:	d004      	beq.n	8002f84 <HAL_ADC_IRQHandler+0x21c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a26      	ldr	r2, [pc, #152]	; (8003018 <HAL_ADC_IRQHandler+0x2b0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d106      	bne.n	8002f92 <HAL_ADC_IRQHandler+0x22a>
 8002f84:	4b25      	ldr	r3, [pc, #148]	; (800301c <HAL_ADC_IRQHandler+0x2b4>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d03e      	beq.n	800300e <HAL_ADC_IRQHandler+0x2a6>
 8002f90:	e005      	b.n	8002f9e <HAL_ADC_IRQHandler+0x236>
 8002f92:	4b23      	ldr	r3, [pc, #140]	; (8003020 <HAL_ADC_IRQHandler+0x2b8>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d037      	beq.n	800300e <HAL_ADC_IRQHandler+0x2a6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa6:	d004      	beq.n	8002fb2 <HAL_ADC_IRQHandler+0x24a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <HAL_ADC_IRQHandler+0x2b0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d106      	bne.n	8002fc0 <HAL_ADC_IRQHandler+0x258>
 8002fb2:	4b1a      	ldr	r3, [pc, #104]	; (800301c <HAL_ADC_IRQHandler+0x2b4>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	2b05      	cmp	r3, #5
 8002fbc:	d027      	beq.n	800300e <HAL_ADC_IRQHandler+0x2a6>
 8002fbe:	e005      	b.n	8002fcc <HAL_ADC_IRQHandler+0x264>
 8002fc0:	4b17      	ldr	r3, [pc, #92]	; (8003020 <HAL_ADC_IRQHandler+0x2b8>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d020      	beq.n	800300e <HAL_ADC_IRQHandler+0x2a6>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd4:	d004      	beq.n	8002fe0 <HAL_ADC_IRQHandler+0x278>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a0f      	ldr	r2, [pc, #60]	; (8003018 <HAL_ADC_IRQHandler+0x2b0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d106      	bne.n	8002fee <HAL_ADC_IRQHandler+0x286>
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_ADC_IRQHandler+0x2b4>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	2b09      	cmp	r3, #9
 8002fea:	d010      	beq.n	800300e <HAL_ADC_IRQHandler+0x2a6>
 8002fec:	e005      	b.n	8002ffa <HAL_ADC_IRQHandler+0x292>
 8002fee:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <HAL_ADC_IRQHandler+0x2b8>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	2b09      	cmp	r3, #9
 8002ff8:	d009      	beq.n	800300e <HAL_ADC_IRQHandler+0x2a6>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003002:	d004      	beq.n	800300e <HAL_ADC_IRQHandler+0x2a6>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a06      	ldr	r2, [pc, #24]	; (8003024 <HAL_ADC_IRQHandler+0x2bc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d10c      	bne.n	8003028 <HAL_ADC_IRQHandler+0x2c0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	e017      	b.n	8003048 <HAL_ADC_IRQHandler+0x2e0>
 8003018:	50000100 	.word	0x50000100
 800301c:	50000300 	.word	0x50000300
 8003020:	50000700 	.word	0x50000700
 8003024:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003030:	d004      	beq.n	800303c <HAL_ADC_IRQHandler+0x2d4>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5b      	ldr	r2, [pc, #364]	; (80031a4 <HAL_ADC_IRQHandler+0x43c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d102      	bne.n	8003042 <HAL_ADC_IRQHandler+0x2da>
 800303c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003040:	e000      	b.n	8003044 <HAL_ADC_IRQHandler+0x2dc>
 8003042:	4b59      	ldr	r3, [pc, #356]	; (80031a8 <HAL_ADC_IRQHandler+0x440>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003052:	2b00      	cmp	r3, #0
 8003054:	f040 80ba 	bne.w	80031cc <HAL_ADC_IRQHandler+0x464>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00d      	beq.n	800307e <HAL_ADC_IRQHandler+0x316>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800306c:	2b00      	cmp	r3, #0
 800306e:	f040 80ad 	bne.w	80031cc <HAL_ADC_IRQHandler+0x464>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003078:	2b00      	cmp	r3, #0
 800307a:	f040 80a7 	bne.w	80031cc <HAL_ADC_IRQHandler+0x464>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003088:	2b40      	cmp	r3, #64	; 0x40
 800308a:	f040 809f 	bne.w	80031cc <HAL_ADC_IRQHandler+0x464>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003096:	d004      	beq.n	80030a2 <HAL_ADC_IRQHandler+0x33a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a41      	ldr	r2, [pc, #260]	; (80031a4 <HAL_ADC_IRQHandler+0x43c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d106      	bne.n	80030b0 <HAL_ADC_IRQHandler+0x348>
 80030a2:	4b42      	ldr	r3, [pc, #264]	; (80031ac <HAL_ADC_IRQHandler+0x444>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d03e      	beq.n	800312c <HAL_ADC_IRQHandler+0x3c4>
 80030ae:	e005      	b.n	80030bc <HAL_ADC_IRQHandler+0x354>
 80030b0:	4b3f      	ldr	r3, [pc, #252]	; (80031b0 <HAL_ADC_IRQHandler+0x448>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d037      	beq.n	800312c <HAL_ADC_IRQHandler+0x3c4>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c4:	d004      	beq.n	80030d0 <HAL_ADC_IRQHandler+0x368>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a36      	ldr	r2, [pc, #216]	; (80031a4 <HAL_ADC_IRQHandler+0x43c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d106      	bne.n	80030de <HAL_ADC_IRQHandler+0x376>
 80030d0:	4b36      	ldr	r3, [pc, #216]	; (80031ac <HAL_ADC_IRQHandler+0x444>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	2b06      	cmp	r3, #6
 80030da:	d027      	beq.n	800312c <HAL_ADC_IRQHandler+0x3c4>
 80030dc:	e005      	b.n	80030ea <HAL_ADC_IRQHandler+0x382>
 80030de:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <HAL_ADC_IRQHandler+0x448>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2b06      	cmp	r3, #6
 80030e8:	d020      	beq.n	800312c <HAL_ADC_IRQHandler+0x3c4>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f2:	d004      	beq.n	80030fe <HAL_ADC_IRQHandler+0x396>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2a      	ldr	r2, [pc, #168]	; (80031a4 <HAL_ADC_IRQHandler+0x43c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d106      	bne.n	800310c <HAL_ADC_IRQHandler+0x3a4>
 80030fe:	4b2b      	ldr	r3, [pc, #172]	; (80031ac <HAL_ADC_IRQHandler+0x444>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	2b07      	cmp	r3, #7
 8003108:	d010      	beq.n	800312c <HAL_ADC_IRQHandler+0x3c4>
 800310a:	e005      	b.n	8003118 <HAL_ADC_IRQHandler+0x3b0>
 800310c:	4b28      	ldr	r3, [pc, #160]	; (80031b0 <HAL_ADC_IRQHandler+0x448>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	2b07      	cmp	r3, #7
 8003116:	d009      	beq.n	800312c <HAL_ADC_IRQHandler+0x3c4>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003120:	d004      	beq.n	800312c <HAL_ADC_IRQHandler+0x3c4>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a20      	ldr	r2, [pc, #128]	; (80031a8 <HAL_ADC_IRQHandler+0x440>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d104      	bne.n	8003136 <HAL_ADC_IRQHandler+0x3ce>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	e00f      	b.n	8003156 <HAL_ADC_IRQHandler+0x3ee>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800313e:	d004      	beq.n	800314a <HAL_ADC_IRQHandler+0x3e2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <HAL_ADC_IRQHandler+0x43c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d102      	bne.n	8003150 <HAL_ADC_IRQHandler+0x3e8>
 800314a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800314e:	e000      	b.n	8003152 <HAL_ADC_IRQHandler+0x3ea>
 8003150:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <HAL_ADC_IRQHandler+0x440>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d135      	bne.n	80031cc <HAL_ADC_IRQHandler+0x464>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d122      	bne.n	80031b4 <HAL_ADC_IRQHandler+0x44c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800317c:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d11a      	bne.n	80031cc <HAL_ADC_IRQHandler+0x464>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f043 0201 	orr.w	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
 80031a2:	e013      	b.n	80031cc <HAL_ADC_IRQHandler+0x464>
 80031a4:	50000100 	.word	0x50000100
 80031a8:	50000400 	.word	0x50000400
 80031ac:	50000300 	.word	0x50000300
 80031b0:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f043 0210 	orr.w	r2, r3, #16
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f9ab 	bl	8003528 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2260      	movs	r2, #96	; 0x60
 80031d8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e4:	2b80      	cmp	r3, #128	; 0x80
 80031e6:	d113      	bne.n	8003210 <HAL_ADC_IRQHandler+0x4a8>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f2:	2b80      	cmp	r3, #128	; 0x80
 80031f4:	d10c      	bne.n	8003210 <HAL_ADC_IRQHandler+0x4a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff f93e 	bl	8002484 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2280      	movs	r2, #128	; 0x80
 800320e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321e:	d115      	bne.n	800324c <HAL_ADC_IRQHandler+0x4e4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800322e:	d10d      	bne.n	800324c <HAL_ADC_IRQHandler+0x4e4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f987 	bl	8003550 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800324a:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800325a:	d115      	bne.n	8003288 <HAL_ADC_IRQHandler+0x520>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800326a:	d10d      	bne.n	8003288 <HAL_ADC_IRQHandler+0x520>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f973 	bl	8003564 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003286:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b10      	cmp	r3, #16
 8003294:	d149      	bne.n	800332a <HAL_ADC_IRQHandler+0x5c2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b10      	cmp	r3, #16
 80032a2:	d142      	bne.n	800332a <HAL_ADC_IRQHandler+0x5c2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d102      	bne.n	80032b2 <HAL_ADC_IRQHandler+0x54a>
    {
      overrun_error = 1U;
 80032ac:	2301      	movs	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	e025      	b.n	80032fe <HAL_ADC_IRQHandler+0x596>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ba:	d004      	beq.n	80032c6 <HAL_ADC_IRQHandler+0x55e>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a2e      	ldr	r2, [pc, #184]	; (800337c <HAL_ADC_IRQHandler+0x614>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d101      	bne.n	80032ca <HAL_ADC_IRQHandler+0x562>
 80032c6:	4b2e      	ldr	r3, [pc, #184]	; (8003380 <HAL_ADC_IRQHandler+0x618>)
 80032c8:	e000      	b.n	80032cc <HAL_ADC_IRQHandler+0x564>
 80032ca:	4b2e      	ldr	r3, [pc, #184]	; (8003384 <HAL_ADC_IRQHandler+0x61c>)
 80032cc:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HAL_ADC_IRQHandler+0x586>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d10a      	bne.n	80032fe <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 80032e8:	2301      	movs	r3, #1
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	e007      	b.n	80032fe <HAL_ADC_IRQHandler+0x596>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 80032fa:	2301      	movs	r3, #1
 80032fc:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10e      	bne.n	8003322 <HAL_ADC_IRQHandler+0x5ba>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	f043 0202 	orr.w	r2, r3, #2
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff f8bb 	bl	8002498 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2210      	movs	r2, #16
 8003328:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003338:	d11b      	bne.n	8003372 <HAL_ADC_IRQHandler+0x60a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003348:	d113      	bne.n	8003372 <HAL_ADC_IRQHandler+0x60a>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	f043 0208 	orr.w	r2, r3, #8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800336a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f8e5 	bl	800353c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003372:	bf00      	nop
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	50000100 	.word	0x50000100
 8003380:	50000300 	.word	0x50000300
 8003384:	50000700 	.word	0x50000700

08003388 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b09a      	sub	sp, #104	; 0x68
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_HandleTypeDef tmphadcSlave = {0};
 800339a:	f107 0310 	add.w	r3, r7, #16
 800339e:	2250      	movs	r2, #80	; 0x50
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f005 fcda 	bl	8008d5c <memset>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e0a2      	b.n	80034fc <HAL_ADCEx_MultiModeStart_DMA+0x174>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Perform ADC enable and conversion start if no conversion is on going */
  /* (check on ADC master only) */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f040 8092 	bne.w	80034f2 <HAL_ADCEx_MultiModeStart_DMA+0x16a>
  {
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    /* (Depending on STM32F3 product, there may be up to 2 ADC slaves)        */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033d6:	d102      	bne.n	80033de <HAL_ADCEx_MultiModeStart_DMA+0x56>
 80033d8:	4b4a      	ldr	r3, [pc, #296]	; (8003504 <HAL_ADCEx_MultiModeStart_DMA+0x17c>)
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	e009      	b.n	80033f2 <HAL_ADCEx_MultiModeStart_DMA+0x6a>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a49      	ldr	r2, [pc, #292]	; (8003508 <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d102      	bne.n	80033ee <HAL_ADCEx_MultiModeStart_DMA+0x66>
 80033e8:	4b48      	ldr	r3, [pc, #288]	; (800350c <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	e001      	b.n	80033f2 <HAL_ADCEx_MultiModeStart_DMA+0x6a>
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
    
    if (tmphadcSlave.Instance == NULL)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10b      	bne.n	8003410 <HAL_ADCEx_MultiModeStart_DMA+0x88>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e075      	b.n	80034fc <HAL_ADCEx_MultiModeStart_DMA+0x174>
    }
    
    
    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 fcf5 	bl	8003e00 <ADC_Enable>
 8003416:	4603      	mov	r3, r0
 8003418:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (tmp_hal_status == HAL_OK)
 800341c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003420:	2b00      	cmp	r3, #0
 8003422:	d107      	bne.n	8003434 <HAL_ADCEx_MultiModeStart_DMA+0xac>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8003424:	f107 0310 	add.w	r3, r7, #16
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fce9 	bl	8003e00 <ADC_Enable>
 800342e:	4603      	mov	r3, r0
 8003430:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    }
    
    /* Start conversion all ADCs of multimode are effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003434:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003438:	2b00      	cmp	r3, #0
 800343a:	d155      	bne.n	80034e8 <HAL_ADCEx_MultiModeStart_DMA+0x160>
    {
      /* Set ADC state (ADC master)                                           */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003440:	4b33      	ldr	r3, [pc, #204]	; (8003510 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8003442:	4013      	ands	r3, r2
 8003444:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP | HAL_ADC_STATE_MULTIMODE_SLAVE,
                        HAL_ADC_STATE_REG_BUSY);
        
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <HAL_ADCEx_MultiModeStart_DMA+0xe2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003462:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	645a      	str	r2, [r3, #68]	; 0x44
      
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	4a25      	ldr	r2, [pc, #148]	; (8003514 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
         
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	4a24      	ldr	r2, [pc, #144]	; (8003518 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	4a23      	ldr	r2, [pc, #140]	; (800351c <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003498:	d004      	beq.n	80034a4 <HAL_ADCEx_MultiModeStart_DMA+0x11c>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a19      	ldr	r2, [pc, #100]	; (8003504 <HAL_ADCEx_MultiModeStart_DMA+0x17c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_ADCEx_MultiModeStart_DMA+0x120>
 80034a4:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <HAL_ADCEx_MultiModeStart_DMA+0x198>)
 80034a6:	e000      	b.n	80034aa <HAL_ADCEx_MultiModeStart_DMA+0x122>
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <HAL_ADCEx_MultiModeStart_DMA+0x19c>)
 80034aa:	663b      	str	r3, [r7, #96]	; 0x60
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	221c      	movs	r2, #28
 80034b2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0210 	orr.w	r2, r2, #16
 80034c2:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80034c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ca:	330c      	adds	r3, #12
 80034cc:	4619      	mov	r1, r3
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f000 feb7 	bl	8004244 <HAL_DMA_Start_IT>
          
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0204 	orr.w	r2, r2, #4
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	e007      	b.n	80034f8 <HAL_ADCEx_MultiModeStart_DMA+0x170>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80034f0:	e002      	b.n	80034f8 <HAL_ADCEx_MultiModeStart_DMA+0x170>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
 80034f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  /* Return function status */
  return tmp_hal_status;
 80034f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3768      	adds	r7, #104	; 0x68
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	50000100 	.word	0x50000100
 8003508:	50000400 	.word	0x50000400
 800350c:	50000500 	.word	0x50000500
 8003510:	ffeff0fe 	.word	0xffeff0fe
 8003514:	08003d35 	.word	0x08003d35
 8003518:	08003daf 	.word	0x08003daf
 800351c:	08003dcb 	.word	0x08003dcb
 8003520:	50000300 	.word	0x50000300
 8003524:	50000700 	.word	0x50000700

08003528 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003578:	b480      	push	{r7}
 800357a:	b09b      	sub	sp, #108	; 0x6c
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_ADC_ConfigChannel+0x22>
 8003596:	2302      	movs	r3, #2
 8003598:	e2ca      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x5b8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f040 82ae 	bne.w	8003b0e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d81c      	bhi.n	80035f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	461a      	mov	r2, r3
 80035ce:	231f      	movs	r3, #31
 80035d0:	4093      	lsls	r3, r2
 80035d2:	43db      	mvns	r3, r3
 80035d4:	4019      	ands	r1, r3
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	4413      	add	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	fa00 f203 	lsl.w	r2, r0, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30
 80035f2:	e063      	b.n	80036bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b09      	cmp	r3, #9
 80035fa:	d81e      	bhi.n	800363a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	3b1e      	subs	r3, #30
 8003610:	221f      	movs	r2, #31
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	4019      	ands	r1, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	3b1e      	subs	r3, #30
 800362c:	fa00 f203 	lsl.w	r2, r0, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	635a      	str	r2, [r3, #52]	; 0x34
 8003638:	e040      	b.n	80036bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b0e      	cmp	r3, #14
 8003640:	d81e      	bhi.n	8003680 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	3b3c      	subs	r3, #60	; 0x3c
 8003656:	221f      	movs	r2, #31
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	4019      	ands	r1, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	3b3c      	subs	r3, #60	; 0x3c
 8003672:	fa00 f203 	lsl.w	r2, r0, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	639a      	str	r2, [r3, #56]	; 0x38
 800367e:	e01d      	b.n	80036bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	3b5a      	subs	r3, #90	; 0x5a
 8003694:	221f      	movs	r2, #31
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	4019      	ands	r1, r3
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	4413      	add	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	3b5a      	subs	r3, #90	; 0x5a
 80036b0:	fa00 f203 	lsl.w	r2, r0, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 80e5 	bne.w	8003896 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b09      	cmp	r3, #9
 80036d2:	d91c      	bls.n	800370e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6999      	ldr	r1, [r3, #24]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4413      	add	r3, r2
 80036e4:	3b1e      	subs	r3, #30
 80036e6:	2207      	movs	r2, #7
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	4019      	ands	r1, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6898      	ldr	r0, [r3, #8]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	3b1e      	subs	r3, #30
 8003700:	fa00 f203 	lsl.w	r2, r0, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	619a      	str	r2, [r3, #24]
 800370c:	e019      	b.n	8003742 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6959      	ldr	r1, [r3, #20]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	2207      	movs	r2, #7
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	4019      	ands	r1, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	6898      	ldr	r0, [r3, #8]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4413      	add	r3, r2
 8003736:	fa00 f203 	lsl.w	r2, r0, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	08db      	lsrs	r3, r3, #3
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	3b01      	subs	r3, #1
 8003760:	2b03      	cmp	r3, #3
 8003762:	d84f      	bhi.n	8003804 <HAL_ADC_ConfigChannel+0x28c>
 8003764:	a201      	add	r2, pc, #4	; (adr r2, 800376c <HAL_ADC_ConfigChannel+0x1f4>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	0800377d 	.word	0x0800377d
 8003770:	0800379f 	.word	0x0800379f
 8003774:	080037c1 	.word	0x080037c1
 8003778:	080037e3 	.word	0x080037e3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003782:	4b9a      	ldr	r3, [pc, #616]	; (80039ec <HAL_ADC_ConfigChannel+0x474>)
 8003784:	4013      	ands	r3, r2
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	0691      	lsls	r1, r2, #26
 800378c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800378e:	430a      	orrs	r2, r1
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800379a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800379c:	e07e      	b.n	800389c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80037a4:	4b91      	ldr	r3, [pc, #580]	; (80039ec <HAL_ADC_ConfigChannel+0x474>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	0691      	lsls	r1, r2, #26
 80037ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037b0:	430a      	orrs	r2, r1
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037bc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80037be:	e06d      	b.n	800389c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80037c6:	4b89      	ldr	r3, [pc, #548]	; (80039ec <HAL_ADC_ConfigChannel+0x474>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	0691      	lsls	r1, r2, #26
 80037d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037d2:	430a      	orrs	r2, r1
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037de:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80037e0:	e05c      	b.n	800389c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80037e8:	4b80      	ldr	r3, [pc, #512]	; (80039ec <HAL_ADC_ConfigChannel+0x474>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	0691      	lsls	r1, r2, #26
 80037f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037f4:	430a      	orrs	r2, r1
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003800:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003802:	e04b      	b.n	800389c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	069b      	lsls	r3, r3, #26
 8003814:	429a      	cmp	r2, r3
 8003816:	d107      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003826:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800382e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	069b      	lsls	r3, r3, #26
 8003838:	429a      	cmp	r2, r3
 800383a:	d107      	bne.n	800384c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800384a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003852:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	069b      	lsls	r3, r3, #26
 800385c:	429a      	cmp	r2, r3
 800385e:	d107      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800386e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003876:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	069b      	lsls	r3, r3, #26
 8003880:	429a      	cmp	r2, r3
 8003882:	d10a      	bne.n	800389a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003892:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003894:	e001      	b.n	800389a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003896:	bf00      	nop
 8003898:	e000      	b.n	800389c <HAL_ADC_ConfigChannel+0x324>
      break;
 800389a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d108      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x344>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x344>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <HAL_ADC_ConfigChannel+0x346>
 80038bc:	2300      	movs	r3, #0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f040 8130 	bne.w	8003b24 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d00f      	beq.n	80038ec <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2201      	movs	r2, #1
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43da      	mvns	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	400a      	ands	r2, r1
 80038e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80038ea:	e049      	b.n	8003980 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2201      	movs	r2, #1
 80038fa:	409a      	lsls	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b09      	cmp	r3, #9
 800390c:	d91c      	bls.n	8003948 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6999      	ldr	r1, [r3, #24]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4613      	mov	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	3b1b      	subs	r3, #27
 8003920:	2207      	movs	r2, #7
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43db      	mvns	r3, r3
 8003928:	4019      	ands	r1, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	6898      	ldr	r0, [r3, #8]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4613      	mov	r3, r2
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	4413      	add	r3, r2
 8003938:	3b1b      	subs	r3, #27
 800393a:	fa00 f203 	lsl.w	r2, r0, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	619a      	str	r2, [r3, #24]
 8003946:	e01b      	b.n	8003980 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6959      	ldr	r1, [r3, #20]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	4613      	mov	r3, r2
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	4413      	add	r3, r2
 800395a:	2207      	movs	r2, #7
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	4019      	ands	r1, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	6898      	ldr	r0, [r3, #8]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	4613      	mov	r3, r2
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	4413      	add	r3, r2
 8003974:	fa00 f203 	lsl.w	r2, r0, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003988:	d004      	beq.n	8003994 <HAL_ADC_ConfigChannel+0x41c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a18      	ldr	r2, [pc, #96]	; (80039f0 <HAL_ADC_ConfigChannel+0x478>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d101      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x420>
 8003994:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <HAL_ADC_ConfigChannel+0x47c>)
 8003996:	e000      	b.n	800399a <HAL_ADC_ConfigChannel+0x422>
 8003998:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <HAL_ADC_ConfigChannel+0x480>)
 800399a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d105      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80039a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d015      	beq.n	80039dc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80039b4:	2b11      	cmp	r3, #17
 80039b6:	d105      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80039b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00b      	beq.n	80039dc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80039c8:	2b12      	cmp	r3, #18
 80039ca:	f040 80ab 	bne.w	8003b24 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80039ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f040 80a4 	bne.w	8003b24 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e4:	d10a      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x484>
 80039e6:	4b02      	ldr	r3, [pc, #8]	; (80039f0 <HAL_ADC_ConfigChannel+0x478>)
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	e022      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x4ba>
 80039ec:	83fff000 	.word	0x83fff000
 80039f0:	50000100 	.word	0x50000100
 80039f4:	50000300 	.word	0x50000300
 80039f8:	50000700 	.word	0x50000700
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a4e      	ldr	r2, [pc, #312]	; (8003b3c <HAL_ADC_ConfigChannel+0x5c4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d103      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x496>
 8003a06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	e011      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x4ba>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a4b      	ldr	r2, [pc, #300]	; (8003b40 <HAL_ADC_ConfigChannel+0x5c8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d102      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x4a6>
 8003a18:	4b4a      	ldr	r3, [pc, #296]	; (8003b44 <HAL_ADC_ConfigChannel+0x5cc>)
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e009      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x4ba>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a48      	ldr	r2, [pc, #288]	; (8003b44 <HAL_ADC_ConfigChannel+0x5cc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d102      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x4b6>
 8003a28:	4b45      	ldr	r3, [pc, #276]	; (8003b40 <HAL_ADC_ConfigChannel+0x5c8>)
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	e001      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x4ba>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d108      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x4da>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x4da>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x4dc>
 8003a52:	2300      	movs	r3, #0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d150      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a58:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d010      	beq.n	8003a80 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d107      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x502>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x502>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x504>
 8003a7a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d13c      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d11d      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x54c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a90:	d118      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a9c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a9e:	4b2a      	ldr	r3, [pc, #168]	; (8003b48 <HAL_ADC_ConfigChannel+0x5d0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <HAL_ADC_ConfigChannel+0x5d4>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	0c9a      	lsrs	r2, r3, #18
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ab4:	e002      	b.n	8003abc <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f9      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ac2:	e02e      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b11      	cmp	r3, #17
 8003aca:	d10b      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x56c>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ad4:	d106      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ae0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ae2:	e01e      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b12      	cmp	r3, #18
 8003aea:	d11a      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003af6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003af8:	e013      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f043 0220 	orr.w	r2, r3, #32
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003b0c:	e00a      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f043 0220 	orr.w	r2, r3, #32
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003b20:	e000      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b22:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	376c      	adds	r7, #108	; 0x6c
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	50000100 	.word	0x50000100
 8003b40:	50000400 	.word	0x50000400
 8003b44:	50000500 	.word	0x50000500
 8003b48:	20000000 	.word	0x20000000
 8003b4c:	431bde83 	.word	0x431bde83

08003b50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b099      	sub	sp, #100	; 0x64
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b68:	d102      	bne.n	8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003b6a:	4b6d      	ldr	r3, [pc, #436]	; (8003d20 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	e01a      	b.n	8003ba6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a6a      	ldr	r2, [pc, #424]	; (8003d20 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d103      	bne.n	8003b82 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003b7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	e011      	b.n	8003ba6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a67      	ldr	r2, [pc, #412]	; (8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d102      	bne.n	8003b92 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b8c:	4b66      	ldr	r3, [pc, #408]	; (8003d28 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	e009      	b.n	8003ba6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a64      	ldr	r2, [pc, #400]	; (8003d28 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d102      	bne.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003b9c:	4b61      	ldr	r3, [pc, #388]	; (8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	e001      	b.n	8003ba6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0b0      	b.n	8003d12 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e0a9      	b.n	8003d12 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f040 808d 	bne.w	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f040 8086 	bne.w	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bec:	d004      	beq.n	8003bf8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a4b      	ldr	r2, [pc, #300]	; (8003d20 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003bf8:	4b4c      	ldr	r3, [pc, #304]	; (8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003bfa:	e000      	b.n	8003bfe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003bfc:	4b4c      	ldr	r3, [pc, #304]	; (8003d30 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003bfe:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d040      	beq.n	8003c8a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003c08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c1a:	035b      	lsls	r3, r3, #13
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c22:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d108      	bne.n	8003c44 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003c44:	2300      	movs	r3, #0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d15c      	bne.n	8003d04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d107      	bne.n	8003c66 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003c66:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d14b      	bne.n	8003d04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003c6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c74:	f023 030f 	bic.w	r3, r3, #15
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	6811      	ldr	r1, [r2, #0]
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	6892      	ldr	r2, [r2, #8]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	431a      	orrs	r2, r3
 8003c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c86:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c88:	e03c      	b.n	8003d04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c94:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d108      	bne.n	8003cb6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d123      	bne.n	8003d04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d107      	bne.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003cd8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d112      	bne.n	8003d04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ce6:	f023 030f 	bic.w	r3, r3, #15
 8003cea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cec:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cee:	e009      	b.n	8003d04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003d02:	e000      	b.n	8003d06 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d04:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003d0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003d12:	4618      	mov	r0, r3
 8003d14:	3764      	adds	r7, #100	; 0x64
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	50000100 	.word	0x50000100
 8003d24:	50000400 	.word	0x50000400
 8003d28:	50000500 	.word	0x50000500
 8003d2c:	50000300 	.word	0x50000300
 8003d30:	50000700 	.word	0x50000700

08003d34 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d126      	bne.n	8003d9c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d115      	bne.n	8003d94 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d111      	bne.n	8003d94 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d105      	bne.n	8003d94 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	f043 0201 	orr.w	r2, r3, #1
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f7fc fa1d 	bl	80001d4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003d9a:	e004      	b.n	8003da6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4798      	blx	r3
}
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b084      	sub	sp, #16
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f7fe fb57 	bl	8002470 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	f043 0204 	orr.w	r2, r3, #4
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f7fe fb51 	bl	8002498 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d108      	bne.n	8003e2c <ADC_Enable+0x2c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <ADC_Enable+0x2c>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <ADC_Enable+0x2e>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d143      	bne.n	8003eba <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	4b22      	ldr	r3, [pc, #136]	; (8003ec4 <ADC_Enable+0xc4>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00d      	beq.n	8003e5c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	f043 0210 	orr.w	r2, r3, #16
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e02f      	b.n	8003ebc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003e6c:	f7fe faf4 	bl	8002458 <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e72:	e01b      	b.n	8003eac <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e74:	f7fe faf0 	bl	8002458 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d914      	bls.n	8003eac <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d00d      	beq.n	8003eac <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	f043 0210 	orr.w	r2, r3, #16
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea0:	f043 0201 	orr.w	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e007      	b.n	8003ebc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d1dc      	bne.n	8003e74 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	8000003f 	.word	0x8000003f

08003ec8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d108      	bne.n	8003ef4 <ADC_Disable+0x2c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <ADC_Disable+0x2c>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <ADC_Disable+0x2e>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d047      	beq.n	8003f8a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 030d 	and.w	r3, r3, #13
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d10f      	bne.n	8003f28 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0202 	orr.w	r2, r2, #2
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2203      	movs	r2, #3
 8003f1e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003f20:	f7fe fa9a 	bl	8002458 <HAL_GetTick>
 8003f24:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003f26:	e029      	b.n	8003f7c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f043 0210 	orr.w	r2, r3, #16
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	f043 0201 	orr.w	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e023      	b.n	8003f8c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f44:	f7fe fa88 	bl	8002458 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d914      	bls.n	8003f7c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d10d      	bne.n	8003f7c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	f043 0210 	orr.w	r2, r3, #16
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	f043 0201 	orr.w	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e007      	b.n	8003f8c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d0dc      	beq.n	8003f44 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fc6:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	60d3      	str	r3, [r2, #12]
}
 8003fcc:	bf00      	nop
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	e000ed00 	.word	0xe000ed00

08003fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	0a1b      	lsrs	r3, r3, #8
 8003fe6:	f003 0307 	and.w	r3, r3, #7
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	e000ed00 	.word	0xe000ed00

08003ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004006:	2b00      	cmp	r3, #0
 8004008:	db0b      	blt.n	8004022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800400a:	79fb      	ldrb	r3, [r7, #7]
 800400c:	f003 021f 	and.w	r2, r3, #31
 8004010:	4907      	ldr	r1, [pc, #28]	; (8004030 <__NVIC_EnableIRQ+0x38>)
 8004012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	2001      	movs	r0, #1
 800401a:	fa00 f202 	lsl.w	r2, r0, r2
 800401e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	e000e100 	.word	0xe000e100

08004034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	6039      	str	r1, [r7, #0]
 800403e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004044:	2b00      	cmp	r3, #0
 8004046:	db0a      	blt.n	800405e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	b2da      	uxtb	r2, r3
 800404c:	490c      	ldr	r1, [pc, #48]	; (8004080 <__NVIC_SetPriority+0x4c>)
 800404e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004052:	0112      	lsls	r2, r2, #4
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	440b      	add	r3, r1
 8004058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800405c:	e00a      	b.n	8004074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	4908      	ldr	r1, [pc, #32]	; (8004084 <__NVIC_SetPriority+0x50>)
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	3b04      	subs	r3, #4
 800406c:	0112      	lsls	r2, r2, #4
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	440b      	add	r3, r1
 8004072:	761a      	strb	r2, [r3, #24]
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000e100 	.word	0xe000e100
 8004084:	e000ed00 	.word	0xe000ed00

08004088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004088:	b480      	push	{r7}
 800408a:	b089      	sub	sp, #36	; 0x24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f1c3 0307 	rsb	r3, r3, #7
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	bf28      	it	cs
 80040a6:	2304      	movcs	r3, #4
 80040a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	3304      	adds	r3, #4
 80040ae:	2b06      	cmp	r3, #6
 80040b0:	d902      	bls.n	80040b8 <NVIC_EncodePriority+0x30>
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3b03      	subs	r3, #3
 80040b6:	e000      	b.n	80040ba <NVIC_EncodePriority+0x32>
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040bc:	f04f 32ff 	mov.w	r2, #4294967295
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	43da      	mvns	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	401a      	ands	r2, r3
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040d0:	f04f 31ff 	mov.w	r1, #4294967295
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	fa01 f303 	lsl.w	r3, r1, r3
 80040da:	43d9      	mvns	r1, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e0:	4313      	orrs	r3, r2
         );
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3724      	adds	r7, #36	; 0x24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
	...

080040f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004100:	d301      	bcc.n	8004106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004102:	2301      	movs	r3, #1
 8004104:	e00f      	b.n	8004126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004106:	4a0a      	ldr	r2, [pc, #40]	; (8004130 <SysTick_Config+0x40>)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3b01      	subs	r3, #1
 800410c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800410e:	210f      	movs	r1, #15
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
 8004114:	f7ff ff8e 	bl	8004034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <SysTick_Config+0x40>)
 800411a:	2200      	movs	r2, #0
 800411c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800411e:	4b04      	ldr	r3, [pc, #16]	; (8004130 <SysTick_Config+0x40>)
 8004120:	2207      	movs	r2, #7
 8004122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	e000e010 	.word	0xe000e010

08004134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff ff29 	bl	8003f94 <__NVIC_SetPriorityGrouping>
}
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b086      	sub	sp, #24
 800414e:	af00      	add	r7, sp, #0
 8004150:	4603      	mov	r3, r0
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
 8004156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800415c:	f7ff ff3e 	bl	8003fdc <__NVIC_GetPriorityGrouping>
 8004160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	6978      	ldr	r0, [r7, #20]
 8004168:	f7ff ff8e 	bl	8004088 <NVIC_EncodePriority>
 800416c:	4602      	mov	r2, r0
 800416e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff ff5d 	bl	8004034 <__NVIC_SetPriority>
}
 800417a:	bf00      	nop
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	4603      	mov	r3, r0
 800418a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800418c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff ff31 	bl	8003ff8 <__NVIC_EnableIRQ>
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff ffa2 	bl	80040f0 <SysTick_Config>
 80041ac:	4603      	mov	r3, r0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e037      	b.n	800423c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80041e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80041f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004208:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f9b8 	bl	8004594 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}  
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_DMA_Start_IT+0x20>
 8004260:	2302      	movs	r3, #2
 8004262:	e04a      	b.n	80042fa <HAL_DMA_Start_IT+0xb6>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004272:	2b01      	cmp	r3, #1
 8004274:	d13a      	bne.n	80042ec <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2202      	movs	r2, #2
 800427a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f94b 	bl	8004536 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 020e 	orr.w	r2, r2, #14
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	e00f      	b.n	80042da <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 020a 	orr.w	r2, r2, #10
 80042c8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0204 	bic.w	r2, r2, #4
 80042d8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f042 0201 	orr.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e005      	b.n	80042f8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
 80042f6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004310:	2b02      	cmp	r3, #2
 8004312:	d008      	beq.n	8004326 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2204      	movs	r2, #4
 8004318:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e020      	b.n	8004368 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 020e 	bic.w	r2, r2, #14
 8004334:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434e:	2101      	movs	r1, #1
 8004350:	fa01 f202 	lsl.w	r2, r1, r2
 8004354:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004386:	2b02      	cmp	r3, #2
 8004388:	d005      	beq.n	8004396 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2204      	movs	r2, #4
 800438e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
 8004394:	e027      	b.n	80043e6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 020e 	bic.w	r2, r2, #14
 80043a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0201 	bic.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043be:	2101      	movs	r1, #1
 80043c0:	fa01 f202 	lsl.w	r2, r1, r2
 80043c4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	4798      	blx	r3
    } 
  }
  return status;
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	2204      	movs	r2, #4
 800440e:	409a      	lsls	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4013      	ands	r3, r2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d024      	beq.n	8004462 <HAL_DMA_IRQHandler+0x72>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01f      	beq.n	8004462 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d107      	bne.n	8004440 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0204 	bic.w	r2, r2, #4
 800443e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004448:	2104      	movs	r1, #4
 800444a:	fa01 f202 	lsl.w	r2, r1, r2
 800444e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	2b00      	cmp	r3, #0
 8004456:	d06a      	beq.n	800452e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004460:	e065      	b.n	800452e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	2202      	movs	r2, #2
 8004468:	409a      	lsls	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4013      	ands	r3, r2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d02c      	beq.n	80044cc <HAL_DMA_IRQHandler+0xdc>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d027      	beq.n	80044cc <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10b      	bne.n	80044a2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 020a 	bic.w	r2, r2, #10
 8004498:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044aa:	2102      	movs	r1, #2
 80044ac:	fa01 f202 	lsl.w	r2, r1, r2
 80044b0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d035      	beq.n	800452e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80044ca:	e030      	b.n	800452e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	2208      	movs	r2, #8
 80044d2:	409a      	lsls	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d028      	beq.n	800452e <HAL_DMA_IRQHandler+0x13e>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d023      	beq.n	800452e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 020e 	bic.w	r2, r2, #14
 80044f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fe:	2101      	movs	r1, #1
 8004500:	fa01 f202 	lsl.w	r2, r1, r2
 8004504:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	4798      	blx	r3
    }
  }
}  
 800452c:	e7ff      	b.n	800452e <HAL_DMA_IRQHandler+0x13e>
 800452e:	bf00      	nop
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454c:	2101      	movs	r1, #1
 800454e:	fa01 f202 	lsl.w	r2, r1, r2
 8004552:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b10      	cmp	r3, #16
 8004562:	d108      	bne.n	8004576 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004574:	e007      	b.n	8004586 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	60da      	str	r2, [r3, #12]
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <DMA_CalcBaseAndBitshift+0x60>)
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d80f      	bhi.n	80045c8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <DMA_CalcBaseAndBitshift+0x64>)
 80045b0:	4413      	add	r3, r2
 80045b2:	4a12      	ldr	r2, [pc, #72]	; (80045fc <DMA_CalcBaseAndBitshift+0x68>)
 80045b4:	fba2 2303 	umull	r2, r3, r2, r3
 80045b8:	091b      	lsrs	r3, r3, #4
 80045ba:	009a      	lsls	r2, r3, #2
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a0f      	ldr	r2, [pc, #60]	; (8004600 <DMA_CalcBaseAndBitshift+0x6c>)
 80045c4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80045c6:	e00e      	b.n	80045e6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <DMA_CalcBaseAndBitshift+0x70>)
 80045d0:	4413      	add	r3, r2
 80045d2:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <DMA_CalcBaseAndBitshift+0x68>)
 80045d4:	fba2 2303 	umull	r2, r3, r2, r3
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	009a      	lsls	r2, r3, #2
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a09      	ldr	r2, [pc, #36]	; (8004608 <DMA_CalcBaseAndBitshift+0x74>)
 80045e4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40020407 	.word	0x40020407
 80045f8:	bffdfff8 	.word	0xbffdfff8
 80045fc:	cccccccd 	.word	0xcccccccd
 8004600:	40020000 	.word	0x40020000
 8004604:	bffdfbf8 	.word	0xbffdfbf8
 8004608:	40020400 	.word	0x40020400

0800460c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800461a:	e160      	b.n	80048de <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	2101      	movs	r1, #1
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	fa01 f303 	lsl.w	r3, r1, r3
 8004628:	4013      	ands	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 8152 	beq.w	80048d8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d005      	beq.n	800464c <HAL_GPIO_Init+0x40>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d130      	bne.n	80046ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	2203      	movs	r2, #3
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004682:	2201      	movs	r2, #1
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4013      	ands	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	f003 0201 	and.w	r2, r3, #1
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d017      	beq.n	80046ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	2203      	movs	r2, #3
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43db      	mvns	r3, r3
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4013      	ands	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d123      	bne.n	800473e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	08da      	lsrs	r2, r3, #3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3208      	adds	r2, #8
 80046fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	220f      	movs	r2, #15
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4013      	ands	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	08da      	lsrs	r2, r3, #3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3208      	adds	r2, #8
 8004738:	6939      	ldr	r1, [r7, #16]
 800473a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	2203      	movs	r2, #3
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 0203 	and.w	r2, r3, #3
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80ac 	beq.w	80048d8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004780:	4b5e      	ldr	r3, [pc, #376]	; (80048fc <HAL_GPIO_Init+0x2f0>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	4a5d      	ldr	r2, [pc, #372]	; (80048fc <HAL_GPIO_Init+0x2f0>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6193      	str	r3, [r2, #24]
 800478c:	4b5b      	ldr	r3, [pc, #364]	; (80048fc <HAL_GPIO_Init+0x2f0>)
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004798:	4a59      	ldr	r2, [pc, #356]	; (8004900 <HAL_GPIO_Init+0x2f4>)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	089b      	lsrs	r3, r3, #2
 800479e:	3302      	adds	r3, #2
 80047a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	220f      	movs	r2, #15
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4013      	ands	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047c2:	d025      	beq.n	8004810 <HAL_GPIO_Init+0x204>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a4f      	ldr	r2, [pc, #316]	; (8004904 <HAL_GPIO_Init+0x2f8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d01f      	beq.n	800480c <HAL_GPIO_Init+0x200>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a4e      	ldr	r2, [pc, #312]	; (8004908 <HAL_GPIO_Init+0x2fc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d019      	beq.n	8004808 <HAL_GPIO_Init+0x1fc>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a4d      	ldr	r2, [pc, #308]	; (800490c <HAL_GPIO_Init+0x300>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <HAL_GPIO_Init+0x1f8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a4c      	ldr	r2, [pc, #304]	; (8004910 <HAL_GPIO_Init+0x304>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00d      	beq.n	8004800 <HAL_GPIO_Init+0x1f4>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a4b      	ldr	r2, [pc, #300]	; (8004914 <HAL_GPIO_Init+0x308>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d007      	beq.n	80047fc <HAL_GPIO_Init+0x1f0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a4a      	ldr	r2, [pc, #296]	; (8004918 <HAL_GPIO_Init+0x30c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_GPIO_Init+0x1ec>
 80047f4:	2306      	movs	r3, #6
 80047f6:	e00c      	b.n	8004812 <HAL_GPIO_Init+0x206>
 80047f8:	2307      	movs	r3, #7
 80047fa:	e00a      	b.n	8004812 <HAL_GPIO_Init+0x206>
 80047fc:	2305      	movs	r3, #5
 80047fe:	e008      	b.n	8004812 <HAL_GPIO_Init+0x206>
 8004800:	2304      	movs	r3, #4
 8004802:	e006      	b.n	8004812 <HAL_GPIO_Init+0x206>
 8004804:	2303      	movs	r3, #3
 8004806:	e004      	b.n	8004812 <HAL_GPIO_Init+0x206>
 8004808:	2302      	movs	r3, #2
 800480a:	e002      	b.n	8004812 <HAL_GPIO_Init+0x206>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <HAL_GPIO_Init+0x206>
 8004810:	2300      	movs	r3, #0
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	f002 0203 	and.w	r2, r2, #3
 8004818:	0092      	lsls	r2, r2, #2
 800481a:	4093      	lsls	r3, r2
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004822:	4937      	ldr	r1, [pc, #220]	; (8004900 <HAL_GPIO_Init+0x2f4>)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	089b      	lsrs	r3, r3, #2
 8004828:	3302      	adds	r3, #2
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004830:	4b3a      	ldr	r3, [pc, #232]	; (800491c <HAL_GPIO_Init+0x310>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	43db      	mvns	r3, r3
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004854:	4a31      	ldr	r2, [pc, #196]	; (800491c <HAL_GPIO_Init+0x310>)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800485a:	4b30      	ldr	r3, [pc, #192]	; (800491c <HAL_GPIO_Init+0x310>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	43db      	mvns	r3, r3
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4013      	ands	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800487e:	4a27      	ldr	r2, [pc, #156]	; (800491c <HAL_GPIO_Init+0x310>)
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004884:	4b25      	ldr	r3, [pc, #148]	; (800491c <HAL_GPIO_Init+0x310>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	43db      	mvns	r3, r3
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4013      	ands	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80048a8:	4a1c      	ldr	r2, [pc, #112]	; (800491c <HAL_GPIO_Init+0x310>)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048ae:	4b1b      	ldr	r3, [pc, #108]	; (800491c <HAL_GPIO_Init+0x310>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4013      	ands	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80048d2:	4a12      	ldr	r2, [pc, #72]	; (800491c <HAL_GPIO_Init+0x310>)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	3301      	adds	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f47f ae97 	bne.w	800461c <HAL_GPIO_Init+0x10>
  }
}
 80048ee:	bf00      	nop
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40021000 	.word	0x40021000
 8004900:	40010000 	.word	0x40010000
 8004904:	48000400 	.word	0x48000400
 8004908:	48000800 	.word	0x48000800
 800490c:	48000c00 	.word	0x48000c00
 8004910:	48001000 	.word	0x48001000
 8004914:	48001400 	.word	0x48001400
 8004918:	48001800 	.word	0x48001800
 800491c:	40010400 	.word	0x40010400

08004920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	807b      	strh	r3, [r7, #2]
 800492c:	4613      	mov	r3, r2
 800492e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004930:	787b      	ldrb	r3, [r7, #1]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004936:	887a      	ldrh	r2, [r7, #2]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800493c:	e002      	b.n	8004944 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800493e:	887a      	ldrh	r2, [r7, #2]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004956:	af00      	add	r7, sp, #0
 8004958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800495c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004960:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004966:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d102      	bne.n	8004976 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	f001 b83a 	b.w	80059ea <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800497a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 816f 	beq.w	8004c6a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800498c:	4bb5      	ldr	r3, [pc, #724]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 030c 	and.w	r3, r3, #12
 8004994:	2b04      	cmp	r3, #4
 8004996:	d00c      	beq.n	80049b2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004998:	4bb2      	ldr	r3, [pc, #712]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 030c 	and.w	r3, r3, #12
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d15c      	bne.n	8004a5e <HAL_RCC_OscConfig+0x10e>
 80049a4:	4baf      	ldr	r3, [pc, #700]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b0:	d155      	bne.n	8004a5e <HAL_RCC_OscConfig+0x10e>
 80049b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049b6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80049be:	fa93 f3a3 	rbit	r3, r3
 80049c2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ca:	fab3 f383 	clz	r3, r3
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d102      	bne.n	80049e4 <HAL_RCC_OscConfig+0x94>
 80049de:	4ba1      	ldr	r3, [pc, #644]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	e015      	b.n	8004a10 <HAL_RCC_OscConfig+0xc0>
 80049e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049e8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80049f0:	fa93 f3a3 	rbit	r3, r3
 80049f4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80049f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049fc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004a00:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004a04:	fa93 f3a3 	rbit	r3, r3
 8004a08:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004a0c:	4b95      	ldr	r3, [pc, #596]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a14:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004a18:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004a1c:	fa92 f2a2 	rbit	r2, r2
 8004a20:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004a24:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004a28:	fab2 f282 	clz	r2, r2
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	f042 0220 	orr.w	r2, r2, #32
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	f002 021f 	and.w	r2, r2, #31
 8004a38:	2101      	movs	r1, #1
 8004a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8111 	beq.w	8004c68 <HAL_RCC_OscConfig+0x318>
 8004a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f040 8108 	bne.w	8004c68 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f000 bfc6 	b.w	80059ea <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a6e:	d106      	bne.n	8004a7e <HAL_RCC_OscConfig+0x12e>
 8004a70:	4b7c      	ldr	r3, [pc, #496]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a7b      	ldr	r2, [pc, #492]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	e036      	b.n	8004aec <HAL_RCC_OscConfig+0x19c>
 8004a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x158>
 8004a8e:	4b75      	ldr	r3, [pc, #468]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a74      	ldr	r2, [pc, #464]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	4b72      	ldr	r3, [pc, #456]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a71      	ldr	r2, [pc, #452]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	e021      	b.n	8004aec <HAL_RCC_OscConfig+0x19c>
 8004aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x184>
 8004aba:	4b6a      	ldr	r3, [pc, #424]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a69      	ldr	r2, [pc, #420]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	4b67      	ldr	r3, [pc, #412]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a66      	ldr	r2, [pc, #408]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e00b      	b.n	8004aec <HAL_RCC_OscConfig+0x19c>
 8004ad4:	4b63      	ldr	r3, [pc, #396]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a62      	ldr	r2, [pc, #392]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	4b60      	ldr	r3, [pc, #384]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a5f      	ldr	r2, [pc, #380]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aea:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004af0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d059      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7fd fcac 	bl	8002458 <HAL_GetTick>
 8004b00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b06:	f7fd fca7 	bl	8002458 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d902      	bls.n	8004b1c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	f000 bf67 	b.w	80059ea <HAL_RCC_OscConfig+0x109a>
 8004b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b20:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b24:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004b28:	fa93 f3a3 	rbit	r3, r3
 8004b2c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004b30:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b34:	fab3 f383 	clz	r3, r3
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d102      	bne.n	8004b4e <HAL_RCC_OscConfig+0x1fe>
 8004b48:	4b46      	ldr	r3, [pc, #280]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	e015      	b.n	8004b7a <HAL_RCC_OscConfig+0x22a>
 8004b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b52:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004b5a:	fa93 f3a3 	rbit	r3, r3
 8004b5e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b66:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004b6a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004b6e:	fa93 f3a3 	rbit	r3, r3
 8004b72:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004b76:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b7e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004b82:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004b86:	fa92 f2a2 	rbit	r2, r2
 8004b8a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004b8e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004b92:	fab2 f282 	clz	r2, r2
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	f042 0220 	orr.w	r2, r2, #32
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	f002 021f 	and.w	r2, r2, #31
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0ab      	beq.n	8004b06 <HAL_RCC_OscConfig+0x1b6>
 8004bae:	e05c      	b.n	8004c6a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb0:	f7fd fc52 	bl	8002458 <HAL_GetTick>
 8004bb4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb8:	e00a      	b.n	8004bd0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bba:	f7fd fc4d 	bl	8002458 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	; 0x64
 8004bc8:	d902      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	f000 bf0d 	b.w	80059ea <HAL_RCC_OscConfig+0x109a>
 8004bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bd4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004bdc:	fa93 f3a3 	rbit	r3, r3
 8004be0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004be4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be8:	fab3 f383 	clz	r3, r3
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d102      	bne.n	8004c02 <HAL_RCC_OscConfig+0x2b2>
 8004bfc:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	e015      	b.n	8004c2e <HAL_RCC_OscConfig+0x2de>
 8004c02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c06:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004c0e:	fa93 f3a3 	rbit	r3, r3
 8004c12:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c1a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004c1e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004c22:	fa93 f3a3 	rbit	r3, r3
 8004c26:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004c2a:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <HAL_RCC_OscConfig+0x314>)
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c32:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004c36:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004c3a:	fa92 f2a2 	rbit	r2, r2
 8004c3e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004c42:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004c46:	fab2 f282 	clz	r2, r2
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	f042 0220 	orr.w	r2, r2, #32
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	f002 021f 	and.w	r2, r2, #31
 8004c56:	2101      	movs	r1, #1
 8004c58:	fa01 f202 	lsl.w	r2, r1, r2
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1ab      	bne.n	8004bba <HAL_RCC_OscConfig+0x26a>
 8004c62:	e002      	b.n	8004c6a <HAL_RCC_OscConfig+0x31a>
 8004c64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 817f 	beq.w	8004f7e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c80:	4ba7      	ldr	r3, [pc, #668]	; (8004f20 <HAL_RCC_OscConfig+0x5d0>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 030c 	and.w	r3, r3, #12
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00c      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c8c:	4ba4      	ldr	r3, [pc, #656]	; (8004f20 <HAL_RCC_OscConfig+0x5d0>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 030c 	and.w	r3, r3, #12
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d173      	bne.n	8004d80 <HAL_RCC_OscConfig+0x430>
 8004c98:	4ba1      	ldr	r3, [pc, #644]	; (8004f20 <HAL_RCC_OscConfig+0x5d0>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca4:	d16c      	bne.n	8004d80 <HAL_RCC_OscConfig+0x430>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cac:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004cb0:	fa93 f3a3 	rbit	r3, r3
 8004cb4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004cb8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cbc:	fab3 f383 	clz	r3, r3
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d102      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x386>
 8004cd0:	4b93      	ldr	r3, [pc, #588]	; (8004f20 <HAL_RCC_OscConfig+0x5d0>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	e013      	b.n	8004cfe <HAL_RCC_OscConfig+0x3ae>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cdc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004ce0:	fa93 f3a3 	rbit	r3, r3
 8004ce4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004ce8:	2302      	movs	r3, #2
 8004cea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004cee:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004cf2:	fa93 f3a3 	rbit	r3, r3
 8004cf6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004cfa:	4b89      	ldr	r3, [pc, #548]	; (8004f20 <HAL_RCC_OscConfig+0x5d0>)
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004d04:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004d08:	fa92 f2a2 	rbit	r2, r2
 8004d0c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004d10:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004d14:	fab2 f282 	clz	r2, r2
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	f042 0220 	orr.w	r2, r2, #32
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	f002 021f 	and.w	r2, r2, #31
 8004d24:	2101      	movs	r1, #1
 8004d26:	fa01 f202 	lsl.w	r2, r1, r2
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCC_OscConfig+0x3f6>
 8004d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d002      	beq.n	8004d46 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f000 be52 	b.w	80059ea <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d46:	4b76      	ldr	r3, [pc, #472]	; (8004f20 <HAL_RCC_OscConfig+0x5d0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	21f8      	movs	r1, #248	; 0xf8
 8004d5c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d60:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004d64:	fa91 f1a1 	rbit	r1, r1
 8004d68:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004d6c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004d70:	fab1 f181 	clz	r1, r1
 8004d74:	b2c9      	uxtb	r1, r1
 8004d76:	408b      	lsls	r3, r1
 8004d78:	4969      	ldr	r1, [pc, #420]	; (8004f20 <HAL_RCC_OscConfig+0x5d0>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7e:	e0fe      	b.n	8004f7e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8088 	beq.w	8004ea2 <HAL_RCC_OscConfig+0x552>
 8004d92:	2301      	movs	r3, #1
 8004d94:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d98:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004d9c:	fa93 f3a3 	rbit	r3, r3
 8004da0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004da4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004da8:	fab3 f383 	clz	r3, r3
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004db2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	461a      	mov	r2, r3
 8004dba:	2301      	movs	r3, #1
 8004dbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbe:	f7fd fb4b 	bl	8002458 <HAL_GetTick>
 8004dc2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc6:	e00a      	b.n	8004dde <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc8:	f7fd fb46 	bl	8002458 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d902      	bls.n	8004dde <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	f000 be06 	b.w	80059ea <HAL_RCC_OscConfig+0x109a>
 8004dde:	2302      	movs	r3, #2
 8004de0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004de8:	fa93 f3a3 	rbit	r3, r3
 8004dec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004df0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df4:	fab3 f383 	clz	r3, r3
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d102      	bne.n	8004e0e <HAL_RCC_OscConfig+0x4be>
 8004e08:	4b45      	ldr	r3, [pc, #276]	; (8004f20 <HAL_RCC_OscConfig+0x5d0>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	e013      	b.n	8004e36 <HAL_RCC_OscConfig+0x4e6>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e14:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004e18:	fa93 f3a3 	rbit	r3, r3
 8004e1c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004e20:	2302      	movs	r3, #2
 8004e22:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004e26:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004e2a:	fa93 f3a3 	rbit	r3, r3
 8004e2e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004e32:	4b3b      	ldr	r3, [pc, #236]	; (8004f20 <HAL_RCC_OscConfig+0x5d0>)
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	2202      	movs	r2, #2
 8004e38:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004e3c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004e40:	fa92 f2a2 	rbit	r2, r2
 8004e44:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004e48:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004e4c:	fab2 f282 	clz	r2, r2
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	f042 0220 	orr.w	r2, r2, #32
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	f002 021f 	and.w	r2, r2, #31
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0af      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e68:	4b2d      	ldr	r3, [pc, #180]	; (8004f20 <HAL_RCC_OscConfig+0x5d0>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	21f8      	movs	r1, #248	; 0xf8
 8004e7e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e82:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004e86:	fa91 f1a1 	rbit	r1, r1
 8004e8a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004e8e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004e92:	fab1 f181 	clz	r1, r1
 8004e96:	b2c9      	uxtb	r1, r1
 8004e98:	408b      	lsls	r3, r1
 8004e9a:	4921      	ldr	r1, [pc, #132]	; (8004f20 <HAL_RCC_OscConfig+0x5d0>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	600b      	str	r3, [r1, #0]
 8004ea0:	e06d      	b.n	8004f7e <HAL_RCC_OscConfig+0x62e>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004eac:	fa93 f3a3 	rbit	r3, r3
 8004eb0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004eb4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eb8:	fab3 f383 	clz	r3, r3
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ec2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	461a      	mov	r2, r3
 8004eca:	2300      	movs	r3, #0
 8004ecc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ece:	f7fd fac3 	bl	8002458 <HAL_GetTick>
 8004ed2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ed6:	e00a      	b.n	8004eee <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ed8:	f7fd fabe 	bl	8002458 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d902      	bls.n	8004eee <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	f000 bd7e 	b.w	80059ea <HAL_RCC_OscConfig+0x109a>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ef8:	fa93 f3a3 	rbit	r3, r3
 8004efc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004f00:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f04:	fab3 f383 	clz	r3, r3
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d105      	bne.n	8004f24 <HAL_RCC_OscConfig+0x5d4>
 8004f18:	4b01      	ldr	r3, [pc, #4]	; (8004f20 <HAL_RCC_OscConfig+0x5d0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	e016      	b.n	8004f4c <HAL_RCC_OscConfig+0x5fc>
 8004f1e:	bf00      	nop
 8004f20:	40021000 	.word	0x40021000
 8004f24:	2302      	movs	r3, #2
 8004f26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f2e:	fa93 f3a3 	rbit	r3, r3
 8004f32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f36:	2302      	movs	r3, #2
 8004f38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f40:	fa93 f3a3 	rbit	r3, r3
 8004f44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f48:	4bbf      	ldr	r3, [pc, #764]	; (8005248 <HAL_RCC_OscConfig+0x8f8>)
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004f52:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004f56:	fa92 f2a2 	rbit	r2, r2
 8004f5a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004f5e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004f62:	fab2 f282 	clz	r2, r2
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	f042 0220 	orr.w	r2, r2, #32
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	f002 021f 	and.w	r2, r2, #31
 8004f72:	2101      	movs	r1, #1
 8004f74:	fa01 f202 	lsl.w	r2, r1, r2
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1ac      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 8113 	beq.w	80051ba <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d07c      	beq.n	800509e <HAL_RCC_OscConfig+0x74e>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fae:	fa93 f3a3 	rbit	r3, r3
 8004fb2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004fb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fba:	fab3 f383 	clz	r3, r3
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4ba2      	ldr	r3, [pc, #648]	; (800524c <HAL_RCC_OscConfig+0x8fc>)
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2301      	movs	r3, #1
 8004fcc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fce:	f7fd fa43 	bl	8002458 <HAL_GetTick>
 8004fd2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd6:	e00a      	b.n	8004fee <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fd8:	f7fd fa3e 	bl	8002458 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d902      	bls.n	8004fee <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	f000 bcfe 	b.w	80059ea <HAL_RCC_OscConfig+0x109a>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff8:	fa93 f2a3 	rbit	r2, r3
 8004ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005000:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800500a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800500e:	2202      	movs	r2, #2
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005016:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	fa93 f2a3 	rbit	r2, r3
 8005020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800502e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005032:	2202      	movs	r2, #2
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800503a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	fa93 f2a3 	rbit	r2, r3
 8005044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005048:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800504c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800504e:	4b7e      	ldr	r3, [pc, #504]	; (8005248 <HAL_RCC_OscConfig+0x8f8>)
 8005050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005056:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800505a:	2102      	movs	r1, #2
 800505c:	6019      	str	r1, [r3, #0]
 800505e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005062:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	fa93 f1a3 	rbit	r1, r3
 800506c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005070:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005074:	6019      	str	r1, [r3, #0]
  return result;
 8005076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800507a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	fab3 f383 	clz	r3, r3
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800508a:	b2db      	uxtb	r3, r3
 800508c:	f003 031f 	and.w	r3, r3, #31
 8005090:	2101      	movs	r1, #1
 8005092:	fa01 f303 	lsl.w	r3, r1, r3
 8005096:	4013      	ands	r3, r2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d09d      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x688>
 800509c:	e08d      	b.n	80051ba <HAL_RCC_OscConfig+0x86a>
 800509e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050a6:	2201      	movs	r2, #1
 80050a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	fa93 f2a3 	rbit	r2, r3
 80050b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050c0:	601a      	str	r2, [r3, #0]
  return result;
 80050c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050ca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050cc:	fab3 f383 	clz	r3, r3
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	4b5d      	ldr	r3, [pc, #372]	; (800524c <HAL_RCC_OscConfig+0x8fc>)
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	461a      	mov	r2, r3
 80050dc:	2300      	movs	r3, #0
 80050de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e0:	f7fd f9ba 	bl	8002458 <HAL_GetTick>
 80050e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e8:	e00a      	b.n	8005100 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ea:	f7fd f9b5 	bl	8002458 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d902      	bls.n	8005100 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	f000 bc75 	b.w	80059ea <HAL_RCC_OscConfig+0x109a>
 8005100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005104:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005108:	2202      	movs	r2, #2
 800510a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005110:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	fa93 f2a3 	rbit	r2, r3
 800511a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800511e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005128:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800512c:	2202      	movs	r2, #2
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005134:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	fa93 f2a3 	rbit	r2, r3
 800513e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800514c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005150:	2202      	movs	r2, #2
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005158:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	fa93 f2a3 	rbit	r2, r3
 8005162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005166:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800516a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800516c:	4b36      	ldr	r3, [pc, #216]	; (8005248 <HAL_RCC_OscConfig+0x8f8>)
 800516e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005174:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005178:	2102      	movs	r1, #2
 800517a:	6019      	str	r1, [r3, #0]
 800517c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005180:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	fa93 f1a3 	rbit	r1, r3
 800518a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800518e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005192:	6019      	str	r1, [r3, #0]
  return result;
 8005194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005198:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	fab3 f383 	clz	r3, r3
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f003 031f 	and.w	r3, r3, #31
 80051ae:	2101      	movs	r1, #1
 80051b0:	fa01 f303 	lsl.w	r3, r1, r3
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d197      	bne.n	80050ea <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 81a5 	beq.w	800551a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d0:	2300      	movs	r3, #0
 80051d2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051d6:	4b1c      	ldr	r3, [pc, #112]	; (8005248 <HAL_RCC_OscConfig+0x8f8>)
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d116      	bne.n	8005210 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051e2:	4b19      	ldr	r3, [pc, #100]	; (8005248 <HAL_RCC_OscConfig+0x8f8>)
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	4a18      	ldr	r2, [pc, #96]	; (8005248 <HAL_RCC_OscConfig+0x8f8>)
 80051e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ec:	61d3      	str	r3, [r2, #28]
 80051ee:	4b16      	ldr	r3, [pc, #88]	; (8005248 <HAL_RCC_OscConfig+0x8f8>)
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80051f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005204:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005208:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800520a:	2301      	movs	r3, #1
 800520c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005210:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <HAL_RCC_OscConfig+0x900>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d121      	bne.n	8005260 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800521c:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <HAL_RCC_OscConfig+0x900>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a0b      	ldr	r2, [pc, #44]	; (8005250 <HAL_RCC_OscConfig+0x900>)
 8005222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005226:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005228:	f7fd f916 	bl	8002458 <HAL_GetTick>
 800522c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005230:	e010      	b.n	8005254 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005232:	f7fd f911 	bl	8002458 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b64      	cmp	r3, #100	; 0x64
 8005240:	d908      	bls.n	8005254 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e3d1      	b.n	80059ea <HAL_RCC_OscConfig+0x109a>
 8005246:	bf00      	nop
 8005248:	40021000 	.word	0x40021000
 800524c:	10908120 	.word	0x10908120
 8005250:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005254:	4b8d      	ldr	r3, [pc, #564]	; (800548c <HAL_RCC_OscConfig+0xb3c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0e8      	beq.n	8005232 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005264:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d106      	bne.n	800527e <HAL_RCC_OscConfig+0x92e>
 8005270:	4b87      	ldr	r3, [pc, #540]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	4a86      	ldr	r2, [pc, #536]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 8005276:	f043 0301 	orr.w	r3, r3, #1
 800527a:	6213      	str	r3, [r2, #32]
 800527c:	e035      	b.n	80052ea <HAL_RCC_OscConfig+0x99a>
 800527e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005282:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10c      	bne.n	80052a8 <HAL_RCC_OscConfig+0x958>
 800528e:	4b80      	ldr	r3, [pc, #512]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	4a7f      	ldr	r2, [pc, #508]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 8005294:	f023 0301 	bic.w	r3, r3, #1
 8005298:	6213      	str	r3, [r2, #32]
 800529a:	4b7d      	ldr	r3, [pc, #500]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	4a7c      	ldr	r2, [pc, #496]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 80052a0:	f023 0304 	bic.w	r3, r3, #4
 80052a4:	6213      	str	r3, [r2, #32]
 80052a6:	e020      	b.n	80052ea <HAL_RCC_OscConfig+0x99a>
 80052a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	2b05      	cmp	r3, #5
 80052b6:	d10c      	bne.n	80052d2 <HAL_RCC_OscConfig+0x982>
 80052b8:	4b75      	ldr	r3, [pc, #468]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	4a74      	ldr	r2, [pc, #464]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 80052be:	f043 0304 	orr.w	r3, r3, #4
 80052c2:	6213      	str	r3, [r2, #32]
 80052c4:	4b72      	ldr	r3, [pc, #456]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	4a71      	ldr	r2, [pc, #452]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 80052ca:	f043 0301 	orr.w	r3, r3, #1
 80052ce:	6213      	str	r3, [r2, #32]
 80052d0:	e00b      	b.n	80052ea <HAL_RCC_OscConfig+0x99a>
 80052d2:	4b6f      	ldr	r3, [pc, #444]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	4a6e      	ldr	r2, [pc, #440]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	6213      	str	r3, [r2, #32]
 80052de:	4b6c      	ldr	r3, [pc, #432]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	4a6b      	ldr	r2, [pc, #428]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 80052e4:	f023 0304 	bic.w	r3, r3, #4
 80052e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 8081 	beq.w	80053fe <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052fc:	f7fd f8ac 	bl	8002458 <HAL_GetTick>
 8005300:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005304:	e00b      	b.n	800531e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005306:	f7fd f8a7 	bl	8002458 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	f241 3288 	movw	r2, #5000	; 0x1388
 8005316:	4293      	cmp	r3, r2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e365      	b.n	80059ea <HAL_RCC_OscConfig+0x109a>
 800531e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005322:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005326:	2202      	movs	r2, #2
 8005328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800532e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	fa93 f2a3 	rbit	r2, r3
 8005338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800533c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005346:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800534a:	2202      	movs	r2, #2
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005352:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	fa93 f2a3 	rbit	r2, r3
 800535c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005360:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005364:	601a      	str	r2, [r3, #0]
  return result;
 8005366:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800536a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800536e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005370:	fab3 f383 	clz	r3, r3
 8005374:	b2db      	uxtb	r3, r3
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f043 0302 	orr.w	r3, r3, #2
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d102      	bne.n	800538a <HAL_RCC_OscConfig+0xa3a>
 8005384:	4b42      	ldr	r3, [pc, #264]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	e013      	b.n	80053b2 <HAL_RCC_OscConfig+0xa62>
 800538a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800538e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005392:	2202      	movs	r2, #2
 8005394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800539a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	fa93 f2a3 	rbit	r2, r3
 80053a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053a8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	4b38      	ldr	r3, [pc, #224]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80053b6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80053ba:	2102      	movs	r1, #2
 80053bc:	6011      	str	r1, [r2, #0]
 80053be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80053c2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	fa92 f1a2 	rbit	r1, r2
 80053cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80053d0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80053d4:	6011      	str	r1, [r2, #0]
  return result;
 80053d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80053da:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	fab2 f282 	clz	r2, r2
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	f002 021f 	and.w	r2, r2, #31
 80053f0:	2101      	movs	r1, #1
 80053f2:	fa01 f202 	lsl.w	r2, r1, r2
 80053f6:	4013      	ands	r3, r2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d084      	beq.n	8005306 <HAL_RCC_OscConfig+0x9b6>
 80053fc:	e083      	b.n	8005506 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053fe:	f7fd f82b 	bl	8002458 <HAL_GetTick>
 8005402:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005406:	e00b      	b.n	8005420 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005408:	f7fd f826 	bl	8002458 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	f241 3288 	movw	r2, #5000	; 0x1388
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e2e4      	b.n	80059ea <HAL_RCC_OscConfig+0x109a>
 8005420:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005424:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005428:	2202      	movs	r2, #2
 800542a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005430:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	fa93 f2a3 	rbit	r2, r3
 800543a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800543e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005448:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800544c:	2202      	movs	r2, #2
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005454:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	fa93 f2a3 	rbit	r2, r3
 800545e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005462:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005466:	601a      	str	r2, [r3, #0]
  return result;
 8005468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800546c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005470:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005472:	fab3 f383 	clz	r3, r3
 8005476:	b2db      	uxtb	r3, r3
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	b2db      	uxtb	r3, r3
 800547c:	f043 0302 	orr.w	r3, r3, #2
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d106      	bne.n	8005494 <HAL_RCC_OscConfig+0xb44>
 8005486:	4b02      	ldr	r3, [pc, #8]	; (8005490 <HAL_RCC_OscConfig+0xb40>)
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	e017      	b.n	80054bc <HAL_RCC_OscConfig+0xb6c>
 800548c:	40007000 	.word	0x40007000
 8005490:	40021000 	.word	0x40021000
 8005494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005498:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800549c:	2202      	movs	r2, #2
 800549e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	fa93 f2a3 	rbit	r2, r3
 80054ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054b2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	4bb3      	ldr	r3, [pc, #716]	; (8005788 <HAL_RCC_OscConfig+0xe38>)
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80054c0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80054c4:	2102      	movs	r1, #2
 80054c6:	6011      	str	r1, [r2, #0]
 80054c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80054cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80054d0:	6812      	ldr	r2, [r2, #0]
 80054d2:	fa92 f1a2 	rbit	r1, r2
 80054d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80054da:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80054de:	6011      	str	r1, [r2, #0]
  return result;
 80054e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80054e4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80054e8:	6812      	ldr	r2, [r2, #0]
 80054ea:	fab2 f282 	clz	r2, r2
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	f002 021f 	and.w	r2, r2, #31
 80054fa:	2101      	movs	r1, #1
 80054fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005500:	4013      	ands	r3, r2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d180      	bne.n	8005408 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005506:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800550a:	2b01      	cmp	r3, #1
 800550c:	d105      	bne.n	800551a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800550e:	4b9e      	ldr	r3, [pc, #632]	; (8005788 <HAL_RCC_OscConfig+0xe38>)
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	4a9d      	ldr	r2, [pc, #628]	; (8005788 <HAL_RCC_OscConfig+0xe38>)
 8005514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005518:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800551a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800551e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 825e 	beq.w	80059e8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800552c:	4b96      	ldr	r3, [pc, #600]	; (8005788 <HAL_RCC_OscConfig+0xe38>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f003 030c 	and.w	r3, r3, #12
 8005534:	2b08      	cmp	r3, #8
 8005536:	f000 821f 	beq.w	8005978 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800553a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800553e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b02      	cmp	r3, #2
 8005548:	f040 8170 	bne.w	800582c <HAL_RCC_OscConfig+0xedc>
 800554c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005550:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800555e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	fa93 f2a3 	rbit	r2, r3
 8005568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800556c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005570:	601a      	str	r2, [r3, #0]
  return result;
 8005572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005576:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800557a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800557c:	fab3 f383 	clz	r3, r3
 8005580:	b2db      	uxtb	r3, r3
 8005582:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005586:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	461a      	mov	r2, r3
 800558e:	2300      	movs	r3, #0
 8005590:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005592:	f7fc ff61 	bl	8002458 <HAL_GetTick>
 8005596:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800559a:	e009      	b.n	80055b0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800559c:	f7fc ff5c 	bl	8002458 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e21c      	b.n	80059ea <HAL_RCC_OscConfig+0x109a>
 80055b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055b4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80055b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055c2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	fa93 f2a3 	rbit	r2, r3
 80055cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055d0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80055d4:	601a      	str	r2, [r3, #0]
  return result;
 80055d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055da:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80055de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055e0:	fab3 f383 	clz	r3, r3
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f043 0301 	orr.w	r3, r3, #1
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d102      	bne.n	80055fa <HAL_RCC_OscConfig+0xcaa>
 80055f4:	4b64      	ldr	r3, [pc, #400]	; (8005788 <HAL_RCC_OscConfig+0xe38>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	e027      	b.n	800564a <HAL_RCC_OscConfig+0xcfa>
 80055fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055fe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005602:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800560c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	fa93 f2a3 	rbit	r2, r3
 8005616:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800561a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005624:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005628:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005632:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	fa93 f2a3 	rbit	r2, r3
 800563c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005640:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	4b50      	ldr	r3, [pc, #320]	; (8005788 <HAL_RCC_OscConfig+0xe38>)
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800564e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005652:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005656:	6011      	str	r1, [r2, #0]
 8005658:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800565c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005660:	6812      	ldr	r2, [r2, #0]
 8005662:	fa92 f1a2 	rbit	r1, r2
 8005666:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800566a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800566e:	6011      	str	r1, [r2, #0]
  return result;
 8005670:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005674:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005678:	6812      	ldr	r2, [r2, #0]
 800567a:	fab2 f282 	clz	r2, r2
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	f042 0220 	orr.w	r2, r2, #32
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	f002 021f 	and.w	r2, r2, #31
 800568a:	2101      	movs	r1, #1
 800568c:	fa01 f202 	lsl.w	r2, r1, r2
 8005690:	4013      	ands	r3, r2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d182      	bne.n	800559c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005696:	4b3c      	ldr	r3, [pc, #240]	; (8005788 <HAL_RCC_OscConfig+0xe38>)
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	f023 020f 	bic.w	r2, r3, #15
 800569e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	4937      	ldr	r1, [pc, #220]	; (8005788 <HAL_RCC_OscConfig+0xe38>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 80056b0:	4b35      	ldr	r3, [pc, #212]	; (8005788 <HAL_RCC_OscConfig+0xe38>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80056b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6a19      	ldr	r1, [r3, #32]
 80056c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	430b      	orrs	r3, r1
 80056d2:	492d      	ldr	r1, [pc, #180]	; (8005788 <HAL_RCC_OscConfig+0xe38>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	604b      	str	r3, [r1, #4]
 80056d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056dc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80056e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056ea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	fa93 f2a3 	rbit	r2, r3
 80056f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056f8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80056fc:	601a      	str	r2, [r3, #0]
  return result;
 80056fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005702:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005706:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005708:	fab3 f383 	clz	r3, r3
 800570c:	b2db      	uxtb	r3, r3
 800570e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005712:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	461a      	mov	r2, r3
 800571a:	2301      	movs	r3, #1
 800571c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571e:	f7fc fe9b 	bl	8002458 <HAL_GetTick>
 8005722:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005726:	e009      	b.n	800573c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005728:	f7fc fe96 	bl	8002458 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e156      	b.n	80059ea <HAL_RCC_OscConfig+0x109a>
 800573c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005740:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005744:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800574e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	fa93 f2a3 	rbit	r2, r3
 8005758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800575c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005760:	601a      	str	r2, [r3, #0]
  return result;
 8005762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005766:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800576a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800576c:	fab3 f383 	clz	r3, r3
 8005770:	b2db      	uxtb	r3, r3
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	d105      	bne.n	800578c <HAL_RCC_OscConfig+0xe3c>
 8005780:	4b01      	ldr	r3, [pc, #4]	; (8005788 <HAL_RCC_OscConfig+0xe38>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	e02a      	b.n	80057dc <HAL_RCC_OscConfig+0xe8c>
 8005786:	bf00      	nop
 8005788:	40021000 	.word	0x40021000
 800578c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005790:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800579e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	fa93 f2a3 	rbit	r2, r3
 80057a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057ac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057b6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80057ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057c4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	fa93 f2a3 	rbit	r2, r3
 80057ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057d2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	4b86      	ldr	r3, [pc, #536]	; (80059f4 <HAL_RCC_OscConfig+0x10a4>)
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80057e0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80057e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80057e8:	6011      	str	r1, [r2, #0]
 80057ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80057ee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80057f2:	6812      	ldr	r2, [r2, #0]
 80057f4:	fa92 f1a2 	rbit	r1, r2
 80057f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80057fc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005800:	6011      	str	r1, [r2, #0]
  return result;
 8005802:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005806:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800580a:	6812      	ldr	r2, [r2, #0]
 800580c:	fab2 f282 	clz	r2, r2
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	f042 0220 	orr.w	r2, r2, #32
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	f002 021f 	and.w	r2, r2, #31
 800581c:	2101      	movs	r1, #1
 800581e:	fa01 f202 	lsl.w	r2, r1, r2
 8005822:	4013      	ands	r3, r2
 8005824:	2b00      	cmp	r3, #0
 8005826:	f43f af7f 	beq.w	8005728 <HAL_RCC_OscConfig+0xdd8>
 800582a:	e0dd      	b.n	80059e8 <HAL_RCC_OscConfig+0x1098>
 800582c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005830:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005834:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800583e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	fa93 f2a3 	rbit	r2, r3
 8005848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800584c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005850:	601a      	str	r2, [r3, #0]
  return result;
 8005852:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005856:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800585a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585c:	fab3 f383 	clz	r3, r3
 8005860:	b2db      	uxtb	r3, r3
 8005862:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005866:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	461a      	mov	r2, r3
 800586e:	2300      	movs	r3, #0
 8005870:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005872:	f7fc fdf1 	bl	8002458 <HAL_GetTick>
 8005876:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800587a:	e009      	b.n	8005890 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800587c:	f7fc fdec 	bl	8002458 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e0ac      	b.n	80059ea <HAL_RCC_OscConfig+0x109a>
 8005890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005894:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800589c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058a2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	fa93 f2a3 	rbit	r2, r3
 80058ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80058b4:	601a      	str	r2, [r3, #0]
  return result;
 80058b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058ba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80058be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058c0:	fab3 f383 	clz	r3, r3
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d102      	bne.n	80058da <HAL_RCC_OscConfig+0xf8a>
 80058d4:	4b47      	ldr	r3, [pc, #284]	; (80059f4 <HAL_RCC_OscConfig+0x10a4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	e027      	b.n	800592a <HAL_RCC_OscConfig+0xfda>
 80058da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058de:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80058e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058ec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	fa93 f2a3 	rbit	r2, r3
 80058f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058fa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005904:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005908:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005912:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	fa93 f2a3 	rbit	r2, r3
 800591c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005920:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	4b33      	ldr	r3, [pc, #204]	; (80059f4 <HAL_RCC_OscConfig+0x10a4>)
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800592e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005932:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005936:	6011      	str	r1, [r2, #0]
 8005938:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800593c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	fa92 f1a2 	rbit	r1, r2
 8005946:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800594a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800594e:	6011      	str	r1, [r2, #0]
  return result;
 8005950:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005954:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	fab2 f282 	clz	r2, r2
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	f042 0220 	orr.w	r2, r2, #32
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	f002 021f 	and.w	r2, r2, #31
 800596a:	2101      	movs	r1, #1
 800596c:	fa01 f202 	lsl.w	r2, r1, r2
 8005970:	4013      	ands	r3, r2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d182      	bne.n	800587c <HAL_RCC_OscConfig+0xf2c>
 8005976:	e037      	b.n	80059e8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800597c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e02e      	b.n	80059ea <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800598c:	4b19      	ldr	r3, [pc, #100]	; (80059f4 <HAL_RCC_OscConfig+0x10a4>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005994:	4b17      	ldr	r3, [pc, #92]	; (80059f4 <HAL_RCC_OscConfig+0x10a4>)
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800599c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80059a0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80059a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d117      	bne.n	80059e4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80059b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80059b8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80059bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d10b      	bne.n	80059e4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80059cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059d0:	f003 020f 	and.w	r2, r3, #15
 80059d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d001      	beq.n	80059e8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	40021000 	.word	0x40021000

080059f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b09e      	sub	sp, #120	; 0x78
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e162      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a10:	4b90      	ldr	r3, [pc, #576]	; (8005c54 <HAL_RCC_ClockConfig+0x25c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d910      	bls.n	8005a40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1e:	4b8d      	ldr	r3, [pc, #564]	; (8005c54 <HAL_RCC_ClockConfig+0x25c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f023 0207 	bic.w	r2, r3, #7
 8005a26:	498b      	ldr	r1, [pc, #556]	; (8005c54 <HAL_RCC_ClockConfig+0x25c>)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a2e:	4b89      	ldr	r3, [pc, #548]	; (8005c54 <HAL_RCC_ClockConfig+0x25c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e14a      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a4c:	4b82      	ldr	r3, [pc, #520]	; (8005c58 <HAL_RCC_ClockConfig+0x260>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	497f      	ldr	r1, [pc, #508]	; (8005c58 <HAL_RCC_ClockConfig+0x260>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 80dc 	beq.w	8005c24 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d13c      	bne.n	8005aee <HAL_RCC_ClockConfig+0xf6>
 8005a74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a7c:	fa93 f3a3 	rbit	r3, r3
 8005a80:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a84:	fab3 f383 	clz	r3, r3
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d102      	bne.n	8005a9e <HAL_RCC_ClockConfig+0xa6>
 8005a98:	4b6f      	ldr	r3, [pc, #444]	; (8005c58 <HAL_RCC_ClockConfig+0x260>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	e00f      	b.n	8005abe <HAL_RCC_ClockConfig+0xc6>
 8005a9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aa2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aa6:	fa93 f3a3 	rbit	r3, r3
 8005aaa:	667b      	str	r3, [r7, #100]	; 0x64
 8005aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ab0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ab4:	fa93 f3a3 	rbit	r3, r3
 8005ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aba:	4b67      	ldr	r3, [pc, #412]	; (8005c58 <HAL_RCC_ClockConfig+0x260>)
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ac2:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ac6:	fa92 f2a2 	rbit	r2, r2
 8005aca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005acc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ace:	fab2 f282 	clz	r2, r2
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	f042 0220 	orr.w	r2, r2, #32
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	f002 021f 	and.w	r2, r2, #31
 8005ade:	2101      	movs	r1, #1
 8005ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d17b      	bne.n	8005be2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e0f3      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d13c      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x178>
 8005af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005afa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005afe:	fa93 f3a3 	rbit	r3, r3
 8005b02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b06:	fab3 f383 	clz	r3, r3
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f043 0301 	orr.w	r3, r3, #1
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d102      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x128>
 8005b1a:	4b4f      	ldr	r3, [pc, #316]	; (8005c58 <HAL_RCC_ClockConfig+0x260>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	e00f      	b.n	8005b40 <HAL_RCC_ClockConfig+0x148>
 8005b20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b28:	fa93 f3a3 	rbit	r3, r3
 8005b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b32:	643b      	str	r3, [r7, #64]	; 0x40
 8005b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b36:	fa93 f3a3 	rbit	r3, r3
 8005b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b3c:	4b46      	ldr	r3, [pc, #280]	; (8005c58 <HAL_RCC_ClockConfig+0x260>)
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b44:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b48:	fa92 f2a2 	rbit	r2, r2
 8005b4c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b50:	fab2 f282 	clz	r2, r2
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	f042 0220 	orr.w	r2, r2, #32
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	f002 021f 	and.w	r2, r2, #31
 8005b60:	2101      	movs	r1, #1
 8005b62:	fa01 f202 	lsl.w	r2, r1, r2
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d13a      	bne.n	8005be2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0b2      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x2de>
 8005b70:	2302      	movs	r3, #2
 8005b72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	fa93 f3a3 	rbit	r3, r3
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b7e:	fab3 f383 	clz	r3, r3
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	f043 0301 	orr.w	r3, r3, #1
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d102      	bne.n	8005b98 <HAL_RCC_ClockConfig+0x1a0>
 8005b92:	4b31      	ldr	r3, [pc, #196]	; (8005c58 <HAL_RCC_ClockConfig+0x260>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	e00d      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x1bc>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	fa93 f3a3 	rbit	r3, r3
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	623b      	str	r3, [r7, #32]
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	fa93 f3a3 	rbit	r3, r3
 8005bae:	61fb      	str	r3, [r7, #28]
 8005bb0:	4b29      	ldr	r3, [pc, #164]	; (8005c58 <HAL_RCC_ClockConfig+0x260>)
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	61ba      	str	r2, [r7, #24]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	fa92 f2a2 	rbit	r2, r2
 8005bbe:	617a      	str	r2, [r7, #20]
  return result;
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	fab2 f282 	clz	r2, r2
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	f042 0220 	orr.w	r2, r2, #32
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	f002 021f 	and.w	r2, r2, #31
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e079      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005be2:	4b1d      	ldr	r3, [pc, #116]	; (8005c58 <HAL_RCC_ClockConfig+0x260>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f023 0203 	bic.w	r2, r3, #3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	491a      	ldr	r1, [pc, #104]	; (8005c58 <HAL_RCC_ClockConfig+0x260>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bf4:	f7fc fc30 	bl	8002458 <HAL_GetTick>
 8005bf8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfa:	e00a      	b.n	8005c12 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bfc:	f7fc fc2c 	bl	8002458 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e061      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c12:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <HAL_RCC_ClockConfig+0x260>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f003 020c 	and.w	r2, r3, #12
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d1eb      	bne.n	8005bfc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c24:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <HAL_RCC_ClockConfig+0x25c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d214      	bcs.n	8005c5c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c32:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <HAL_RCC_ClockConfig+0x25c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f023 0207 	bic.w	r2, r3, #7
 8005c3a:	4906      	ldr	r1, [pc, #24]	; (8005c54 <HAL_RCC_ClockConfig+0x25c>)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c42:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <HAL_RCC_ClockConfig+0x25c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d005      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e040      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x2de>
 8005c54:	40022000 	.word	0x40022000
 8005c58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d008      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c68:	4b1d      	ldr	r3, [pc, #116]	; (8005ce0 <HAL_RCC_ClockConfig+0x2e8>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	491a      	ldr	r1, [pc, #104]	; (8005ce0 <HAL_RCC_ClockConfig+0x2e8>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d009      	beq.n	8005c9a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c86:	4b16      	ldr	r3, [pc, #88]	; (8005ce0 <HAL_RCC_ClockConfig+0x2e8>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	4912      	ldr	r1, [pc, #72]	; (8005ce0 <HAL_RCC_ClockConfig+0x2e8>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c9a:	f000 f829 	bl	8005cf0 <HAL_RCC_GetSysClockFreq>
 8005c9e:	4601      	mov	r1, r0
 8005ca0:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <HAL_RCC_ClockConfig+0x2e8>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ca8:	22f0      	movs	r2, #240	; 0xf0
 8005caa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	fa92 f2a2 	rbit	r2, r2
 8005cb2:	60fa      	str	r2, [r7, #12]
  return result;
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	fab2 f282 	clz	r2, r2
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	40d3      	lsrs	r3, r2
 8005cbe:	4a09      	ldr	r2, [pc, #36]	; (8005ce4 <HAL_RCC_ClockConfig+0x2ec>)
 8005cc0:	5cd3      	ldrb	r3, [r2, r3]
 8005cc2:	fa21 f303 	lsr.w	r3, r1, r3
 8005cc6:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <HAL_RCC_ClockConfig+0x2f0>)
 8005cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005cca:	4b08      	ldr	r3, [pc, #32]	; (8005cec <HAL_RCC_ClockConfig+0x2f4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fc fb7e 	bl	80023d0 <HAL_InitTick>
  
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3778      	adds	r7, #120	; 0x78
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	08008d9c 	.word	0x08008d9c
 8005ce8:	20000000 	.word	0x20000000
 8005cec:	20000004 	.word	0x20000004

08005cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b08b      	sub	sp, #44	; 0x2c
 8005cf4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61fb      	str	r3, [r7, #28]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005d0a:	4b2a      	ldr	r3, [pc, #168]	; (8005db4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d002      	beq.n	8005d20 <HAL_RCC_GetSysClockFreq+0x30>
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCC_GetSysClockFreq+0x36>
 8005d1e:	e03f      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d20:	4b25      	ldr	r3, [pc, #148]	; (8005db8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005d22:	623b      	str	r3, [r7, #32]
      break;
 8005d24:	e03f      	b.n	8005da6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005d2c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005d30:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	fa92 f2a2 	rbit	r2, r2
 8005d38:	607a      	str	r2, [r7, #4]
  return result;
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	fab2 f282 	clz	r2, r2
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	40d3      	lsrs	r3, r2
 8005d44:	4a1d      	ldr	r2, [pc, #116]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d46:	5cd3      	ldrb	r3, [r2, r3]
 8005d48:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005d4a:	4b1a      	ldr	r3, [pc, #104]	; (8005db4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	220f      	movs	r2, #15
 8005d54:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	fa92 f2a2 	rbit	r2, r2
 8005d5c:	60fa      	str	r2, [r7, #12]
  return result;
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	fab2 f282 	clz	r2, r2
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	40d3      	lsrs	r3, r2
 8005d68:	4a15      	ldr	r2, [pc, #84]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d6a:	5cd3      	ldrb	r3, [r2, r3]
 8005d6c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d78:	4a0f      	ldr	r2, [pc, #60]	; (8005db8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	fb02 f303 	mul.w	r3, r2, r3
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
 8005d88:	e007      	b.n	8005d9a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d8a:	4a0b      	ldr	r2, [pc, #44]	; (8005db8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	fb02 f303 	mul.w	r3, r2, r3
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	623b      	str	r3, [r7, #32]
      break;
 8005d9e:	e002      	b.n	8005da6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005da0:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005da2:	623b      	str	r3, [r7, #32]
      break;
 8005da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005da6:	6a3b      	ldr	r3, [r7, #32]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	372c      	adds	r7, #44	; 0x2c
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	40021000 	.word	0x40021000
 8005db8:	007a1200 	.word	0x007a1200
 8005dbc:	08008db4 	.word	0x08008db4
 8005dc0:	08008dc4 	.word	0x08008dc4

08005dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dc8:	4b03      	ldr	r3, [pc, #12]	; (8005dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dca:	681b      	ldr	r3, [r3, #0]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	20000000 	.word	0x20000000

08005ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005de2:	f7ff ffef 	bl	8005dc4 <HAL_RCC_GetHCLKFreq>
 8005de6:	4601      	mov	r1, r0
 8005de8:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005df0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005df4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	fa92 f2a2 	rbit	r2, r2
 8005dfc:	603a      	str	r2, [r7, #0]
  return result;
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	fab2 f282 	clz	r2, r2
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	40d3      	lsrs	r3, r2
 8005e08:	4a04      	ldr	r2, [pc, #16]	; (8005e1c <HAL_RCC_GetPCLK1Freq+0x40>)
 8005e0a:	5cd3      	ldrb	r3, [r2, r3]
 8005e0c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	08008dac 	.word	0x08008dac

08005e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005e26:	f7ff ffcd 	bl	8005dc4 <HAL_RCC_GetHCLKFreq>
 8005e2a:	4601      	mov	r1, r0
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005e34:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005e38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	fa92 f2a2 	rbit	r2, r2
 8005e40:	603a      	str	r2, [r7, #0]
  return result;
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	fab2 f282 	clz	r2, r2
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	40d3      	lsrs	r3, r2
 8005e4c:	4a04      	ldr	r2, [pc, #16]	; (8005e60 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005e4e:	5cd3      	ldrb	r3, [r2, r3]
 8005e50:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005e54:	4618      	mov	r0, r3
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	08008dac 	.word	0x08008dac

08005e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b092      	sub	sp, #72	; 0x48
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005e74:	2300      	movs	r3, #0
 8005e76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 80d4 	beq.w	8006030 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e88:	4b4e      	ldr	r3, [pc, #312]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10e      	bne.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e94:	4b4b      	ldr	r3, [pc, #300]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	4a4a      	ldr	r2, [pc, #296]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	61d3      	str	r3, [r2, #28]
 8005ea0:	4b48      	ldr	r3, [pc, #288]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eac:	2301      	movs	r3, #1
 8005eae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb2:	4b45      	ldr	r3, [pc, #276]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d118      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ebe:	4b42      	ldr	r3, [pc, #264]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a41      	ldr	r2, [pc, #260]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eca:	f7fc fac5 	bl	8002458 <HAL_GetTick>
 8005ece:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed2:	f7fc fac1 	bl	8002458 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b64      	cmp	r3, #100	; 0x64
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e1d6      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee4:	4b38      	ldr	r3, [pc, #224]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0f0      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ef0:	4b34      	ldr	r3, [pc, #208]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8084 	beq.w	800600a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d07c      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f10:	4b2c      	ldr	r3, [pc, #176]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	fa93 f3a3 	rbit	r3, r3
 8005f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f2a:	fab3 f383 	clz	r3, r3
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	4b26      	ldr	r3, [pc, #152]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	fa93 f3a3 	rbit	r3, r3
 8005f4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f4e:	fab3 f383 	clz	r3, r3
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	4b1d      	ldr	r3, [pc, #116]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	2300      	movs	r3, #0
 8005f60:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f62:	4a18      	ldr	r2, [pc, #96]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f66:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d04b      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f72:	f7fc fa71 	bl	8002458 <HAL_GetTick>
 8005f76:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f78:	e00a      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f7a:	f7fc fa6d 	bl	8002458 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e180      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005f90:	2302      	movs	r3, #2
 8005f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	fa93 f3a3 	rbit	r3, r3
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	623b      	str	r3, [r7, #32]
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	fa93 f3a3 	rbit	r3, r3
 8005fa6:	61fb      	str	r3, [r7, #28]
  return result;
 8005fa8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005faa:	fab3 f383 	clz	r3, r3
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f043 0302 	orr.w	r3, r3, #2
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d108      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005fbe:	4b01      	ldr	r3, [pc, #4]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	e00d      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	40007000 	.word	0x40007000
 8005fcc:	10908100 	.word	0x10908100
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	fa93 f3a3 	rbit	r3, r3
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	4b9a      	ldr	r3, [pc, #616]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	613a      	str	r2, [r7, #16]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	fa92 f2a2 	rbit	r2, r2
 8005fea:	60fa      	str	r2, [r7, #12]
  return result;
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	fab2 f282 	clz	r2, r2
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	f002 021f 	and.w	r2, r2, #31
 8005ffe:	2101      	movs	r1, #1
 8006000:	fa01 f202 	lsl.w	r2, r1, r2
 8006004:	4013      	ands	r3, r2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0b7      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800600a:	4b8f      	ldr	r3, [pc, #572]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	498c      	ldr	r1, [pc, #560]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006018:	4313      	orrs	r3, r2
 800601a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800601c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006020:	2b01      	cmp	r3, #1
 8006022:	d105      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006024:	4b88      	ldr	r3, [pc, #544]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	4a87      	ldr	r2, [pc, #540]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800602a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800602e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800603c:	4b82      	ldr	r3, [pc, #520]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006040:	f023 0203 	bic.w	r2, r3, #3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	497f      	ldr	r1, [pc, #508]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800604a:	4313      	orrs	r3, r2
 800604c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d008      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800605a:	4b7b      	ldr	r3, [pc, #492]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	4978      	ldr	r1, [pc, #480]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006068:	4313      	orrs	r3, r2
 800606a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b00      	cmp	r3, #0
 8006076:	d008      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006078:	4b73      	ldr	r3, [pc, #460]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	4970      	ldr	r1, [pc, #448]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006086:	4313      	orrs	r3, r2
 8006088:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b00      	cmp	r3, #0
 8006094:	d008      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006096:	4b6c      	ldr	r3, [pc, #432]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609a:	f023 0210 	bic.w	r2, r3, #16
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	4969      	ldr	r1, [pc, #420]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80060b4:	4b64      	ldr	r3, [pc, #400]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c0:	4961      	ldr	r1, [pc, #388]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d008      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060d2:	4b5d      	ldr	r3, [pc, #372]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	f023 0220 	bic.w	r2, r3, #32
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	495a      	ldr	r1, [pc, #360]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060f0:	4b55      	ldr	r3, [pc, #340]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	4952      	ldr	r1, [pc, #328]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d008      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800610e:	4b4e      	ldr	r3, [pc, #312]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	494b      	ldr	r1, [pc, #300]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800611c:	4313      	orrs	r3, r2
 800611e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	2b00      	cmp	r3, #0
 800612a:	d008      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800612c:	4b46      	ldr	r3, [pc, #280]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006130:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	4943      	ldr	r1, [pc, #268]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800613a:	4313      	orrs	r3, r2
 800613c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006146:	2b00      	cmp	r3, #0
 8006148:	d008      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800614a:	4b3f      	ldr	r3, [pc, #252]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	493c      	ldr	r1, [pc, #240]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006158:	4313      	orrs	r3, r2
 800615a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006164:	2b00      	cmp	r3, #0
 8006166:	d008      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006168:	4b37      	ldr	r3, [pc, #220]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006174:	4934      	ldr	r1, [pc, #208]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006176:	4313      	orrs	r3, r2
 8006178:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006182:	2b00      	cmp	r3, #0
 8006184:	d008      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006186:	4b30      	ldr	r3, [pc, #192]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006192:	492d      	ldr	r1, [pc, #180]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006194:	4313      	orrs	r3, r2
 8006196:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80061a4:	4b28      	ldr	r3, [pc, #160]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b0:	4925      	ldr	r1, [pc, #148]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d008      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80061c2:	4b21      	ldr	r3, [pc, #132]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	491e      	ldr	r1, [pc, #120]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d008      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80061e0:	4b19      	ldr	r3, [pc, #100]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	4916      	ldr	r1, [pc, #88]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d008      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80061fe:	4b12      	ldr	r3, [pc, #72]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620a:	490f      	ldr	r1, [pc, #60]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800620c:	4313      	orrs	r3, r2
 800620e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d008      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800621c:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006220:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006228:	4907      	ldr	r1, [pc, #28]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800622a:	4313      	orrs	r3, r2
 800622c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00c      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800623a:	4b03      	ldr	r3, [pc, #12]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	e002      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006246:	bf00      	nop
 8006248:	40021000 	.word	0x40021000
 800624c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624e:	4913      	ldr	r1, [pc, #76]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006250:	4313      	orrs	r3, r2
 8006252:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d008      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006260:	4b0e      	ldr	r3, [pc, #56]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006264:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800626c:	490b      	ldr	r1, [pc, #44]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800626e:	4313      	orrs	r3, r2
 8006270:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d008      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800627e:	4b07      	ldr	r3, [pc, #28]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628a:	4904      	ldr	r1, [pc, #16]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800628c:	4313      	orrs	r3, r2
 800628e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3748      	adds	r7, #72	; 0x48
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	40021000 	.word	0x40021000

080062a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e049      	b.n	8006346 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d106      	bne.n	80062cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fb fed0 	bl	800206c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3304      	adds	r3, #4
 80062dc:	4619      	mov	r1, r3
 80062de:	4610      	mov	r0, r2
 80062e0:	f000 fe34 	bl	8006f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b01      	cmp	r3, #1
 8006362:	d001      	beq.n	8006368 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e047      	b.n	80063f8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a23      	ldr	r2, [pc, #140]	; (8006404 <HAL_TIM_Base_Start+0xb4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d01d      	beq.n	80063b6 <HAL_TIM_Base_Start+0x66>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006382:	d018      	beq.n	80063b6 <HAL_TIM_Base_Start+0x66>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a1f      	ldr	r2, [pc, #124]	; (8006408 <HAL_TIM_Base_Start+0xb8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d013      	beq.n	80063b6 <HAL_TIM_Base_Start+0x66>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1e      	ldr	r2, [pc, #120]	; (800640c <HAL_TIM_Base_Start+0xbc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00e      	beq.n	80063b6 <HAL_TIM_Base_Start+0x66>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1c      	ldr	r2, [pc, #112]	; (8006410 <HAL_TIM_Base_Start+0xc0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d009      	beq.n	80063b6 <HAL_TIM_Base_Start+0x66>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a1b      	ldr	r2, [pc, #108]	; (8006414 <HAL_TIM_Base_Start+0xc4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d004      	beq.n	80063b6 <HAL_TIM_Base_Start+0x66>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a19      	ldr	r2, [pc, #100]	; (8006418 <HAL_TIM_Base_Start+0xc8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d115      	bne.n	80063e2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	4b17      	ldr	r3, [pc, #92]	; (800641c <HAL_TIM_Base_Start+0xcc>)
 80063be:	4013      	ands	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2b06      	cmp	r3, #6
 80063c6:	d015      	beq.n	80063f4 <HAL_TIM_Base_Start+0xa4>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ce:	d011      	beq.n	80063f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0201 	orr.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e0:	e008      	b.n	80063f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f042 0201 	orr.w	r2, r2, #1
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	e000      	b.n	80063f6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	40012c00 	.word	0x40012c00
 8006408:	40000400 	.word	0x40000400
 800640c:	40000800 	.word	0x40000800
 8006410:	40013400 	.word	0x40013400
 8006414:	40014000 	.word	0x40014000
 8006418:	40015000 	.word	0x40015000
 800641c:	00010007 	.word	0x00010007

08006420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b01      	cmp	r3, #1
 8006432:	d001      	beq.n	8006438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e04f      	b.n	80064d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a23      	ldr	r2, [pc, #140]	; (80064e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01d      	beq.n	8006496 <HAL_TIM_Base_Start_IT+0x76>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006462:	d018      	beq.n	8006496 <HAL_TIM_Base_Start_IT+0x76>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1f      	ldr	r2, [pc, #124]	; (80064e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_TIM_Base_Start_IT+0x76>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a1e      	ldr	r2, [pc, #120]	; (80064ec <HAL_TIM_Base_Start_IT+0xcc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00e      	beq.n	8006496 <HAL_TIM_Base_Start_IT+0x76>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a1c      	ldr	r2, [pc, #112]	; (80064f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <HAL_TIM_Base_Start_IT+0x76>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1b      	ldr	r2, [pc, #108]	; (80064f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_TIM_Base_Start_IT+0x76>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a19      	ldr	r2, [pc, #100]	; (80064f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d115      	bne.n	80064c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	4b17      	ldr	r3, [pc, #92]	; (80064fc <HAL_TIM_Base_Start_IT+0xdc>)
 800649e:	4013      	ands	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b06      	cmp	r3, #6
 80064a6:	d015      	beq.n	80064d4 <HAL_TIM_Base_Start_IT+0xb4>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ae:	d011      	beq.n	80064d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0201 	orr.w	r2, r2, #1
 80064be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c0:	e008      	b.n	80064d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0201 	orr.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	e000      	b.n	80064d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	40012c00 	.word	0x40012c00
 80064e8:	40000400 	.word	0x40000400
 80064ec:	40000800 	.word	0x40000800
 80064f0:	40013400 	.word	0x40013400
 80064f4:	40014000 	.word	0x40014000
 80064f8:	40015000 	.word	0x40015000
 80064fc:	00010007 	.word	0x00010007

08006500 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e049      	b.n	80065a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7fb fdc6 	bl	80020b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3304      	adds	r3, #4
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f000 fd04 	bl	8006f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d109      	bne.n	80065d4 <HAL_TIM_PWM_Start+0x24>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	bf14      	ite	ne
 80065cc:	2301      	movne	r3, #1
 80065ce:	2300      	moveq	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	e03c      	b.n	800664e <HAL_TIM_PWM_Start+0x9e>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d109      	bne.n	80065ee <HAL_TIM_PWM_Start+0x3e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	bf14      	ite	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	2300      	moveq	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	e02f      	b.n	800664e <HAL_TIM_PWM_Start+0x9e>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d109      	bne.n	8006608 <HAL_TIM_PWM_Start+0x58>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	bf14      	ite	ne
 8006600:	2301      	movne	r3, #1
 8006602:	2300      	moveq	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	e022      	b.n	800664e <HAL_TIM_PWM_Start+0x9e>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2b0c      	cmp	r3, #12
 800660c:	d109      	bne.n	8006622 <HAL_TIM_PWM_Start+0x72>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b01      	cmp	r3, #1
 8006618:	bf14      	ite	ne
 800661a:	2301      	movne	r3, #1
 800661c:	2300      	moveq	r3, #0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	e015      	b.n	800664e <HAL_TIM_PWM_Start+0x9e>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b10      	cmp	r3, #16
 8006626:	d109      	bne.n	800663c <HAL_TIM_PWM_Start+0x8c>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b01      	cmp	r3, #1
 8006632:	bf14      	ite	ne
 8006634:	2301      	movne	r3, #1
 8006636:	2300      	moveq	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	e008      	b.n	800664e <HAL_TIM_PWM_Start+0x9e>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b01      	cmp	r3, #1
 8006646:	bf14      	ite	ne
 8006648:	2301      	movne	r3, #1
 800664a:	2300      	moveq	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e0a1      	b.n	800679a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d104      	bne.n	8006666 <HAL_TIM_PWM_Start+0xb6>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006664:	e023      	b.n	80066ae <HAL_TIM_PWM_Start+0xfe>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b04      	cmp	r3, #4
 800666a:	d104      	bne.n	8006676 <HAL_TIM_PWM_Start+0xc6>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006674:	e01b      	b.n	80066ae <HAL_TIM_PWM_Start+0xfe>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b08      	cmp	r3, #8
 800667a:	d104      	bne.n	8006686 <HAL_TIM_PWM_Start+0xd6>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006684:	e013      	b.n	80066ae <HAL_TIM_PWM_Start+0xfe>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b0c      	cmp	r3, #12
 800668a:	d104      	bne.n	8006696 <HAL_TIM_PWM_Start+0xe6>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006694:	e00b      	b.n	80066ae <HAL_TIM_PWM_Start+0xfe>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b10      	cmp	r3, #16
 800669a:	d104      	bne.n	80066a6 <HAL_TIM_PWM_Start+0xf6>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a4:	e003      	b.n	80066ae <HAL_TIM_PWM_Start+0xfe>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2202      	movs	r2, #2
 80066aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2201      	movs	r2, #1
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f001 f886 	bl	80077c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a38      	ldr	r2, [pc, #224]	; (80067a4 <HAL_TIM_PWM_Start+0x1f4>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d018      	beq.n	80066f8 <HAL_TIM_PWM_Start+0x148>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a37      	ldr	r2, [pc, #220]	; (80067a8 <HAL_TIM_PWM_Start+0x1f8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d013      	beq.n	80066f8 <HAL_TIM_PWM_Start+0x148>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a35      	ldr	r2, [pc, #212]	; (80067ac <HAL_TIM_PWM_Start+0x1fc>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00e      	beq.n	80066f8 <HAL_TIM_PWM_Start+0x148>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a34      	ldr	r2, [pc, #208]	; (80067b0 <HAL_TIM_PWM_Start+0x200>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d009      	beq.n	80066f8 <HAL_TIM_PWM_Start+0x148>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a32      	ldr	r2, [pc, #200]	; (80067b4 <HAL_TIM_PWM_Start+0x204>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d004      	beq.n	80066f8 <HAL_TIM_PWM_Start+0x148>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a31      	ldr	r2, [pc, #196]	; (80067b8 <HAL_TIM_PWM_Start+0x208>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d101      	bne.n	80066fc <HAL_TIM_PWM_Start+0x14c>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <HAL_TIM_PWM_Start+0x14e>
 80066fc:	2300      	movs	r3, #0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d007      	beq.n	8006712 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006710:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a23      	ldr	r2, [pc, #140]	; (80067a4 <HAL_TIM_PWM_Start+0x1f4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d01d      	beq.n	8006758 <HAL_TIM_PWM_Start+0x1a8>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006724:	d018      	beq.n	8006758 <HAL_TIM_PWM_Start+0x1a8>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a24      	ldr	r2, [pc, #144]	; (80067bc <HAL_TIM_PWM_Start+0x20c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d013      	beq.n	8006758 <HAL_TIM_PWM_Start+0x1a8>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a22      	ldr	r2, [pc, #136]	; (80067c0 <HAL_TIM_PWM_Start+0x210>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00e      	beq.n	8006758 <HAL_TIM_PWM_Start+0x1a8>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a1a      	ldr	r2, [pc, #104]	; (80067a8 <HAL_TIM_PWM_Start+0x1f8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d009      	beq.n	8006758 <HAL_TIM_PWM_Start+0x1a8>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a18      	ldr	r2, [pc, #96]	; (80067ac <HAL_TIM_PWM_Start+0x1fc>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d004      	beq.n	8006758 <HAL_TIM_PWM_Start+0x1a8>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a19      	ldr	r2, [pc, #100]	; (80067b8 <HAL_TIM_PWM_Start+0x208>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d115      	bne.n	8006784 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	4b19      	ldr	r3, [pc, #100]	; (80067c4 <HAL_TIM_PWM_Start+0x214>)
 8006760:	4013      	ands	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b06      	cmp	r3, #6
 8006768:	d015      	beq.n	8006796 <HAL_TIM_PWM_Start+0x1e6>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006770:	d011      	beq.n	8006796 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0201 	orr.w	r2, r2, #1
 8006780:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006782:	e008      	b.n	8006796 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0201 	orr.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	e000      	b.n	8006798 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006796:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	40012c00 	.word	0x40012c00
 80067a8:	40013400 	.word	0x40013400
 80067ac:	40014000 	.word	0x40014000
 80067b0:	40014400 	.word	0x40014400
 80067b4:	40014800 	.word	0x40014800
 80067b8:	40015000 	.word	0x40015000
 80067bc:	40000400 	.word	0x40000400
 80067c0:	40000800 	.word	0x40000800
 80067c4:	00010007 	.word	0x00010007

080067c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2200      	movs	r2, #0
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 fff4 	bl	80077c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a40      	ldr	r2, [pc, #256]	; (80068e8 <HAL_TIM_PWM_Stop+0x120>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d018      	beq.n	800681c <HAL_TIM_PWM_Stop+0x54>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a3f      	ldr	r2, [pc, #252]	; (80068ec <HAL_TIM_PWM_Stop+0x124>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d013      	beq.n	800681c <HAL_TIM_PWM_Stop+0x54>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a3d      	ldr	r2, [pc, #244]	; (80068f0 <HAL_TIM_PWM_Stop+0x128>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d00e      	beq.n	800681c <HAL_TIM_PWM_Stop+0x54>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a3c      	ldr	r2, [pc, #240]	; (80068f4 <HAL_TIM_PWM_Stop+0x12c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d009      	beq.n	800681c <HAL_TIM_PWM_Stop+0x54>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a3a      	ldr	r2, [pc, #232]	; (80068f8 <HAL_TIM_PWM_Stop+0x130>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d004      	beq.n	800681c <HAL_TIM_PWM_Stop+0x54>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a39      	ldr	r2, [pc, #228]	; (80068fc <HAL_TIM_PWM_Stop+0x134>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d101      	bne.n	8006820 <HAL_TIM_PWM_Stop+0x58>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <HAL_TIM_PWM_Stop+0x5a>
 8006820:	2300      	movs	r3, #0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d017      	beq.n	8006856 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6a1a      	ldr	r2, [r3, #32]
 800682c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006830:	4013      	ands	r3, r2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10f      	bne.n	8006856 <HAL_TIM_PWM_Stop+0x8e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6a1a      	ldr	r2, [r3, #32]
 800683c:	f240 4344 	movw	r3, #1092	; 0x444
 8006840:	4013      	ands	r3, r2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d107      	bne.n	8006856 <HAL_TIM_PWM_Stop+0x8e>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006854:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6a1a      	ldr	r2, [r3, #32]
 800685c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006860:	4013      	ands	r3, r2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10f      	bne.n	8006886 <HAL_TIM_PWM_Stop+0xbe>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6a1a      	ldr	r2, [r3, #32]
 800686c:	f240 4344 	movw	r3, #1092	; 0x444
 8006870:	4013      	ands	r3, r2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d107      	bne.n	8006886 <HAL_TIM_PWM_Stop+0xbe>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0201 	bic.w	r2, r2, #1
 8006884:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d104      	bne.n	8006896 <HAL_TIM_PWM_Stop+0xce>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006894:	e023      	b.n	80068de <HAL_TIM_PWM_Stop+0x116>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b04      	cmp	r3, #4
 800689a:	d104      	bne.n	80068a6 <HAL_TIM_PWM_Stop+0xde>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068a4:	e01b      	b.n	80068de <HAL_TIM_PWM_Stop+0x116>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d104      	bne.n	80068b6 <HAL_TIM_PWM_Stop+0xee>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068b4:	e013      	b.n	80068de <HAL_TIM_PWM_Stop+0x116>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b0c      	cmp	r3, #12
 80068ba:	d104      	bne.n	80068c6 <HAL_TIM_PWM_Stop+0xfe>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068c4:	e00b      	b.n	80068de <HAL_TIM_PWM_Stop+0x116>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b10      	cmp	r3, #16
 80068ca:	d104      	bne.n	80068d6 <HAL_TIM_PWM_Stop+0x10e>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068d4:	e003      	b.n	80068de <HAL_TIM_PWM_Stop+0x116>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40012c00 	.word	0x40012c00
 80068ec:	40013400 	.word	0x40013400
 80068f0:	40014000 	.word	0x40014000
 80068f4:	40014400 	.word	0x40014400
 80068f8:	40014800 	.word	0x40014800
 80068fc:	40015000 	.word	0x40015000

08006900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b02      	cmp	r3, #2
 8006914:	d122      	bne.n	800695c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b02      	cmp	r3, #2
 8006922:	d11b      	bne.n	800695c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f06f 0202 	mvn.w	r2, #2
 800692c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fae3 	bl	8006f0e <HAL_TIM_IC_CaptureCallback>
 8006948:	e005      	b.n	8006956 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fad5 	bl	8006efa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fae6 	bl	8006f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f003 0304 	and.w	r3, r3, #4
 8006966:	2b04      	cmp	r3, #4
 8006968:	d122      	bne.n	80069b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b04      	cmp	r3, #4
 8006976:	d11b      	bne.n	80069b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f06f 0204 	mvn.w	r2, #4
 8006980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2202      	movs	r2, #2
 8006986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fab9 	bl	8006f0e <HAL_TIM_IC_CaptureCallback>
 800699c:	e005      	b.n	80069aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 faab 	bl	8006efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fabc 	bl	8006f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f003 0308 	and.w	r3, r3, #8
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d122      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d11b      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f06f 0208 	mvn.w	r2, #8
 80069d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2204      	movs	r2, #4
 80069da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fa8f 	bl	8006f0e <HAL_TIM_IC_CaptureCallback>
 80069f0:	e005      	b.n	80069fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fa81 	bl	8006efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fa92 	bl	8006f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	2b10      	cmp	r3, #16
 8006a10:	d122      	bne.n	8006a58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f003 0310 	and.w	r3, r3, #16
 8006a1c:	2b10      	cmp	r3, #16
 8006a1e:	d11b      	bne.n	8006a58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f06f 0210 	mvn.w	r2, #16
 8006a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2208      	movs	r2, #8
 8006a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fa65 	bl	8006f0e <HAL_TIM_IC_CaptureCallback>
 8006a44:	e005      	b.n	8006a52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fa57 	bl	8006efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fa68 	bl	8006f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d10e      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d107      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f06f 0201 	mvn.w	r2, #1
 8006a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7f9 fc72 	bl	8000368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8e:	2b80      	cmp	r3, #128	; 0x80
 8006a90:	d10e      	bne.n	8006ab0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9c:	2b80      	cmp	r3, #128	; 0x80
 8006a9e:	d107      	bne.n	8006ab0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 ff48 	bl	8007940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006abe:	d10e      	bne.n	8006ade <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aca:	2b80      	cmp	r3, #128	; 0x80
 8006acc:	d107      	bne.n	8006ade <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 ff3b 	bl	8007954 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae8:	2b40      	cmp	r3, #64	; 0x40
 8006aea:	d10e      	bne.n	8006b0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af6:	2b40      	cmp	r3, #64	; 0x40
 8006af8:	d107      	bne.n	8006b0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fa16 	bl	8006f36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	d10e      	bne.n	8006b36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b20      	cmp	r3, #32
 8006b24:	d107      	bne.n	8006b36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f06f 0220 	mvn.w	r2, #32
 8006b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fefb 	bl	800792c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e0ff      	b.n	8006d5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b14      	cmp	r3, #20
 8006b6a:	f200 80f0 	bhi.w	8006d4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b6e:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b74:	08006bc9 	.word	0x08006bc9
 8006b78:	08006d4f 	.word	0x08006d4f
 8006b7c:	08006d4f 	.word	0x08006d4f
 8006b80:	08006d4f 	.word	0x08006d4f
 8006b84:	08006c09 	.word	0x08006c09
 8006b88:	08006d4f 	.word	0x08006d4f
 8006b8c:	08006d4f 	.word	0x08006d4f
 8006b90:	08006d4f 	.word	0x08006d4f
 8006b94:	08006c4b 	.word	0x08006c4b
 8006b98:	08006d4f 	.word	0x08006d4f
 8006b9c:	08006d4f 	.word	0x08006d4f
 8006ba0:	08006d4f 	.word	0x08006d4f
 8006ba4:	08006c8b 	.word	0x08006c8b
 8006ba8:	08006d4f 	.word	0x08006d4f
 8006bac:	08006d4f 	.word	0x08006d4f
 8006bb0:	08006d4f 	.word	0x08006d4f
 8006bb4:	08006ccd 	.word	0x08006ccd
 8006bb8:	08006d4f 	.word	0x08006d4f
 8006bbc:	08006d4f 	.word	0x08006d4f
 8006bc0:	08006d4f 	.word	0x08006d4f
 8006bc4:	08006d0d 	.word	0x08006d0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68b9      	ldr	r1, [r7, #8]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fa5a 	bl	8007088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f042 0208 	orr.w	r2, r2, #8
 8006be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0204 	bic.w	r2, r2, #4
 8006bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6999      	ldr	r1, [r3, #24]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	691a      	ldr	r2, [r3, #16]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	619a      	str	r2, [r3, #24]
      break;
 8006c06:	e0a5      	b.n	8006d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68b9      	ldr	r1, [r7, #8]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fad4 	bl	80071bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699a      	ldr	r2, [r3, #24]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699a      	ldr	r2, [r3, #24]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6999      	ldr	r1, [r3, #24]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	021a      	lsls	r2, r3, #8
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	619a      	str	r2, [r3, #24]
      break;
 8006c48:	e084      	b.n	8006d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68b9      	ldr	r1, [r7, #8]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fb47 	bl	80072e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69da      	ldr	r2, [r3, #28]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f042 0208 	orr.w	r2, r2, #8
 8006c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69da      	ldr	r2, [r3, #28]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0204 	bic.w	r2, r2, #4
 8006c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69d9      	ldr	r1, [r3, #28]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	691a      	ldr	r2, [r3, #16]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	61da      	str	r2, [r3, #28]
      break;
 8006c88:	e064      	b.n	8006d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 fbb9 	bl	8007408 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69da      	ldr	r2, [r3, #28]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69da      	ldr	r2, [r3, #28]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69d9      	ldr	r1, [r3, #28]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	021a      	lsls	r2, r3, #8
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	61da      	str	r2, [r3, #28]
      break;
 8006cca:	e043      	b.n	8006d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68b9      	ldr	r1, [r7, #8]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fc08 	bl	80074e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f042 0208 	orr.w	r2, r2, #8
 8006ce6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0204 	bic.w	r2, r2, #4
 8006cf6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	691a      	ldr	r2, [r3, #16]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d0a:	e023      	b.n	8006d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 fc52 	bl	80075bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	021a      	lsls	r2, r3, #8
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d4c:	e002      	b.n	8006d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	75fb      	strb	r3, [r7, #23]
      break;
 8006d52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop

08006d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <HAL_TIM_ConfigClockSource+0x1c>
 8006d80:	2302      	movs	r3, #2
 8006d82:	e0b6      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x18a>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006da2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dc0:	d03e      	beq.n	8006e40 <HAL_TIM_ConfigClockSource+0xd8>
 8006dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dc6:	f200 8087 	bhi.w	8006ed8 <HAL_TIM_ConfigClockSource+0x170>
 8006dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dce:	f000 8086 	beq.w	8006ede <HAL_TIM_ConfigClockSource+0x176>
 8006dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd6:	d87f      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x170>
 8006dd8:	2b70      	cmp	r3, #112	; 0x70
 8006dda:	d01a      	beq.n	8006e12 <HAL_TIM_ConfigClockSource+0xaa>
 8006ddc:	2b70      	cmp	r3, #112	; 0x70
 8006dde:	d87b      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x170>
 8006de0:	2b60      	cmp	r3, #96	; 0x60
 8006de2:	d050      	beq.n	8006e86 <HAL_TIM_ConfigClockSource+0x11e>
 8006de4:	2b60      	cmp	r3, #96	; 0x60
 8006de6:	d877      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x170>
 8006de8:	2b50      	cmp	r3, #80	; 0x50
 8006dea:	d03c      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0xfe>
 8006dec:	2b50      	cmp	r3, #80	; 0x50
 8006dee:	d873      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x170>
 8006df0:	2b40      	cmp	r3, #64	; 0x40
 8006df2:	d058      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0x13e>
 8006df4:	2b40      	cmp	r3, #64	; 0x40
 8006df6:	d86f      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x170>
 8006df8:	2b30      	cmp	r3, #48	; 0x30
 8006dfa:	d064      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x15e>
 8006dfc:	2b30      	cmp	r3, #48	; 0x30
 8006dfe:	d86b      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x170>
 8006e00:	2b20      	cmp	r3, #32
 8006e02:	d060      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x15e>
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d867      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x170>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d05c      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x15e>
 8006e0c:	2b10      	cmp	r3, #16
 8006e0e:	d05a      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x15e>
 8006e10:	e062      	b.n	8006ed8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	6899      	ldr	r1, [r3, #8]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f000 fcb1 	bl	8007788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	609a      	str	r2, [r3, #8]
      break;
 8006e3e:	e04f      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	6899      	ldr	r1, [r3, #8]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f000 fc9a 	bl	8007788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689a      	ldr	r2, [r3, #8]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e62:	609a      	str	r2, [r3, #8]
      break;
 8006e64:	e03c      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6818      	ldr	r0, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	6859      	ldr	r1, [r3, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	461a      	mov	r2, r3
 8006e74:	f000 fc0e 	bl	8007694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2150      	movs	r1, #80	; 0x50
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fc67 	bl	8007752 <TIM_ITRx_SetConfig>
      break;
 8006e84:	e02c      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6859      	ldr	r1, [r3, #4]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	461a      	mov	r2, r3
 8006e94:	f000 fc2d 	bl	80076f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2160      	movs	r1, #96	; 0x60
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fc57 	bl	8007752 <TIM_ITRx_SetConfig>
      break;
 8006ea4:	e01c      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6859      	ldr	r1, [r3, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f000 fbee 	bl	8007694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2140      	movs	r1, #64	; 0x40
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fc47 	bl	8007752 <TIM_ITRx_SetConfig>
      break;
 8006ec4:	e00c      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	f000 fc3e 	bl	8007752 <TIM_ITRx_SetConfig>
      break;
 8006ed6:	e003      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	73fb      	strb	r3, [r7, #15]
      break;
 8006edc:	e000      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006ede:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
	...

08006f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a42      	ldr	r2, [pc, #264]	; (8007068 <TIM_Base_SetConfig+0x11c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d013      	beq.n	8006f8c <TIM_Base_SetConfig+0x40>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6a:	d00f      	beq.n	8006f8c <TIM_Base_SetConfig+0x40>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a3f      	ldr	r2, [pc, #252]	; (800706c <TIM_Base_SetConfig+0x120>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00b      	beq.n	8006f8c <TIM_Base_SetConfig+0x40>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a3e      	ldr	r2, [pc, #248]	; (8007070 <TIM_Base_SetConfig+0x124>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d007      	beq.n	8006f8c <TIM_Base_SetConfig+0x40>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a3d      	ldr	r2, [pc, #244]	; (8007074 <TIM_Base_SetConfig+0x128>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d003      	beq.n	8006f8c <TIM_Base_SetConfig+0x40>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a3c      	ldr	r2, [pc, #240]	; (8007078 <TIM_Base_SetConfig+0x12c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d108      	bne.n	8006f9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a31      	ldr	r2, [pc, #196]	; (8007068 <TIM_Base_SetConfig+0x11c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d01f      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fac:	d01b      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2e      	ldr	r2, [pc, #184]	; (800706c <TIM_Base_SetConfig+0x120>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d017      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a2d      	ldr	r2, [pc, #180]	; (8007070 <TIM_Base_SetConfig+0x124>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d013      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a2c      	ldr	r2, [pc, #176]	; (8007074 <TIM_Base_SetConfig+0x128>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00f      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2c      	ldr	r2, [pc, #176]	; (800707c <TIM_Base_SetConfig+0x130>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00b      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a2b      	ldr	r2, [pc, #172]	; (8007080 <TIM_Base_SetConfig+0x134>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d007      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a2a      	ldr	r2, [pc, #168]	; (8007084 <TIM_Base_SetConfig+0x138>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d003      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a25      	ldr	r2, [pc, #148]	; (8007078 <TIM_Base_SetConfig+0x12c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d108      	bne.n	8006ff8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a12      	ldr	r2, [pc, #72]	; (8007068 <TIM_Base_SetConfig+0x11c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d013      	beq.n	800704c <TIM_Base_SetConfig+0x100>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a13      	ldr	r2, [pc, #76]	; (8007074 <TIM_Base_SetConfig+0x128>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00f      	beq.n	800704c <TIM_Base_SetConfig+0x100>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a13      	ldr	r2, [pc, #76]	; (800707c <TIM_Base_SetConfig+0x130>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00b      	beq.n	800704c <TIM_Base_SetConfig+0x100>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a12      	ldr	r2, [pc, #72]	; (8007080 <TIM_Base_SetConfig+0x134>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d007      	beq.n	800704c <TIM_Base_SetConfig+0x100>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a11      	ldr	r2, [pc, #68]	; (8007084 <TIM_Base_SetConfig+0x138>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d003      	beq.n	800704c <TIM_Base_SetConfig+0x100>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a0c      	ldr	r2, [pc, #48]	; (8007078 <TIM_Base_SetConfig+0x12c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d103      	bne.n	8007054 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	691a      	ldr	r2, [r3, #16]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	615a      	str	r2, [r3, #20]
}
 800705a:	bf00      	nop
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40012c00 	.word	0x40012c00
 800706c:	40000400 	.word	0x40000400
 8007070:	40000800 	.word	0x40000800
 8007074:	40013400 	.word	0x40013400
 8007078:	40015000 	.word	0x40015000
 800707c:	40014000 	.word	0x40014000
 8007080:	40014400 	.word	0x40014400
 8007084:	40014800 	.word	0x40014800

08007088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	f023 0201 	bic.w	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0303 	bic.w	r3, r3, #3
 80070c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f023 0302 	bic.w	r3, r3, #2
 80070d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	4313      	orrs	r3, r2
 80070de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a30      	ldr	r2, [pc, #192]	; (80071a4 <TIM_OC1_SetConfig+0x11c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d013      	beq.n	8007110 <TIM_OC1_SetConfig+0x88>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a2f      	ldr	r2, [pc, #188]	; (80071a8 <TIM_OC1_SetConfig+0x120>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d00f      	beq.n	8007110 <TIM_OC1_SetConfig+0x88>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a2e      	ldr	r2, [pc, #184]	; (80071ac <TIM_OC1_SetConfig+0x124>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d00b      	beq.n	8007110 <TIM_OC1_SetConfig+0x88>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a2d      	ldr	r2, [pc, #180]	; (80071b0 <TIM_OC1_SetConfig+0x128>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d007      	beq.n	8007110 <TIM_OC1_SetConfig+0x88>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a2c      	ldr	r2, [pc, #176]	; (80071b4 <TIM_OC1_SetConfig+0x12c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d003      	beq.n	8007110 <TIM_OC1_SetConfig+0x88>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a2b      	ldr	r2, [pc, #172]	; (80071b8 <TIM_OC1_SetConfig+0x130>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d10c      	bne.n	800712a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f023 0308 	bic.w	r3, r3, #8
 8007116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4313      	orrs	r3, r2
 8007120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f023 0304 	bic.w	r3, r3, #4
 8007128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a1d      	ldr	r2, [pc, #116]	; (80071a4 <TIM_OC1_SetConfig+0x11c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d013      	beq.n	800715a <TIM_OC1_SetConfig+0xd2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a1c      	ldr	r2, [pc, #112]	; (80071a8 <TIM_OC1_SetConfig+0x120>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d00f      	beq.n	800715a <TIM_OC1_SetConfig+0xd2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a1b      	ldr	r2, [pc, #108]	; (80071ac <TIM_OC1_SetConfig+0x124>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00b      	beq.n	800715a <TIM_OC1_SetConfig+0xd2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a1a      	ldr	r2, [pc, #104]	; (80071b0 <TIM_OC1_SetConfig+0x128>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d007      	beq.n	800715a <TIM_OC1_SetConfig+0xd2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a19      	ldr	r2, [pc, #100]	; (80071b4 <TIM_OC1_SetConfig+0x12c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d003      	beq.n	800715a <TIM_OC1_SetConfig+0xd2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a18      	ldr	r2, [pc, #96]	; (80071b8 <TIM_OC1_SetConfig+0x130>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d111      	bne.n	800717e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	4313      	orrs	r3, r2
 8007172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	4313      	orrs	r3, r2
 800717c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	621a      	str	r2, [r3, #32]
}
 8007198:	bf00      	nop
 800719a:	371c      	adds	r7, #28
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	40012c00 	.word	0x40012c00
 80071a8:	40013400 	.word	0x40013400
 80071ac:	40014000 	.word	0x40014000
 80071b0:	40014400 	.word	0x40014400
 80071b4:	40014800 	.word	0x40014800
 80071b8:	40015000 	.word	0x40015000

080071bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	f023 0210 	bic.w	r2, r3, #16
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f023 0320 	bic.w	r3, r3, #32
 800720a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	011b      	lsls	r3, r3, #4
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	4313      	orrs	r3, r2
 8007216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a2c      	ldr	r2, [pc, #176]	; (80072cc <TIM_OC2_SetConfig+0x110>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d007      	beq.n	8007230 <TIM_OC2_SetConfig+0x74>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a2b      	ldr	r2, [pc, #172]	; (80072d0 <TIM_OC2_SetConfig+0x114>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d003      	beq.n	8007230 <TIM_OC2_SetConfig+0x74>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a2a      	ldr	r2, [pc, #168]	; (80072d4 <TIM_OC2_SetConfig+0x118>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d10d      	bne.n	800724c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	4313      	orrs	r3, r2
 8007242:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800724a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a1f      	ldr	r2, [pc, #124]	; (80072cc <TIM_OC2_SetConfig+0x110>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d013      	beq.n	800727c <TIM_OC2_SetConfig+0xc0>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a1e      	ldr	r2, [pc, #120]	; (80072d0 <TIM_OC2_SetConfig+0x114>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00f      	beq.n	800727c <TIM_OC2_SetConfig+0xc0>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a1e      	ldr	r2, [pc, #120]	; (80072d8 <TIM_OC2_SetConfig+0x11c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00b      	beq.n	800727c <TIM_OC2_SetConfig+0xc0>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a1d      	ldr	r2, [pc, #116]	; (80072dc <TIM_OC2_SetConfig+0x120>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d007      	beq.n	800727c <TIM_OC2_SetConfig+0xc0>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a1c      	ldr	r2, [pc, #112]	; (80072e0 <TIM_OC2_SetConfig+0x124>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d003      	beq.n	800727c <TIM_OC2_SetConfig+0xc0>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a17      	ldr	r2, [pc, #92]	; (80072d4 <TIM_OC2_SetConfig+0x118>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d113      	bne.n	80072a4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007282:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800728a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	4313      	orrs	r3, r2
 8007296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	621a      	str	r2, [r3, #32]
}
 80072be:	bf00      	nop
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40012c00 	.word	0x40012c00
 80072d0:	40013400 	.word	0x40013400
 80072d4:	40015000 	.word	0x40015000
 80072d8:	40014000 	.word	0x40014000
 80072dc:	40014400 	.word	0x40014400
 80072e0:	40014800 	.word	0x40014800

080072e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 0303 	bic.w	r3, r3, #3
 800731e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	021b      	lsls	r3, r3, #8
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	4313      	orrs	r3, r2
 800733c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a2b      	ldr	r2, [pc, #172]	; (80073f0 <TIM_OC3_SetConfig+0x10c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d007      	beq.n	8007356 <TIM_OC3_SetConfig+0x72>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a2a      	ldr	r2, [pc, #168]	; (80073f4 <TIM_OC3_SetConfig+0x110>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d003      	beq.n	8007356 <TIM_OC3_SetConfig+0x72>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a29      	ldr	r2, [pc, #164]	; (80073f8 <TIM_OC3_SetConfig+0x114>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d10d      	bne.n	8007372 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800735c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	021b      	lsls	r3, r3, #8
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007370:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a1e      	ldr	r2, [pc, #120]	; (80073f0 <TIM_OC3_SetConfig+0x10c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d013      	beq.n	80073a2 <TIM_OC3_SetConfig+0xbe>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a1d      	ldr	r2, [pc, #116]	; (80073f4 <TIM_OC3_SetConfig+0x110>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00f      	beq.n	80073a2 <TIM_OC3_SetConfig+0xbe>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a1d      	ldr	r2, [pc, #116]	; (80073fc <TIM_OC3_SetConfig+0x118>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00b      	beq.n	80073a2 <TIM_OC3_SetConfig+0xbe>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a1c      	ldr	r2, [pc, #112]	; (8007400 <TIM_OC3_SetConfig+0x11c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d007      	beq.n	80073a2 <TIM_OC3_SetConfig+0xbe>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a1b      	ldr	r2, [pc, #108]	; (8007404 <TIM_OC3_SetConfig+0x120>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d003      	beq.n	80073a2 <TIM_OC3_SetConfig+0xbe>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a16      	ldr	r2, [pc, #88]	; (80073f8 <TIM_OC3_SetConfig+0x114>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d113      	bne.n	80073ca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	621a      	str	r2, [r3, #32]
}
 80073e4:	bf00      	nop
 80073e6:	371c      	adds	r7, #28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	40012c00 	.word	0x40012c00
 80073f4:	40013400 	.word	0x40013400
 80073f8:	40015000 	.word	0x40015000
 80073fc:	40014000 	.word	0x40014000
 8007400:	40014400 	.word	0x40014400
 8007404:	40014800 	.word	0x40014800

08007408 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	021b      	lsls	r3, r3, #8
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	031b      	lsls	r3, r3, #12
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4313      	orrs	r3, r2
 8007462:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a1a      	ldr	r2, [pc, #104]	; (80074d0 <TIM_OC4_SetConfig+0xc8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d013      	beq.n	8007494 <TIM_OC4_SetConfig+0x8c>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a19      	ldr	r2, [pc, #100]	; (80074d4 <TIM_OC4_SetConfig+0xcc>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d00f      	beq.n	8007494 <TIM_OC4_SetConfig+0x8c>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a18      	ldr	r2, [pc, #96]	; (80074d8 <TIM_OC4_SetConfig+0xd0>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00b      	beq.n	8007494 <TIM_OC4_SetConfig+0x8c>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a17      	ldr	r2, [pc, #92]	; (80074dc <TIM_OC4_SetConfig+0xd4>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d007      	beq.n	8007494 <TIM_OC4_SetConfig+0x8c>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a16      	ldr	r2, [pc, #88]	; (80074e0 <TIM_OC4_SetConfig+0xd8>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d003      	beq.n	8007494 <TIM_OC4_SetConfig+0x8c>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a15      	ldr	r2, [pc, #84]	; (80074e4 <TIM_OC4_SetConfig+0xdc>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d109      	bne.n	80074a8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800749a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	019b      	lsls	r3, r3, #6
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	621a      	str	r2, [r3, #32]
}
 80074c2:	bf00      	nop
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	40012c00 	.word	0x40012c00
 80074d4:	40013400 	.word	0x40013400
 80074d8:	40014000 	.word	0x40014000
 80074dc:	40014400 	.word	0x40014400
 80074e0:	40014800 	.word	0x40014800
 80074e4:	40015000 	.word	0x40015000

080074e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800752c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	041b      	lsls	r3, r3, #16
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	4313      	orrs	r3, r2
 8007538:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a19      	ldr	r2, [pc, #100]	; (80075a4 <TIM_OC5_SetConfig+0xbc>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d013      	beq.n	800756a <TIM_OC5_SetConfig+0x82>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a18      	ldr	r2, [pc, #96]	; (80075a8 <TIM_OC5_SetConfig+0xc0>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00f      	beq.n	800756a <TIM_OC5_SetConfig+0x82>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a17      	ldr	r2, [pc, #92]	; (80075ac <TIM_OC5_SetConfig+0xc4>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d00b      	beq.n	800756a <TIM_OC5_SetConfig+0x82>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a16      	ldr	r2, [pc, #88]	; (80075b0 <TIM_OC5_SetConfig+0xc8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d007      	beq.n	800756a <TIM_OC5_SetConfig+0x82>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a15      	ldr	r2, [pc, #84]	; (80075b4 <TIM_OC5_SetConfig+0xcc>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d003      	beq.n	800756a <TIM_OC5_SetConfig+0x82>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a14      	ldr	r2, [pc, #80]	; (80075b8 <TIM_OC5_SetConfig+0xd0>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d109      	bne.n	800757e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007570:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	021b      	lsls	r3, r3, #8
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	4313      	orrs	r3, r2
 800757c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	621a      	str	r2, [r3, #32]
}
 8007598:	bf00      	nop
 800759a:	371c      	adds	r7, #28
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	40012c00 	.word	0x40012c00
 80075a8:	40013400 	.word	0x40013400
 80075ac:	40014000 	.word	0x40014000
 80075b0:	40014400 	.word	0x40014400
 80075b4:	40014800 	.word	0x40014800
 80075b8:	40015000 	.word	0x40015000

080075bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	021b      	lsls	r3, r3, #8
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	051b      	lsls	r3, r3, #20
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a1a      	ldr	r2, [pc, #104]	; (800767c <TIM_OC6_SetConfig+0xc0>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d013      	beq.n	8007640 <TIM_OC6_SetConfig+0x84>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a19      	ldr	r2, [pc, #100]	; (8007680 <TIM_OC6_SetConfig+0xc4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d00f      	beq.n	8007640 <TIM_OC6_SetConfig+0x84>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a18      	ldr	r2, [pc, #96]	; (8007684 <TIM_OC6_SetConfig+0xc8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d00b      	beq.n	8007640 <TIM_OC6_SetConfig+0x84>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a17      	ldr	r2, [pc, #92]	; (8007688 <TIM_OC6_SetConfig+0xcc>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d007      	beq.n	8007640 <TIM_OC6_SetConfig+0x84>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a16      	ldr	r2, [pc, #88]	; (800768c <TIM_OC6_SetConfig+0xd0>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d003      	beq.n	8007640 <TIM_OC6_SetConfig+0x84>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a15      	ldr	r2, [pc, #84]	; (8007690 <TIM_OC6_SetConfig+0xd4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d109      	bne.n	8007654 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007646:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	029b      	lsls	r3, r3, #10
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	621a      	str	r2, [r3, #32]
}
 800766e:	bf00      	nop
 8007670:	371c      	adds	r7, #28
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	40012c00 	.word	0x40012c00
 8007680:	40013400 	.word	0x40013400
 8007684:	40014000 	.word	0x40014000
 8007688:	40014400 	.word	0x40014400
 800768c:	40014800 	.word	0x40014800
 8007690:	40015000 	.word	0x40015000

08007694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	f023 0201 	bic.w	r2, r3, #1
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f023 030a 	bic.w	r3, r3, #10
 80076d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	621a      	str	r2, [r3, #32]
}
 80076e6:	bf00      	nop
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b087      	sub	sp, #28
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	60b9      	str	r1, [r7, #8]
 80076fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	f023 0210 	bic.w	r2, r3, #16
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800771c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	031b      	lsls	r3, r3, #12
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	4313      	orrs	r3, r2
 8007726:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800772e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	4313      	orrs	r3, r2
 8007738:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	621a      	str	r2, [r3, #32]
}
 8007746:	bf00      	nop
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007768:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	f043 0307 	orr.w	r3, r3, #7
 8007774:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	609a      	str	r2, [r3, #8]
}
 800777c:	bf00      	nop
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	021a      	lsls	r2, r3, #8
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	431a      	orrs	r2, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	609a      	str	r2, [r3, #8]
}
 80077bc:	bf00      	nop
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f003 031f 	and.w	r3, r3, #31
 80077da:	2201      	movs	r2, #1
 80077dc:	fa02 f303 	lsl.w	r3, r2, r3
 80077e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6a1a      	ldr	r2, [r3, #32]
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	43db      	mvns	r3, r3
 80077ea:	401a      	ands	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a1a      	ldr	r2, [r3, #32]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	f003 031f 	and.w	r3, r3, #31
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007800:	431a      	orrs	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	621a      	str	r2, [r3, #32]
}
 8007806:	bf00      	nop
 8007808:	371c      	adds	r7, #28
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
	...

08007814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007824:	2b01      	cmp	r3, #1
 8007826:	d101      	bne.n	800782c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007828:	2302      	movs	r3, #2
 800782a:	e06d      	b.n	8007908 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a30      	ldr	r2, [pc, #192]	; (8007914 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d009      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a2f      	ldr	r2, [pc, #188]	; (8007918 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d004      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a2d      	ldr	r2, [pc, #180]	; (800791c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d108      	bne.n	800787c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007870:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a1e      	ldr	r2, [pc, #120]	; (8007914 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d01d      	beq.n	80078dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a8:	d018      	beq.n	80078dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a1c      	ldr	r2, [pc, #112]	; (8007920 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d013      	beq.n	80078dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a1a      	ldr	r2, [pc, #104]	; (8007924 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00e      	beq.n	80078dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a15      	ldr	r2, [pc, #84]	; (8007918 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d009      	beq.n	80078dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a16      	ldr	r2, [pc, #88]	; (8007928 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d004      	beq.n	80078dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a11      	ldr	r2, [pc, #68]	; (800791c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d10c      	bne.n	80078f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	40012c00 	.word	0x40012c00
 8007918:	40013400 	.word	0x40013400
 800791c:	40015000 	.word	0x40015000
 8007920:	40000400 	.word	0x40000400
 8007924:	40000800 	.word	0x40000800
 8007928:	40014000 	.word	0x40014000

0800792c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e040      	b.n	80079fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800797e:	2b00      	cmp	r3, #0
 8007980:	d106      	bne.n	8007990 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7fa fbec 	bl	8002168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2224      	movs	r2, #36	; 0x24
 8007994:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0201 	bic.w	r2, r2, #1
 80079a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fb78 	bl	800809c <UART_SetConfig>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e022      	b.n	80079fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fd42 	bl	8008448 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689a      	ldr	r2, [r3, #8]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f042 0201 	orr.w	r2, r2, #1
 80079f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fdc9 	bl	800858c <UART_CheckIdleState>
 80079fa:	4603      	mov	r3, r0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b08a      	sub	sp, #40	; 0x28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a16:	2b20      	cmp	r3, #32
 8007a18:	d13d      	bne.n	8007a96 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <HAL_UART_Receive_IT+0x22>
 8007a20:	88fb      	ldrh	r3, [r7, #6]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e036      	b.n	8007a98 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <HAL_UART_Receive_IT+0x34>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e02f      	b.n	8007a98 <HAL_UART_Receive_IT+0x94>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d018      	beq.n	8007a86 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	613b      	str	r3, [r7, #16]
   return(result);
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	623b      	str	r3, [r7, #32]
 8007a74:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	69f9      	ldr	r1, [r7, #28]
 8007a78:	6a3a      	ldr	r2, [r7, #32]
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e6      	bne.n	8007a54 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	68b9      	ldr	r1, [r7, #8]
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 fe8b 	bl	80087a8 <UART_Start_Receive_IT>
 8007a92:	4603      	mov	r3, r0
 8007a94:	e000      	b.n	8007a98 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a96:	2302      	movs	r3, #2
  }
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3728      	adds	r7, #40	; 0x28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b0ba      	sub	sp, #232	; 0xe8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ac6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007aca:	f640 030f 	movw	r3, #2063	; 0x80f
 8007ace:	4013      	ands	r3, r2
 8007ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d115      	bne.n	8007b08 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae0:	f003 0320 	and.w	r3, r3, #32
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00f      	beq.n	8007b08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d009      	beq.n	8007b08 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 82a3 	beq.w	8008044 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	4798      	blx	r3
      }
      return;
 8007b06:	e29d      	b.n	8008044 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 8117 	beq.w	8007d40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007b1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007b22:	4b85      	ldr	r3, [pc, #532]	; (8007d38 <HAL_UART_IRQHandler+0x298>)
 8007b24:	4013      	ands	r3, r2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 810a 	beq.w	8007d40 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d011      	beq.n	8007b5c <HAL_UART_IRQHandler+0xbc>
 8007b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00b      	beq.n	8007b5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b52:	f043 0201 	orr.w	r2, r3, #1
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d011      	beq.n	8007b8c <HAL_UART_IRQHandler+0xec>
 8007b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00b      	beq.n	8007b8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b82:	f043 0204 	orr.w	r2, r3, #4
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d011      	beq.n	8007bbc <HAL_UART_IRQHandler+0x11c>
 8007b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00b      	beq.n	8007bbc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2204      	movs	r2, #4
 8007baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bb2:	f043 0202 	orr.w	r2, r3, #2
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d017      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bcc:	f003 0320 	and.w	r3, r3, #32
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d105      	bne.n	8007be0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00b      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2208      	movs	r2, #8
 8007be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bee:	f043 0208 	orr.w	r2, r3, #8
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d012      	beq.n	8007c2a <HAL_UART_IRQHandler+0x18a>
 8007c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00c      	beq.n	8007c2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c20:	f043 0220 	orr.w	r2, r3, #32
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 8209 	beq.w	8008048 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00d      	beq.n	8007c5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d007      	beq.n	8007c5e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c72:	2b40      	cmp	r3, #64	; 0x40
 8007c74:	d005      	beq.n	8007c82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d04f      	beq.n	8007d22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fe3c 	bl	8008900 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c92:	2b40      	cmp	r3, #64	; 0x40
 8007c94:	d141      	bne.n	8007d1a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3308      	adds	r3, #8
 8007c9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007cd2:	e841 2300 	strex	r3, r2, [r1]
 8007cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1d9      	bne.n	8007c96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d013      	beq.n	8007d12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cee:	4a13      	ldr	r2, [pc, #76]	; (8007d3c <HAL_UART_IRQHandler+0x29c>)
 8007cf0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fc fb3c 	bl	8004374 <HAL_DMA_Abort_IT>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d017      	beq.n	8007d32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d10:	e00f      	b.n	8007d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f9ac 	bl	8008070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d18:	e00b      	b.n	8007d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f9a8 	bl	8008070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d20:	e007      	b.n	8007d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f9a4 	bl	8008070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007d30:	e18a      	b.n	8008048 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d32:	bf00      	nop
    return;
 8007d34:	e188      	b.n	8008048 <HAL_UART_IRQHandler+0x5a8>
 8007d36:	bf00      	nop
 8007d38:	04000120 	.word	0x04000120
 8007d3c:	080089c7 	.word	0x080089c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	f040 8143 	bne.w	8007fd0 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d4e:	f003 0310 	and.w	r3, r3, #16
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 813c 	beq.w	8007fd0 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d5c:	f003 0310 	and.w	r3, r3, #16
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f000 8135 	beq.w	8007fd0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2210      	movs	r2, #16
 8007d6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d78:	2b40      	cmp	r3, #64	; 0x40
 8007d7a:	f040 80b1 	bne.w	8007ee0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f000 815c 	beq.w	800804c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	f080 8154 	bcs.w	800804c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007daa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	2b20      	cmp	r3, #32
 8007db6:	f000 8085 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dc6:	e853 3f00 	ldrex	r3, [r3]
 8007dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007de4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007de8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007df0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1da      	bne.n	8007dba <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3308      	adds	r3, #8
 8007e0a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e16:	f023 0301 	bic.w	r3, r3, #1
 8007e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3308      	adds	r3, #8
 8007e24:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e28:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e2c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e1      	bne.n	8007e04 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3308      	adds	r3, #8
 8007e46:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e4a:	e853 3f00 	ldrex	r3, [r3]
 8007e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3308      	adds	r3, #8
 8007e60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e6c:	e841 2300 	strex	r3, r2, [r1]
 8007e70:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e3      	bne.n	8007e40 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e94:	f023 0310 	bic.w	r3, r3, #16
 8007e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ea6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ea8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eaa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007eac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007eae:	e841 2300 	strex	r3, r2, [r1]
 8007eb2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1e4      	bne.n	8007e84 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fc fa1f 	bl	8004302 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f8d3 	bl	8008084 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ede:	e0b5      	b.n	800804c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 80a7 	beq.w	8008050 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8007f02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 80a2 	beq.w	8008050 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007f30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e4      	bne.n	8007f0c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3308      	adds	r3, #8
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	e853 3f00 	ldrex	r3, [r3]
 8007f50:	623b      	str	r3, [r7, #32]
   return(result);
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	f023 0301 	bic.w	r3, r3, #1
 8007f58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3308      	adds	r3, #8
 8007f62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f66:	633a      	str	r2, [r7, #48]	; 0x30
 8007f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f6e:	e841 2300 	strex	r3, r2, [r1]
 8007f72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1e3      	bne.n	8007f42 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f023 0310 	bic.w	r3, r3, #16
 8007fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007fae:	61fb      	str	r3, [r7, #28]
 8007fb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	69b9      	ldr	r1, [r7, #24]
 8007fb4:	69fa      	ldr	r2, [r7, #28]
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	617b      	str	r3, [r7, #20]
   return(result);
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e4      	bne.n	8007f8c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f85b 	bl	8008084 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007fce:	e03f      	b.n	8008050 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00e      	beq.n	8007ffa <HAL_UART_IRQHandler+0x55a>
 8007fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d008      	beq.n	8007ffa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ff0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fe83 	bl	8008cfe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ff8:	e02d      	b.n	8008056 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00e      	beq.n	8008024 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800800a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800800e:	2b00      	cmp	r3, #0
 8008010:	d008      	beq.n	8008024 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008016:	2b00      	cmp	r3, #0
 8008018:	d01c      	beq.n	8008054 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
    }
    return;
 8008022:	e017      	b.n	8008054 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802c:	2b00      	cmp	r3, #0
 800802e:	d012      	beq.n	8008056 <HAL_UART_IRQHandler+0x5b6>
 8008030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00c      	beq.n	8008056 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fcd8 	bl	80089f2 <UART_EndTransmit_IT>
    return;
 8008042:	e008      	b.n	8008056 <HAL_UART_IRQHandler+0x5b6>
      return;
 8008044:	bf00      	nop
 8008046:	e006      	b.n	8008056 <HAL_UART_IRQHandler+0x5b6>
    return;
 8008048:	bf00      	nop
 800804a:	e004      	b.n	8008056 <HAL_UART_IRQHandler+0x5b6>
      return;
 800804c:	bf00      	nop
 800804e:	e002      	b.n	8008056 <HAL_UART_IRQHandler+0x5b6>
      return;
 8008050:	bf00      	nop
 8008052:	e000      	b.n	8008056 <HAL_UART_IRQHandler+0x5b6>
    return;
 8008054:	bf00      	nop
  }

}
 8008056:	37e8      	adds	r7, #232	; 0xe8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	460b      	mov	r3, r1
 800808e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	689a      	ldr	r2, [r3, #8]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	431a      	orrs	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	431a      	orrs	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	4b92      	ldr	r3, [pc, #584]	; (8008310 <UART_SetConfig+0x274>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	6812      	ldr	r2, [r2, #0]
 80080ce:	6979      	ldr	r1, [r7, #20]
 80080d0:	430b      	orrs	r3, r1
 80080d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68da      	ldr	r2, [r3, #12]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	430a      	orrs	r2, r1
 800810c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a80      	ldr	r2, [pc, #512]	; (8008314 <UART_SetConfig+0x278>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d120      	bne.n	800815a <UART_SetConfig+0xbe>
 8008118:	4b7f      	ldr	r3, [pc, #508]	; (8008318 <UART_SetConfig+0x27c>)
 800811a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811c:	f003 0303 	and.w	r3, r3, #3
 8008120:	2b03      	cmp	r3, #3
 8008122:	d817      	bhi.n	8008154 <UART_SetConfig+0xb8>
 8008124:	a201      	add	r2, pc, #4	; (adr r2, 800812c <UART_SetConfig+0x90>)
 8008126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812a:	bf00      	nop
 800812c:	0800813d 	.word	0x0800813d
 8008130:	08008149 	.word	0x08008149
 8008134:	0800814f 	.word	0x0800814f
 8008138:	08008143 	.word	0x08008143
 800813c:	2301      	movs	r3, #1
 800813e:	77fb      	strb	r3, [r7, #31]
 8008140:	e0b5      	b.n	80082ae <UART_SetConfig+0x212>
 8008142:	2302      	movs	r3, #2
 8008144:	77fb      	strb	r3, [r7, #31]
 8008146:	e0b2      	b.n	80082ae <UART_SetConfig+0x212>
 8008148:	2304      	movs	r3, #4
 800814a:	77fb      	strb	r3, [r7, #31]
 800814c:	e0af      	b.n	80082ae <UART_SetConfig+0x212>
 800814e:	2308      	movs	r3, #8
 8008150:	77fb      	strb	r3, [r7, #31]
 8008152:	e0ac      	b.n	80082ae <UART_SetConfig+0x212>
 8008154:	2310      	movs	r3, #16
 8008156:	77fb      	strb	r3, [r7, #31]
 8008158:	e0a9      	b.n	80082ae <UART_SetConfig+0x212>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a6f      	ldr	r2, [pc, #444]	; (800831c <UART_SetConfig+0x280>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d124      	bne.n	80081ae <UART_SetConfig+0x112>
 8008164:	4b6c      	ldr	r3, [pc, #432]	; (8008318 <UART_SetConfig+0x27c>)
 8008166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800816c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008170:	d011      	beq.n	8008196 <UART_SetConfig+0xfa>
 8008172:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008176:	d817      	bhi.n	80081a8 <UART_SetConfig+0x10c>
 8008178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800817c:	d011      	beq.n	80081a2 <UART_SetConfig+0x106>
 800817e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008182:	d811      	bhi.n	80081a8 <UART_SetConfig+0x10c>
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <UART_SetConfig+0xf4>
 8008188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800818c:	d006      	beq.n	800819c <UART_SetConfig+0x100>
 800818e:	e00b      	b.n	80081a8 <UART_SetConfig+0x10c>
 8008190:	2300      	movs	r3, #0
 8008192:	77fb      	strb	r3, [r7, #31]
 8008194:	e08b      	b.n	80082ae <UART_SetConfig+0x212>
 8008196:	2302      	movs	r3, #2
 8008198:	77fb      	strb	r3, [r7, #31]
 800819a:	e088      	b.n	80082ae <UART_SetConfig+0x212>
 800819c:	2304      	movs	r3, #4
 800819e:	77fb      	strb	r3, [r7, #31]
 80081a0:	e085      	b.n	80082ae <UART_SetConfig+0x212>
 80081a2:	2308      	movs	r3, #8
 80081a4:	77fb      	strb	r3, [r7, #31]
 80081a6:	e082      	b.n	80082ae <UART_SetConfig+0x212>
 80081a8:	2310      	movs	r3, #16
 80081aa:	77fb      	strb	r3, [r7, #31]
 80081ac:	e07f      	b.n	80082ae <UART_SetConfig+0x212>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a5b      	ldr	r2, [pc, #364]	; (8008320 <UART_SetConfig+0x284>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d124      	bne.n	8008202 <UART_SetConfig+0x166>
 80081b8:	4b57      	ldr	r3, [pc, #348]	; (8008318 <UART_SetConfig+0x27c>)
 80081ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80081c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80081c4:	d011      	beq.n	80081ea <UART_SetConfig+0x14e>
 80081c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80081ca:	d817      	bhi.n	80081fc <UART_SetConfig+0x160>
 80081cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081d0:	d011      	beq.n	80081f6 <UART_SetConfig+0x15a>
 80081d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081d6:	d811      	bhi.n	80081fc <UART_SetConfig+0x160>
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <UART_SetConfig+0x148>
 80081dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081e0:	d006      	beq.n	80081f0 <UART_SetConfig+0x154>
 80081e2:	e00b      	b.n	80081fc <UART_SetConfig+0x160>
 80081e4:	2300      	movs	r3, #0
 80081e6:	77fb      	strb	r3, [r7, #31]
 80081e8:	e061      	b.n	80082ae <UART_SetConfig+0x212>
 80081ea:	2302      	movs	r3, #2
 80081ec:	77fb      	strb	r3, [r7, #31]
 80081ee:	e05e      	b.n	80082ae <UART_SetConfig+0x212>
 80081f0:	2304      	movs	r3, #4
 80081f2:	77fb      	strb	r3, [r7, #31]
 80081f4:	e05b      	b.n	80082ae <UART_SetConfig+0x212>
 80081f6:	2308      	movs	r3, #8
 80081f8:	77fb      	strb	r3, [r7, #31]
 80081fa:	e058      	b.n	80082ae <UART_SetConfig+0x212>
 80081fc:	2310      	movs	r3, #16
 80081fe:	77fb      	strb	r3, [r7, #31]
 8008200:	e055      	b.n	80082ae <UART_SetConfig+0x212>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a47      	ldr	r2, [pc, #284]	; (8008324 <UART_SetConfig+0x288>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d124      	bne.n	8008256 <UART_SetConfig+0x1ba>
 800820c:	4b42      	ldr	r3, [pc, #264]	; (8008318 <UART_SetConfig+0x27c>)
 800820e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008210:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008214:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008218:	d011      	beq.n	800823e <UART_SetConfig+0x1a2>
 800821a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800821e:	d817      	bhi.n	8008250 <UART_SetConfig+0x1b4>
 8008220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008224:	d011      	beq.n	800824a <UART_SetConfig+0x1ae>
 8008226:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800822a:	d811      	bhi.n	8008250 <UART_SetConfig+0x1b4>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <UART_SetConfig+0x19c>
 8008230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008234:	d006      	beq.n	8008244 <UART_SetConfig+0x1a8>
 8008236:	e00b      	b.n	8008250 <UART_SetConfig+0x1b4>
 8008238:	2300      	movs	r3, #0
 800823a:	77fb      	strb	r3, [r7, #31]
 800823c:	e037      	b.n	80082ae <UART_SetConfig+0x212>
 800823e:	2302      	movs	r3, #2
 8008240:	77fb      	strb	r3, [r7, #31]
 8008242:	e034      	b.n	80082ae <UART_SetConfig+0x212>
 8008244:	2304      	movs	r3, #4
 8008246:	77fb      	strb	r3, [r7, #31]
 8008248:	e031      	b.n	80082ae <UART_SetConfig+0x212>
 800824a:	2308      	movs	r3, #8
 800824c:	77fb      	strb	r3, [r7, #31]
 800824e:	e02e      	b.n	80082ae <UART_SetConfig+0x212>
 8008250:	2310      	movs	r3, #16
 8008252:	77fb      	strb	r3, [r7, #31]
 8008254:	e02b      	b.n	80082ae <UART_SetConfig+0x212>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a33      	ldr	r2, [pc, #204]	; (8008328 <UART_SetConfig+0x28c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d124      	bne.n	80082aa <UART_SetConfig+0x20e>
 8008260:	4b2d      	ldr	r3, [pc, #180]	; (8008318 <UART_SetConfig+0x27c>)
 8008262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008264:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008268:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800826c:	d011      	beq.n	8008292 <UART_SetConfig+0x1f6>
 800826e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008272:	d817      	bhi.n	80082a4 <UART_SetConfig+0x208>
 8008274:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008278:	d011      	beq.n	800829e <UART_SetConfig+0x202>
 800827a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800827e:	d811      	bhi.n	80082a4 <UART_SetConfig+0x208>
 8008280:	2b00      	cmp	r3, #0
 8008282:	d003      	beq.n	800828c <UART_SetConfig+0x1f0>
 8008284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008288:	d006      	beq.n	8008298 <UART_SetConfig+0x1fc>
 800828a:	e00b      	b.n	80082a4 <UART_SetConfig+0x208>
 800828c:	2300      	movs	r3, #0
 800828e:	77fb      	strb	r3, [r7, #31]
 8008290:	e00d      	b.n	80082ae <UART_SetConfig+0x212>
 8008292:	2302      	movs	r3, #2
 8008294:	77fb      	strb	r3, [r7, #31]
 8008296:	e00a      	b.n	80082ae <UART_SetConfig+0x212>
 8008298:	2304      	movs	r3, #4
 800829a:	77fb      	strb	r3, [r7, #31]
 800829c:	e007      	b.n	80082ae <UART_SetConfig+0x212>
 800829e:	2308      	movs	r3, #8
 80082a0:	77fb      	strb	r3, [r7, #31]
 80082a2:	e004      	b.n	80082ae <UART_SetConfig+0x212>
 80082a4:	2310      	movs	r3, #16
 80082a6:	77fb      	strb	r3, [r7, #31]
 80082a8:	e001      	b.n	80082ae <UART_SetConfig+0x212>
 80082aa:	2310      	movs	r3, #16
 80082ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b6:	d16c      	bne.n	8008392 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80082b8:	7ffb      	ldrb	r3, [r7, #31]
 80082ba:	2b08      	cmp	r3, #8
 80082bc:	d838      	bhi.n	8008330 <UART_SetConfig+0x294>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <UART_SetConfig+0x228>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082e9 	.word	0x080082e9
 80082c8:	080082f1 	.word	0x080082f1
 80082cc:	080082f9 	.word	0x080082f9
 80082d0:	08008331 	.word	0x08008331
 80082d4:	080082ff 	.word	0x080082ff
 80082d8:	08008331 	.word	0x08008331
 80082dc:	08008331 	.word	0x08008331
 80082e0:	08008331 	.word	0x08008331
 80082e4:	08008307 	.word	0x08008307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082e8:	f7fd fd78 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 80082ec:	61b8      	str	r0, [r7, #24]
        break;
 80082ee:	e024      	b.n	800833a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082f0:	f7fd fd96 	bl	8005e20 <HAL_RCC_GetPCLK2Freq>
 80082f4:	61b8      	str	r0, [r7, #24]
        break;
 80082f6:	e020      	b.n	800833a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082f8:	4b0c      	ldr	r3, [pc, #48]	; (800832c <UART_SetConfig+0x290>)
 80082fa:	61bb      	str	r3, [r7, #24]
        break;
 80082fc:	e01d      	b.n	800833a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082fe:	f7fd fcf7 	bl	8005cf0 <HAL_RCC_GetSysClockFreq>
 8008302:	61b8      	str	r0, [r7, #24]
        break;
 8008304:	e019      	b.n	800833a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800830a:	61bb      	str	r3, [r7, #24]
        break;
 800830c:	e015      	b.n	800833a <UART_SetConfig+0x29e>
 800830e:	bf00      	nop
 8008310:	efff69f3 	.word	0xefff69f3
 8008314:	40013800 	.word	0x40013800
 8008318:	40021000 	.word	0x40021000
 800831c:	40004400 	.word	0x40004400
 8008320:	40004800 	.word	0x40004800
 8008324:	40004c00 	.word	0x40004c00
 8008328:	40005000 	.word	0x40005000
 800832c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	77bb      	strb	r3, [r7, #30]
        break;
 8008338:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d075      	beq.n	800842c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	005a      	lsls	r2, r3, #1
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	085b      	lsrs	r3, r3, #1
 800834a:	441a      	add	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	fbb2 f3f3 	udiv	r3, r2, r3
 8008354:	b29b      	uxth	r3, r3
 8008356:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	2b0f      	cmp	r3, #15
 800835c:	d916      	bls.n	800838c <UART_SetConfig+0x2f0>
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008364:	d212      	bcs.n	800838c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	b29b      	uxth	r3, r3
 800836a:	f023 030f 	bic.w	r3, r3, #15
 800836e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	085b      	lsrs	r3, r3, #1
 8008374:	b29b      	uxth	r3, r3
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	b29a      	uxth	r2, r3
 800837c:	89fb      	ldrh	r3, [r7, #14]
 800837e:	4313      	orrs	r3, r2
 8008380:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	89fa      	ldrh	r2, [r7, #14]
 8008388:	60da      	str	r2, [r3, #12]
 800838a:	e04f      	b.n	800842c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	77bb      	strb	r3, [r7, #30]
 8008390:	e04c      	b.n	800842c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008392:	7ffb      	ldrb	r3, [r7, #31]
 8008394:	2b08      	cmp	r3, #8
 8008396:	d828      	bhi.n	80083ea <UART_SetConfig+0x34e>
 8008398:	a201      	add	r2, pc, #4	; (adr r2, 80083a0 <UART_SetConfig+0x304>)
 800839a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839e:	bf00      	nop
 80083a0:	080083c5 	.word	0x080083c5
 80083a4:	080083cd 	.word	0x080083cd
 80083a8:	080083d5 	.word	0x080083d5
 80083ac:	080083eb 	.word	0x080083eb
 80083b0:	080083db 	.word	0x080083db
 80083b4:	080083eb 	.word	0x080083eb
 80083b8:	080083eb 	.word	0x080083eb
 80083bc:	080083eb 	.word	0x080083eb
 80083c0:	080083e3 	.word	0x080083e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083c4:	f7fd fd0a 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 80083c8:	61b8      	str	r0, [r7, #24]
        break;
 80083ca:	e013      	b.n	80083f4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083cc:	f7fd fd28 	bl	8005e20 <HAL_RCC_GetPCLK2Freq>
 80083d0:	61b8      	str	r0, [r7, #24]
        break;
 80083d2:	e00f      	b.n	80083f4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083d4:	4b1b      	ldr	r3, [pc, #108]	; (8008444 <UART_SetConfig+0x3a8>)
 80083d6:	61bb      	str	r3, [r7, #24]
        break;
 80083d8:	e00c      	b.n	80083f4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083da:	f7fd fc89 	bl	8005cf0 <HAL_RCC_GetSysClockFreq>
 80083de:	61b8      	str	r0, [r7, #24]
        break;
 80083e0:	e008      	b.n	80083f4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083e6:	61bb      	str	r3, [r7, #24]
        break;
 80083e8:	e004      	b.n	80083f4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	77bb      	strb	r3, [r7, #30]
        break;
 80083f2:	bf00      	nop
    }

    if (pclk != 0U)
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d018      	beq.n	800842c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	085a      	lsrs	r2, r3, #1
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	441a      	add	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	fbb2 f3f3 	udiv	r3, r2, r3
 800840c:	b29b      	uxth	r3, r3
 800840e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	2b0f      	cmp	r3, #15
 8008414:	d908      	bls.n	8008428 <UART_SetConfig+0x38c>
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800841c:	d204      	bcs.n	8008428 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	60da      	str	r2, [r3, #12]
 8008426:	e001      	b.n	800842c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008438:	7fbb      	ldrb	r3, [r7, #30]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3720      	adds	r7, #32
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	007a1200 	.word	0x007a1200

08008448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00a      	beq.n	8008472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	430a      	orrs	r2, r1
 8008470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00a      	beq.n	8008494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00a      	beq.n	80084b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ba:	f003 0308 	and.w	r3, r3, #8
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084dc:	f003 0310 	and.w	r3, r3, #16
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	f003 0320 	and.w	r3, r3, #32
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01a      	beq.n	800855e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	430a      	orrs	r2, r1
 800853c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008546:	d10a      	bne.n	800855e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	605a      	str	r2, [r3, #4]
  }
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af02      	add	r7, sp, #8
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800859c:	f7f9 ff5c 	bl	8002458 <HAL_GetTick>
 80085a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0308 	and.w	r3, r3, #8
 80085ac:	2b08      	cmp	r3, #8
 80085ae:	d10e      	bne.n	80085ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f82d 	bl	800861e <UART_WaitOnFlagUntilTimeout>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e023      	b.n	8008616 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b04      	cmp	r3, #4
 80085da:	d10e      	bne.n	80085fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f817 	bl	800861e <UART_WaitOnFlagUntilTimeout>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e00d      	b.n	8008616 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2220      	movs	r2, #32
 8008604:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b09c      	sub	sp, #112	; 0x70
 8008622:	af00      	add	r7, sp, #0
 8008624:	60f8      	str	r0, [r7, #12]
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	603b      	str	r3, [r7, #0]
 800862a:	4613      	mov	r3, r2
 800862c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800862e:	e0a5      	b.n	800877c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008636:	f000 80a1 	beq.w	800877c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800863a:	f7f9 ff0d 	bl	8002458 <HAL_GetTick>
 800863e:	4602      	mov	r2, r0
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008646:	429a      	cmp	r2, r3
 8008648:	d302      	bcc.n	8008650 <UART_WaitOnFlagUntilTimeout+0x32>
 800864a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800864c:	2b00      	cmp	r3, #0
 800864e:	d13e      	bne.n	80086ce <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008658:	e853 3f00 	ldrex	r3, [r3]
 800865c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800865e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008660:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008664:	667b      	str	r3, [r7, #100]	; 0x64
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800866e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008670:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008672:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008674:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008676:	e841 2300 	strex	r3, r2, [r1]
 800867a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800867c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1e6      	bne.n	8008650 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3308      	adds	r3, #8
 8008688:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868c:	e853 3f00 	ldrex	r3, [r3]
 8008690:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008694:	f023 0301 	bic.w	r3, r3, #1
 8008698:	663b      	str	r3, [r7, #96]	; 0x60
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3308      	adds	r3, #8
 80086a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80086a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086aa:	e841 2300 	strex	r3, r2, [r1]
 80086ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1e5      	bne.n	8008682 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2220      	movs	r2, #32
 80086ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2220      	movs	r2, #32
 80086c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e067      	b.n	800879e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d04f      	beq.n	800877c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ea:	d147      	bne.n	800877c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	e853 3f00 	ldrex	r3, [r3]
 8008702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800870a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	461a      	mov	r2, r3
 8008712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008714:	637b      	str	r3, [r7, #52]	; 0x34
 8008716:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800871a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800871c:	e841 2300 	strex	r3, r2, [r1]
 8008720:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1e6      	bne.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3308      	adds	r3, #8
 800872e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	613b      	str	r3, [r7, #16]
   return(result);
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	f023 0301 	bic.w	r3, r3, #1
 800873e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3308      	adds	r3, #8
 8008746:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008748:	623a      	str	r2, [r7, #32]
 800874a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	69f9      	ldr	r1, [r7, #28]
 800874e:	6a3a      	ldr	r2, [r7, #32]
 8008750:	e841 2300 	strex	r3, r2, [r1]
 8008754:	61bb      	str	r3, [r7, #24]
   return(result);
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1e5      	bne.n	8008728 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2220      	movs	r2, #32
 8008760:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2220      	movs	r2, #32
 8008766:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2220      	movs	r2, #32
 800876c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e010      	b.n	800879e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	69da      	ldr	r2, [r3, #28]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	4013      	ands	r3, r2
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	429a      	cmp	r2, r3
 800878a:	bf0c      	ite	eq
 800878c:	2301      	moveq	r3, #1
 800878e:	2300      	movne	r3, #0
 8008790:	b2db      	uxtb	r3, r3
 8008792:	461a      	mov	r2, r3
 8008794:	79fb      	ldrb	r3, [r7, #7]
 8008796:	429a      	cmp	r2, r3
 8008798:	f43f af4a 	beq.w	8008630 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3770      	adds	r7, #112	; 0x70
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
	...

080087a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b091      	sub	sp, #68	; 0x44
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	4613      	mov	r3, r2
 80087b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	88fa      	ldrh	r2, [r7, #6]
 80087c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	88fa      	ldrh	r2, [r7, #6]
 80087c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087da:	d10e      	bne.n	80087fa <UART_Start_Receive_IT+0x52>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d105      	bne.n	80087f0 <UART_Start_Receive_IT+0x48>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80087ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087ee:	e02d      	b.n	800884c <UART_Start_Receive_IT+0xa4>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	22ff      	movs	r2, #255	; 0xff
 80087f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087f8:	e028      	b.n	800884c <UART_Start_Receive_IT+0xa4>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10d      	bne.n	800881e <UART_Start_Receive_IT+0x76>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d104      	bne.n	8008814 <UART_Start_Receive_IT+0x6c>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	22ff      	movs	r2, #255	; 0xff
 800880e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008812:	e01b      	b.n	800884c <UART_Start_Receive_IT+0xa4>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	227f      	movs	r2, #127	; 0x7f
 8008818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800881c:	e016      	b.n	800884c <UART_Start_Receive_IT+0xa4>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008826:	d10d      	bne.n	8008844 <UART_Start_Receive_IT+0x9c>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d104      	bne.n	800883a <UART_Start_Receive_IT+0x92>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	227f      	movs	r2, #127	; 0x7f
 8008834:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008838:	e008      	b.n	800884c <UART_Start_Receive_IT+0xa4>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	223f      	movs	r2, #63	; 0x3f
 800883e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008842:	e003      	b.n	800884c <UART_Start_Receive_IT+0xa4>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2222      	movs	r2, #34	; 0x22
 8008858:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3308      	adds	r3, #8
 8008860:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	f043 0301 	orr.w	r3, r3, #1
 8008870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	3308      	adds	r3, #8
 8008878:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800887a:	637a      	str	r2, [r7, #52]	; 0x34
 800887c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e5      	bne.n	800885a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008896:	d107      	bne.n	80088a8 <UART_Start_Receive_IT+0x100>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d103      	bne.n	80088a8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4a15      	ldr	r2, [pc, #84]	; (80088f8 <UART_Start_Receive_IT+0x150>)
 80088a4:	665a      	str	r2, [r3, #100]	; 0x64
 80088a6:	e002      	b.n	80088ae <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	4a14      	ldr	r2, [pc, #80]	; (80088fc <UART_Start_Receive_IT+0x154>)
 80088ac:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	e853 3f00 	ldrex	r3, [r3]
 80088c2:	613b      	str	r3, [r7, #16]
   return(result);
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80088ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	461a      	mov	r2, r3
 80088d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d4:	623b      	str	r3, [r7, #32]
 80088d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d8:	69f9      	ldr	r1, [r7, #28]
 80088da:	6a3a      	ldr	r2, [r7, #32]
 80088dc:	e841 2300 	strex	r3, r2, [r1]
 80088e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e6      	bne.n	80088b6 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3744      	adds	r7, #68	; 0x44
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	08008ba3 	.word	0x08008ba3
 80088fc:	08008a47 	.word	0x08008a47

08008900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008900:	b480      	push	{r7}
 8008902:	b095      	sub	sp, #84	; 0x54
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800891c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008926:	643b      	str	r3, [r7, #64]	; 0x40
 8008928:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800892c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e6      	bne.n	8008908 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008942:	6a3b      	ldr	r3, [r7, #32]
 8008944:	e853 3f00 	ldrex	r3, [r3]
 8008948:	61fb      	str	r3, [r7, #28]
   return(result);
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	f023 0301 	bic.w	r3, r3, #1
 8008950:	64bb      	str	r3, [r7, #72]	; 0x48
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3308      	adds	r3, #8
 8008958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800895a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800895c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008962:	e841 2300 	strex	r3, r2, [r1]
 8008966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e5      	bne.n	800893a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008972:	2b01      	cmp	r3, #1
 8008974:	d118      	bne.n	80089a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	e853 3f00 	ldrex	r3, [r3]
 8008982:	60bb      	str	r3, [r7, #8]
   return(result);
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f023 0310 	bic.w	r3, r3, #16
 800898a:	647b      	str	r3, [r7, #68]	; 0x44
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	461a      	mov	r2, r3
 8008992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008994:	61bb      	str	r3, [r7, #24]
 8008996:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008998:	6979      	ldr	r1, [r7, #20]
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	e841 2300 	strex	r3, r2, [r1]
 80089a0:	613b      	str	r3, [r7, #16]
   return(result);
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1e6      	bne.n	8008976 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2220      	movs	r2, #32
 80089ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80089ba:	bf00      	nop
 80089bc:	3754      	adds	r7, #84	; 0x54
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f7ff fb43 	bl	8008070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089ea:	bf00      	nop
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b088      	sub	sp, #32
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	e853 3f00 	ldrex	r3, [r3]
 8008a06:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a0e:	61fb      	str	r3, [r7, #28]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	461a      	mov	r2, r3
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	61bb      	str	r3, [r7, #24]
 8008a1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1c:	6979      	ldr	r1, [r7, #20]
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	e841 2300 	strex	r3, r2, [r1]
 8008a24:	613b      	str	r3, [r7, #16]
   return(result);
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1e6      	bne.n	80089fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff fb0f 	bl	800805c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a3e:	bf00      	nop
 8008a40:	3720      	adds	r7, #32
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b096      	sub	sp, #88	; 0x58
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a5c:	2b22      	cmp	r3, #34	; 0x22
 8008a5e:	f040 8094 	bne.w	8008b8a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a68:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a6c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008a70:	b2d9      	uxtb	r1, r3
 8008a72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7c:	400a      	ands	r2, r1
 8008a7e:	b2d2      	uxtb	r2, r2
 8008a80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	3b01      	subs	r3, #1
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d177      	bne.n	8008b9a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008abe:	653b      	str	r3, [r7, #80]	; 0x50
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8008aca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e6      	bne.n	8008aaa <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	623b      	str	r3, [r7, #32]
   return(result);
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	f023 0301 	bic.w	r3, r3, #1
 8008af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3308      	adds	r3, #8
 8008afa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008afc:	633a      	str	r2, [r7, #48]	; 0x30
 8008afe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b04:	e841 2300 	strex	r3, r2, [r1]
 8008b08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e5      	bne.n	8008adc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2220      	movs	r2, #32
 8008b14:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d12e      	bne.n	8008b82 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	e853 3f00 	ldrex	r3, [r3]
 8008b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 0310 	bic.w	r3, r3, #16
 8008b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	461a      	mov	r2, r3
 8008b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b48:	61fb      	str	r3, [r7, #28]
 8008b4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4c:	69b9      	ldr	r1, [r7, #24]
 8008b4e:	69fa      	ldr	r2, [r7, #28]
 8008b50:	e841 2300 	strex	r3, r2, [r1]
 8008b54:	617b      	str	r3, [r7, #20]
   return(result);
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e6      	bne.n	8008b2a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	69db      	ldr	r3, [r3, #28]
 8008b62:	f003 0310 	and.w	r3, r3, #16
 8008b66:	2b10      	cmp	r3, #16
 8008b68:	d103      	bne.n	8008b72 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2210      	movs	r2, #16
 8008b70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7ff fa82 	bl	8008084 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b80:	e00b      	b.n	8008b9a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7f7 fc80 	bl	8000488 <HAL_UART_RxCpltCallback>
}
 8008b88:	e007      	b.n	8008b9a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	699a      	ldr	r2, [r3, #24]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f042 0208 	orr.w	r2, r2, #8
 8008b98:	619a      	str	r2, [r3, #24]
}
 8008b9a:	bf00      	nop
 8008b9c:	3758      	adds	r7, #88	; 0x58
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b096      	sub	sp, #88	; 0x58
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bb0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bb8:	2b22      	cmp	r3, #34	; 0x22
 8008bba:	f040 8094 	bne.w	8008ce6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008bc4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bcc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008bce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008bd2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bdc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be2:	1c9a      	adds	r2, r3, #2
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d177      	bne.n	8008cf6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	461a      	mov	r2, r3
 8008c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c24:	643b      	str	r3, [r7, #64]	; 0x40
 8008c26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e6      	bne.n	8008c06 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c40:	6a3b      	ldr	r3, [r7, #32]
 8008c42:	e853 3f00 	ldrex	r3, [r3]
 8008c46:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	f023 0301 	bic.w	r3, r3, #1
 8008c4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3308      	adds	r3, #8
 8008c56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c60:	e841 2300 	strex	r3, r2, [r1]
 8008c64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1e5      	bne.n	8008c38 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2220      	movs	r2, #32
 8008c70:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d12e      	bne.n	8008cde <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	e853 3f00 	ldrex	r3, [r3]
 8008c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	f023 0310 	bic.w	r3, r3, #16
 8008c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ca4:	61bb      	str	r3, [r7, #24]
 8008ca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca8:	6979      	ldr	r1, [r7, #20]
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	e841 2300 	strex	r3, r2, [r1]
 8008cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1e6      	bne.n	8008c86 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	f003 0310 	and.w	r3, r3, #16
 8008cc2:	2b10      	cmp	r3, #16
 8008cc4:	d103      	bne.n	8008cce <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2210      	movs	r2, #16
 8008ccc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7ff f9d4 	bl	8008084 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008cdc:	e00b      	b.n	8008cf6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7f7 fbd2 	bl	8000488 <HAL_UART_RxCpltCallback>
}
 8008ce4:	e007      	b.n	8008cf6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	699a      	ldr	r2, [r3, #24]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f042 0208 	orr.w	r2, r2, #8
 8008cf4:	619a      	str	r2, [r3, #24]
}
 8008cf6:	bf00      	nop
 8008cf8:	3758      	adds	r7, #88	; 0x58
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
	...

08008d14 <__libc_init_array>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	4d0d      	ldr	r5, [pc, #52]	; (8008d4c <__libc_init_array+0x38>)
 8008d18:	4c0d      	ldr	r4, [pc, #52]	; (8008d50 <__libc_init_array+0x3c>)
 8008d1a:	1b64      	subs	r4, r4, r5
 8008d1c:	10a4      	asrs	r4, r4, #2
 8008d1e:	2600      	movs	r6, #0
 8008d20:	42a6      	cmp	r6, r4
 8008d22:	d109      	bne.n	8008d38 <__libc_init_array+0x24>
 8008d24:	4d0b      	ldr	r5, [pc, #44]	; (8008d54 <__libc_init_array+0x40>)
 8008d26:	4c0c      	ldr	r4, [pc, #48]	; (8008d58 <__libc_init_array+0x44>)
 8008d28:	f000 f820 	bl	8008d6c <_init>
 8008d2c:	1b64      	subs	r4, r4, r5
 8008d2e:	10a4      	asrs	r4, r4, #2
 8008d30:	2600      	movs	r6, #0
 8008d32:	42a6      	cmp	r6, r4
 8008d34:	d105      	bne.n	8008d42 <__libc_init_array+0x2e>
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d3c:	4798      	blx	r3
 8008d3e:	3601      	adds	r6, #1
 8008d40:	e7ee      	b.n	8008d20 <__libc_init_array+0xc>
 8008d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d46:	4798      	blx	r3
 8008d48:	3601      	adds	r6, #1
 8008d4a:	e7f2      	b.n	8008d32 <__libc_init_array+0x1e>
 8008d4c:	08008dd4 	.word	0x08008dd4
 8008d50:	08008dd4 	.word	0x08008dd4
 8008d54:	08008dd4 	.word	0x08008dd4
 8008d58:	08008dd8 	.word	0x08008dd8

08008d5c <memset>:
 8008d5c:	4402      	add	r2, r0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d100      	bne.n	8008d66 <memset+0xa>
 8008d64:	4770      	bx	lr
 8008d66:	f803 1b01 	strb.w	r1, [r3], #1
 8008d6a:	e7f9      	b.n	8008d60 <memset+0x4>

08008d6c <_init>:
 8008d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6e:	bf00      	nop
 8008d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d72:	bc08      	pop	{r3}
 8008d74:	469e      	mov	lr, r3
 8008d76:	4770      	bx	lr

08008d78 <_fini>:
 8008d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7a:	bf00      	nop
 8008d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d7e:	bc08      	pop	{r3}
 8008d80:	469e      	mov	lr, r3
 8008d82:	4770      	bx	lr
