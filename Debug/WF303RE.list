
WF303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800a45c  0800a45c  0001a45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5ec  0800a5ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a5ec  0800a5ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a5ec  0800a5ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5ec  0800a5ec  0001a5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5f0  0800a5f0  0001a5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a5f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00001c40  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001c4c  20001c4c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a5b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002810  00000000  00000000  00034a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  000372a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb8  00000000  00000000  00038348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002195b  00000000  00000000  00039300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157c6  00000000  00000000  0005ac5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2c6b  00000000  00000000  00070421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014308c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046a4  00000000  00000000  001430dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800a444 	.word	0x0800a444

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800a444 	.word	0x0800a444

080001d4 <ESP01Init>:
static ESP01STATE lastESP01STATE = ESP01WIFIDISCONNECTED;

static int aux = 0;


void ESP01Init(ESP01GpioWriteCH_EN *aESP01GpioWriteCH_EN, ESP01OnUDPData *aESP01OnUDPData){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
	doESP01GpioWriteCH_EN = aESP01GpioWriteCH_EN;
 80001de:	4a0f      	ldr	r2, [pc, #60]	; (800021c <ESP01Init+0x48>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	6013      	str	r3, [r2, #0]
	doESP01OnUDPData = aESP01OnUDPData;
 80001e4:	4a0e      	ldr	r2, [pc, #56]	; (8000220 <ESP01Init+0x4c>)
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	6013      	str	r3, [r2, #0]

	iRXr = 0;
 80001ea:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <ESP01Init+0x50>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	801a      	strh	r2, [r3, #0]
	iRXw = 0;
 80001f0:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <ESP01Init+0x54>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	801a      	strh	r2, [r3, #0]
	iTXr = 0;
 80001f6:	4b0d      	ldr	r3, [pc, #52]	; (800022c <ESP01Init+0x58>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	801a      	strh	r2, [r3, #0]
	iTXw = 0;
 80001fc:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <ESP01Init+0x5c>)
 80001fe:	2200      	movs	r2, #0
 8000200:	801a      	strh	r2, [r3, #0]

	SSID[0] = '\0';
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <ESP01Init+0x60>)
 8000204:	2200      	movs	r2, #0
 8000206:	701a      	strb	r2, [r3, #0]
	RemotePort[0] = '\0';
 8000208:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <ESP01Init+0x64>)
 800020a:	2200      	movs	r2, #0
 800020c:	701a      	strb	r2, [r3, #0]
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	200004c4 	.word	0x200004c4
 8000220:	200004c8 	.word	0x200004c8
 8000224:	2000022c 	.word	0x2000022c
 8000228:	2000022a 	.word	0x2000022a
 800022c:	2000043a 	.word	0x2000043a
 8000230:	20000438 	.word	0x20000438
 8000234:	200004d8 	.word	0x200004d8
 8000238:	20000538 	.word	0x20000538

0800023c <ESP01SetWIFI>:

uint8_t ESP01SetWIFI(char *aSSID, char *aPASSWORD){
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
	strncpy(SSID, aSSID, 48);
 8000246:	2230      	movs	r2, #48	; 0x30
 8000248:	6879      	ldr	r1, [r7, #4]
 800024a:	4809      	ldr	r0, [pc, #36]	; (8000270 <ESP01SetWIFI+0x34>)
 800024c:	f00a f8e6 	bl	800a41c <strncpy>
	strncpy(PASSWORD, aPASSWORD, 32);
 8000250:	2220      	movs	r2, #32
 8000252:	6839      	ldr	r1, [r7, #0]
 8000254:	4807      	ldr	r0, [pc, #28]	; (8000274 <ESP01SetWIFI+0x38>)
 8000256:	f00a f8e1 	bl	800a41c <strncpy>

	ESP01TASKSTATE = STESP01ATAT;
 800025a:	4b07      	ldr	r3, [pc, #28]	; (8000278 <ESP01SetWIFI+0x3c>)
 800025c:	2201      	movs	r2, #1
 800025e:	701a      	strb	r2, [r3, #0]
	lastESP01STATE = ESP01WIFICONNECTING;
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <ESP01SetWIFI+0x40>)
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]

	return 1;
 8000266:	2301      	movs	r3, #1
}
 8000268:	4618      	mov	r0, r3
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	200004d8 	.word	0x200004d8
 8000274:	20000508 	.word	0x20000508
 8000278:	20000546 	.word	0x20000546
 800027c:	20000547 	.word	0x20000547

08000280 <ESP01ConnectUDP>:

uint8_t ESP01ConnectUDP(char *aRemoteIP, uint16_t aRemotePort, uint16_t aLocalPort){
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	807b      	strh	r3, [r7, #2]
 800028c:	4613      	mov	r3, r2
 800028e:	803b      	strh	r3, [r7, #0]
	char str[5];

	if(lastESP01STATE != ESP01WIFICONNECTED)
 8000290:	4b87      	ldr	r3, [pc, #540]	; (80004b0 <ESP01ConnectUDP+0x230>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b02      	cmp	r3, #2
 8000296:	d001      	beq.n	800029c <ESP01ConnectUDP+0x1c>
		return 0;
 8000298:	2300      	movs	r3, #0
 800029a:	e104      	b.n	80004a6 <ESP01ConnectUDP+0x226>

	strncpy(RemoteIP, aRemoteIP, 16);
 800029c:	2210      	movs	r2, #16
 800029e:	6879      	ldr	r1, [r7, #4]
 80002a0:	4884      	ldr	r0, [pc, #528]	; (80004b4 <ESP01ConnectUDP+0x234>)
 80002a2:	f00a f8bb 	bl	800a41c <strncpy>
    RemoteIP[15] = '\0';
 80002a6:	4b83      	ldr	r3, [pc, #524]	; (80004b4 <ESP01ConnectUDP+0x234>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	73da      	strb	r2, [r3, #15]

	str[4] = aRemotePort%10 + 0x30;
 80002ac:	887a      	ldrh	r2, [r7, #2]
 80002ae:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <ESP01ConnectUDP+0x238>)
 80002b0:	fba3 1302 	umull	r1, r3, r3, r2
 80002b4:	08d9      	lsrs	r1, r3, #3
 80002b6:	460b      	mov	r3, r1
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	440b      	add	r3, r1
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	1ad3      	subs	r3, r2, r3
 80002c0:	b29b      	uxth	r3, r3
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	3330      	adds	r3, #48	; 0x30
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	733b      	strb	r3, [r7, #12]
	aRemotePort /= 10;
 80002ca:	887b      	ldrh	r3, [r7, #2]
 80002cc:	4a7a      	ldr	r2, [pc, #488]	; (80004b8 <ESP01ConnectUDP+0x238>)
 80002ce:	fba2 2303 	umull	r2, r3, r2, r3
 80002d2:	08db      	lsrs	r3, r3, #3
 80002d4:	807b      	strh	r3, [r7, #2]
	str[3] = aRemotePort%10 + 0x30;
 80002d6:	887a      	ldrh	r2, [r7, #2]
 80002d8:	4b77      	ldr	r3, [pc, #476]	; (80004b8 <ESP01ConnectUDP+0x238>)
 80002da:	fba3 1302 	umull	r1, r3, r3, r2
 80002de:	08d9      	lsrs	r1, r3, #3
 80002e0:	460b      	mov	r3, r1
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	440b      	add	r3, r1
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	1ad3      	subs	r3, r2, r3
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	3330      	adds	r3, #48	; 0x30
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	72fb      	strb	r3, [r7, #11]
	aRemotePort /= 10;
 80002f4:	887b      	ldrh	r3, [r7, #2]
 80002f6:	4a70      	ldr	r2, [pc, #448]	; (80004b8 <ESP01ConnectUDP+0x238>)
 80002f8:	fba2 2303 	umull	r2, r3, r2, r3
 80002fc:	08db      	lsrs	r3, r3, #3
 80002fe:	807b      	strh	r3, [r7, #2]
	str[2] = aRemotePort%10 + 0x30;
 8000300:	887a      	ldrh	r2, [r7, #2]
 8000302:	4b6d      	ldr	r3, [pc, #436]	; (80004b8 <ESP01ConnectUDP+0x238>)
 8000304:	fba3 1302 	umull	r1, r3, r3, r2
 8000308:	08d9      	lsrs	r1, r3, #3
 800030a:	460b      	mov	r3, r1
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	440b      	add	r3, r1
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	1ad3      	subs	r3, r2, r3
 8000314:	b29b      	uxth	r3, r3
 8000316:	b2db      	uxtb	r3, r3
 8000318:	3330      	adds	r3, #48	; 0x30
 800031a:	b2db      	uxtb	r3, r3
 800031c:	72bb      	strb	r3, [r7, #10]
	aRemotePort /= 10;
 800031e:	887b      	ldrh	r3, [r7, #2]
 8000320:	4a65      	ldr	r2, [pc, #404]	; (80004b8 <ESP01ConnectUDP+0x238>)
 8000322:	fba2 2303 	umull	r2, r3, r2, r3
 8000326:	08db      	lsrs	r3, r3, #3
 8000328:	807b      	strh	r3, [r7, #2]
	str[1] = aRemotePort%10 + 0x30;
 800032a:	887a      	ldrh	r2, [r7, #2]
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <ESP01ConnectUDP+0x238>)
 800032e:	fba3 1302 	umull	r1, r3, r3, r2
 8000332:	08d9      	lsrs	r1, r3, #3
 8000334:	460b      	mov	r3, r1
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	440b      	add	r3, r1
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	1ad3      	subs	r3, r2, r3
 800033e:	b29b      	uxth	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	3330      	adds	r3, #48	; 0x30
 8000344:	b2db      	uxtb	r3, r3
 8000346:	727b      	strb	r3, [r7, #9]
	aRemotePort /= 10;
 8000348:	887b      	ldrh	r3, [r7, #2]
 800034a:	4a5b      	ldr	r2, [pc, #364]	; (80004b8 <ESP01ConnectUDP+0x238>)
 800034c:	fba2 2303 	umull	r2, r3, r2, r3
 8000350:	08db      	lsrs	r3, r3, #3
 8000352:	807b      	strh	r3, [r7, #2]
	str[0] = aRemotePort + 0x30;
 8000354:	887b      	ldrh	r3, [r7, #2]
 8000356:	b2db      	uxtb	r3, r3
 8000358:	3330      	adds	r3, #48	; 0x30
 800035a:	b2db      	uxtb	r3, r3
 800035c:	723b      	strb	r3, [r7, #8]

	int i = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]
	int j = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
	while(str[i] == '0')
 8000366:	e002      	b.n	800036e <ESP01ConnectUDP+0xee>
		i++;
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	3301      	adds	r3, #1
 800036c:	617b      	str	r3, [r7, #20]
	while(str[i] == '0')
 800036e:	f107 0208 	add.w	r2, r7, #8
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	4413      	add	r3, r2
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b30      	cmp	r3, #48	; 0x30
 800037a:	d0f5      	beq.n	8000368 <ESP01ConnectUDP+0xe8>
	while(i < 5)
 800037c:	e00b      	b.n	8000396 <ESP01ConnectUDP+0x116>
		RemotePort[j++] = str[i++];
 800037e:	697a      	ldr	r2, [r7, #20]
 8000380:	1c53      	adds	r3, r2, #1
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	1c59      	adds	r1, r3, #1
 8000388:	6139      	str	r1, [r7, #16]
 800038a:	3218      	adds	r2, #24
 800038c:	443a      	add	r2, r7
 800038e:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8000392:	4a4a      	ldr	r2, [pc, #296]	; (80004bc <ESP01ConnectUDP+0x23c>)
 8000394:	54d1      	strb	r1, [r2, r3]
	while(i < 5)
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	2b04      	cmp	r3, #4
 800039a:	ddf0      	ble.n	800037e <ESP01ConnectUDP+0xfe>
	RemotePort[j] = '\0';
 800039c:	4a47      	ldr	r2, [pc, #284]	; (80004bc <ESP01ConnectUDP+0x23c>)
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	4413      	add	r3, r2
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]

	str[4] = aLocalPort%10 + 0x30;
 80003a6:	883a      	ldrh	r2, [r7, #0]
 80003a8:	4b43      	ldr	r3, [pc, #268]	; (80004b8 <ESP01ConnectUDP+0x238>)
 80003aa:	fba3 1302 	umull	r1, r3, r3, r2
 80003ae:	08d9      	lsrs	r1, r3, #3
 80003b0:	460b      	mov	r3, r1
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	440b      	add	r3, r1
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	1ad3      	subs	r3, r2, r3
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	3330      	adds	r3, #48	; 0x30
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	733b      	strb	r3, [r7, #12]
	aLocalPort /= 10;
 80003c4:	883b      	ldrh	r3, [r7, #0]
 80003c6:	4a3c      	ldr	r2, [pc, #240]	; (80004b8 <ESP01ConnectUDP+0x238>)
 80003c8:	fba2 2303 	umull	r2, r3, r2, r3
 80003cc:	08db      	lsrs	r3, r3, #3
 80003ce:	803b      	strh	r3, [r7, #0]
	str[3] = aLocalPort%10 + 0x30;
 80003d0:	883a      	ldrh	r2, [r7, #0]
 80003d2:	4b39      	ldr	r3, [pc, #228]	; (80004b8 <ESP01ConnectUDP+0x238>)
 80003d4:	fba3 1302 	umull	r1, r3, r3, r2
 80003d8:	08d9      	lsrs	r1, r3, #3
 80003da:	460b      	mov	r3, r1
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	440b      	add	r3, r1
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	1ad3      	subs	r3, r2, r3
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	3330      	adds	r3, #48	; 0x30
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	72fb      	strb	r3, [r7, #11]
	aLocalPort /= 10;
 80003ee:	883b      	ldrh	r3, [r7, #0]
 80003f0:	4a31      	ldr	r2, [pc, #196]	; (80004b8 <ESP01ConnectUDP+0x238>)
 80003f2:	fba2 2303 	umull	r2, r3, r2, r3
 80003f6:	08db      	lsrs	r3, r3, #3
 80003f8:	803b      	strh	r3, [r7, #0]
	str[2] = aLocalPort%10 + 0x30;
 80003fa:	883a      	ldrh	r2, [r7, #0]
 80003fc:	4b2e      	ldr	r3, [pc, #184]	; (80004b8 <ESP01ConnectUDP+0x238>)
 80003fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000402:	08d9      	lsrs	r1, r3, #3
 8000404:	460b      	mov	r3, r1
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	440b      	add	r3, r1
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	b29b      	uxth	r3, r3
 8000410:	b2db      	uxtb	r3, r3
 8000412:	3330      	adds	r3, #48	; 0x30
 8000414:	b2db      	uxtb	r3, r3
 8000416:	72bb      	strb	r3, [r7, #10]
	aLocalPort /= 10;
 8000418:	883b      	ldrh	r3, [r7, #0]
 800041a:	4a27      	ldr	r2, [pc, #156]	; (80004b8 <ESP01ConnectUDP+0x238>)
 800041c:	fba2 2303 	umull	r2, r3, r2, r3
 8000420:	08db      	lsrs	r3, r3, #3
 8000422:	803b      	strh	r3, [r7, #0]
	str[1] = aLocalPort%10 + 0x30;
 8000424:	883a      	ldrh	r2, [r7, #0]
 8000426:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <ESP01ConnectUDP+0x238>)
 8000428:	fba3 1302 	umull	r1, r3, r3, r2
 800042c:	08d9      	lsrs	r1, r3, #3
 800042e:	460b      	mov	r3, r1
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	440b      	add	r3, r1
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	b29b      	uxth	r3, r3
 800043a:	b2db      	uxtb	r3, r3
 800043c:	3330      	adds	r3, #48	; 0x30
 800043e:	b2db      	uxtb	r3, r3
 8000440:	727b      	strb	r3, [r7, #9]
	aLocalPort /= 10;
 8000442:	883b      	ldrh	r3, [r7, #0]
 8000444:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <ESP01ConnectUDP+0x238>)
 8000446:	fba2 2303 	umull	r2, r3, r2, r3
 800044a:	08db      	lsrs	r3, r3, #3
 800044c:	803b      	strh	r3, [r7, #0]
	str[0] = aLocalPort + 0x30;
 800044e:	883b      	ldrh	r3, [r7, #0]
 8000450:	b2db      	uxtb	r3, r3
 8000452:	3330      	adds	r3, #48	; 0x30
 8000454:	b2db      	uxtb	r3, r3
 8000456:	723b      	strb	r3, [r7, #8]

	while(str[i] == '0')
 8000458:	e002      	b.n	8000460 <ESP01ConnectUDP+0x1e0>
		i++;
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	3301      	adds	r3, #1
 800045e:	617b      	str	r3, [r7, #20]
	while(str[i] == '0')
 8000460:	f107 0208 	add.w	r2, r7, #8
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	4413      	add	r3, r2
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b30      	cmp	r3, #48	; 0x30
 800046c:	d0f5      	beq.n	800045a <ESP01ConnectUDP+0x1da>
	while(i < 5)
 800046e:	e00b      	b.n	8000488 <ESP01ConnectUDP+0x208>
		LocalPort[j++] = str[i++];
 8000470:	697a      	ldr	r2, [r7, #20]
 8000472:	1c53      	adds	r3, r2, #1
 8000474:	617b      	str	r3, [r7, #20]
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	1c59      	adds	r1, r3, #1
 800047a:	6139      	str	r1, [r7, #16]
 800047c:	3218      	adds	r2, #24
 800047e:	443a      	add	r2, r7
 8000480:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8000484:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <ESP01ConnectUDP+0x240>)
 8000486:	54d1      	strb	r1, [r2, r3]
	while(i < 5)
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	2b04      	cmp	r3, #4
 800048c:	ddf0      	ble.n	8000470 <ESP01ConnectUDP+0x1f0>
	LocalPort[j] = '\0';
 800048e:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <ESP01ConnectUDP+0x240>)
 8000490:	693b      	ldr	r3, [r7, #16]
 8000492:	4413      	add	r3, r2
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]


    ESP01TASKSTATE = STESP01ATCLOSE1;
 8000498:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <ESP01ConnectUDP+0x244>)
 800049a:	2206      	movs	r2, #6
 800049c:	701a      	strb	r2, [r3, #0]
    lastESP01STATE = ESP01UDPBUSY;
 800049e:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <ESP01ConnectUDP+0x230>)
 80004a0:	2204      	movs	r2, #4
 80004a2:	701a      	strb	r2, [r3, #0]

    return 1;
 80004a4:	2301      	movs	r3, #1
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3718      	adds	r7, #24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000547 	.word	0x20000547
 80004b4:	20000528 	.word	0x20000528
 80004b8:	cccccccd 	.word	0xcccccccd
 80004bc:	20000538 	.word	0x20000538
 80004c0:	20000540 	.word	0x20000540
 80004c4:	20000546 	.word	0x20000546

080004c8 <ESP01SetRxByte>:

void ESP01SetRxByte(uint8_t value){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	bufRX[iRXw++] = value;
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <ESP01SetRxByte+0x3c>)
 80004d4:	881b      	ldrh	r3, [r3, #0]
 80004d6:	1c5a      	adds	r2, r3, #1
 80004d8:	b291      	uxth	r1, r2
 80004da:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <ESP01SetRxByte+0x3c>)
 80004dc:	8011      	strh	r1, [r2, #0]
 80004de:	4619      	mov	r1, r3
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <ESP01SetRxByte+0x40>)
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	5453      	strb	r3, [r2, r1]
	if(iRXw == SIZEBUFRX)
 80004e6:	4b07      	ldr	r3, [pc, #28]	; (8000504 <ESP01SetRxByte+0x3c>)
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004ee:	d102      	bne.n	80004f6 <ESP01SetRxByte+0x2e>
		iRXw = 0;
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <ESP01SetRxByte+0x3c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	801a      	strh	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	2000022a 	.word	0x2000022a
 8000508:	20000028 	.word	0x20000028

0800050c <ESP01GetTxByte>:


uint8_t ESP01GetTxByte(uint8_t *value){
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	if(WAITINGSYMBOL)
 8000514:	4b18      	ldr	r3, [pc, #96]	; (8000578 <ESP01GetTxByte+0x6c>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <ESP01GetTxByte+0x14>
		return 0;
 800051c:	2300      	movs	r3, #0
 800051e:	e024      	b.n	800056a <ESP01GetTxByte+0x5e>

	if(iTXr == iTXw)
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <ESP01GetTxByte+0x70>)
 8000522:	881a      	ldrh	r2, [r3, #0]
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <ESP01GetTxByte+0x74>)
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	429a      	cmp	r2, r3
 800052a:	d101      	bne.n	8000530 <ESP01GetTxByte+0x24>
		return 0;
 800052c:	2300      	movs	r3, #0
 800052e:	e01c      	b.n	800056a <ESP01GetTxByte+0x5e>

	*value = bufTX[iTXr++];
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <ESP01GetTxByte+0x70>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	1c5a      	adds	r2, r3, #1
 8000536:	b291      	uxth	r1, r2
 8000538:	4a10      	ldr	r2, [pc, #64]	; (800057c <ESP01GetTxByte+0x70>)
 800053a:	8011      	strh	r1, [r2, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <ESP01GetTxByte+0x78>)
 8000540:	5c9a      	ldrb	r2, [r3, r2]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	701a      	strb	r2, [r3, #0]
	if(iTXr == SIZEBUFTX)
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <ESP01GetTxByte+0x70>)
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800054e:	d102      	bne.n	8000556 <ESP01GetTxByte+0x4a>
		iTXr = 0;
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <ESP01GetTxByte+0x70>)
 8000552:	2200      	movs	r2, #0
 8000554:	801a      	strh	r2, [r3, #0]

	if(iTXr == iTXw)
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <ESP01GetTxByte+0x70>)
 8000558:	881a      	ldrh	r2, [r3, #0]
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <ESP01GetTxByte+0x74>)
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	429a      	cmp	r2, r3
 8000560:	d102      	bne.n	8000568 <ESP01GetTxByte+0x5c>
		lastESP01STATE = ESP01UDPREADY;
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <ESP01GetTxByte+0x7c>)
 8000564:	2203      	movs	r2, #3
 8000566:	701a      	strb	r2, [r3, #0]

	return 1;
 8000568:	2301      	movs	r3, #1
}
 800056a:	4618      	mov	r0, r3
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	200004c2 	.word	0x200004c2
 800057c:	2000043a 	.word	0x2000043a
 8000580:	20000438 	.word	0x20000438
 8000584:	20000238 	.word	0x20000238
 8000588:	20000547 	.word	0x20000547

0800058c <ESP01SendUDPData>:

uint8_t ESP01SendUDPData(uint8_t *buf, uint16_t dataLength, uint16_t bufSize){
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	807b      	strh	r3, [r7, #2]
 8000598:	4613      	mov	r3, r2
 800059a:	803b      	strh	r3, [r7, #0]
	char str[3];

	if(dataLength > (SIZEBUFTX - 16))
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 80005a2:	d901      	bls.n	80005a8 <ESP01SendUDPData+0x1c>
		return 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	e0a0      	b.n	80006ea <ESP01SendUDPData+0x15e>

	if(lastESP01STATE != ESP01UDPREADY)
 80005a8:	4b52      	ldr	r3, [pc, #328]	; (80006f4 <ESP01SendUDPData+0x168>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d001      	beq.n	80005b4 <ESP01SendUDPData+0x28>
		return 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	e09a      	b.n	80006ea <ESP01SendUDPData+0x15e>

	ESP01PutAT(_ATCIPSEND);
 80005b4:	4850      	ldr	r0, [pc, #320]	; (80006f8 <ESP01SendUDPData+0x16c>)
 80005b6:	f000 f975 	bl	80008a4 <ESP01PutAT>

	aux = dataLength;
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	4a4f      	ldr	r2, [pc, #316]	; (80006fc <ESP01SendUDPData+0x170>)
 80005be:	6013      	str	r3, [r2, #0]
	str[2] = aux%10 + 0x30;
 80005c0:	4b4e      	ldr	r3, [pc, #312]	; (80006fc <ESP01SendUDPData+0x170>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b4e      	ldr	r3, [pc, #312]	; (8000700 <ESP01SendUDPData+0x174>)
 80005c6:	fb83 1302 	smull	r1, r3, r3, r2
 80005ca:	1099      	asrs	r1, r3, #2
 80005cc:	17d3      	asrs	r3, r2, #31
 80005ce:	1ac9      	subs	r1, r1, r3
 80005d0:	460b      	mov	r3, r1
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	440b      	add	r3, r1
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	1ad1      	subs	r1, r2, r3
 80005da:	b2cb      	uxtb	r3, r1
 80005dc:	3330      	adds	r3, #48	; 0x30
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	72bb      	strb	r3, [r7, #10]
	aux /= 10;
 80005e2:	4b46      	ldr	r3, [pc, #280]	; (80006fc <ESP01SendUDPData+0x170>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a46      	ldr	r2, [pc, #280]	; (8000700 <ESP01SendUDPData+0x174>)
 80005e8:	fb82 1203 	smull	r1, r2, r2, r3
 80005ec:	1092      	asrs	r2, r2, #2
 80005ee:	17db      	asrs	r3, r3, #31
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	4a42      	ldr	r2, [pc, #264]	; (80006fc <ESP01SendUDPData+0x170>)
 80005f4:	6013      	str	r3, [r2, #0]
	str[1] = aux%10 + 0x30;
 80005f6:	4b41      	ldr	r3, [pc, #260]	; (80006fc <ESP01SendUDPData+0x170>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4b41      	ldr	r3, [pc, #260]	; (8000700 <ESP01SendUDPData+0x174>)
 80005fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000600:	1099      	asrs	r1, r3, #2
 8000602:	17d3      	asrs	r3, r2, #31
 8000604:	1ac9      	subs	r1, r1, r3
 8000606:	460b      	mov	r3, r1
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	440b      	add	r3, r1
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	1ad1      	subs	r1, r2, r3
 8000610:	b2cb      	uxtb	r3, r1
 8000612:	3330      	adds	r3, #48	; 0x30
 8000614:	b2db      	uxtb	r3, r3
 8000616:	727b      	strb	r3, [r7, #9]
	aux /= 10;
 8000618:	4b38      	ldr	r3, [pc, #224]	; (80006fc <ESP01SendUDPData+0x170>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a38      	ldr	r2, [pc, #224]	; (8000700 <ESP01SendUDPData+0x174>)
 800061e:	fb82 1203 	smull	r1, r2, r2, r3
 8000622:	1092      	asrs	r2, r2, #2
 8000624:	17db      	asrs	r3, r3, #31
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	4a34      	ldr	r2, [pc, #208]	; (80006fc <ESP01SendUDPData+0x170>)
 800062a:	6013      	str	r3, [r2, #0]
	str[0] = aux%10 + 0x30;
 800062c:	4b33      	ldr	r3, [pc, #204]	; (80006fc <ESP01SendUDPData+0x170>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <ESP01SendUDPData+0x174>)
 8000632:	fb83 1302 	smull	r1, r3, r3, r2
 8000636:	1099      	asrs	r1, r3, #2
 8000638:	17d3      	asrs	r3, r2, #31
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	460b      	mov	r3, r1
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	440b      	add	r3, r1
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	1ad1      	subs	r1, r2, r3
 8000646:	b2cb      	uxtb	r3, r1
 8000648:	3330      	adds	r3, #48	; 0x30
 800064a:	b2db      	uxtb	r3, r3
 800064c:	723b      	strb	r3, [r7, #8]

	ESP01PutByteOnTx(str[0]);
 800064e:	7a3b      	ldrb	r3, [r7, #8]
 8000650:	4618      	mov	r0, r3
 8000652:	f000 f957 	bl	8000904 <ESP01PutByteOnTx>
	ESP01PutByteOnTx(str[1]);
 8000656:	7a7b      	ldrb	r3, [r7, #9]
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f953 	bl	8000904 <ESP01PutByteOnTx>
	ESP01PutByteOnTx(str[2]);
 800065e:	7abb      	ldrb	r3, [r7, #10]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f94f 	bl	8000904 <ESP01PutByteOnTx>
	ESP01PutByteOnTx('\r');
 8000666:	200d      	movs	r0, #13
 8000668:	f000 f94c 	bl	8000904 <ESP01PutByteOnTx>
	ESP01PutByteOnTx('\n');
 800066c:	200a      	movs	r0, #10
 800066e:	f000 f949 	bl	8000904 <ESP01PutByteOnTx>
	ESP01PutByteOnTx('>');
 8000672:	203e      	movs	r0, #62	; 0x3e
 8000674:	f000 f946 	bl	8000904 <ESP01PutByteOnTx>

	for(uint16_t i=0, j=0; i<dataLength; i++){
 8000678:	2300      	movs	r3, #0
 800067a:	81fb      	strh	r3, [r7, #14]
 800067c:	2300      	movs	r3, #0
 800067e:	81bb      	strh	r3, [r7, #12]
 8000680:	e025      	b.n	80006ce <ESP01SendUDPData+0x142>
		bufTX[iTXw++] = buf[j++];
 8000682:	89bb      	ldrh	r3, [r7, #12]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	81ba      	strh	r2, [r7, #12]
 8000688:	461a      	mov	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	441a      	add	r2, r3
 800068e:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <ESP01SendUDPData+0x178>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	1c59      	adds	r1, r3, #1
 8000694:	b288      	uxth	r0, r1
 8000696:	491b      	ldr	r1, [pc, #108]	; (8000704 <ESP01SendUDPData+0x178>)
 8000698:	8008      	strh	r0, [r1, #0]
 800069a:	4619      	mov	r1, r3
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <ESP01SendUDPData+0x17c>)
 80006a0:	545a      	strb	r2, [r3, r1]
		if(iTXw == SIZEBUFTX)
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <ESP01SendUDPData+0x178>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006aa:	d102      	bne.n	80006b2 <ESP01SendUDPData+0x126>
			iTXw = 0;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <ESP01SendUDPData+0x178>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	801a      	strh	r2, [r3, #0]
		if((buf+j) == (buf+bufSize)){
 80006b2:	89ba      	ldrh	r2, [r7, #12]
 80006b4:	883b      	ldrh	r3, [r7, #0]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d106      	bne.n	80006c8 <ESP01SendUDPData+0x13c>
			buf = buf-bufSize;
 80006ba:	883b      	ldrh	r3, [r7, #0]
 80006bc:	425b      	negs	r3, r3
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	607b      	str	r3, [r7, #4]
			j = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	81bb      	strh	r3, [r7, #12]
	for(uint16_t i=0, j=0; i<dataLength; i++){
 80006c8:	89fb      	ldrh	r3, [r7, #14]
 80006ca:	3301      	adds	r3, #1
 80006cc:	81fb      	strh	r3, [r7, #14]
 80006ce:	89fa      	ldrh	r2, [r7, #14]
 80006d0:	887b      	ldrh	r3, [r7, #2]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d3d5      	bcc.n	8000682 <ESP01SendUDPData+0xf6>
		}
	}

	NEEDWAITSYMBOL = 1;
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <ESP01SendUDPData+0x180>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
	WAITINGSYMBOL = 0;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <ESP01SendUDPData+0x184>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]

	lastESP01STATE = ESP01UDPBUSY;
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <ESP01SendUDPData+0x168>)
 80006e4:	2204      	movs	r2, #4
 80006e6:	701a      	strb	r2, [r3, #0]

	return 1;
 80006e8:	2301      	movs	r3, #1
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000547 	.word	0x20000547
 80006f8:	0800a53c 	.word	0x0800a53c
 80006fc:	20000548 	.word	0x20000548
 8000700:	66666667 	.word	0x66666667
 8000704:	20000438 	.word	0x20000438
 8000708:	20000238 	.word	0x20000238
 800070c:	200004c1 	.word	0x200004c1
 8000710:	200004c2 	.word	0x200004c2

08000714 <ESP01Task>:


void ESP01Task(){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

	if(SSID[0]=='\0' && ESP01TASKSTATE!=STESP01IDLE)
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <ESP01Task+0x34>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d106      	bne.n	800072e <ESP01Task+0x1a>
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <ESP01Task+0x38>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d002      	beq.n	800072e <ESP01Task+0x1a>
		ESP01TASKSTATE = STESP01IDLE;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <ESP01Task+0x38>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]

	if(iRXw != iRXr)
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <ESP01Task+0x3c>)
 8000730:	881a      	ldrh	r2, [r3, #0]
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <ESP01Task+0x40>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	429a      	cmp	r2, r3
 8000738:	d001      	beq.n	800073e <ESP01Task+0x2a>
		ESP01DecodeAT();
 800073a:	f000 fac5 	bl	8000cc8 <ESP01DecodeAT>

	ESP01DoWifi();
 800073e:	f000 f903 	bl	8000948 <ESP01DoWifi>

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200004d8 	.word	0x200004d8
 800074c:	20000546 	.word	0x20000546
 8000750:	2000022a 	.word	0x2000022a
 8000754:	2000022c 	.word	0x2000022c

08000758 <ESP01TimeOut10ms>:

void ESP01TimeOut10ms(){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	if(timeOutResponse){
 800075c:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <ESP01TimeOut10ms+0xbc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d038      	beq.n	80007d6 <ESP01TimeOut10ms+0x7e>
		timeOutResponse--;
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <ESP01TimeOut10ms+0xbc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3b01      	subs	r3, #1
 800076a:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <ESP01TimeOut10ms+0xbc>)
 800076c:	6013      	str	r3, [r2, #0]
		if(timeOutResponse == 0){
 800076e:	4b29      	ldr	r3, [pc, #164]	; (8000814 <ESP01TimeOut10ms+0xbc>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d12f      	bne.n	80007d6 <ESP01TimeOut10ms+0x7e>
			switch(ESP01TASKSTATE){
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <ESP01TimeOut10ms+0xc0>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b0a      	cmp	r3, #10
 800077c:	d82c      	bhi.n	80007d8 <ESP01TimeOut10ms+0x80>
 800077e:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <ESP01TimeOut10ms+0x2c>)
 8000780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000784:	080007d9 	.word	0x080007d9
 8000788:	080007d9 	.word	0x080007d9
 800078c:	080007d9 	.word	0x080007d9
 8000790:	080007d9 	.word	0x080007d9
 8000794:	080007d9 	.word	0x080007d9
 8000798:	080007b1 	.word	0x080007b1
 800079c:	080007cf 	.word	0x080007cf
 80007a0:	080007d9 	.word	0x080007d9
 80007a4:	080007d9 	.word	0x080007d9
 80007a8:	080007b9 	.word	0x080007b9
 80007ac:	080007d9 	.word	0x080007d9
			case STESP01ATCLOSE:
				ESP01TASKSTATE = STESP01ATCWJAP;
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <ESP01TimeOut10ms+0xc0>)
 80007b2:	2203      	movs	r2, #3
 80007b4:	701a      	strb	r2, [r3, #0]
				break;
 80007b6:	e00f      	b.n	80007d8 <ESP01TimeOut10ms+0x80>
			case STESP01HARDRESET:
				doESP01GpioWriteCH_EN(1);
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <ESP01TimeOut10ms+0xc4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2001      	movs	r0, #1
 80007be:	4798      	blx	r3
				ESP01TASKSTATE = STESP01ATAT;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <ESP01TimeOut10ms+0xc0>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
				timeOutResponse = 100;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <ESP01TimeOut10ms+0xbc>)
 80007c8:	2264      	movs	r2, #100	; 0x64
 80007ca:	601a      	str	r2, [r3, #0]
				break;
 80007cc:	e004      	b.n	80007d8 <ESP01TimeOut10ms+0x80>
			case STESP01ATCLOSE1:
				ESP01TASKSTATE = STESP01ATCIPSTART;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <ESP01TimeOut10ms+0xc0>)
 80007d0:	2207      	movs	r2, #7
 80007d2:	701a      	strb	r2, [r3, #0]
				break;
 80007d4:	e000      	b.n	80007d8 <ESP01TimeOut10ms+0x80>
			case STESP01ATCWMODE:
			case STESP01IDLE:
			case STESP01ATCIFSR:
				break;
			}
		}
 80007d6:	bf00      	nop
	}

	if(timeOutSymbol){
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <ESP01TimeOut10ms+0xc8>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d005      	beq.n	80007ec <ESP01TimeOut10ms+0x94>
		timeOutSymbol--;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <ESP01TimeOut10ms+0xc8>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <ESP01TimeOut10ms+0xc8>)
 80007ea:	701a      	strb	r2, [r3, #0]
	}

	if(timeOut){
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <ESP01TimeOut10ms+0xcc>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d00c      	beq.n	800080e <ESP01TimeOut10ms+0xb6>
		timeOut--;
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <ESP01TimeOut10ms+0xcc>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <ESP01TimeOut10ms+0xcc>)
 80007fe:	701a      	strb	r2, [r3, #0]
		if(!timeOut)
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <ESP01TimeOut10ms+0xcc>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <ESP01TimeOut10ms+0xb6>
			header = 0;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <ESP01TimeOut10ms+0xd0>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
	}
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200004bc 	.word	0x200004bc
 8000818:	20000546 	.word	0x20000546
 800081c:	200004c4 	.word	0x200004c4
 8000820:	200004c3 	.word	0x200004c3
 8000824:	20000229 	.word	0x20000229
 8000828:	20000228 	.word	0x20000228

0800082c <ESP01AttachOnWIFIConnected>:

void ESP01AttachOnWIFIConnected(ESP01OnWIFIConnected *aESP01OnWIFIConnected){
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	doESP01WIFIConnected = aESP01OnWIFIConnected;
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <ESP01AttachOnWIFIConnected+0x1c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6013      	str	r3, [r2, #0]
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	200004cc 	.word	0x200004cc

0800084c <ESP01AttachOnWIFIDisconnected>:

void ESP01AttachOnWIFIDisconnected(ESP01OnWIFIDisconnected *aESP01OnWIFIDisconnected){
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	doESP01WIFIDisconnected = aESP01OnWIFIDisconnected;
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <ESP01AttachOnWIFIDisconnected+0x1c>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6013      	str	r3, [r2, #0]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	200004d0 	.word	0x200004d0

0800086c <ESP01AttachOnUDPReady>:

void ESP01AttachOnUDPReady(ESP01OnUDPReady *aESP01UDPReady){
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	doESP01UDPReady = aESP01UDPReady;
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <ESP01AttachOnUDPReady+0x1c>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6013      	str	r3, [r2, #0]
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	200004d4 	.word	0x200004d4

0800088c <ESP01GetLastSTATE>:

ESP01STATE ESP01GetLastSTATE(){
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
	return lastESP01STATE;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <ESP01GetLastSTATE+0x14>)
 8000892:	781b      	ldrb	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000547 	.word	0x20000547

080008a4 <ESP01PutAT>:


static void ESP01PutAT(const char *atCMD){
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	int i=0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]

	while(atCMD[i]){
 80008b0:	e017      	b.n	80008e2 <ESP01PutAT+0x3e>
		bufTX[iTXw++] = atCMD[i++];
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	60fa      	str	r2, [r7, #12]
 80008b8:	461a      	mov	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	441a      	add	r2, r3
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <ESP01PutAT+0x58>)
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	1c59      	adds	r1, r3, #1
 80008c4:	b288      	uxth	r0, r1
 80008c6:	490d      	ldr	r1, [pc, #52]	; (80008fc <ESP01PutAT+0x58>)
 80008c8:	8008      	strh	r0, [r1, #0]
 80008ca:	4619      	mov	r1, r3
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <ESP01PutAT+0x5c>)
 80008d0:	545a      	strb	r2, [r3, r1]
		if(iTXw == SIZEBUFTX)
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <ESP01PutAT+0x58>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008da:	d102      	bne.n	80008e2 <ESP01PutAT+0x3e>
			iTXw = 0;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <ESP01PutAT+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	801a      	strh	r2, [r3, #0]
	while(atCMD[i]){
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1e1      	bne.n	80008b2 <ESP01PutAT+0xe>
	}
}
 80008ee:	bf00      	nop
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	20000438 	.word	0x20000438
 8000900:	20000238 	.word	0x20000238

08000904 <ESP01PutByteOnTx>:

static void ESP01PutByteOnTx(uint8_t value){
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	bufTX[iTXw++] = value;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <ESP01PutByteOnTx+0x3c>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	b291      	uxth	r1, r2
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <ESP01PutByteOnTx+0x3c>)
 8000918:	8011      	strh	r1, [r2, #0]
 800091a:	4619      	mov	r1, r3
 800091c:	4a09      	ldr	r2, [pc, #36]	; (8000944 <ESP01PutByteOnTx+0x40>)
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	5453      	strb	r3, [r2, r1]
	if(iTXw == SIZEBUFTX)
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <ESP01PutByteOnTx+0x3c>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800092a:	d102      	bne.n	8000932 <ESP01PutByteOnTx+0x2e>
		iTXw = 0;
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <ESP01PutByteOnTx+0x3c>)
 800092e:	2200      	movs	r2, #0
 8000930:	801a      	strh	r2, [r3, #0]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000438 	.word	0x20000438
 8000944:	20000238 	.word	0x20000238

08000948 <ESP01DoWifi>:

static void ESP01DoWifi(){
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	if(timeOutResponse || ESP01TASKSTATE==STESP01IDLE)
 800094c:	4b98      	ldr	r3, [pc, #608]	; (8000bb0 <ESP01DoWifi+0x268>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	f040 817b 	bne.w	8000c4c <ESP01DoWifi+0x304>
 8000956:	4b97      	ldr	r3, [pc, #604]	; (8000bb4 <ESP01DoWifi+0x26c>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	f000 8176 	beq.w	8000c4c <ESP01DoWifi+0x304>
		return;

	switch(ESP01TASKSTATE){
 8000960:	4b94      	ldr	r3, [pc, #592]	; (8000bb4 <ESP01DoWifi+0x26c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	3b01      	subs	r3, #1
 8000966:	2b09      	cmp	r3, #9
 8000968:	f200 816c 	bhi.w	8000c44 <ESP01DoWifi+0x2fc>
 800096c:	a201      	add	r2, pc, #4	; (adr r2, 8000974 <ESP01DoWifi+0x2c>)
 800096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000972:	bf00      	nop
 8000974:	0800099d 	.word	0x0800099d
 8000978:	08000a0b 	.word	0x08000a0b
 800097c:	08000a2d 	.word	0x08000a2d
 8000980:	08000ad5 	.word	0x08000ad5
 8000984:	08000a19 	.word	0x08000a19
 8000988:	08000ae3 	.word	0x08000ae3
 800098c:	08000af1 	.word	0x08000af1
 8000990:	08000c51 	.word	0x08000c51
 8000994:	08000c45 	.word	0x08000c45
 8000998:	080009fd 	.word	0x080009fd
	case STESP01ATAT:
		WAITINGSYMBOL = 0;
 800099c:	4b86      	ldr	r3, [pc, #536]	; (8000bb8 <ESP01DoWifi+0x270>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
		NEEDWAITSYMBOL = 0;
 80009a2:	4b86      	ldr	r3, [pc, #536]	; (8000bbc <ESP01DoWifi+0x274>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
		if(triesAT){
 80009a8:	4b85      	ldr	r3, [pc, #532]	; (8000bc0 <ESP01DoWifi+0x278>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d01b      	beq.n	80009e8 <ESP01DoWifi+0xa0>
			triesAT--;
 80009b0:	4b83      	ldr	r3, [pc, #524]	; (8000bc0 <ESP01DoWifi+0x278>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b81      	ldr	r3, [pc, #516]	; (8000bc0 <ESP01DoWifi+0x278>)
 80009ba:	701a      	strb	r2, [r3, #0]
			if(!triesAT){
 80009bc:	4b80      	ldr	r3, [pc, #512]	; (8000bc0 <ESP01DoWifi+0x278>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10a      	bne.n	80009da <ESP01DoWifi+0x92>
				ESP01TASKSTATE = STESP01HARDRESET;
 80009c4:	4b7b      	ldr	r3, [pc, #492]	; (8000bb4 <ESP01DoWifi+0x26c>)
 80009c6:	2209      	movs	r2, #9
 80009c8:	701a      	strb	r2, [r3, #0]
				doESP01GpioWriteCH_EN(0);
 80009ca:	4b7e      	ldr	r3, [pc, #504]	; (8000bc4 <ESP01DoWifi+0x27c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2000      	movs	r0, #0
 80009d0:	4798      	blx	r3
				timeOutResponse = 100;
 80009d2:	4b77      	ldr	r3, [pc, #476]	; (8000bb0 <ESP01DoWifi+0x268>)
 80009d4:	2264      	movs	r2, #100	; 0x64
 80009d6:	601a      	str	r2, [r3, #0]
		else{
			ESP01PutAT(_AT);
			timeOutResponse = 10;
			triesAT = 5;
		}
		break;
 80009d8:	e13d      	b.n	8000c56 <ESP01DoWifi+0x30e>
				ESP01PutAT(_AT);
 80009da:	487b      	ldr	r0, [pc, #492]	; (8000bc8 <ESP01DoWifi+0x280>)
 80009dc:	f7ff ff62 	bl	80008a4 <ESP01PutAT>
				timeOutResponse = 10;
 80009e0:	4b73      	ldr	r3, [pc, #460]	; (8000bb0 <ESP01DoWifi+0x268>)
 80009e2:	220a      	movs	r2, #10
 80009e4:	601a      	str	r2, [r3, #0]
		break;
 80009e6:	e136      	b.n	8000c56 <ESP01DoWifi+0x30e>
			ESP01PutAT(_AT);
 80009e8:	4877      	ldr	r0, [pc, #476]	; (8000bc8 <ESP01DoWifi+0x280>)
 80009ea:	f7ff ff5b 	bl	80008a4 <ESP01PutAT>
			timeOutResponse = 10;
 80009ee:	4b70      	ldr	r3, [pc, #448]	; (8000bb0 <ESP01DoWifi+0x268>)
 80009f0:	220a      	movs	r2, #10
 80009f2:	601a      	str	r2, [r3, #0]
			triesAT = 5;
 80009f4:	4b72      	ldr	r3, [pc, #456]	; (8000bc0 <ESP01DoWifi+0x278>)
 80009f6:	2205      	movs	r2, #5
 80009f8:	701a      	strb	r2, [r3, #0]
		break;
 80009fa:	e12c      	b.n	8000c56 <ESP01DoWifi+0x30e>
	case STESP01ATCWMODE:
		ESP01PutAT(_ATCWMODE);
 80009fc:	4873      	ldr	r0, [pc, #460]	; (8000bcc <ESP01DoWifi+0x284>)
 80009fe:	f7ff ff51 	bl	80008a4 <ESP01PutAT>
		timeOutResponse = 10;
 8000a02:	4b6b      	ldr	r3, [pc, #428]	; (8000bb0 <ESP01DoWifi+0x268>)
 8000a04:	220a      	movs	r2, #10
 8000a06:	601a      	str	r2, [r3, #0]
		break;
 8000a08:	e125      	b.n	8000c56 <ESP01DoWifi+0x30e>
	case STESP01ATCIPMUX:
		ESP01PutAT(_ATCIPMUX);
 8000a0a:	4871      	ldr	r0, [pc, #452]	; (8000bd0 <ESP01DoWifi+0x288>)
 8000a0c:	f7ff ff4a 	bl	80008a4 <ESP01PutAT>
		timeOutResponse = 5;
 8000a10:	4b67      	ldr	r3, [pc, #412]	; (8000bb0 <ESP01DoWifi+0x268>)
 8000a12:	2205      	movs	r2, #5
 8000a14:	601a      	str	r2, [r3, #0]
		break;
 8000a16:	e11e      	b.n	8000c56 <ESP01DoWifi+0x30e>
	case STESP01ATCLOSE:
		lastESP01STATE = ESP01WIFIDISCONNECTED;
 8000a18:	4b6e      	ldr	r3, [pc, #440]	; (8000bd4 <ESP01DoWifi+0x28c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
		ESP01PutAT(_ATCIPCLOSE);
 8000a1e:	486e      	ldr	r0, [pc, #440]	; (8000bd8 <ESP01DoWifi+0x290>)
 8000a20:	f7ff ff40 	bl	80008a4 <ESP01PutAT>
		timeOutResponse = 10;
 8000a24:	4b62      	ldr	r3, [pc, #392]	; (8000bb0 <ESP01DoWifi+0x268>)
 8000a26:	220a      	movs	r2, #10
 8000a28:	601a      	str	r2, [r3, #0]
		break;
 8000a2a:	e114      	b.n	8000c56 <ESP01DoWifi+0x30e>
	case STESP01ATCWJAP://"SSID","SSIDPass"
		ESP01PutAT(_ATCWJAP);
 8000a2c:	486b      	ldr	r0, [pc, #428]	; (8000bdc <ESP01DoWifi+0x294>)
 8000a2e:	f7ff ff39 	bl	80008a4 <ESP01PutAT>
		ESP01PutByteOnTx('"');
 8000a32:	2022      	movs	r0, #34	; 0x22
 8000a34:	f7ff ff66 	bl	8000904 <ESP01PutByteOnTx>
		for(aux=0; aux<48; aux++){
 8000a38:	4b69      	ldr	r3, [pc, #420]	; (8000be0 <ESP01DoWifi+0x298>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	e011      	b.n	8000a64 <ESP01DoWifi+0x11c>
			if(SSID[aux]=='\0')
 8000a40:	4b67      	ldr	r3, [pc, #412]	; (8000be0 <ESP01DoWifi+0x298>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a67      	ldr	r2, [pc, #412]	; (8000be4 <ESP01DoWifi+0x29c>)
 8000a46:	5cd3      	ldrb	r3, [r2, r3]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d010      	beq.n	8000a6e <ESP01DoWifi+0x126>
				break;
			ESP01PutByteOnTx(SSID[aux]);
 8000a4c:	4b64      	ldr	r3, [pc, #400]	; (8000be0 <ESP01DoWifi+0x298>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a64      	ldr	r2, [pc, #400]	; (8000be4 <ESP01DoWifi+0x29c>)
 8000a52:	5cd3      	ldrb	r3, [r2, r3]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff55 	bl	8000904 <ESP01PutByteOnTx>
		for(aux=0; aux<48; aux++){
 8000a5a:	4b61      	ldr	r3, [pc, #388]	; (8000be0 <ESP01DoWifi+0x298>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	4a5f      	ldr	r2, [pc, #380]	; (8000be0 <ESP01DoWifi+0x298>)
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	4b5e      	ldr	r3, [pc, #376]	; (8000be0 <ESP01DoWifi+0x298>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b2f      	cmp	r3, #47	; 0x2f
 8000a6a:	dde9      	ble.n	8000a40 <ESP01DoWifi+0xf8>
 8000a6c:	e000      	b.n	8000a70 <ESP01DoWifi+0x128>
				break;
 8000a6e:	bf00      	nop
		}
		ESP01PutByteOnTx('"');
 8000a70:	2022      	movs	r0, #34	; 0x22
 8000a72:	f7ff ff47 	bl	8000904 <ESP01PutByteOnTx>
		ESP01PutByteOnTx(',');
 8000a76:	202c      	movs	r0, #44	; 0x2c
 8000a78:	f7ff ff44 	bl	8000904 <ESP01PutByteOnTx>
		ESP01PutByteOnTx('"');
 8000a7c:	2022      	movs	r0, #34	; 0x22
 8000a7e:	f7ff ff41 	bl	8000904 <ESP01PutByteOnTx>
		for(aux=0; aux<32; aux++){
 8000a82:	4b57      	ldr	r3, [pc, #348]	; (8000be0 <ESP01DoWifi+0x298>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	e011      	b.n	8000aae <ESP01DoWifi+0x166>
			if(PASSWORD[aux]=='\0')
 8000a8a:	4b55      	ldr	r3, [pc, #340]	; (8000be0 <ESP01DoWifi+0x298>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a56      	ldr	r2, [pc, #344]	; (8000be8 <ESP01DoWifi+0x2a0>)
 8000a90:	5cd3      	ldrb	r3, [r2, r3]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d010      	beq.n	8000ab8 <ESP01DoWifi+0x170>
				break;
			ESP01PutByteOnTx(PASSWORD[aux]);
 8000a96:	4b52      	ldr	r3, [pc, #328]	; (8000be0 <ESP01DoWifi+0x298>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a53      	ldr	r2, [pc, #332]	; (8000be8 <ESP01DoWifi+0x2a0>)
 8000a9c:	5cd3      	ldrb	r3, [r2, r3]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ff30 	bl	8000904 <ESP01PutByteOnTx>
		for(aux=0; aux<32; aux++){
 8000aa4:	4b4e      	ldr	r3, [pc, #312]	; (8000be0 <ESP01DoWifi+0x298>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a4d      	ldr	r2, [pc, #308]	; (8000be0 <ESP01DoWifi+0x298>)
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	4b4c      	ldr	r3, [pc, #304]	; (8000be0 <ESP01DoWifi+0x298>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b1f      	cmp	r3, #31
 8000ab4:	dde9      	ble.n	8000a8a <ESP01DoWifi+0x142>
 8000ab6:	e000      	b.n	8000aba <ESP01DoWifi+0x172>
				break;
 8000ab8:	bf00      	nop
		}
		ESP01PutByteOnTx('"');
 8000aba:	2022      	movs	r0, #34	; 0x22
 8000abc:	f7ff ff22 	bl	8000904 <ESP01PutByteOnTx>
		ESP01PutByteOnTx('\r');
 8000ac0:	200d      	movs	r0, #13
 8000ac2:	f7ff ff1f 	bl	8000904 <ESP01PutByteOnTx>
		ESP01PutByteOnTx('\n');
 8000ac6:	200a      	movs	r0, #10
 8000ac8:	f7ff ff1c 	bl	8000904 <ESP01PutByteOnTx>
		timeOutResponse = 100;
 8000acc:	4b38      	ldr	r3, [pc, #224]	; (8000bb0 <ESP01DoWifi+0x268>)
 8000ace:	2264      	movs	r2, #100	; 0x64
 8000ad0:	601a      	str	r2, [r3, #0]
		break;
 8000ad2:	e0c0      	b.n	8000c56 <ESP01DoWifi+0x30e>
	case STESP01ATCIFSR:
		ESP01PutAT(_ATCIFSR);
 8000ad4:	4845      	ldr	r0, [pc, #276]	; (8000bec <ESP01DoWifi+0x2a4>)
 8000ad6:	f7ff fee5 	bl	80008a4 <ESP01PutAT>
		timeOutResponse = 10;
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <ESP01DoWifi+0x268>)
 8000adc:	220a      	movs	r2, #10
 8000ade:	601a      	str	r2, [r3, #0]
		break;
 8000ae0:	e0b9      	b.n	8000c56 <ESP01DoWifi+0x30e>
	case STESP01ATCLOSE1:
		ESP01PutAT(_ATCIPCLOSE);
 8000ae2:	483d      	ldr	r0, [pc, #244]	; (8000bd8 <ESP01DoWifi+0x290>)
 8000ae4:	f7ff fede 	bl	80008a4 <ESP01PutAT>
		timeOutResponse = 10;
 8000ae8:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <ESP01DoWifi+0x268>)
 8000aea:	220a      	movs	r2, #10
 8000aec:	601a      	str	r2, [r3, #0]
		break;
 8000aee:	e0b2      	b.n	8000c56 <ESP01DoWifi+0x30e>
	case STESP01ATCIPSTART:
		if(RemotePort[0] == '\0')
 8000af0:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <ESP01DoWifi+0x2a8>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f000 80ad 	beq.w	8000c54 <ESP01DoWifi+0x30c>
			break;
		lastESP01STATE = ESP01UDPBUSY;
 8000afa:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <ESP01DoWifi+0x28c>)
 8000afc:	2204      	movs	r2, #4
 8000afe:	701a      	strb	r2, [r3, #0]
		ESP01PutAT(_ATCIPSTART);
 8000b00:	483c      	ldr	r0, [pc, #240]	; (8000bf4 <ESP01DoWifi+0x2ac>)
 8000b02:	f7ff fecf 	bl	80008a4 <ESP01PutAT>
		ESP01PutByteOnTx('"');
 8000b06:	2022      	movs	r0, #34	; 0x22
 8000b08:	f7ff fefc 	bl	8000904 <ESP01PutByteOnTx>
		ESP01PutAT(_UDP);
 8000b0c:	483a      	ldr	r0, [pc, #232]	; (8000bf8 <ESP01DoWifi+0x2b0>)
 8000b0e:	f7ff fec9 	bl	80008a4 <ESP01PutAT>
		ESP01PutByteOnTx('"');
 8000b12:	2022      	movs	r0, #34	; 0x22
 8000b14:	f7ff fef6 	bl	8000904 <ESP01PutByteOnTx>
		ESP01PutByteOnTx(',');
 8000b18:	202c      	movs	r0, #44	; 0x2c
 8000b1a:	f7ff fef3 	bl	8000904 <ESP01PutByteOnTx>
		ESP01PutByteOnTx('"');
 8000b1e:	2022      	movs	r0, #34	; 0x22
 8000b20:	f7ff fef0 	bl	8000904 <ESP01PutByteOnTx>
		for(aux=0; aux<16; aux++){
 8000b24:	4b2e      	ldr	r3, [pc, #184]	; (8000be0 <ESP01DoWifi+0x298>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	e011      	b.n	8000b50 <ESP01DoWifi+0x208>
			if(RemoteIP[aux] == '\0')
 8000b2c:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <ESP01DoWifi+0x298>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a32      	ldr	r2, [pc, #200]	; (8000bfc <ESP01DoWifi+0x2b4>)
 8000b32:	5cd3      	ldrb	r3, [r2, r3]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d010      	beq.n	8000b5a <ESP01DoWifi+0x212>
				break;
			ESP01PutByteOnTx(RemoteIP[aux]);
 8000b38:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <ESP01DoWifi+0x298>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <ESP01DoWifi+0x2b4>)
 8000b3e:	5cd3      	ldrb	r3, [r2, r3]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fedf 	bl	8000904 <ESP01PutByteOnTx>
		for(aux=0; aux<16; aux++){
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <ESP01DoWifi+0x298>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a24      	ldr	r2, [pc, #144]	; (8000be0 <ESP01DoWifi+0x298>)
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <ESP01DoWifi+0x298>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	dde9      	ble.n	8000b2c <ESP01DoWifi+0x1e4>
 8000b58:	e000      	b.n	8000b5c <ESP01DoWifi+0x214>
				break;
 8000b5a:	bf00      	nop
		}
		ESP01PutByteOnTx('"');
 8000b5c:	2022      	movs	r0, #34	; 0x22
 8000b5e:	f7ff fed1 	bl	8000904 <ESP01PutByteOnTx>
		ESP01PutByteOnTx(',');
 8000b62:	202c      	movs	r0, #44	; 0x2c
 8000b64:	f7ff fece 	bl	8000904 <ESP01PutByteOnTx>
		for(aux=0; aux<6; aux++){
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <ESP01DoWifi+0x298>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	e011      	b.n	8000b94 <ESP01DoWifi+0x24c>
			if(RemotePort[aux] == '\0')
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <ESP01DoWifi+0x298>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <ESP01DoWifi+0x2a8>)
 8000b76:	5cd3      	ldrb	r3, [r2, r3]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d010      	beq.n	8000b9e <ESP01DoWifi+0x256>
				break;
			ESP01PutByteOnTx(RemotePort[aux]);
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <ESP01DoWifi+0x298>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <ESP01DoWifi+0x2a8>)
 8000b82:	5cd3      	ldrb	r3, [r2, r3]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff febd 	bl	8000904 <ESP01PutByteOnTx>
		for(aux=0; aux<6; aux++){
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <ESP01DoWifi+0x298>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <ESP01DoWifi+0x298>)
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <ESP01DoWifi+0x298>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b05      	cmp	r3, #5
 8000b9a:	dde9      	ble.n	8000b70 <ESP01DoWifi+0x228>
 8000b9c:	e000      	b.n	8000ba0 <ESP01DoWifi+0x258>
				break;
 8000b9e:	bf00      	nop
		}
		ESP01PutByteOnTx(',');
 8000ba0:	202c      	movs	r0, #44	; 0x2c
 8000ba2:	f7ff feaf 	bl	8000904 <ESP01PutByteOnTx>
		for(aux=0; aux<6; aux++){
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <ESP01DoWifi+0x298>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e03a      	b.n	8000c24 <ESP01DoWifi+0x2dc>
 8000bae:	bf00      	nop
 8000bb0:	200004bc 	.word	0x200004bc
 8000bb4:	20000546 	.word	0x20000546
 8000bb8:	200004c2 	.word	0x200004c2
 8000bbc:	200004c1 	.word	0x200004c1
 8000bc0:	200004c0 	.word	0x200004c0
 8000bc4:	200004c4 	.word	0x200004c4
 8000bc8:	0800a524 	.word	0x0800a524
 8000bcc:	0800a558 	.word	0x0800a558
 8000bd0:	0800a52c 	.word	0x0800a52c
 8000bd4:	20000547 	.word	0x20000547
 8000bd8:	0800a548 	.word	0x0800a548
 8000bdc:	0800a57c 	.word	0x0800a57c
 8000be0:	20000548 	.word	0x20000548
 8000be4:	200004d8 	.word	0x200004d8
 8000be8:	20000508 	.word	0x20000508
 8000bec:	0800a588 	.word	0x0800a588
 8000bf0:	20000538 	.word	0x20000538
 8000bf4:	0800a56c 	.word	0x0800a56c
 8000bf8:	0800a4a8 	.word	0x0800a4a8
 8000bfc:	20000528 	.word	0x20000528
			if(LocalPort[aux] == '\0')
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <ESP01DoWifi+0x310>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a15      	ldr	r2, [pc, #84]	; (8000c5c <ESP01DoWifi+0x314>)
 8000c06:	5cd3      	ldrb	r3, [r2, r3]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d010      	beq.n	8000c2e <ESP01DoWifi+0x2e6>
				break;
			ESP01PutByteOnTx(LocalPort[aux]);
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <ESP01DoWifi+0x310>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <ESP01DoWifi+0x314>)
 8000c12:	5cd3      	ldrb	r3, [r2, r3]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fe75 	bl	8000904 <ESP01PutByteOnTx>
		for(aux=0; aux<6; aux++){
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <ESP01DoWifi+0x310>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <ESP01DoWifi+0x310>)
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <ESP01DoWifi+0x310>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b05      	cmp	r3, #5
 8000c2a:	dde9      	ble.n	8000c00 <ESP01DoWifi+0x2b8>
 8000c2c:	e000      	b.n	8000c30 <ESP01DoWifi+0x2e8>
				break;
 8000c2e:	bf00      	nop
		}
		ESP01PutByteOnTx('\r');
 8000c30:	200d      	movs	r0, #13
 8000c32:	f7ff fe67 	bl	8000904 <ESP01PutByteOnTx>
		ESP01PutByteOnTx('\n');
 8000c36:	200a      	movs	r0, #10
 8000c38:	f7ff fe64 	bl	8000904 <ESP01PutByteOnTx>
		timeOutResponse = 50;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <ESP01DoWifi+0x318>)
 8000c3e:	2232      	movs	r2, #50	; 0x32
 8000c40:	601a      	str	r2, [r3, #0]
		break;
 8000c42:	e008      	b.n	8000c56 <ESP01DoWifi+0x30e>
	case STESP01ATCONNECTED:
		break;
	default:
		ESP01TASKSTATE = STESP01ATAT;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <ESP01DoWifi+0x31c>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e004      	b.n	8000c56 <ESP01DoWifi+0x30e>
		return;
 8000c4c:	bf00      	nop
 8000c4e:	e002      	b.n	8000c56 <ESP01DoWifi+0x30e>
		break;
 8000c50:	bf00      	nop
 8000c52:	e000      	b.n	8000c56 <ESP01DoWifi+0x30e>
			break;
 8000c54:	bf00      	nop
	}

}
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000548 	.word	0x20000548
 8000c5c:	20000540 	.word	0x20000540
 8000c60:	200004bc 	.word	0x200004bc
 8000c64:	20000546 	.word	0x20000546

08000c68 <CmpResponse>:


static uint8_t CmpResponse(const char *str, uint16_t index, uint8_t n){
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
 8000c74:	4613      	mov	r3, r2
 8000c76:	707b      	strb	r3, [r7, #1]
	uint8_t j;

	for(j=0; j<n; j++){
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]
 8000c7c:	e016      	b.n	8000cac <CmpResponse+0x44>
		if(str[j] != bufRX[index])
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	4413      	add	r3, r2
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	490e      	ldr	r1, [pc, #56]	; (8000cc4 <CmpResponse+0x5c>)
 8000c8a:	5ccb      	ldrb	r3, [r1, r3]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d001      	beq.n	8000c94 <CmpResponse+0x2c>
			return 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	e010      	b.n	8000cb6 <CmpResponse+0x4e>
		index++;
 8000c94:	887b      	ldrh	r3, [r7, #2]
 8000c96:	3301      	adds	r3, #1
 8000c98:	807b      	strh	r3, [r7, #2]
		if(index == SIZEBUFRX)
 8000c9a:	887b      	ldrh	r3, [r7, #2]
 8000c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ca0:	d101      	bne.n	8000ca6 <CmpResponse+0x3e>
			index = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	807b      	strh	r3, [r7, #2]
	for(j=0; j<n; j++){
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
 8000cac:	7bfa      	ldrb	r2, [r7, #15]
 8000cae:	787b      	ldrb	r3, [r7, #1]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d3e4      	bcc.n	8000c7e <CmpResponse+0x16>
	}
	return 1;
 8000cb4:	2301      	movs	r3, #1
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000028 	.word	0x20000028

08000cc8 <ESP01DecodeAT>:


static void ESP01DecodeAT(){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
	uint16_t index;

	index = iRXw;
 8000cce:	4b8d      	ldr	r3, [pc, #564]	; (8000f04 <ESP01DecodeAT+0x23c>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	80fb      	strh	r3, [r7, #6]

	while(iRXr != index){
 8000cd4:	e371      	b.n	80013ba <ESP01DecodeAT+0x6f2>
		switch(header){
 8000cd6:	4b8c      	ldr	r3, [pc, #560]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b32      	cmp	r3, #50	; 0x32
 8000cdc:	f200 834e 	bhi.w	800137c <ESP01DecodeAT+0x6b4>
 8000ce0:	a201      	add	r2, pc, #4	; (adr r2, 8000ce8 <ESP01DecodeAT+0x20>)
 8000ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce6:	bf00      	nop
 8000ce8:	08000db5 	.word	0x08000db5
 8000cec:	08000e75 	.word	0x08000e75
 8000cf0:	08000e93 	.word	0x08000e93
 8000cf4:	0800137d 	.word	0x0800137d
 8000cf8:	0800137d 	.word	0x0800137d
 8000cfc:	0800137d 	.word	0x0800137d
 8000d00:	0800137d 	.word	0x0800137d
 8000d04:	0800137d 	.word	0x0800137d
 8000d08:	0800137d 	.word	0x0800137d
 8000d0c:	0800137d 	.word	0x0800137d
 8000d10:	08000eab 	.word	0x08000eab
 8000d14:	08000ec9 	.word	0x08000ec9
 8000d18:	08000ee7 	.word	0x08000ee7
 8000d1c:	08000f25 	.word	0x08000f25
 8000d20:	0800137d 	.word	0x0800137d
 8000d24:	0800137d 	.word	0x0800137d
 8000d28:	0800137d 	.word	0x0800137d
 8000d2c:	0800137d 	.word	0x0800137d
 8000d30:	0800137d 	.word	0x0800137d
 8000d34:	0800137d 	.word	0x0800137d
 8000d38:	08000fcf 	.word	0x08000fcf
 8000d3c:	08000fed 	.word	0x08000fed
 8000d40:	0800137d 	.word	0x0800137d
 8000d44:	0800137d 	.word	0x0800137d
 8000d48:	0800137d 	.word	0x0800137d
 8000d4c:	0800137d 	.word	0x0800137d
 8000d50:	0800137d 	.word	0x0800137d
 8000d54:	0800137d 	.word	0x0800137d
 8000d58:	0800137d 	.word	0x0800137d
 8000d5c:	0800137d 	.word	0x0800137d
 8000d60:	08001005 	.word	0x08001005
 8000d64:	0800137d 	.word	0x0800137d
 8000d68:	0800137d 	.word	0x0800137d
 8000d6c:	0800137d 	.word	0x0800137d
 8000d70:	0800137d 	.word	0x0800137d
 8000d74:	0800137d 	.word	0x0800137d
 8000d78:	0800137d 	.word	0x0800137d
 8000d7c:	0800137d 	.word	0x0800137d
 8000d80:	0800137d 	.word	0x0800137d
 8000d84:	0800137d 	.word	0x0800137d
 8000d88:	08001065 	.word	0x08001065
 8000d8c:	08001083 	.word	0x08001083
 8000d90:	080010a9 	.word	0x080010a9
 8000d94:	08001159 	.word	0x08001159
 8000d98:	08001177 	.word	0x08001177
 8000d9c:	080011d9 	.word	0x080011d9
 8000da0:	080011f7 	.word	0x080011f7
 8000da4:	0800121b 	.word	0x0800121b
 8000da8:	0800126f 	.word	0x0800126f
 8000dac:	0800137d 	.word	0x0800137d
 8000db0:	080012cf 	.word	0x080012cf
			case 0:
				if(bufRX[iRXr] == 'A')
 8000db4:	4b55      	ldr	r3, [pc, #340]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b55      	ldr	r3, [pc, #340]	; (8000f10 <ESP01DecodeAT+0x248>)
 8000dbc:	5c9b      	ldrb	r3, [r3, r2]
 8000dbe:	2b41      	cmp	r3, #65	; 0x41
 8000dc0:	d102      	bne.n	8000dc8 <ESP01DecodeAT+0x100>
					header = 1;
 8000dc2:	4b51      	ldr	r3, [pc, #324]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
				if(bufRX[iRXr] == 'W'){
 8000dc8:	4b50      	ldr	r3, [pc, #320]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b50      	ldr	r3, [pc, #320]	; (8000f10 <ESP01DecodeAT+0x248>)
 8000dd0:	5c9b      	ldrb	r3, [r3, r2]
 8000dd2:	2b57      	cmp	r3, #87	; 0x57
 8000dd4:	d106      	bne.n	8000de4 <ESP01DecodeAT+0x11c>
					header = 10;
 8000dd6:	4b4c      	ldr	r3, [pc, #304]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000dd8:	220a      	movs	r2, #10
 8000dda:	701a      	strb	r2, [r3, #0]
					iResponse = iRXr;
 8000ddc:	4b4b      	ldr	r3, [pc, #300]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000dde:	881a      	ldrh	r2, [r3, #0]
 8000de0:	4b4c      	ldr	r3, [pc, #304]	; (8000f14 <ESP01DecodeAT+0x24c>)
 8000de2:	801a      	strh	r2, [r3, #0]
				}
				if(bufRX[iRXr] == 'l')
 8000de4:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <ESP01DecodeAT+0x248>)
 8000dec:	5c9b      	ldrb	r3, [r3, r2]
 8000dee:	2b6c      	cmp	r3, #108	; 0x6c
 8000df0:	d102      	bne.n	8000df8 <ESP01DecodeAT+0x130>
					header = 20;
 8000df2:	4b45      	ldr	r3, [pc, #276]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000df4:	2214      	movs	r2, #20
 8000df6:	701a      	strb	r2, [r3, #0]
				if(bufRX[iRXr] == '+'){
 8000df8:	4b44      	ldr	r3, [pc, #272]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b44      	ldr	r3, [pc, #272]	; (8000f10 <ESP01DecodeAT+0x248>)
 8000e00:	5c9b      	ldrb	r3, [r3, r2]
 8000e02:	2b2b      	cmp	r3, #43	; 0x2b
 8000e04:	d106      	bne.n	8000e14 <ESP01DecodeAT+0x14c>
					header = 30;
 8000e06:	4b40      	ldr	r3, [pc, #256]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000e08:	221e      	movs	r2, #30
 8000e0a:	701a      	strb	r2, [r3, #0]
					iResponse = iRXr;
 8000e0c:	4b3f      	ldr	r3, [pc, #252]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000e0e:	881a      	ldrh	r2, [r3, #0]
 8000e10:	4b40      	ldr	r3, [pc, #256]	; (8000f14 <ESP01DecodeAT+0x24c>)
 8000e12:	801a      	strh	r2, [r3, #0]
				}
				if(bufRX[iRXr] == '\r')
 8000e14:	4b3d      	ldr	r3, [pc, #244]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <ESP01DecodeAT+0x248>)
 8000e1c:	5c9b      	ldrb	r3, [r3, r2]
 8000e1e:	2b0d      	cmp	r3, #13
 8000e20:	d102      	bne.n	8000e28 <ESP01DecodeAT+0x160>
					header = 40;
 8000e22:	4b39      	ldr	r3, [pc, #228]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000e24:	2228      	movs	r2, #40	; 0x28
 8000e26:	701a      	strb	r2, [r3, #0]
				if(bufRX[iRXr]=='C' || bufRX[iRXr]=='D'){
 8000e28:	4b38      	ldr	r3, [pc, #224]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <ESP01DecodeAT+0x248>)
 8000e30:	5c9b      	ldrb	r3, [r3, r2]
 8000e32:	2b43      	cmp	r3, #67	; 0x43
 8000e34:	d006      	beq.n	8000e44 <ESP01DecodeAT+0x17c>
 8000e36:	4b35      	ldr	r3, [pc, #212]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <ESP01DecodeAT+0x248>)
 8000e3e:	5c9b      	ldrb	r3, [r3, r2]
 8000e40:	2b44      	cmp	r3, #68	; 0x44
 8000e42:	d106      	bne.n	8000e52 <ESP01DecodeAT+0x18a>
					header = 50;
 8000e44:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000e46:	2232      	movs	r2, #50	; 0x32
 8000e48:	701a      	strb	r2, [r3, #0]
					iResponse = iRXr;
 8000e4a:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000e4c:	881a      	ldrh	r2, [r3, #0]
 8000e4e:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <ESP01DecodeAT+0x24c>)
 8000e50:	801a      	strh	r2, [r3, #0]
				}
				if(bufRX[iRXr] == '>'){
 8000e52:	4b2e      	ldr	r3, [pc, #184]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <ESP01DecodeAT+0x248>)
 8000e5a:	5c9b      	ldrb	r3, [r3, r2]
 8000e5c:	2b3e      	cmp	r3, #62	; 0x3e
 8000e5e:	d105      	bne.n	8000e6c <ESP01DecodeAT+0x1a4>
					timeOutSymbol = 0;
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <ESP01DecodeAT+0x250>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
					WAITINGSYMBOL = 0;
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <ESP01DecodeAT+0x254>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
				}
				timeOut = 100;
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <ESP01DecodeAT+0x258>)
 8000e6e:	2264      	movs	r2, #100	; 0x64
 8000e70:	701a      	strb	r2, [r3, #0]
				break;
 8000e72:	e294      	b.n	800139e <ESP01DecodeAT+0x6d6>
			case 1:
				if(bufRX[iRXr] == 'T')
 8000e74:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <ESP01DecodeAT+0x248>)
 8000e7c:	5c9b      	ldrb	r3, [r3, r2]
 8000e7e:	2b54      	cmp	r3, #84	; 0x54
 8000e80:	d103      	bne.n	8000e8a <ESP01DecodeAT+0x1c2>
					header = 2;
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000e84:	2202      	movs	r2, #2
 8000e86:	701a      	strb	r2, [r3, #0]
				else
					header = 0;
				break;
 8000e88:	e289      	b.n	800139e <ESP01DecodeAT+0x6d6>
					header = 0;
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
				break;
 8000e90:	e285      	b.n	800139e <ESP01DecodeAT+0x6d6>
			case 2:
				if(bufRX[iRXr] == '\n')
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <ESP01DecodeAT+0x248>)
 8000e9a:	5c9b      	ldrb	r3, [r3, r2]
 8000e9c:	2b0a      	cmp	r3, #10
 8000e9e:	f040 8271 	bne.w	8001384 <ESP01DecodeAT+0x6bc>
					header = 0;
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
				break;
 8000ea8:	e26c      	b.n	8001384 <ESP01DecodeAT+0x6bc>
			case 10:
				if(bufRX[iRXr] == 'I')
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <ESP01DecodeAT+0x248>)
 8000eb2:	5c9b      	ldrb	r3, [r3, r2]
 8000eb4:	2b49      	cmp	r3, #73	; 0x49
 8000eb6:	d103      	bne.n	8000ec0 <ESP01DecodeAT+0x1f8>
					header = 11;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000eba:	220b      	movs	r2, #11
 8000ebc:	701a      	strb	r2, [r3, #0]
				else
					header = 0;
				break;
 8000ebe:	e26e      	b.n	800139e <ESP01DecodeAT+0x6d6>
					header = 0;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
				break;
 8000ec6:	e26a      	b.n	800139e <ESP01DecodeAT+0x6d6>
			case 11:
				if(bufRX[iRXr] == 'F')
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <ESP01DecodeAT+0x248>)
 8000ed0:	5c9b      	ldrb	r3, [r3, r2]
 8000ed2:	2b46      	cmp	r3, #70	; 0x46
 8000ed4:	d103      	bne.n	8000ede <ESP01DecodeAT+0x216>
					header = 12;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000ed8:	220c      	movs	r2, #12
 8000eda:	701a      	strb	r2, [r3, #0]
				else
					header = 0;
				break;
 8000edc:	e25f      	b.n	800139e <ESP01DecodeAT+0x6d6>
					header = 0;
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
				break;
 8000ee4:	e25b      	b.n	800139e <ESP01DecodeAT+0x6d6>
			case 12:
				if(bufRX[iRXr] == 'I')
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <ESP01DecodeAT+0x244>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <ESP01DecodeAT+0x248>)
 8000eee:	5c9b      	ldrb	r3, [r3, r2]
 8000ef0:	2b49      	cmp	r3, #73	; 0x49
 8000ef2:	d103      	bne.n	8000efc <ESP01DecodeAT+0x234>
					header = 13;
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000ef6:	220d      	movs	r2, #13
 8000ef8:	701a      	strb	r2, [r3, #0]
				else
					header = 21;
				break;
 8000efa:	e250      	b.n	800139e <ESP01DecodeAT+0x6d6>
					header = 21;
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <ESP01DecodeAT+0x240>)
 8000efe:	2215      	movs	r2, #21
 8000f00:	701a      	strb	r2, [r3, #0]
				break;
 8000f02:	e24c      	b.n	800139e <ESP01DecodeAT+0x6d6>
 8000f04:	2000022a 	.word	0x2000022a
 8000f08:	20000228 	.word	0x20000228
 8000f0c:	2000022c 	.word	0x2000022c
 8000f10:	20000028 	.word	0x20000028
 8000f14:	2000022e 	.word	0x2000022e
 8000f18:	200004c3 	.word	0x200004c3
 8000f1c:	200004c2 	.word	0x200004c2
 8000f20:	20000229 	.word	0x20000229
			case 13:
				if(bufRX[iRXr] == '\n'){
 8000f24:	4b9b      	ldr	r3, [pc, #620]	; (8001194 <ESP01DecodeAT+0x4cc>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b9b      	ldr	r3, [pc, #620]	; (8001198 <ESP01DecodeAT+0x4d0>)
 8000f2c:	5c9b      	ldrb	r3, [r3, r2]
 8000f2e:	2b0a      	cmp	r3, #10
 8000f30:	f040 822a 	bne.w	8001388 <ESP01DecodeAT+0x6c0>
					header = 0;
 8000f34:	4b99      	ldr	r3, [pc, #612]	; (800119c <ESP01DecodeAT+0x4d4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
					if(CmpResponse(_WIFIGotIP, iResponse, 11)==1){
 8000f3a:	4b99      	ldr	r3, [pc, #612]	; (80011a0 <ESP01DecodeAT+0x4d8>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	220b      	movs	r2, #11
 8000f40:	4619      	mov	r1, r3
 8000f42:	4898      	ldr	r0, [pc, #608]	; (80011a4 <ESP01DecodeAT+0x4dc>)
 8000f44:	f7ff fe90 	bl	8000c68 <CmpResponse>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d109      	bne.n	8000f62 <ESP01DecodeAT+0x29a>
						if(ESP01TASKSTATE == STESP01ATCWJAP){
 8000f4e:	4b96      	ldr	r3, [pc, #600]	; (80011a8 <ESP01DecodeAT+0x4e0>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d105      	bne.n	8000f62 <ESP01DecodeAT+0x29a>
							ESP01TASKSTATE = STESP01ATCIFSR;
 8000f56:	4b94      	ldr	r3, [pc, #592]	; (80011a8 <ESP01DecodeAT+0x4e0>)
 8000f58:	2204      	movs	r2, #4
 8000f5a:	701a      	strb	r2, [r3, #0]
							timeOutResponse = 20;
 8000f5c:	4b93      	ldr	r3, [pc, #588]	; (80011ac <ESP01DecodeAT+0x4e4>)
 8000f5e:	2214      	movs	r2, #20
 8000f60:	601a      	str	r2, [r3, #0]
						}
					}
					if(CmpResponse(_WIFIDisconnected, iResponse, 17)==1){
 8000f62:	4b8f      	ldr	r3, [pc, #572]	; (80011a0 <ESP01DecodeAT+0x4d8>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	2211      	movs	r2, #17
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4891      	ldr	r0, [pc, #580]	; (80011b0 <ESP01DecodeAT+0x4e8>)
 8000f6c:	f7ff fe7c 	bl	8000c68 <CmpResponse>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d10c      	bne.n	8000f90 <ESP01DecodeAT+0x2c8>
						ESP01TASKSTATE = STESP01ATAT;
 8000f76:	4b8c      	ldr	r3, [pc, #560]	; (80011a8 <ESP01DecodeAT+0x4e0>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
						lastESP01STATE =  ESP01WIFIDISCONNECTED;
 8000f7c:	4b8d      	ldr	r3, [pc, #564]	; (80011b4 <ESP01DecodeAT+0x4ec>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
						if(doESP01WIFIDisconnected)
 8000f82:	4b8d      	ldr	r3, [pc, #564]	; (80011b8 <ESP01DecodeAT+0x4f0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <ESP01DecodeAT+0x2c8>
							doESP01WIFIDisconnected();
 8000f8a:	4b8b      	ldr	r3, [pc, #556]	; (80011b8 <ESP01DecodeAT+0x4f0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4798      	blx	r3
					}
					if(CmpResponse(_WIFIDisconnect, iResponse, 15)==1){
 8000f90:	4b83      	ldr	r3, [pc, #524]	; (80011a0 <ESP01DecodeAT+0x4d8>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	220f      	movs	r2, #15
 8000f96:	4619      	mov	r1, r3
 8000f98:	4888      	ldr	r0, [pc, #544]	; (80011bc <ESP01DecodeAT+0x4f4>)
 8000f9a:	f7ff fe65 	bl	8000c68 <CmpResponse>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	f040 81f1 	bne.w	8001388 <ESP01DecodeAT+0x6c0>
						if(ESP01TASKSTATE != STESP01ATCWJAP){
 8000fa6:	4b80      	ldr	r3, [pc, #512]	; (80011a8 <ESP01DecodeAT+0x4e0>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	f000 81ec 	beq.w	8001388 <ESP01DecodeAT+0x6c0>
							ESP01TASKSTATE = STESP01ATAT;
 8000fb0:	4b7d      	ldr	r3, [pc, #500]	; (80011a8 <ESP01DecodeAT+0x4e0>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
							lastESP01STATE = ESP01WIFIDISCONNECTED;
 8000fb6:	4b7f      	ldr	r3, [pc, #508]	; (80011b4 <ESP01DecodeAT+0x4ec>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
							if(doESP01WIFIDisconnected)
 8000fbc:	4b7e      	ldr	r3, [pc, #504]	; (80011b8 <ESP01DecodeAT+0x4f0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 81e1 	beq.w	8001388 <ESP01DecodeAT+0x6c0>
								doESP01WIFIDisconnected();
 8000fc6:	4b7c      	ldr	r3, [pc, #496]	; (80011b8 <ESP01DecodeAT+0x4f0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4798      	blx	r3
						}
					}
				}
				break;
 8000fcc:	e1dc      	b.n	8001388 <ESP01DecodeAT+0x6c0>
			case 20:
				if(bufRX[iRXr] == 'i')
 8000fce:	4b71      	ldr	r3, [pc, #452]	; (8001194 <ESP01DecodeAT+0x4cc>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b70      	ldr	r3, [pc, #448]	; (8001198 <ESP01DecodeAT+0x4d0>)
 8000fd6:	5c9b      	ldrb	r3, [r3, r2]
 8000fd8:	2b69      	cmp	r3, #105	; 0x69
 8000fda:	d103      	bne.n	8000fe4 <ESP01DecodeAT+0x31c>
					header = 21;
 8000fdc:	4b6f      	ldr	r3, [pc, #444]	; (800119c <ESP01DecodeAT+0x4d4>)
 8000fde:	2215      	movs	r2, #21
 8000fe0:	701a      	strb	r2, [r3, #0]
				else
					header = 0;
				break;
 8000fe2:	e1dc      	b.n	800139e <ESP01DecodeAT+0x6d6>
					header = 0;
 8000fe4:	4b6d      	ldr	r3, [pc, #436]	; (800119c <ESP01DecodeAT+0x4d4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
				break;
 8000fea:	e1d8      	b.n	800139e <ESP01DecodeAT+0x6d6>
			case 21:
				if(bufRX[iRXr] == '\n')
 8000fec:	4b69      	ldr	r3, [pc, #420]	; (8001194 <ESP01DecodeAT+0x4cc>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b69      	ldr	r3, [pc, #420]	; (8001198 <ESP01DecodeAT+0x4d0>)
 8000ff4:	5c9b      	ldrb	r3, [r3, r2]
 8000ff6:	2b0a      	cmp	r3, #10
 8000ff8:	f040 81c8 	bne.w	800138c <ESP01DecodeAT+0x6c4>
					header = 0;
 8000ffc:	4b67      	ldr	r3, [pc, #412]	; (800119c <ESP01DecodeAT+0x4d4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
				break;
 8001002:	e1c3      	b.n	800138c <ESP01DecodeAT+0x6c4>
			case 30:
				if(bufRX[iRXr] == '\n'){
 8001004:	4b63      	ldr	r3, [pc, #396]	; (8001194 <ESP01DecodeAT+0x4cc>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b63      	ldr	r3, [pc, #396]	; (8001198 <ESP01DecodeAT+0x4d0>)
 800100c:	5c9b      	ldrb	r3, [r3, r2]
 800100e:	2b0a      	cmp	r3, #10
 8001010:	f040 81be 	bne.w	8001390 <ESP01DecodeAT+0x6c8>
					header = 0;
 8001014:	4b61      	ldr	r3, [pc, #388]	; (800119c <ESP01DecodeAT+0x4d4>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
					if(ESP01TASKSTATE  == STESP01ATCIFSR){
 800101a:	4b63      	ldr	r3, [pc, #396]	; (80011a8 <ESP01DecodeAT+0x4e0>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b04      	cmp	r3, #4
 8001020:	f040 81b6 	bne.w	8001390 <ESP01DecodeAT+0x6c8>
//						if(CmpResponse(_CIFSRSTAIP, iResponse, 12) == 1){
//						}
						if(CmpResponse(_CIFSRSTAMAC, iResponse, 13) == 1){
 8001024:	4b5e      	ldr	r3, [pc, #376]	; (80011a0 <ESP01DecodeAT+0x4d8>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	220d      	movs	r2, #13
 800102a:	4619      	mov	r1, r3
 800102c:	4864      	ldr	r0, [pc, #400]	; (80011c0 <ESP01DecodeAT+0x4f8>)
 800102e:	f7ff fe1b 	bl	8000c68 <CmpResponse>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	f040 81ab 	bne.w	8001390 <ESP01DecodeAT+0x6c8>
							ESP01TASKSTATE = STESP01ATCIPSTART;
 800103a:	4b5b      	ldr	r3, [pc, #364]	; (80011a8 <ESP01DecodeAT+0x4e0>)
 800103c:	2207      	movs	r2, #7
 800103e:	701a      	strb	r2, [r3, #0]
							timeOutResponse = 0;
 8001040:	4b5a      	ldr	r3, [pc, #360]	; (80011ac <ESP01DecodeAT+0x4e4>)
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
							lastESP01STATE = ESP01WIFICONNECTED;
 8001046:	4b5b      	ldr	r3, [pc, #364]	; (80011b4 <ESP01DecodeAT+0x4ec>)
 8001048:	2202      	movs	r2, #2
 800104a:	701a      	strb	r2, [r3, #0]
							triesAT = 0;
 800104c:	4b5d      	ldr	r3, [pc, #372]	; (80011c4 <ESP01DecodeAT+0x4fc>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
							if(doESP01WIFIConnected)
 8001052:	4b5d      	ldr	r3, [pc, #372]	; (80011c8 <ESP01DecodeAT+0x500>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 819a 	beq.w	8001390 <ESP01DecodeAT+0x6c8>
								doESP01WIFIConnected();
 800105c:	4b5a      	ldr	r3, [pc, #360]	; (80011c8 <ESP01DecodeAT+0x500>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4798      	blx	r3
						}
					}
				}
				break;
 8001062:	e195      	b.n	8001390 <ESP01DecodeAT+0x6c8>
			case 40:
				if(bufRX[iRXr] == '\n')
 8001064:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <ESP01DecodeAT+0x4cc>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b4b      	ldr	r3, [pc, #300]	; (8001198 <ESP01DecodeAT+0x4d0>)
 800106c:	5c9b      	ldrb	r3, [r3, r2]
 800106e:	2b0a      	cmp	r3, #10
 8001070:	d103      	bne.n	800107a <ESP01DecodeAT+0x3b2>
					header = 41;
 8001072:	4b4a      	ldr	r3, [pc, #296]	; (800119c <ESP01DecodeAT+0x4d4>)
 8001074:	2229      	movs	r2, #41	; 0x29
 8001076:	701a      	strb	r2, [r3, #0]
				else
					header = 0;
				break;
 8001078:	e191      	b.n	800139e <ESP01DecodeAT+0x6d6>
					header = 0;
 800107a:	4b48      	ldr	r3, [pc, #288]	; (800119c <ESP01DecodeAT+0x4d4>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
				break;
 8001080:	e18d      	b.n	800139e <ESP01DecodeAT+0x6d6>
			case 41:
				if(bufRX[iRXr] == '+')
 8001082:	4b44      	ldr	r3, [pc, #272]	; (8001194 <ESP01DecodeAT+0x4cc>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	4b43      	ldr	r3, [pc, #268]	; (8001198 <ESP01DecodeAT+0x4d0>)
 800108a:	5c9b      	ldrb	r3, [r3, r2]
 800108c:	2b2b      	cmp	r3, #43	; 0x2b
 800108e:	d103      	bne.n	8001098 <ESP01DecodeAT+0x3d0>
					header = 43;
 8001090:	4b42      	ldr	r3, [pc, #264]	; (800119c <ESP01DecodeAT+0x4d4>)
 8001092:	222b      	movs	r2, #43	; 0x2b
 8001094:	701a      	strb	r2, [r3, #0]
				else{
					header = 42;
					iResponse = iRXr;
				}
				break;
 8001096:	e182      	b.n	800139e <ESP01DecodeAT+0x6d6>
					header = 42;
 8001098:	4b40      	ldr	r3, [pc, #256]	; (800119c <ESP01DecodeAT+0x4d4>)
 800109a:	222a      	movs	r2, #42	; 0x2a
 800109c:	701a      	strb	r2, [r3, #0]
					iResponse = iRXr;
 800109e:	4b3d      	ldr	r3, [pc, #244]	; (8001194 <ESP01DecodeAT+0x4cc>)
 80010a0:	881a      	ldrh	r2, [r3, #0]
 80010a2:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <ESP01DecodeAT+0x4d8>)
 80010a4:	801a      	strh	r2, [r3, #0]
				break;
 80010a6:	e17a      	b.n	800139e <ESP01DecodeAT+0x6d6>
			case 42:
				if(bufRX[iRXr] == '\n'){
 80010a8:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <ESP01DecodeAT+0x4cc>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <ESP01DecodeAT+0x4d0>)
 80010b0:	5c9b      	ldrb	r3, [r3, r2]
 80010b2:	2b0a      	cmp	r3, #10
 80010b4:	f040 816e 	bne.w	8001394 <ESP01DecodeAT+0x6cc>
					header = 0;
 80010b8:	4b38      	ldr	r3, [pc, #224]	; (800119c <ESP01DecodeAT+0x4d4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
					if(CmpResponse(_OK, iResponse, 2) == 1){
 80010be:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <ESP01DecodeAT+0x4d8>)
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	2202      	movs	r2, #2
 80010c4:	4619      	mov	r1, r3
 80010c6:	4841      	ldr	r0, [pc, #260]	; (80011cc <ESP01DecodeAT+0x504>)
 80010c8:	f7ff fdce 	bl	8000c68 <CmpResponse>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d11d      	bne.n	800110e <ESP01DecodeAT+0x446>
						if(ESP01TASKSTATE == STESP01ATAT){
 80010d2:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <ESP01DecodeAT+0x4e0>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d105      	bne.n	80010e6 <ESP01DecodeAT+0x41e>
							timeOutResponse = 0;
 80010da:	4b34      	ldr	r3, [pc, #208]	; (80011ac <ESP01DecodeAT+0x4e4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
							ESP01TASKSTATE = STESP01ATCWMODE;
 80010e0:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <ESP01DecodeAT+0x4e0>)
 80010e2:	220a      	movs	r2, #10
 80010e4:	701a      	strb	r2, [r3, #0]
						}
						if(ESP01TASKSTATE == STESP01ATCWMODE){
 80010e6:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <ESP01DecodeAT+0x4e0>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b0a      	cmp	r3, #10
 80010ec:	d105      	bne.n	80010fa <ESP01DecodeAT+0x432>
							timeOutResponse = 0;
 80010ee:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <ESP01DecodeAT+0x4e4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
							ESP01TASKSTATE = STESP01ATCIPMUX;
 80010f4:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <ESP01DecodeAT+0x4e0>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	701a      	strb	r2, [r3, #0]
						}
						if(ESP01TASKSTATE == STESP01ATCIPMUX){
 80010fa:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <ESP01DecodeAT+0x4e0>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d105      	bne.n	800110e <ESP01DecodeAT+0x446>
							ESP01TASKSTATE = STESP01ATCLOSE;
 8001102:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <ESP01DecodeAT+0x4e0>)
 8001104:	2205      	movs	r2, #5
 8001106:	701a      	strb	r2, [r3, #0]
							timeOutResponse = 0;
 8001108:	4b28      	ldr	r3, [pc, #160]	; (80011ac <ESP01DecodeAT+0x4e4>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
						}
					}
					if(CmpResponse(_BUSY, iResponse, 4) == 1){
 800110e:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <ESP01DecodeAT+0x4d8>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	2204      	movs	r2, #4
 8001114:	4619      	mov	r1, r3
 8001116:	482e      	ldr	r0, [pc, #184]	; (80011d0 <ESP01DecodeAT+0x508>)
 8001118:	f7ff fda6 	bl	8000c68 <CmpResponse>
 800111c:	4603      	mov	r3, r0
 800111e:	2b01      	cmp	r3, #1
 8001120:	d10b      	bne.n	800113a <ESP01DecodeAT+0x472>
						ESP01TASKSTATE = STESP01ATAT;
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <ESP01DecodeAT+0x4e0>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
						triesAT = 1;
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <ESP01DecodeAT+0x4fc>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
						lastESP01STATE = ESP01WIFIDISCONNECTED;
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <ESP01DecodeAT+0x4ec>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
						timeOutResponse = 0;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <ESP01DecodeAT+0x4e4>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
					}
					if(CmpResponse(_SENDOK, iResponse, 7) == 1){
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <ESP01DecodeAT+0x4d8>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	2207      	movs	r2, #7
 8001140:	4619      	mov	r1, r3
 8001142:	4824      	ldr	r0, [pc, #144]	; (80011d4 <ESP01DecodeAT+0x50c>)
 8001144:	f7ff fd90 	bl	8000c68 <CmpResponse>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	f040 8122 	bne.w	8001394 <ESP01DecodeAT+0x6cc>
						timeOutResponse = 0;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <ESP01DecodeAT+0x4e4>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
					}
				}
				break;
 8001156:	e11d      	b.n	8001394 <ESP01DecodeAT+0x6cc>
			case 43:
				if(bufRX[iRXr] == 'I')
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <ESP01DecodeAT+0x4cc>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <ESP01DecodeAT+0x4d0>)
 8001160:	5c9b      	ldrb	r3, [r3, r2]
 8001162:	2b49      	cmp	r3, #73	; 0x49
 8001164:	d103      	bne.n	800116e <ESP01DecodeAT+0x4a6>
					header = 44;
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <ESP01DecodeAT+0x4d4>)
 8001168:	222c      	movs	r2, #44	; 0x2c
 800116a:	701a      	strb	r2, [r3, #0]
				else
					header = 42;
				break;
 800116c:	e117      	b.n	800139e <ESP01DecodeAT+0x6d6>
					header = 42;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <ESP01DecodeAT+0x4d4>)
 8001170:	222a      	movs	r2, #42	; 0x2a
 8001172:	701a      	strb	r2, [r3, #0]
				break;
 8001174:	e113      	b.n	800139e <ESP01DecodeAT+0x6d6>
			case 44:
				if(bufRX[iRXr] == 'P')
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <ESP01DecodeAT+0x4cc>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <ESP01DecodeAT+0x4d0>)
 800117e:	5c9b      	ldrb	r3, [r3, r2]
 8001180:	2b50      	cmp	r3, #80	; 0x50
 8001182:	d103      	bne.n	800118c <ESP01DecodeAT+0x4c4>
					header = 45;
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <ESP01DecodeAT+0x4d4>)
 8001186:	222d      	movs	r2, #45	; 0x2d
 8001188:	701a      	strb	r2, [r3, #0]
				else
					header = 42;
				break;
 800118a:	e108      	b.n	800139e <ESP01DecodeAT+0x6d6>
					header = 42;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <ESP01DecodeAT+0x4d4>)
 800118e:	222a      	movs	r2, #42	; 0x2a
 8001190:	701a      	strb	r2, [r3, #0]
				break;
 8001192:	e104      	b.n	800139e <ESP01DecodeAT+0x6d6>
 8001194:	2000022c 	.word	0x2000022c
 8001198:	20000028 	.word	0x20000028
 800119c:	20000228 	.word	0x20000228
 80011a0:	2000022e 	.word	0x2000022e
 80011a4:	0800a4ac 	.word	0x0800a4ac
 80011a8:	20000546 	.word	0x20000546
 80011ac:	200004bc 	.word	0x200004bc
 80011b0:	0800a4bc 	.word	0x0800a4bc
 80011b4:	20000547 	.word	0x20000547
 80011b8:	200004d0 	.word	0x200004d0
 80011bc:	0800a4d0 	.word	0x0800a4d0
 80011c0:	0800a594 	.word	0x0800a594
 80011c4:	200004c0 	.word	0x200004c0
 80011c8:	200004cc 	.word	0x200004cc
 80011cc:	0800a4e4 	.word	0x0800a4e4
 80011d0:	0800a518 	.word	0x0800a518
 80011d4:	0800a50c 	.word	0x0800a50c
			case 45:
				if(bufRX[iRXr] == 'D')
 80011d8:	4b7d      	ldr	r3, [pc, #500]	; (80013d0 <ESP01DecodeAT+0x708>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b7d      	ldr	r3, [pc, #500]	; (80013d4 <ESP01DecodeAT+0x70c>)
 80011e0:	5c9b      	ldrb	r3, [r3, r2]
 80011e2:	2b44      	cmp	r3, #68	; 0x44
 80011e4:	d103      	bne.n	80011ee <ESP01DecodeAT+0x526>
					header = 46;
 80011e6:	4b7c      	ldr	r3, [pc, #496]	; (80013d8 <ESP01DecodeAT+0x710>)
 80011e8:	222e      	movs	r2, #46	; 0x2e
 80011ea:	701a      	strb	r2, [r3, #0]
				else
					header = 42;
				break;
 80011ec:	e0d7      	b.n	800139e <ESP01DecodeAT+0x6d6>
					header = 42;
 80011ee:	4b7a      	ldr	r3, [pc, #488]	; (80013d8 <ESP01DecodeAT+0x710>)
 80011f0:	222a      	movs	r2, #42	; 0x2a
 80011f2:	701a      	strb	r2, [r3, #0]
				break;
 80011f4:	e0d3      	b.n	800139e <ESP01DecodeAT+0x6d6>
			case 46:
				if(bufRX[iRXr] == ','){
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <ESP01DecodeAT+0x708>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b75      	ldr	r3, [pc, #468]	; (80013d4 <ESP01DecodeAT+0x70c>)
 80011fe:	5c9b      	ldrb	r3, [r3, r2]
 8001200:	2b2c      	cmp	r3, #44	; 0x2c
 8001202:	d106      	bne.n	8001212 <ESP01DecodeAT+0x54a>
					header = 47;
 8001204:	4b74      	ldr	r3, [pc, #464]	; (80013d8 <ESP01DecodeAT+0x710>)
 8001206:	222f      	movs	r2, #47	; 0x2f
 8001208:	701a      	strb	r2, [r3, #0]
					ipdBytes = 0;
 800120a:	4b74      	ldr	r3, [pc, #464]	; (80013dc <ESP01DecodeAT+0x714>)
 800120c:	2200      	movs	r2, #0
 800120e:	801a      	strh	r2, [r3, #0]
				}
				else
					header = 42;
				break;
 8001210:	e0c5      	b.n	800139e <ESP01DecodeAT+0x6d6>
					header = 42;
 8001212:	4b71      	ldr	r3, [pc, #452]	; (80013d8 <ESP01DecodeAT+0x710>)
 8001214:	222a      	movs	r2, #42	; 0x2a
 8001216:	701a      	strb	r2, [r3, #0]
				break;
 8001218:	e0c1      	b.n	800139e <ESP01DecodeAT+0x6d6>
			case 47:
				if(bufRX[iRXr] == ':')
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <ESP01DecodeAT+0x708>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	4b6c      	ldr	r3, [pc, #432]	; (80013d4 <ESP01DecodeAT+0x70c>)
 8001222:	5c9b      	ldrb	r3, [r3, r2]
 8001224:	2b3a      	cmp	r3, #58	; 0x3a
 8001226:	d103      	bne.n	8001230 <ESP01DecodeAT+0x568>
					header = 48;
 8001228:	4b6b      	ldr	r3, [pc, #428]	; (80013d8 <ESP01DecodeAT+0x710>)
 800122a:	2230      	movs	r2, #48	; 0x30
 800122c:	701a      	strb	r2, [r3, #0]
					ipdBytes *= 10;
					ipdBytes += (bufRX[iRXr] - 0x30);
					nBytesDatagram = ipdBytes;
					iBufDatagram = 0;
				}
				break;
 800122e:	e0b6      	b.n	800139e <ESP01DecodeAT+0x6d6>
					ipdBytes *= 10;
 8001230:	4b6a      	ldr	r3, [pc, #424]	; (80013dc <ESP01DecodeAT+0x714>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4413      	add	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	b29a      	uxth	r2, r3
 800123e:	4b67      	ldr	r3, [pc, #412]	; (80013dc <ESP01DecodeAT+0x714>)
 8001240:	801a      	strh	r2, [r3, #0]
					ipdBytes += (bufRX[iRXr] - 0x30);
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <ESP01DecodeAT+0x708>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	4b62      	ldr	r3, [pc, #392]	; (80013d4 <ESP01DecodeAT+0x70c>)
 800124a:	5c9b      	ldrb	r3, [r3, r2]
 800124c:	b29a      	uxth	r2, r3
 800124e:	4b63      	ldr	r3, [pc, #396]	; (80013dc <ESP01DecodeAT+0x714>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	b29b      	uxth	r3, r3
 8001256:	3b30      	subs	r3, #48	; 0x30
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b60      	ldr	r3, [pc, #384]	; (80013dc <ESP01DecodeAT+0x714>)
 800125c:	801a      	strh	r2, [r3, #0]
					nBytesDatagram = ipdBytes;
 800125e:	4b5f      	ldr	r3, [pc, #380]	; (80013dc <ESP01DecodeAT+0x714>)
 8001260:	881a      	ldrh	r2, [r3, #0]
 8001262:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <ESP01DecodeAT+0x718>)
 8001264:	801a      	strh	r2, [r3, #0]
					iBufDatagram = 0;
 8001266:	4b5f      	ldr	r3, [pc, #380]	; (80013e4 <ESP01DecodeAT+0x71c>)
 8001268:	2200      	movs	r2, #0
 800126a:	801a      	strh	r2, [r3, #0]
				break;
 800126c:	e097      	b.n	800139e <ESP01DecodeAT+0x6d6>
			case 48:
				ipdBytes--;
 800126e:	4b5b      	ldr	r3, [pc, #364]	; (80013dc <ESP01DecodeAT+0x714>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	3b01      	subs	r3, #1
 8001274:	b29a      	uxth	r2, r3
 8001276:	4b59      	ldr	r3, [pc, #356]	; (80013dc <ESP01DecodeAT+0x714>)
 8001278:	801a      	strh	r2, [r3, #0]
				if(ipdBytes == 0){
 800127a:	4b58      	ldr	r3, [pc, #352]	; (80013dc <ESP01DecodeAT+0x714>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10f      	bne.n	80012a2 <ESP01DecodeAT+0x5da>
					header = 0;
 8001282:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <ESP01DecodeAT+0x710>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
					if(doESP01OnUDPData != NULL)
 8001288:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <ESP01DecodeAT+0x720>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 8083 	beq.w	8001398 <ESP01DecodeAT+0x6d0>
						doESP01OnUDPData(bufDatagram, nBytesDatagram);
 8001292:	4b55      	ldr	r3, [pc, #340]	; (80013e8 <ESP01DecodeAT+0x720>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a52      	ldr	r2, [pc, #328]	; (80013e0 <ESP01DecodeAT+0x718>)
 8001298:	8812      	ldrh	r2, [r2, #0]
 800129a:	4611      	mov	r1, r2
 800129c:	4853      	ldr	r0, [pc, #332]	; (80013ec <ESP01DecodeAT+0x724>)
 800129e:	4798      	blx	r3
				else{
					bufDatagram[iBufDatagram++] = bufRX[iRXr];
					if(iBufDatagram == SIZEBUFDATAGRAM)
						iBufDatagram = 0;
				}
				break;
 80012a0:	e07a      	b.n	8001398 <ESP01DecodeAT+0x6d0>
					bufDatagram[iBufDatagram++] = bufRX[iRXr];
 80012a2:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <ESP01DecodeAT+0x708>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	4619      	mov	r1, r3
 80012a8:	4b4e      	ldr	r3, [pc, #312]	; (80013e4 <ESP01DecodeAT+0x71c>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	b290      	uxth	r0, r2
 80012b0:	4a4c      	ldr	r2, [pc, #304]	; (80013e4 <ESP01DecodeAT+0x71c>)
 80012b2:	8010      	strh	r0, [r2, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <ESP01DecodeAT+0x70c>)
 80012b8:	5c59      	ldrb	r1, [r3, r1]
 80012ba:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <ESP01DecodeAT+0x724>)
 80012bc:	5499      	strb	r1, [r3, r2]
					if(iBufDatagram == SIZEBUFDATAGRAM)
 80012be:	4b49      	ldr	r3, [pc, #292]	; (80013e4 <ESP01DecodeAT+0x71c>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	2b80      	cmp	r3, #128	; 0x80
 80012c4:	d168      	bne.n	8001398 <ESP01DecodeAT+0x6d0>
						iBufDatagram = 0;
 80012c6:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <ESP01DecodeAT+0x71c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	801a      	strh	r2, [r3, #0]
				break;
 80012cc:	e064      	b.n	8001398 <ESP01DecodeAT+0x6d0>
			case 50:
				if(bufRX[iRXr] == '\n'){
 80012ce:	4b40      	ldr	r3, [pc, #256]	; (80013d0 <ESP01DecodeAT+0x708>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <ESP01DecodeAT+0x70c>)
 80012d6:	5c9b      	ldrb	r3, [r3, r2]
 80012d8:	2b0a      	cmp	r3, #10
 80012da:	d15f      	bne.n	800139c <ESP01DecodeAT+0x6d4>
					header = 0;
 80012dc:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <ESP01DecodeAT+0x710>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
					if(CmpResponse(_CONNECT, iResponse, 7) == 1){
 80012e2:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <ESP01DecodeAT+0x728>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	2207      	movs	r2, #7
 80012e8:	4619      	mov	r1, r3
 80012ea:	4842      	ldr	r0, [pc, #264]	; (80013f4 <ESP01DecodeAT+0x72c>)
 80012ec:	f7ff fcbc 	bl	8000c68 <CmpResponse>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d113      	bne.n	800131e <ESP01DecodeAT+0x656>
						if(ESP01TASKSTATE == STESP01ATCIPSTART){
 80012f6:	4b40      	ldr	r3, [pc, #256]	; (80013f8 <ESP01DecodeAT+0x730>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b07      	cmp	r3, #7
 80012fc:	d10f      	bne.n	800131e <ESP01DecodeAT+0x656>
							ESP01TASKSTATE = STESP01ATCONNECTED;
 80012fe:	4b3e      	ldr	r3, [pc, #248]	; (80013f8 <ESP01DecodeAT+0x730>)
 8001300:	2208      	movs	r2, #8
 8001302:	701a      	strb	r2, [r3, #0]
							lastESP01STATE = ESP01UDPREADY;
 8001304:	4b3d      	ldr	r3, [pc, #244]	; (80013fc <ESP01DecodeAT+0x734>)
 8001306:	2203      	movs	r2, #3
 8001308:	701a      	strb	r2, [r3, #0]
							if(doESP01UDPReady)
 800130a:	4b3d      	ldr	r3, [pc, #244]	; (8001400 <ESP01DecodeAT+0x738>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <ESP01DecodeAT+0x650>
								doESP01UDPReady();
 8001312:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <ESP01DecodeAT+0x738>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4798      	blx	r3
							timeOutResponse = 0;
 8001318:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <ESP01DecodeAT+0x73c>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
						}
					}
					if(CmpResponse(_DISCONNECTED, iResponse, 12) == 1){
 800131e:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <ESP01DecodeAT+0x728>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	220c      	movs	r2, #12
 8001324:	4619      	mov	r1, r3
 8001326:	4838      	ldr	r0, [pc, #224]	; (8001408 <ESP01DecodeAT+0x740>)
 8001328:	f7ff fc9e 	bl	8000c68 <CmpResponse>
 800132c:	4603      	mov	r3, r0
 800132e:	2b01      	cmp	r3, #1
 8001330:	d10f      	bne.n	8001352 <ESP01DecodeAT+0x68a>
						ESP01TASKSTATE = STESP01ATAT;
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <ESP01DecodeAT+0x730>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
						timeOutResponse = 0;
 8001338:	4b32      	ldr	r3, [pc, #200]	; (8001404 <ESP01DecodeAT+0x73c>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
						lastESP01STATE =  ESP01WIFIDISCONNECTED;
 800133e:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <ESP01DecodeAT+0x734>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
						if(doESP01WIFIDisconnected)
 8001344:	4b31      	ldr	r3, [pc, #196]	; (800140c <ESP01DecodeAT+0x744>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <ESP01DecodeAT+0x68a>
							doESP01WIFIDisconnected();
 800134c:	4b2f      	ldr	r3, [pc, #188]	; (800140c <ESP01DecodeAT+0x744>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4798      	blx	r3
					}
					if(CmpResponse(_CLOSED, iResponse, 6) == 1){
 8001352:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <ESP01DecodeAT+0x728>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	2206      	movs	r2, #6
 8001358:	4619      	mov	r1, r3
 800135a:	482d      	ldr	r0, [pc, #180]	; (8001410 <ESP01DecodeAT+0x748>)
 800135c:	f7ff fc84 	bl	8000c68 <CmpResponse>
 8001360:	4603      	mov	r3, r0
 8001362:	2b01      	cmp	r3, #1
 8001364:	d11a      	bne.n	800139c <ESP01DecodeAT+0x6d4>
						if(ESP01TASKSTATE == STESP01ATCLOSE){
 8001366:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <ESP01DecodeAT+0x730>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d116      	bne.n	800139c <ESP01DecodeAT+0x6d4>
							ESP01TASKSTATE = STESP01ATCIPSTART;
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <ESP01DecodeAT+0x730>)
 8001370:	2207      	movs	r2, #7
 8001372:	701a      	strb	r2, [r3, #0]
							timeOutResponse = 0;
 8001374:	4b23      	ldr	r3, [pc, #140]	; (8001404 <ESP01DecodeAT+0x73c>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
						}
					}
				}
				break;
 800137a:	e00f      	b.n	800139c <ESP01DecodeAT+0x6d4>
			default:
				header = 0;
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <ESP01DecodeAT+0x710>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	e00c      	b.n	800139e <ESP01DecodeAT+0x6d6>
				break;
 8001384:	bf00      	nop
 8001386:	e00a      	b.n	800139e <ESP01DecodeAT+0x6d6>
				break;
 8001388:	bf00      	nop
 800138a:	e008      	b.n	800139e <ESP01DecodeAT+0x6d6>
				break;
 800138c:	bf00      	nop
 800138e:	e006      	b.n	800139e <ESP01DecodeAT+0x6d6>
				break;
 8001390:	bf00      	nop
 8001392:	e004      	b.n	800139e <ESP01DecodeAT+0x6d6>
				break;
 8001394:	bf00      	nop
 8001396:	e002      	b.n	800139e <ESP01DecodeAT+0x6d6>
				break;
 8001398:	bf00      	nop
 800139a:	e000      	b.n	800139e <ESP01DecodeAT+0x6d6>
				break;
 800139c:	bf00      	nop
		}

		iRXr++;
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <ESP01DecodeAT+0x708>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <ESP01DecodeAT+0x708>)
 80013a8:	801a      	strh	r2, [r3, #0]
		if(iRXr == SIZEBUFRX)
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <ESP01DecodeAT+0x708>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013b2:	d102      	bne.n	80013ba <ESP01DecodeAT+0x6f2>
			iRXr = 0;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <ESP01DecodeAT+0x708>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	801a      	strh	r2, [r3, #0]
	while(iRXr != index){
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <ESP01DecodeAT+0x708>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	88fa      	ldrh	r2, [r7, #6]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f47f ac88 	bne.w	8000cd6 <ESP01DecodeAT+0xe>
	}
}
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000022c 	.word	0x2000022c
 80013d4:	20000028 	.word	0x20000028
 80013d8:	20000228 	.word	0x20000228
 80013dc:	20000230 	.word	0x20000230
 80013e0:	20000232 	.word	0x20000232
 80013e4:	20000234 	.word	0x20000234
 80013e8:	200004c8 	.word	0x200004c8
 80013ec:	2000043c 	.word	0x2000043c
 80013f0:	2000022e 	.word	0x2000022e
 80013f4:	0800a4e8 	.word	0x0800a4e8
 80013f8:	20000546 	.word	0x20000546
 80013fc:	20000547 	.word	0x20000547
 8001400:	200004d4 	.word	0x200004d4
 8001404:	200004bc 	.word	0x200004bc
 8001408:	0800a4fc 	.word	0x0800a4fc
 800140c:	200004d0 	.word	0x200004d0
 8001410:	0800a4f4 	.word	0x0800a4f4

08001414 <HAL_ADC_ConvCpltCallback>:
void ESP01UDPReady();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001414:	b5b0      	push	{r4, r5, r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001424:	f040 8099 	bne.w	800155a <HAL_ADC_ConvCpltCallback+0x146>
		ADCData[indexADCData][7] = ADC3DataAux;
 8001428:	4b54      	ldr	r3, [pc, #336]	; (800157c <HAL_ADC_ConvCpltCallback+0x168>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	4b54      	ldr	r3, [pc, #336]	; (8001580 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001430:	8819      	ldrh	r1, [r3, #0]
 8001432:	4a54      	ldr	r2, [pc, #336]	; (8001584 <HAL_ADC_ConvCpltCallback+0x170>)
 8001434:	0103      	lsls	r3, r0, #4
 8001436:	4413      	add	r3, r2
 8001438:	330e      	adds	r3, #14
 800143a:	460a      	mov	r2, r1
 800143c:	801a      	strh	r2, [r3, #0]
		sumADCData10ms[0] += ADCData[indexADCData][0];
 800143e:	4b52      	ldr	r3, [pc, #328]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a4e      	ldr	r2, [pc, #312]	; (800157c <HAL_ADC_ConvCpltCallback+0x168>)
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	494f      	ldr	r1, [pc, #316]	; (8001584 <HAL_ADC_ConvCpltCallback+0x170>)
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	440a      	add	r2, r1
 800144c:	8812      	ldrh	r2, [r2, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a4d      	ldr	r2, [pc, #308]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 8001452:	6013      	str	r3, [r2, #0]
		sumADCData10ms[1] += ADCData[indexADCData][1];
 8001454:	4b4c      	ldr	r3, [pc, #304]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a48      	ldr	r2, [pc, #288]	; (800157c <HAL_ADC_ConvCpltCallback+0x168>)
 800145a:	7812      	ldrb	r2, [r2, #0]
 800145c:	4949      	ldr	r1, [pc, #292]	; (8001584 <HAL_ADC_ConvCpltCallback+0x170>)
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	440a      	add	r2, r1
 8001462:	3202      	adds	r2, #2
 8001464:	8812      	ldrh	r2, [r2, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a47      	ldr	r2, [pc, #284]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 800146a:	6053      	str	r3, [r2, #4]
		sumADCData10ms[2] += ADCData[indexADCData][2];
 800146c:	4b46      	ldr	r3, [pc, #280]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	4a42      	ldr	r2, [pc, #264]	; (800157c <HAL_ADC_ConvCpltCallback+0x168>)
 8001472:	7812      	ldrb	r2, [r2, #0]
 8001474:	4943      	ldr	r1, [pc, #268]	; (8001584 <HAL_ADC_ConvCpltCallback+0x170>)
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	440a      	add	r2, r1
 800147a:	3204      	adds	r2, #4
 800147c:	8812      	ldrh	r2, [r2, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a41      	ldr	r2, [pc, #260]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 8001482:	6093      	str	r3, [r2, #8]
		sumADCData10ms[3] += ADCData[indexADCData][3];
 8001484:	4b40      	ldr	r3, [pc, #256]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	4a3c      	ldr	r2, [pc, #240]	; (800157c <HAL_ADC_ConvCpltCallback+0x168>)
 800148a:	7812      	ldrb	r2, [r2, #0]
 800148c:	493d      	ldr	r1, [pc, #244]	; (8001584 <HAL_ADC_ConvCpltCallback+0x170>)
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	440a      	add	r2, r1
 8001492:	3206      	adds	r2, #6
 8001494:	8812      	ldrh	r2, [r2, #0]
 8001496:	4413      	add	r3, r2
 8001498:	4a3b      	ldr	r2, [pc, #236]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 800149a:	60d3      	str	r3, [r2, #12]
		sumADCData10ms[4] += ADCData[indexADCData][4];
 800149c:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	4a36      	ldr	r2, [pc, #216]	; (800157c <HAL_ADC_ConvCpltCallback+0x168>)
 80014a2:	7812      	ldrb	r2, [r2, #0]
 80014a4:	4937      	ldr	r1, [pc, #220]	; (8001584 <HAL_ADC_ConvCpltCallback+0x170>)
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	440a      	add	r2, r1
 80014aa:	3208      	adds	r2, #8
 80014ac:	8812      	ldrh	r2, [r2, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a35      	ldr	r2, [pc, #212]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 80014b2:	6113      	str	r3, [r2, #16]
		sumADCData10ms[5] += ADCData[indexADCData][5];
 80014b4:	4b34      	ldr	r3, [pc, #208]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	4a30      	ldr	r2, [pc, #192]	; (800157c <HAL_ADC_ConvCpltCallback+0x168>)
 80014ba:	7812      	ldrb	r2, [r2, #0]
 80014bc:	4931      	ldr	r1, [pc, #196]	; (8001584 <HAL_ADC_ConvCpltCallback+0x170>)
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	440a      	add	r2, r1
 80014c2:	320a      	adds	r2, #10
 80014c4:	8812      	ldrh	r2, [r2, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	4a2f      	ldr	r2, [pc, #188]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 80014ca:	6153      	str	r3, [r2, #20]
		sumADCData10ms[6] += ADCData[indexADCData][6];
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a2a      	ldr	r2, [pc, #168]	; (800157c <HAL_ADC_ConvCpltCallback+0x168>)
 80014d2:	7812      	ldrb	r2, [r2, #0]
 80014d4:	492b      	ldr	r1, [pc, #172]	; (8001584 <HAL_ADC_ConvCpltCallback+0x170>)
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	440a      	add	r2, r1
 80014da:	320c      	adds	r2, #12
 80014dc:	8812      	ldrh	r2, [r2, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a29      	ldr	r2, [pc, #164]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 80014e2:	6193      	str	r3, [r2, #24]
		sumADCData10ms[7] += ADCData[indexADCData][7];
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	4a24      	ldr	r2, [pc, #144]	; (800157c <HAL_ADC_ConvCpltCallback+0x168>)
 80014ea:	7812      	ldrb	r2, [r2, #0]
 80014ec:	4925      	ldr	r1, [pc, #148]	; (8001584 <HAL_ADC_ConvCpltCallback+0x170>)
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	440a      	add	r2, r1
 80014f2:	320e      	adds	r2, #14
 80014f4:	8812      	ldrh	r2, [r2, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a23      	ldr	r2, [pc, #140]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 80014fa:	61d3      	str	r3, [r2, #28]
		indexADCData++;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <HAL_ADC_ConvCpltCallback+0x168>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_ADC_ConvCpltCallback+0x168>)
 8001506:	701a      	strb	r2, [r3, #0]
		indexADCData &= (ADCDATASIZE-1);
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_ADC_ConvCpltCallback+0x168>)
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_ADC_ConvCpltCallback+0x168>)
 800150e:	701a      	strb	r2, [r3, #0]
		if(timeOutAnalogAux){
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <HAL_ADC_ConvCpltCallback+0x178>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d020      	beq.n	800155a <HAL_ADC_ConvCpltCallback+0x146>
			timeOutAnalogAux--;
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_ADC_ConvCpltCallback+0x178>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	3b01      	subs	r3, #1
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_ADC_ConvCpltCallback+0x178>)
 8001522:	801a      	strh	r2, [r3, #0]
			if(!timeOutAnalogAux){
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_ADC_ConvCpltCallback+0x178>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d116      	bne.n	800155a <HAL_ADC_ConvCpltCallback+0x146>
				timeOutAnalogAux = timeOutAnalog;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_ADC_ConvCpltCallback+0x17c>)
 800152e:	881a      	ldrh	r2, [r3, #0]
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_ADC_ConvCpltCallback+0x178>)
 8001532:	801a      	strh	r2, [r3, #0]
				iADCDataReady = indexADCData;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_ADC_ConvCpltCallback+0x168>)
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <HAL_ADC_ConvCpltCallback+0x180>)
 800153a:	701a      	strb	r2, [r3, #0]
				memcpy(sumADCDataLock, sumADCData10ms, sizeof(sumADCDataLock));
 800153c:	4a16      	ldr	r2, [pc, #88]	; (8001598 <HAL_ADC_ConvCpltCallback+0x184>)
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_ADC_ConvCpltCallback+0x174>)
 8001540:	4614      	mov	r4, r2
 8001542:	461d      	mov	r5, r3
 8001544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001548:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800154c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				ANALOGREADY = 1;
 8001550:	4a12      	ldr	r2, [pc, #72]	; (800159c <HAL_ADC_ConvCpltCallback+0x188>)
 8001552:	7813      	ldrb	r3, [r2, #0]
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	7013      	strb	r3, [r2, #0]
			}
		}
	}
	if(hadc->Instance == ADC3){
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d106      	bne.n	8001572 <HAL_ADC_ConvCpltCallback+0x15e>
		ADC3DataAux = HAL_ADC_GetValue(&hadc3);
 8001564:	480f      	ldr	r0, [pc, #60]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x190>)
 8001566:	f002 ff49 	bl	80043fc <HAL_ADC_GetValue>
 800156a:	4603      	mov	r3, r0
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001570:	801a      	strh	r2, [r3, #0]
	}
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bdb0      	pop	{r4, r5, r7, pc}
 800157a:	bf00      	nop
 800157c:	20001be0 	.word	0x20001be0
 8001580:	20001be4 	.word	0x20001be4
 8001584:	20000be0 	.word	0x20000be0
 8001588:	20001be8 	.word	0x20001be8
 800158c:	20001c2a 	.word	0x20001c2a
 8001590:	20001c28 	.word	0x20001c28
 8001594:	20001be2 	.word	0x20001be2
 8001598:	20001c08 	.word	0x20001c08
 800159c:	20000820 	.word	0x20000820
 80015a0:	50000400 	.word	0x50000400
 80015a4:	200005ec 	.word	0x200005ec

080015a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
//			memcpy(sumADCDataLock, sumADCData10ms, sizeof(sumADCDataLock));
//			ANALOGREADY = 1;
//		}
//	}

	sumADCData10ms[0] -= ADCData[indexADCData10ms][0];
 80015b0:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a3e      	ldr	r2, [pc, #248]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80015b6:	7812      	ldrb	r2, [r2, #0]
 80015b8:	493e      	ldr	r1, [pc, #248]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	440a      	add	r2, r1
 80015be:	8812      	ldrh	r2, [r2, #0]
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	4a3a      	ldr	r2, [pc, #232]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 80015c4:	6013      	str	r3, [r2, #0]
	sumADCData10ms[1] -= ADCData[indexADCData10ms][1];
 80015c6:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4a39      	ldr	r2, [pc, #228]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	4939      	ldr	r1, [pc, #228]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	440a      	add	r2, r1
 80015d4:	3202      	adds	r2, #2
 80015d6:	8812      	ldrh	r2, [r2, #0]
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	4a34      	ldr	r2, [pc, #208]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 80015dc:	6053      	str	r3, [r2, #4]
	sumADCData10ms[2] -= ADCData[indexADCData10ms][2];
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	4a33      	ldr	r2, [pc, #204]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	4933      	ldr	r1, [pc, #204]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015e8:	0112      	lsls	r2, r2, #4
 80015ea:	440a      	add	r2, r1
 80015ec:	3204      	adds	r2, #4
 80015ee:	8812      	ldrh	r2, [r2, #0]
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	4a2e      	ldr	r2, [pc, #184]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 80015f4:	6093      	str	r3, [r2, #8]
	sumADCData10ms[3] -= ADCData[indexADCData10ms][3];
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	4a2d      	ldr	r2, [pc, #180]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80015fc:	7812      	ldrb	r2, [r2, #0]
 80015fe:	492d      	ldr	r1, [pc, #180]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	440a      	add	r2, r1
 8001604:	3206      	adds	r2, #6
 8001606:	8812      	ldrh	r2, [r2, #0]
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	4a28      	ldr	r2, [pc, #160]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 800160c:	60d3      	str	r3, [r2, #12]
	sumADCData10ms[4] -= ADCData[indexADCData10ms][4];
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	4927      	ldr	r1, [pc, #156]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	440a      	add	r2, r1
 800161c:	3208      	adds	r2, #8
 800161e:	8812      	ldrh	r2, [r2, #0]
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	4a22      	ldr	r2, [pc, #136]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001624:	6113      	str	r3, [r2, #16]
	sumADCData10ms[5] -= ADCData[indexADCData10ms][5];
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800162c:	7812      	ldrb	r2, [r2, #0]
 800162e:	4921      	ldr	r1, [pc, #132]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	440a      	add	r2, r1
 8001634:	320a      	adds	r2, #10
 8001636:	8812      	ldrh	r2, [r2, #0]
 8001638:	1a9b      	subs	r3, r3, r2
 800163a:	4a1c      	ldr	r2, [pc, #112]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 800163c:	6153      	str	r3, [r2, #20]
	sumADCData10ms[6] -= ADCData[indexADCData10ms][6];
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001644:	7812      	ldrb	r2, [r2, #0]
 8001646:	491b      	ldr	r1, [pc, #108]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	440a      	add	r2, r1
 800164c:	320c      	adds	r2, #12
 800164e:	8812      	ldrh	r2, [r2, #0]
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	4a16      	ldr	r2, [pc, #88]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001654:	6193      	str	r3, [r2, #24]
	sumADCData10ms[7] -= ADCData[indexADCData10ms][7];
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800165c:	7812      	ldrb	r2, [r2, #0]
 800165e:	4915      	ldr	r1, [pc, #84]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	440a      	add	r2, r1
 8001664:	320e      	adds	r2, #14
 8001666:	8812      	ldrh	r2, [r2, #0]
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	4a10      	ldr	r2, [pc, #64]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 800166c:	61d3      	str	r3, [r2, #28]
	indexADCData10ms++;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001678:	701a      	strb	r2, [r3, #0]
	indexADCData10ms &= (ADCDATASIZE - 1);
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001680:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc3);
 8001682:	480d      	ldr	r0, [pc, #52]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001684:	f002 fd7a 	bl	800417c <HAL_ADC_Start_IT>
	HAL_ADC_Start(&hadc2);
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x114>)
 800168a:	f002 fc61 	bl	8003f50 <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *)&ADCData[indexADCData], 4);
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001696:	4413      	add	r3, r2
 8001698:	2204      	movs	r2, #4
 800169a:	4619      	mov	r1, r3
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800169e:	f003 f9cb 	bl	8004a38 <HAL_ADCEx_MultiModeStart_DMA>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20001be8 	.word	0x20001be8
 80016b0:	20001be1 	.word	0x20001be1
 80016b4:	20000be0 	.word	0x20000be0
 80016b8:	200005ec 	.word	0x200005ec
 80016bc:	2000059c 	.word	0x2000059c
 80016c0:	20001be0 	.word	0x20001be0
 80016c4:	2000054c 	.word	0x2000054c

080016c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a3a      	ldr	r2, [pc, #232]	; (80017c0 <HAL_UART_RxCpltCallback+0xf8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d152      	bne.n	8001780 <HAL_UART_RxCpltCallback+0xb8>
		if(ESP01DEBUG){
 80016da:	4b3a      	ldr	r3, [pc, #232]	; (80017c4 <HAL_UART_RxCpltCallback+0xfc>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d033      	beq.n	8001750 <HAL_UART_RxCpltCallback+0x88>
			if(RX.buf[RX.iw] == '+'){
 80016e8:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <HAL_UART_RxCpltCallback+0x100>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a36      	ldr	r2, [pc, #216]	; (80017c8 <HAL_UART_RxCpltCallback+0x100>)
 80016ee:	88d2      	ldrh	r2, [r2, #6]
 80016f0:	4413      	add	r3, r2
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b2b      	cmp	r3, #43	; 0x2b
 80016f6:	d11e      	bne.n	8001736 <HAL_UART_RxCpltCallback+0x6e>
				if(countPlus == 0)
 80016f8:	4b34      	ldr	r3, [pc, #208]	; (80017cc <HAL_UART_RxCpltCallback+0x104>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <HAL_UART_RxCpltCallback+0x3e>
					timeOutPlus = 3;
 8001700:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <HAL_UART_RxCpltCallback+0x108>)
 8001702:	2203      	movs	r2, #3
 8001704:	701a      	strb	r2, [r3, #0]
				countPlus++;
 8001706:	4b31      	ldr	r3, [pc, #196]	; (80017cc <HAL_UART_RxCpltCallback+0x104>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <HAL_UART_RxCpltCallback+0x104>)
 8001710:	701a      	strb	r2, [r3, #0]
				if(countPlus==3 && timeOutPlus!=0){
 8001712:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <HAL_UART_RxCpltCallback+0x104>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d110      	bne.n	800173c <HAL_UART_RxCpltCallback+0x74>
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <HAL_UART_RxCpltCallback+0x108>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00c      	beq.n	800173c <HAL_UART_RxCpltCallback+0x74>
					ESP01DEBUG = 0;
 8001722:	4a28      	ldr	r2, [pc, #160]	; (80017c4 <HAL_UART_RxCpltCallback+0xfc>)
 8001724:	7813      	ldrb	r3, [r2, #0]
 8001726:	f36f 0382 	bfc	r3, #2, #1
 800172a:	7013      	strb	r3, [r2, #0]
					ledStatus = LEDIDLE;
 800172c:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_UART_RxCpltCallback+0x10c>)
 800172e:	f04f 4268 	mov.w	r2, #3892314112	; 0xe8000000
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e002      	b.n	800173c <HAL_UART_RxCpltCallback+0x74>
				}
			}
			else
				countPlus = 0;
 8001736:	4b25      	ldr	r3, [pc, #148]	; (80017cc <HAL_UART_RxCpltCallback+0x104>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]

			PutByteOnTx(&TXESP01, RX.buf[RX.iw]);
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <HAL_UART_RxCpltCallback+0x100>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a21      	ldr	r2, [pc, #132]	; (80017c8 <HAL_UART_RxCpltCallback+0x100>)
 8001742:	88d2      	ldrh	r2, [r2, #6]
 8001744:	4413      	add	r3, r2
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	4823      	ldr	r0, [pc, #140]	; (80017d8 <HAL_UART_RxCpltCallback+0x110>)
 800174c:	f000 f984 	bl	8001a58 <PutByteOnTx>
		}

		RX.iw++;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_UART_RxCpltCallback+0x100>)
 8001752:	88db      	ldrh	r3, [r3, #6]
 8001754:	3301      	adds	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_UART_RxCpltCallback+0x100>)
 800175a:	80da      	strh	r2, [r3, #6]
		RX.iw &= RX.maskSize;
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_UART_RxCpltCallback+0x100>)
 800175e:	88da      	ldrh	r2, [r3, #6]
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_UART_RxCpltCallback+0x100>)
 8001762:	8a1b      	ldrh	r3, [r3, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	b29a      	uxth	r2, r3
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_UART_RxCpltCallback+0x100>)
 800176a:	80da      	strh	r2, [r3, #6]
		HAL_UART_Receive_IT(&huart2, &RX.buf[RX.iw], 1);
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_UART_RxCpltCallback+0x100>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a15      	ldr	r2, [pc, #84]	; (80017c8 <HAL_UART_RxCpltCallback+0x100>)
 8001772:	88d2      	ldrh	r2, [r2, #6]
 8001774:	4413      	add	r3, r2
 8001776:	2201      	movs	r2, #1
 8001778:	4619      	mov	r1, r3
 800177a:	4818      	ldr	r0, [pc, #96]	; (80017dc <HAL_UART_RxCpltCallback+0x114>)
 800177c:	f007 fc9a 	bl	80090b4 <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART3){
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a16      	ldr	r2, [pc, #88]	; (80017e0 <HAL_UART_RxCpltCallback+0x118>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d116      	bne.n	80017b8 <HAL_UART_RxCpltCallback+0xf0>
		if(ESP01DEBUG){
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_UART_RxCpltCallback+0xfc>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_UART_RxCpltCallback+0xdc>
			PutByteOnTx(&TX, auxDataRXESP01);
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_UART_RxCpltCallback+0x11c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	4812      	ldr	r0, [pc, #72]	; (80017e8 <HAL_UART_RxCpltCallback+0x120>)
 80017a0:	f000 f95a 	bl	8001a58 <PutByteOnTx>
		}
		ESP01SetRxByte(auxDataRXESP01);
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_UART_RxCpltCallback+0x11c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fe8d 	bl	80004c8 <ESP01SetRxByte>
		HAL_UART_Receive_IT(&huart3, &auxDataRXESP01, 1);
 80017ae:	2201      	movs	r2, #1
 80017b0:	490c      	ldr	r1, [pc, #48]	; (80017e4 <HAL_UART_RxCpltCallback+0x11c>)
 80017b2:	480e      	ldr	r0, [pc, #56]	; (80017ec <HAL_UART_RxCpltCallback+0x124>)
 80017b4:	f007 fc7e 	bl	80090b4 <HAL_UART_Receive_IT>
//		RXESP01.iw++;
//		RXESP01.iw &= RXESP01.maskSize;
//		HAL_UART_Receive_IT(&huart3, &RXESP01.buf[RXESP01.iw], 1);
	}
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40004400 	.word	0x40004400
 80017c4:	20000820 	.word	0x20000820
 80017c8:	2000082c 	.word	0x2000082c
 80017cc:	20001c40 	.word	0x20001c40
 80017d0:	20001c41 	.word	0x20001c41
 80017d4:	20001c34 	.word	0x20001c34
 80017d8:	20000864 	.word	0x20000864
 80017dc:	20000718 	.word	0x20000718
 80017e0:	40004800 	.word	0x40004800
 80017e4:	20000a58 	.word	0x20000a58
 80017e8:	20000854 	.word	0x20000854
 80017ec:	2000079c 	.word	0x2000079c

080017f0 <DecodeHeader>:


void DecodeHeader(_sRx *RX){
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    i = RX->iw;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	88db      	ldrh	r3, [r3, #6]
 80017fc:	73fb      	strb	r3, [r7, #15]

    while(RX->ir != i){
 80017fe:	e0e5      	b.n	80019cc <DecodeHeader+0x1dc>
       switch(RX->header){
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	791b      	ldrb	r3, [r3, #4]
 8001804:	2b06      	cmp	r3, #6
 8001806:	f200 80c4 	bhi.w	8001992 <DecodeHeader+0x1a2>
 800180a:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <DecodeHeader+0x20>)
 800180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001810:	0800182d 	.word	0x0800182d
 8001814:	0800184d 	.word	0x0800184d
 8001818:	08001879 	.word	0x08001879
 800181c:	080018a5 	.word	0x080018a5
 8001820:	080018d1 	.word	0x080018d1
 8001824:	080018eb 	.word	0x080018eb
 8001828:	08001943 	.word	0x08001943
        case 0:
            if(RX->buf[RX->ir] == 'U'){
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	8912      	ldrh	r2, [r2, #8]
 8001834:	4413      	add	r3, r2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b55      	cmp	r3, #85	; 0x55
 800183a:	f040 80ae 	bne.w	800199a <DecodeHeader+0x1aa>
                RX->header = 1;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	711a      	strb	r2, [r3, #4]
                RX->timeout = 5;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2205      	movs	r2, #5
 8001848:	731a      	strb	r2, [r3, #12]
            }
            break;
 800184a:	e0a6      	b.n	800199a <DecodeHeader+0x1aa>
        case 1:
            if(RX->buf[RX->ir] == 'N')
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	8912      	ldrh	r2, [r2, #8]
 8001854:	4413      	add	r3, r2
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b4e      	cmp	r3, #78	; 0x4e
 800185a:	d103      	bne.n	8001864 <DecodeHeader+0x74>
                RX->header = 2;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	711a      	strb	r2, [r3, #4]
            else{
                RX->header = 0;
                RX->ir--;
            }
            break;
 8001862:	e09d      	b.n	80019a0 <DecodeHeader+0x1b0>
                RX->header = 0;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	711a      	strb	r2, [r3, #4]
                RX->ir--;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	891b      	ldrh	r3, [r3, #8]
 800186e:	3b01      	subs	r3, #1
 8001870:	b29a      	uxth	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	811a      	strh	r2, [r3, #8]
            break;
 8001876:	e093      	b.n	80019a0 <DecodeHeader+0x1b0>
        case 2:
            if(RX->buf[RX->ir] == 'E')
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	8912      	ldrh	r2, [r2, #8]
 8001880:	4413      	add	r3, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b45      	cmp	r3, #69	; 0x45
 8001886:	d103      	bne.n	8001890 <DecodeHeader+0xa0>
                RX->header = 3;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2203      	movs	r2, #3
 800188c:	711a      	strb	r2, [r3, #4]
            else{
                RX->header = 0;
                RX->ir--;
            }
            break;
 800188e:	e087      	b.n	80019a0 <DecodeHeader+0x1b0>
                RX->header = 0;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	711a      	strb	r2, [r3, #4]
                RX->ir--;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	891b      	ldrh	r3, [r3, #8]
 800189a:	3b01      	subs	r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	811a      	strh	r2, [r3, #8]
            break;
 80018a2:	e07d      	b.n	80019a0 <DecodeHeader+0x1b0>
        case 3:
            if(RX->buf[RX->ir] == 'R')
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	8912      	ldrh	r2, [r2, #8]
 80018ac:	4413      	add	r3, r2
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b52      	cmp	r3, #82	; 0x52
 80018b2:	d103      	bne.n	80018bc <DecodeHeader+0xcc>
                RX->header = 4;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2204      	movs	r2, #4
 80018b8:	711a      	strb	r2, [r3, #4]
            else{
                RX->header = 0;
                RX->ir--;
            }
            break;
 80018ba:	e071      	b.n	80019a0 <DecodeHeader+0x1b0>
                RX->header = 0;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	711a      	strb	r2, [r3, #4]
                RX->ir--;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	891b      	ldrh	r3, [r3, #8]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	811a      	strh	r2, [r3, #8]
            break;
 80018ce:	e067      	b.n	80019a0 <DecodeHeader+0x1b0>
        case 4:
            RX->nbytes = RX->buf[RX->ir];
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	8912      	ldrh	r2, [r2, #8]
 80018d8:	4413      	add	r3, r2
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b29a      	uxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	81da      	strh	r2, [r3, #14]
            RX->header = 5;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2205      	movs	r2, #5
 80018e6:	711a      	strb	r2, [r3, #4]
            break;
 80018e8:	e05a      	b.n	80019a0 <DecodeHeader+0x1b0>
        case 5:
            if(RX->buf[RX->ir] == ':'){
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	8912      	ldrh	r2, [r2, #8]
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b3a      	cmp	r3, #58	; 0x3a
 80018f8:	d119      	bne.n	800192e <DecodeHeader+0x13e>
                RX->header = 6;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2206      	movs	r2, #6
 80018fe:	711a      	strb	r2, [r3, #4]
                RX->iData = RX->ir + 1;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	891b      	ldrh	r3, [r3, #8]
 8001904:	3301      	adds	r3, #1
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	815a      	strh	r2, [r3, #10]
                RX->iData &= RX->maskSize;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	895a      	ldrh	r2, [r3, #10]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	8a1b      	ldrh	r3, [r3, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	b29a      	uxth	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	815a      	strh	r2, [r3, #10]
                RX->cks = 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ RX->nbytes;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	89db      	ldrh	r3, [r3, #14]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 8001926:	b2da      	uxtb	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	735a      	strb	r2, [r3, #13]
            }
            else{
                RX->header = 0;
                RX->ir--;
            }
            break;
 800192c:	e038      	b.n	80019a0 <DecodeHeader+0x1b0>
                RX->header = 0;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	711a      	strb	r2, [r3, #4]
                RX->ir--;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	891b      	ldrh	r3, [r3, #8]
 8001938:	3b01      	subs	r3, #1
 800193a:	b29a      	uxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	811a      	strh	r2, [r3, #8]
            break;
 8001940:	e02e      	b.n	80019a0 <DecodeHeader+0x1b0>
        case 6:
            RX->nbytes--;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	89db      	ldrh	r3, [r3, #14]
 8001946:	3b01      	subs	r3, #1
 8001948:	b29a      	uxth	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	81da      	strh	r2, [r3, #14]
            if(RX->nbytes > 0){
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	89db      	ldrh	r3, [r3, #14]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00c      	beq.n	8001970 <DecodeHeader+0x180>
                RX->cks ^= RX->buf[RX->ir];
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	7b5a      	ldrb	r2, [r3, #13]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	8909      	ldrh	r1, [r1, #8]
 8001962:	440b      	add	r3, r1
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	4053      	eors	r3, r2
 8001968:	b2da      	uxtb	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	735a      	strb	r2, [r3, #13]
            else{
                RX->header = 0;
                if(RX->cks == RX->buf[RX->ir])
                    RX->ISCMD = 1;
            }
            break;
 800196e:	e016      	b.n	800199e <DecodeHeader+0x1ae>
                RX->header = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	711a      	strb	r2, [r3, #4]
                if(RX->cks == RX->buf[RX->ir])
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7b5a      	ldrb	r2, [r3, #13]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	8909      	ldrh	r1, [r1, #8]
 8001982:	440b      	add	r3, r1
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d109      	bne.n	800199e <DecodeHeader+0x1ae>
                    RX->ISCMD = 1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	749a      	strb	r2, [r3, #18]
            break;
 8001990:	e005      	b.n	800199e <DecodeHeader+0x1ae>
        default:
            RX->header = 0;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	711a      	strb	r2, [r3, #4]
 8001998:	e002      	b.n	80019a0 <DecodeHeader+0x1b0>
            break;
 800199a:	bf00      	nop
 800199c:	e000      	b.n	80019a0 <DecodeHeader+0x1b0>
            break;
 800199e:	bf00      	nop
        }

        RX->ir &= RX->maskSize;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	891a      	ldrh	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8a1b      	ldrh	r3, [r3, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	811a      	strh	r2, [r3, #8]
        RX->ir++;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	891b      	ldrh	r3, [r3, #8]
 80019b4:	3301      	adds	r3, #1
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	811a      	strh	r2, [r3, #8]
        RX->ir &= RX->maskSize;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	891a      	ldrh	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	8a1b      	ldrh	r3, [r3, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	811a      	strh	r2, [r3, #8]
    while(RX->ir != i){
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	891a      	ldrh	r2, [r3, #8]
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	429a      	cmp	r2, r3
 80019d6:	f47f af13 	bne.w	8001800 <DecodeHeader+0x10>
    }

}
 80019da:	bf00      	nop
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <PutBufOnTx>:

uint8_t PutBufOnTx(_sTx *TX, uint8_t *buf, uint8_t length){
 80019e8:	b490      	push	{r4, r7}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	4613      	mov	r3, r2
 80019f4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

    for(i=0; i<length; i++){
 80019f6:	2300      	movs	r3, #0
 80019f8:	75fb      	strb	r3, [r7, #23]
 80019fa:	e022      	b.n	8001a42 <PutBufOnTx+0x5a>
        TX->cks ^= buf[i];
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	7a1a      	ldrb	r2, [r3, #8]
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	440b      	add	r3, r1
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4053      	eors	r3, r2
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	721a      	strb	r2, [r3, #8]
        TX->buf[TX->iw++] = buf[i];
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	441a      	add	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	889b      	ldrh	r3, [r3, #4]
 8001a1e:	1c58      	adds	r0, r3, #1
 8001a20:	b284      	uxth	r4, r0
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	8084      	strh	r4, [r0, #4]
 8001a26:	440b      	add	r3, r1
 8001a28:	7812      	ldrb	r2, [r2, #0]
 8001a2a:	701a      	strb	r2, [r3, #0]
        TX->iw &= TX->maskSize;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	889a      	ldrh	r2, [r3, #4]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	899b      	ldrh	r3, [r3, #12]
 8001a34:	4013      	ands	r3, r2
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	809a      	strh	r2, [r3, #4]
    for(i=0; i<length; i++){
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	75fb      	strb	r3, [r7, #23]
 8001a42:	7dfa      	ldrb	r2, [r7, #23]
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d3d8      	bcc.n	80019fc <PutBufOnTx+0x14>
    }

    return TX->cks;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	7a1b      	ldrb	r3, [r3, #8]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc90      	pop	{r4, r7}
 8001a56:	4770      	bx	lr

08001a58 <PutByteOnTx>:

uint8_t PutByteOnTx(_sTx *TX, uint8_t value){
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
	TX->cks ^= value;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7a1a      	ldrb	r2, [r3, #8]
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	4053      	eors	r3, r2
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	721a      	strb	r2, [r3, #8]
	TX->buf[TX->iw++] = value;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	889b      	ldrh	r3, [r3, #4]
 8001a7a:	1c59      	adds	r1, r3, #1
 8001a7c:	b288      	uxth	r0, r1
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	8088      	strh	r0, [r1, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	889a      	ldrh	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	899b      	ldrh	r3, [r3, #12]
 8001a90:	4013      	ands	r3, r2
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	809a      	strh	r2, [r3, #4]

    return TX->cks;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7a1b      	ldrb	r3, [r3, #8]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <PutHeaderOnTx>:

uint8_t PutHeaderOnTx(_sTx *TX, uint8_t id, uint8_t lCmd){
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	70bb      	strb	r3, [r7, #2]
    TX->buf[TX->iw++] = 'U';
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	889b      	ldrh	r3, [r3, #4]
 8001ac0:	1c59      	adds	r1, r3, #1
 8001ac2:	b288      	uxth	r0, r1
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	8088      	strh	r0, [r1, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	2255      	movs	r2, #85	; 0x55
 8001acc:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	889a      	ldrh	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	899b      	ldrh	r3, [r3, #12]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = 'N';
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	889b      	ldrh	r3, [r3, #4]
 8001ae6:	1c59      	adds	r1, r3, #1
 8001ae8:	b288      	uxth	r0, r1
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	8088      	strh	r0, [r1, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	224e      	movs	r2, #78	; 0x4e
 8001af2:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	889a      	ldrh	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	899b      	ldrh	r3, [r3, #12]
 8001afc:	4013      	ands	r3, r2
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = 'E';
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	889b      	ldrh	r3, [r3, #4]
 8001b0c:	1c59      	adds	r1, r3, #1
 8001b0e:	b288      	uxth	r0, r1
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	8088      	strh	r0, [r1, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	2245      	movs	r2, #69	; 0x45
 8001b18:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	889a      	ldrh	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	899b      	ldrh	r3, [r3, #12]
 8001b22:	4013      	ands	r3, r2
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = 'R';
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	889b      	ldrh	r3, [r3, #4]
 8001b32:	1c59      	adds	r1, r3, #1
 8001b34:	b288      	uxth	r0, r1
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	8088      	strh	r0, [r1, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	2252      	movs	r2, #82	; 0x52
 8001b3e:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	889a      	ldrh	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	899b      	ldrh	r3, [r3, #12]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = lCmd + 1;//id + payload + cks
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	889b      	ldrh	r3, [r3, #4]
 8001b58:	1c59      	adds	r1, r3, #1
 8001b5a:	b288      	uxth	r0, r1
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	8088      	strh	r0, [r1, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	78ba      	ldrb	r2, [r7, #2]
 8001b64:	3201      	adds	r2, #1
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	889a      	ldrh	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	899b      	ldrh	r3, [r3, #12]
 8001b72:	4013      	ands	r3, r2
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = ':';
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	889b      	ldrh	r3, [r3, #4]
 8001b82:	1c59      	adds	r1, r3, #1
 8001b84:	b288      	uxth	r0, r1
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	8088      	strh	r0, [r1, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	223a      	movs	r2, #58	; 0x3a
 8001b8e:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	889a      	ldrh	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	899b      	ldrh	r3, [r3, #12]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	809a      	strh	r2, [r3, #4]
    TX->buf[TX->iw++] = id;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	889b      	ldrh	r3, [r3, #4]
 8001ba8:	1c59      	adds	r1, r3, #1
 8001baa:	b288      	uxth	r0, r1
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	8088      	strh	r0, [r1, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	701a      	strb	r2, [r3, #0]
    TX->iw &= TX->maskSize;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	889a      	ldrh	r2, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	899b      	ldrh	r3, [r3, #12]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	809a      	strh	r2, [r3, #4]

    TX->cks ^= (lCmd + 1);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	7a1b      	ldrb	r3, [r3, #8]
 8001bca:	b25a      	sxtb	r2, r3
 8001bcc:	78bb      	ldrb	r3, [r7, #2]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	b25b      	sxtb	r3, r3
 8001bd4:	4053      	eors	r3, r2
 8001bd6:	b25b      	sxtb	r3, r3
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	721a      	strb	r2, [r3, #8]
    TX->cks ^= ('U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ id);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7a1a      	ldrb	r2, [r3, #8]
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	4053      	eors	r3, r2
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	721a      	strb	r2, [r3, #8]

    return TX->cks;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7a1b      	ldrb	r3, [r3, #8]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <PutStrOntx>:
//
//    TX->buf[TX->iw++] = cks;
//    TX->iw &= TX->maskSize;
//}

uint8_t PutStrOntx(_sTx *TX, const char *str){
 8001c02:	b490      	push	{r4, r7}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73fb      	strb	r3, [r7, #15]

    while(str[i]){
 8001c10:	e022      	b.n	8001c58 <PutStrOntx+0x56>
        TX->cks |= str[i];
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7a1a      	ldrb	r2, [r3, #8]
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	6839      	ldr	r1, [r7, #0]
 8001c1a:	440b      	add	r3, r1
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	721a      	strb	r2, [r3, #8]
    	TX->buf[TX->iw++] = str[i++];
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	73fa      	strb	r2, [r7, #15]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	441a      	add	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6819      	ldr	r1, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	889b      	ldrh	r3, [r3, #4]
 8001c3a:	1c58      	adds	r0, r3, #1
 8001c3c:	b284      	uxth	r4, r0
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	8084      	strh	r4, [r0, #4]
 8001c42:	440b      	add	r3, r1
 8001c44:	7812      	ldrb	r2, [r2, #0]
 8001c46:	701a      	strb	r2, [r3, #0]
        TX->iw &= TX->maskSize;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	889a      	ldrh	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	899b      	ldrh	r3, [r3, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	809a      	strh	r2, [r3, #4]
    while(str[i]){
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1d6      	bne.n	8001c12 <PutStrOntx+0x10>

    }

    return TX->cks;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7a1b      	ldrb	r3, [r3, #8]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc90      	pop	{r4, r7}
 8001c70:	4770      	bx	lr

08001c72 <GetByteFromRx>:

uint8_t GetByteFromRx(_sRx *RX, int8_t pre, int8_t pos){
 8001c72:	b480      	push	{r7}
 8001c74:	b085      	sub	sp, #20
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	70fb      	strb	r3, [r7, #3]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	70bb      	strb	r3, [r7, #2]
    uint8_t aux;

    RX->iData += pre;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	895a      	ldrh	r2, [r3, #10]
 8001c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	815a      	strh	r2, [r3, #10]
    RX->iData &= RX->maskSize;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	895a      	ldrh	r2, [r3, #10]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	8a1b      	ldrh	r3, [r3, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	815a      	strh	r2, [r3, #10]
    aux = RX->buf[RX->iData];
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	8952      	ldrh	r2, [r2, #10]
 8001cac:	4413      	add	r3, r2
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	73fb      	strb	r3, [r7, #15]
    RX->iData += pos;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	895a      	ldrh	r2, [r3, #10]
 8001cb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	815a      	strh	r2, [r3, #10]
    RX->iData &= RX->maskSize;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	895a      	ldrh	r2, [r3, #10]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	8a1b      	ldrh	r3, [r3, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	815a      	strh	r2, [r3, #10]

    return aux;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <DecodeCmd>:
        RX->iData++;
        RX->iData &= RX->maskSize;
    }
}

void DecodeCmd(_sRx *RX, _sTx *TX){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
	RX->ISCMD = 0;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	749a      	strb	r2, [r3, #18]

    TX->cks = 0;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	721a      	strb	r2, [r3, #8]
    switch (RX->buf[RX->iData])
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	8952      	ldrh	r2, [r2, #10]
 8001d02:	4413      	add	r3, r2
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2bf1      	cmp	r3, #241	; 0xf1
 8001d08:	f000 83b7 	beq.w	800247a <DecodeCmd+0x796>
 8001d0c:	2bf1      	cmp	r3, #241	; 0xf1
 8001d0e:	f300 83c1 	bgt.w	8002494 <DecodeCmd+0x7b0>
 8001d12:	2bb2      	cmp	r3, #178	; 0xb2
 8001d14:	dc30      	bgt.n	8001d78 <DecodeCmd+0x94>
 8001d16:	2ba0      	cmp	r3, #160	; 0xa0
 8001d18:	f2c0 83bc 	blt.w	8002494 <DecodeCmd+0x7b0>
 8001d1c:	3ba0      	subs	r3, #160	; 0xa0
 8001d1e:	2b12      	cmp	r3, #18
 8001d20:	f200 83b8 	bhi.w	8002494 <DecodeCmd+0x7b0>
 8001d24:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <DecodeCmd+0x48>)
 8001d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2a:	bf00      	nop
 8001d2c:	08001d81 	.word	0x08001d81
 8001d30:	08001e23 	.word	0x08001e23
 8001d34:	08001ee3 	.word	0x08001ee3
 8001d38:	08001f9d 	.word	0x08001f9d
 8001d3c:	08002087 	.word	0x08002087
 8001d40:	08002495 	.word	0x08002495
 8001d44:	08002495 	.word	0x08002495
 8001d48:	08002495 	.word	0x08002495
 8001d4c:	08002495 	.word	0x08002495
 8001d50:	08002495 	.word	0x08002495
 8001d54:	08002495 	.word	0x08002495
 8001d58:	08002495 	.word	0x08002495
 8001d5c:	08002495 	.word	0x08002495
 8001d60:	08002495 	.word	0x08002495
 8001d64:	08002495 	.word	0x08002495
 8001d68:	08002495 	.word	0x08002495
 8001d6c:	0800224d 	.word	0x0800224d
 8001d70:	0800226b 	.word	0x0800226b
 8001d74:	0800233d 	.word	0x0800233d
 8001d78:	2bf0      	cmp	r3, #240	; 0xf0
 8001d7a:	f000 836e 	beq.w	800245a <DecodeCmd+0x776>
 8001d7e:	e389      	b.n	8002494 <DecodeCmd+0x7b0>
    {
    case 0xA0://READ LAST ANALOG INPUTS
    	ChangeLedStatus(0x0000FFFF, LEDIDLE);
 8001d80:	f04f 4168 	mov.w	r1, #3892314112	; 0xe8000000
 8001d84:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d88:	f000 fc3e 	bl	8002608 <ChangeLedStatus>
		w.u8[0] = indexADCData;
 8001d8c:	4b78      	ldr	r3, [pc, #480]	; (8001f70 <DecodeCmd+0x28c>)
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	4b78      	ldr	r3, [pc, #480]	; (8001f74 <DecodeCmd+0x290>)
 8001d92:	701a      	strb	r2, [r3, #0]
		w.u8[0]--;
 8001d94:	4b77      	ldr	r3, [pc, #476]	; (8001f74 <DecodeCmd+0x290>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	4b75      	ldr	r3, [pc, #468]	; (8001f74 <DecodeCmd+0x290>)
 8001d9e:	701a      	strb	r2, [r3, #0]
		w.u8[0] &= (ADCDATASIZE - 1);
 8001da0:	4b74      	ldr	r3, [pc, #464]	; (8001f74 <DecodeCmd+0x290>)
 8001da2:	781a      	ldrb	r2, [r3, #0]
 8001da4:	4b73      	ldr	r3, [pc, #460]	; (8001f74 <DecodeCmd+0x290>)
 8001da6:	701a      	strb	r2, [r3, #0]
		PutHeaderOnTx(TX, 0xA0, 2*16+1);
 8001da8:	2221      	movs	r2, #33	; 0x21
 8001daa:	21a0      	movs	r1, #160	; 0xa0
 8001dac:	6838      	ldr	r0, [r7, #0]
 8001dae:	f7ff fe7b 	bl	8001aa8 <PutHeaderOnTx>
		PutBufOnTx(TX, (uint8_t *)&ADCData[w.u8[0]], 16);
 8001db2:	4b70      	ldr	r3, [pc, #448]	; (8001f74 <DecodeCmd+0x290>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	4a6f      	ldr	r2, [pc, #444]	; (8001f78 <DecodeCmd+0x294>)
 8001dba:	4413      	add	r3, r2
 8001dbc:	2210      	movs	r2, #16
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6838      	ldr	r0, [r7, #0]
 8001dc2:	f7ff fe11 	bl	80019e8 <PutBufOnTx>
		for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 8001dc6:	4b6b      	ldr	r3, [pc, #428]	; (8001f74 <DecodeCmd+0x290>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	709a      	strb	r2, [r3, #2]
 8001dcc:	e01e      	b.n	8001e0c <DecodeCmd+0x128>
			w.u16[0] = sumADCData10ms[w.u8[2]]/40;
 8001dce:	4b69      	ldr	r3, [pc, #420]	; (8001f74 <DecodeCmd+0x290>)
 8001dd0:	789b      	ldrb	r3, [r3, #2]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b69      	ldr	r3, [pc, #420]	; (8001f7c <DecodeCmd+0x298>)
 8001dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dda:	4a69      	ldr	r2, [pc, #420]	; (8001f80 <DecodeCmd+0x29c>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	095b      	lsrs	r3, r3, #5
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	4b63      	ldr	r3, [pc, #396]	; (8001f74 <DecodeCmd+0x290>)
 8001de6:	801a      	strh	r2, [r3, #0]
			PutByteOnTx(TX, w.u8[0]);
 8001de8:	4b62      	ldr	r3, [pc, #392]	; (8001f74 <DecodeCmd+0x290>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	6838      	ldr	r0, [r7, #0]
 8001df0:	f7ff fe32 	bl	8001a58 <PutByteOnTx>
			PutByteOnTx(TX, w.u8[1]);
 8001df4:	4b5f      	ldr	r3, [pc, #380]	; (8001f74 <DecodeCmd+0x290>)
 8001df6:	785b      	ldrb	r3, [r3, #1]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	6838      	ldr	r0, [r7, #0]
 8001dfc:	f7ff fe2c 	bl	8001a58 <PutByteOnTx>
		for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 8001e00:	4b5c      	ldr	r3, [pc, #368]	; (8001f74 <DecodeCmd+0x290>)
 8001e02:	789b      	ldrb	r3, [r3, #2]
 8001e04:	3301      	adds	r3, #1
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	4b5a      	ldr	r3, [pc, #360]	; (8001f74 <DecodeCmd+0x290>)
 8001e0a:	709a      	strb	r2, [r3, #2]
 8001e0c:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <DecodeCmd+0x290>)
 8001e0e:	789b      	ldrb	r3, [r3, #2]
 8001e10:	2b07      	cmp	r3, #7
 8001e12:	d9dc      	bls.n	8001dce <DecodeCmd+0xea>
		}
		PutByteOnTx(TX, TX->cks);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	7a1b      	ldrb	r3, [r3, #8]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	6838      	ldr	r0, [r7, #0]
 8001e1c:	f7ff fe1c 	bl	8001a58 <PutByteOnTx>
        break;
 8001e20:	e34e      	b.n	80024c0 <DecodeCmd+0x7dc>
    case 0xA1://READ Continuous every Nx10ms Nx5 Samples and Average
    	w.u8[0] =  GetByteFromRx(RX, 1, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2101      	movs	r1, #1
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ff23 	bl	8001c72 <GetByteFromRx>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b50      	ldr	r3, [pc, #320]	; (8001f74 <DecodeCmd+0x290>)
 8001e32:	701a      	strb	r2, [r3, #0]
    	if(w.u8[0] != 0){
 8001e34:	4b4f      	ldr	r3, [pc, #316]	; (8001f74 <DecodeCmd+0x290>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d036      	beq.n	8001eaa <DecodeCmd+0x1c6>
    		w.u8[0] /= 10;
 8001e3c:	4b4d      	ldr	r3, [pc, #308]	; (8001f74 <DecodeCmd+0x290>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4a4f      	ldr	r2, [pc, #316]	; (8001f80 <DecodeCmd+0x29c>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	08db      	lsrs	r3, r3, #3
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4b4a      	ldr	r3, [pc, #296]	; (8001f74 <DecodeCmd+0x290>)
 8001e4c:	701a      	strb	r2, [r3, #0]
    		if(w.u8[0] == 0)
 8001e4e:	4b49      	ldr	r3, [pc, #292]	; (8001f74 <DecodeCmd+0x290>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <DecodeCmd+0x178>
    			w.u8[0] = 1;
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <DecodeCmd+0x290>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
    		if(w.u8[0] > 6)
 8001e5c:	4b45      	ldr	r3, [pc, #276]	; (8001f74 <DecodeCmd+0x290>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b06      	cmp	r3, #6
 8001e62:	d902      	bls.n	8001e6a <DecodeCmd+0x186>
    			w.u8[0] = 6;
 8001e64:	4b43      	ldr	r3, [pc, #268]	; (8001f74 <DecodeCmd+0x290>)
 8001e66:	2206      	movs	r2, #6
 8001e68:	701a      	strb	r2, [r3, #0]
    		n10msData = w.u8[0];
 8001e6a:	4b42      	ldr	r3, [pc, #264]	; (8001f74 <DecodeCmd+0x290>)
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <DecodeCmd+0x2a0>)
 8001e70:	701a      	strb	r2, [r3, #0]
    		timeOutAnalog = n10msData*40;
 8001e72:	4b44      	ldr	r3, [pc, #272]	; (8001f84 <DecodeCmd+0x2a0>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	0092      	lsls	r2, r2, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	4b41      	ldr	r3, [pc, #260]	; (8001f88 <DecodeCmd+0x2a4>)
 8001e84:	801a      	strh	r2, [r3, #0]
    		timeOutAnalogAux = timeOutAnalog;
 8001e86:	4b40      	ldr	r3, [pc, #256]	; (8001f88 <DecodeCmd+0x2a4>)
 8001e88:	881a      	ldrh	r2, [r3, #0]
 8001e8a:	4b40      	ldr	r3, [pc, #256]	; (8001f8c <DecodeCmd+0x2a8>)
 8001e8c:	801a      	strh	r2, [r3, #0]
    		stateSendSamples = 0;
 8001e8e:	4b40      	ldr	r3, [pc, #256]	; (8001f90 <DecodeCmd+0x2ac>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
    		CONTAVERAGE = 0;
 8001e94:	4a3f      	ldr	r2, [pc, #252]	; (8001f94 <DecodeCmd+0x2b0>)
 8001e96:	7813      	ldrb	r3, [r2, #0]
 8001e98:	f36f 03c3 	bfc	r3, #3, #1
 8001e9c:	7013      	strb	r3, [r2, #0]
        	ChangeLedStatus(0x0000FFFF, LEDTXANALOG);
 8001e9e:	493e      	ldr	r1, [pc, #248]	; (8001f98 <DecodeCmd+0x2b4>)
 8001ea0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ea4:	f000 fbb0 	bl	8002608 <ChangeLedStatus>
 8001ea8:	e00b      	b.n	8001ec2 <DecodeCmd+0x1de>
    	}
    	else{
    		timeOutAnalog = 0;
 8001eaa:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <DecodeCmd+0x2a4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	801a      	strh	r2, [r3, #0]
    		timeOutAnalogAux = 0;
 8001eb0:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <DecodeCmd+0x2a8>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	801a      	strh	r2, [r3, #0]
        	ChangeLedStatus(0x0000FFFF, LEDIDLE);
 8001eb6:	f04f 4168 	mov.w	r1, #3892314112	; 0xe8000000
 8001eba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ebe:	f000 fba3 	bl	8002608 <ChangeLedStatus>
    	}
    	PutHeaderOnTx(TX, 0xA1, 2);
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	21a1      	movs	r1, #161	; 0xa1
 8001ec6:	6838      	ldr	r0, [r7, #0]
 8001ec8:	f7ff fdee 	bl	8001aa8 <PutHeaderOnTx>
    	PutByteOnTx(TX, 0x0D);
 8001ecc:	210d      	movs	r1, #13
 8001ece:	6838      	ldr	r0, [r7, #0]
 8001ed0:	f7ff fdc2 	bl	8001a58 <PutByteOnTx>
    	PutByteOnTx(TX, TX->cks);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	7a1b      	ldrb	r3, [r3, #8]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6838      	ldr	r0, [r7, #0]
 8001edc:	f7ff fdbc 	bl	8001a58 <PutByteOnTx>
    	break;
 8001ee0:	e2ee      	b.n	80024c0 <DecodeCmd+0x7dc>
    case 0xA2://Read Continuous Average every N ms
    	w.u8[0] =  GetByteFromRx(RX, 1, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fec3 	bl	8001c72 <GetByteFromRx>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <DecodeCmd+0x290>)
 8001ef2:	701a      	strb	r2, [r3, #0]
    	if(w.u8[0] != 0){
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <DecodeCmd+0x290>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01c      	beq.n	8001f36 <DecodeCmd+0x252>
    		if(w.u8[0] < 10)
 8001efc:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <DecodeCmd+0x290>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b09      	cmp	r3, #9
 8001f02:	d802      	bhi.n	8001f0a <DecodeCmd+0x226>
    			w.u8[0] = 10;
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <DecodeCmd+0x290>)
 8001f06:	220a      	movs	r2, #10
 8001f08:	701a      	strb	r2, [r3, #0]
    		timeOutAnalog = w.u8[0]*4;
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <DecodeCmd+0x290>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <DecodeCmd+0x2a4>)
 8001f16:	801a      	strh	r2, [r3, #0]
    		timeOutAnalogAux = timeOutAnalog;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <DecodeCmd+0x2a4>)
 8001f1a:	881a      	ldrh	r2, [r3, #0]
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <DecodeCmd+0x2a8>)
 8001f1e:	801a      	strh	r2, [r3, #0]
        	ChangeLedStatus(0x0000FFFF, LEDTXANALOG);
 8001f20:	491d      	ldr	r1, [pc, #116]	; (8001f98 <DecodeCmd+0x2b4>)
 8001f22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f26:	f000 fb6f 	bl	8002608 <ChangeLedStatus>
    		CONTAVERAGE = 1;
 8001f2a:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <DecodeCmd+0x2b0>)
 8001f2c:	7813      	ldrb	r3, [r2, #0]
 8001f2e:	f043 0308 	orr.w	r3, r3, #8
 8001f32:	7013      	strb	r3, [r2, #0]
 8001f34:	e00b      	b.n	8001f4e <DecodeCmd+0x26a>
    	}
    	else{
    		timeOutAnalog = 0;
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <DecodeCmd+0x2a4>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	801a      	strh	r2, [r3, #0]
    		timeOutAnalogAux = 0;
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <DecodeCmd+0x2a8>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	801a      	strh	r2, [r3, #0]
        	ChangeLedStatus(0x0000FFFF, LEDIDLE);
 8001f42:	f04f 4168 	mov.w	r1, #3892314112	; 0xe8000000
 8001f46:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f4a:	f000 fb5d 	bl	8002608 <ChangeLedStatus>
    	}
    	PutHeaderOnTx(TX, 0xA2, 2);
 8001f4e:	2202      	movs	r2, #2
 8001f50:	21a2      	movs	r1, #162	; 0xa2
 8001f52:	6838      	ldr	r0, [r7, #0]
 8001f54:	f7ff fda8 	bl	8001aa8 <PutHeaderOnTx>
    	PutByteOnTx(TX, 0x0D);
 8001f58:	210d      	movs	r1, #13
 8001f5a:	6838      	ldr	r0, [r7, #0]
 8001f5c:	f7ff fd7c 	bl	8001a58 <PutByteOnTx>
    	PutByteOnTx(TX, TX->cks);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	7a1b      	ldrb	r3, [r3, #8]
 8001f64:	4619      	mov	r1, r3
 8001f66:	6838      	ldr	r0, [r7, #0]
 8001f68:	f7ff fd76 	bl	8001a58 <PutByteOnTx>
    	break;
 8001f6c:	e2a8      	b.n	80024c0 <DecodeCmd+0x7dc>
 8001f6e:	bf00      	nop
 8001f70:	20001be0 	.word	0x20001be0
 8001f74:	20000824 	.word	0x20000824
 8001f78:	20000be0 	.word	0x20000be0
 8001f7c:	20001be8 	.word	0x20001be8
 8001f80:	cccccccd 	.word	0xcccccccd
 8001f84:	20001c2c 	.word	0x20001c2c
 8001f88:	20001c28 	.word	0x20001c28
 8001f8c:	20001c2a 	.word	0x20001c2a
 8001f90:	20001c2d 	.word	0x20001c2d
 8001f94:	20000820 	.word	0x20000820
 8001f98:	e8a00000 	.word	0xe8a00000
    case 0xA3://SET Motor Period
    	w.u8[0] = GetByteFromRx(RX, 1, 0);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff fe66 	bl	8001c72 <GetByteFromRx>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4ba4      	ldr	r3, [pc, #656]	; (800223c <DecodeCmd+0x558>)
 8001fac:	701a      	strb	r2, [r3, #0]
    	w.u8[1] = GetByteFromRx(RX, 1, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fe5d 	bl	8001c72 <GetByteFromRx>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4b9f      	ldr	r3, [pc, #636]	; (800223c <DecodeCmd+0x558>)
 8001fbe:	705a      	strb	r2, [r3, #1]
    	if(w.u16[0] < 100){
 8001fc0:	4b9e      	ldr	r3, [pc, #632]	; (800223c <DecodeCmd+0x558>)
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	2b63      	cmp	r3, #99	; 0x63
 8001fc6:	d802      	bhi.n	8001fce <DecodeCmd+0x2ea>
    		w.u16[0] = 100;
 8001fc8:	4b9c      	ldr	r3, [pc, #624]	; (800223c <DecodeCmd+0x558>)
 8001fca:	2264      	movs	r2, #100	; 0x64
 8001fcc:	801a      	strh	r2, [r3, #0]
    	}
    	if(w.u16[0] > 9000){
 8001fce:	4b9b      	ldr	r3, [pc, #620]	; (800223c <DecodeCmd+0x558>)
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	f242 3228 	movw	r2, #9000	; 0x2328
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d903      	bls.n	8001fe2 <DecodeCmd+0x2fe>
    		w.u16[0] = 9000;
 8001fda:	4b98      	ldr	r3, [pc, #608]	; (800223c <DecodeCmd+0x558>)
 8001fdc:	f242 3228 	movw	r2, #9000	; 0x2328
 8001fe0:	801a      	strh	r2, [r3, #0]
    	}

		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4896      	ldr	r0, [pc, #600]	; (8002240 <DecodeCmd+0x55c>)
 8001fe6:	f005 ff47 	bl	8007e78 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001fea:	2104      	movs	r1, #4
 8001fec:	4894      	ldr	r0, [pc, #592]	; (8002240 <DecodeCmd+0x55c>)
 8001fee:	f005 ff43 	bl	8007e78 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	4892      	ldr	r0, [pc, #584]	; (8002240 <DecodeCmd+0x55c>)
 8001ff6:	f005 ff3f 	bl	8007e78 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8001ffa:	210c      	movs	r1, #12
 8001ffc:	4890      	ldr	r0, [pc, #576]	; (8002240 <DecodeCmd+0x55c>)
 8001ffe:	f005 ff3b 	bl	8007e78 <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002002:	4b8f      	ldr	r3, [pc, #572]	; (8002240 <DecodeCmd+0x55c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2200      	movs	r2, #0
 8002008:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800200a:	4b8d      	ldr	r3, [pc, #564]	; (8002240 <DecodeCmd+0x55c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2200      	movs	r2, #0
 8002010:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8002012:	4b8b      	ldr	r3, [pc, #556]	; (8002240 <DecodeCmd+0x55c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 800201a:	4b89      	ldr	r3, [pc, #548]	; (8002240 <DecodeCmd+0x55c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2200      	movs	r2, #0
 8002020:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_AUTORELOAD(&htim3, w.u16[0]);
 8002022:	4b86      	ldr	r3, [pc, #536]	; (800223c <DecodeCmd+0x558>)
 8002024:	881a      	ldrh	r2, [r3, #0]
 8002026:	4b86      	ldr	r3, [pc, #536]	; (8002240 <DecodeCmd+0x55c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
 800202c:	4b83      	ldr	r3, [pc, #524]	; (800223c <DecodeCmd+0x558>)
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4b83      	ldr	r3, [pc, #524]	; (8002240 <DecodeCmd+0x55c>)
 8002034:	60da      	str	r2, [r3, #12]

		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002036:	2100      	movs	r1, #0
 8002038:	4881      	ldr	r0, [pc, #516]	; (8002240 <DecodeCmd+0x55c>)
 800203a:	f005 fe11 	bl	8007c60 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800203e:	2104      	movs	r1, #4
 8002040:	487f      	ldr	r0, [pc, #508]	; (8002240 <DecodeCmd+0x55c>)
 8002042:	f005 fe0d 	bl	8007c60 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002046:	2108      	movs	r1, #8
 8002048:	487d      	ldr	r0, [pc, #500]	; (8002240 <DecodeCmd+0x55c>)
 800204a:	f005 fe09 	bl	8007c60 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800204e:	210c      	movs	r1, #12
 8002050:	487b      	ldr	r0, [pc, #492]	; (8002240 <DecodeCmd+0x55c>)
 8002052:	f005 fe05 	bl	8007c60 <HAL_TIM_PWM_Start>

		PutHeaderOnTx(TX, 0xA3, 3);
 8002056:	2203      	movs	r2, #3
 8002058:	21a3      	movs	r1, #163	; 0xa3
 800205a:	6838      	ldr	r0, [r7, #0]
 800205c:	f7ff fd24 	bl	8001aa8 <PutHeaderOnTx>
    	PutByteOnTx(TX, w.u8[0]);
 8002060:	4b76      	ldr	r3, [pc, #472]	; (800223c <DecodeCmd+0x558>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4619      	mov	r1, r3
 8002066:	6838      	ldr	r0, [r7, #0]
 8002068:	f7ff fcf6 	bl	8001a58 <PutByteOnTx>
    	PutByteOnTx(TX, w.u8[1]);
 800206c:	4b73      	ldr	r3, [pc, #460]	; (800223c <DecodeCmd+0x558>)
 800206e:	785b      	ldrb	r3, [r3, #1]
 8002070:	4619      	mov	r1, r3
 8002072:	6838      	ldr	r0, [r7, #0]
 8002074:	f7ff fcf0 	bl	8001a58 <PutByteOnTx>
    	PutByteOnTx(TX, TX->cks);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	7a1b      	ldrb	r3, [r3, #8]
 800207c:	4619      	mov	r1, r3
 800207e:	6838      	ldr	r0, [r7, #0]
 8002080:	f7ff fcea 	bl	8001a58 <PutByteOnTx>
    	break;
 8002084:	e21c      	b.n	80024c0 <DecodeCmd+0x7dc>
    case 0xA4://Test Motors
    	w.i8[0] = GetByteFromRx(RX, 1, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2101      	movs	r1, #1
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fdf1 	bl	8001c72 <GetByteFromRx>
 8002090:	4603      	mov	r3, r0
 8002092:	b25a      	sxtb	r2, r3
 8002094:	4b69      	ldr	r3, [pc, #420]	; (800223c <DecodeCmd+0x558>)
 8002096:	701a      	strb	r2, [r3, #0]
    	w.i8[1] = GetByteFromRx(RX, 1, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2101      	movs	r1, #1
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff fde8 	bl	8001c72 <GetByteFromRx>
 80020a2:	4603      	mov	r3, r0
 80020a4:	b25a      	sxtb	r2, r3
 80020a6:	4b65      	ldr	r3, [pc, #404]	; (800223c <DecodeCmd+0x558>)
 80020a8:	705a      	strb	r2, [r3, #1]
    	w.i8[2] = GetByteFromRx(RX, 1, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2101      	movs	r1, #1
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff fddf 	bl	8001c72 <GetByteFromRx>
 80020b4:	4603      	mov	r3, r0
 80020b6:	b25a      	sxtb	r2, r3
 80020b8:	4b60      	ldr	r3, [pc, #384]	; (800223c <DecodeCmd+0x558>)
 80020ba:	709a      	strb	r2, [r3, #2]
    	w.i8[3] = GetByteFromRx(RX, 1, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2101      	movs	r1, #1
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff fdd6 	bl	8001c72 <GetByteFromRx>
 80020c6:	4603      	mov	r3, r0
 80020c8:	b25a      	sxtb	r2, r3
 80020ca:	4b5c      	ldr	r3, [pc, #368]	; (800223c <DecodeCmd+0x558>)
 80020cc:	70da      	strb	r2, [r3, #3]
    	if(w.i8[0] > 100)
 80020ce:	4b5b      	ldr	r3, [pc, #364]	; (800223c <DecodeCmd+0x558>)
 80020d0:	f993 3000 	ldrsb.w	r3, [r3]
 80020d4:	2b64      	cmp	r3, #100	; 0x64
 80020d6:	dd02      	ble.n	80020de <DecodeCmd+0x3fa>
    		w.i8[0] = 90;
 80020d8:	4b58      	ldr	r3, [pc, #352]	; (800223c <DecodeCmd+0x558>)
 80020da:	225a      	movs	r2, #90	; 0x5a
 80020dc:	701a      	strb	r2, [r3, #0]
    	if(w.i8[0] < -100)
 80020de:	4b57      	ldr	r3, [pc, #348]	; (800223c <DecodeCmd+0x558>)
 80020e0:	f993 3000 	ldrsb.w	r3, [r3]
 80020e4:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80020e8:	da02      	bge.n	80020f0 <DecodeCmd+0x40c>
    		w.i8[0] = -90;
 80020ea:	4b54      	ldr	r3, [pc, #336]	; (800223c <DecodeCmd+0x558>)
 80020ec:	22a6      	movs	r2, #166	; 0xa6
 80020ee:	701a      	strb	r2, [r3, #0]
    	if(w.i8[1] > 100)
 80020f0:	4b52      	ldr	r3, [pc, #328]	; (800223c <DecodeCmd+0x558>)
 80020f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	dd02      	ble.n	8002100 <DecodeCmd+0x41c>
    		w.i8[1] = 90;
 80020fa:	4b50      	ldr	r3, [pc, #320]	; (800223c <DecodeCmd+0x558>)
 80020fc:	225a      	movs	r2, #90	; 0x5a
 80020fe:	705a      	strb	r2, [r3, #1]
    	if(w.i8[1] < -100)
 8002100:	4b4e      	ldr	r3, [pc, #312]	; (800223c <DecodeCmd+0x558>)
 8002102:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002106:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800210a:	da02      	bge.n	8002112 <DecodeCmd+0x42e>
    		w.i8[1] = -90;
 800210c:	4b4b      	ldr	r3, [pc, #300]	; (800223c <DecodeCmd+0x558>)
 800210e:	22a6      	movs	r2, #166	; 0xa6
 8002110:	705a      	strb	r2, [r3, #1]
    	w1.i16[0] = (w.i8[0]*100)/__HAL_TIM_GET_AUTORELOAD(&htim3);
 8002112:	4b4a      	ldr	r3, [pc, #296]	; (800223c <DecodeCmd+0x558>)
 8002114:	f993 3000 	ldrsb.w	r3, [r3]
 8002118:	461a      	mov	r2, r3
 800211a:	2364      	movs	r3, #100	; 0x64
 800211c:	fb02 f303 	mul.w	r3, r2, r3
 8002120:	461a      	mov	r2, r3
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <DecodeCmd+0x55c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	b21a      	sxth	r2, r3
 800212e:	4b45      	ldr	r3, [pc, #276]	; (8002244 <DecodeCmd+0x560>)
 8002130:	801a      	strh	r2, [r3, #0]
    	w1.i16[1] = (w.i8[1]*100)/__HAL_TIM_GET_AUTORELOAD(&htim3);
 8002132:	4b42      	ldr	r3, [pc, #264]	; (800223c <DecodeCmd+0x558>)
 8002134:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002138:	461a      	mov	r2, r3
 800213a:	2364      	movs	r3, #100	; 0x64
 800213c:	fb02 f303 	mul.w	r3, r2, r3
 8002140:	461a      	mov	r2, r3
 8002142:	4b3f      	ldr	r3, [pc, #252]	; (8002240 <DecodeCmd+0x55c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	fbb2 f3f3 	udiv	r3, r2, r3
 800214c:	b21a      	sxth	r2, r3
 800214e:	4b3d      	ldr	r3, [pc, #244]	; (8002244 <DecodeCmd+0x560>)
 8002150:	805a      	strh	r2, [r3, #2]
    	if(w.u16[1] > 100)
 8002152:	4b3a      	ldr	r3, [pc, #232]	; (800223c <DecodeCmd+0x558>)
 8002154:	885b      	ldrh	r3, [r3, #2]
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d902      	bls.n	8002160 <DecodeCmd+0x47c>
    		w.u16[1] = 100;
 800215a:	4b38      	ldr	r3, [pc, #224]	; (800223c <DecodeCmd+0x558>)
 800215c:	2264      	movs	r2, #100	; 0x64
 800215e:	805a      	strh	r2, [r3, #2]
    	timeOutTestMotors = w.u16[1];
 8002160:	4b36      	ldr	r3, [pc, #216]	; (800223c <DecodeCmd+0x558>)
 8002162:	885a      	ldrh	r2, [r3, #2]
 8002164:	4b38      	ldr	r3, [pc, #224]	; (8002248 <DecodeCmd+0x564>)
 8002166:	801a      	strh	r2, [r3, #0]
    	if(w1.i16[0] < 0){
 8002168:	4b36      	ldr	r3, [pc, #216]	; (8002244 <DecodeCmd+0x560>)
 800216a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800216e:	2b00      	cmp	r3, #0
 8002170:	da13      	bge.n	800219a <DecodeCmd+0x4b6>
    		w1.i16[0] *= -1;
 8002172:	4b34      	ldr	r3, [pc, #208]	; (8002244 <DecodeCmd+0x560>)
 8002174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002178:	b29b      	uxth	r3, r3
 800217a:	425b      	negs	r3, r3
 800217c:	b29b      	uxth	r3, r3
 800217e:	b21a      	sxth	r2, r3
 8002180:	4b30      	ldr	r3, [pc, #192]	; (8002244 <DecodeCmd+0x560>)
 8002182:	801a      	strh	r2, [r3, #0]
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, w1.i16[0]);
 8002184:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <DecodeCmd+0x560>)
 8002186:	f9b3 2000 	ldrsh.w	r2, [r3]
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <DecodeCmd+0x55c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	635a      	str	r2, [r3, #52]	; 0x34
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <DecodeCmd+0x55c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2200      	movs	r2, #0
 8002196:	639a      	str	r2, [r3, #56]	; 0x38
 8002198:	e009      	b.n	80021ae <DecodeCmd+0x4ca>
    	}
    	else{
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800219a:	4b29      	ldr	r3, [pc, #164]	; (8002240 <DecodeCmd+0x55c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, w1.i16[0]);
 80021a2:	4b28      	ldr	r3, [pc, #160]	; (8002244 <DecodeCmd+0x560>)
 80021a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <DecodeCmd+0x55c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	639a      	str	r2, [r3, #56]	; 0x38
    	}
    	if(w1.i16[1] < 0){
 80021ae:	4b25      	ldr	r3, [pc, #148]	; (8002244 <DecodeCmd+0x560>)
 80021b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	da13      	bge.n	80021e0 <DecodeCmd+0x4fc>
    		w1.i16[1] *= -1;
 80021b8:	4b22      	ldr	r3, [pc, #136]	; (8002244 <DecodeCmd+0x560>)
 80021ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	425b      	negs	r3, r3
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <DecodeCmd+0x560>)
 80021c8:	805a      	strh	r2, [r3, #2]
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, w1.i16[1]);
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <DecodeCmd+0x560>)
 80021cc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <DecodeCmd+0x55c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	63da      	str	r2, [r3, #60]	; 0x3c
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80021d6:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <DecodeCmd+0x55c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2200      	movs	r2, #0
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
 80021de:	e009      	b.n	80021f4 <DecodeCmd+0x510>
    	}
    	else{
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <DecodeCmd+0x55c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2200      	movs	r2, #0
 80021e6:	63da      	str	r2, [r3, #60]	; 0x3c
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, w1.i16[1]);
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <DecodeCmd+0x560>)
 80021ea:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <DecodeCmd+0x55c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
    	}
    	PutHeaderOnTx(TX, 0xA4, 5);
 80021f4:	2205      	movs	r2, #5
 80021f6:	21a4      	movs	r1, #164	; 0xa4
 80021f8:	6838      	ldr	r0, [r7, #0]
 80021fa:	f7ff fc55 	bl	8001aa8 <PutHeaderOnTx>
    	PutByteOnTx(TX, w.u8[0]);
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <DecodeCmd+0x558>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	4619      	mov	r1, r3
 8002204:	6838      	ldr	r0, [r7, #0]
 8002206:	f7ff fc27 	bl	8001a58 <PutByteOnTx>
    	PutByteOnTx(TX, w.u8[1]);
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <DecodeCmd+0x558>)
 800220c:	785b      	ldrb	r3, [r3, #1]
 800220e:	4619      	mov	r1, r3
 8002210:	6838      	ldr	r0, [r7, #0]
 8002212:	f7ff fc21 	bl	8001a58 <PutByteOnTx>
    	PutByteOnTx(TX, w.u8[2]);
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <DecodeCmd+0x558>)
 8002218:	789b      	ldrb	r3, [r3, #2]
 800221a:	4619      	mov	r1, r3
 800221c:	6838      	ldr	r0, [r7, #0]
 800221e:	f7ff fc1b 	bl	8001a58 <PutByteOnTx>
    	PutByteOnTx(TX, w.u8[3]);
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <DecodeCmd+0x558>)
 8002224:	78db      	ldrb	r3, [r3, #3]
 8002226:	4619      	mov	r1, r3
 8002228:	6838      	ldr	r0, [r7, #0]
 800222a:	f7ff fc15 	bl	8001a58 <PutByteOnTx>
    	PutByteOnTx(TX, TX->cks);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	7a1b      	ldrb	r3, [r3, #8]
 8002232:	4619      	mov	r1, r3
 8002234:	6838      	ldr	r0, [r7, #0]
 8002236:	f7ff fc0f 	bl	8001a58 <PutByteOnTx>
    	break;
 800223a:	e141      	b.n	80024c0 <DecodeCmd+0x7dc>
 800223c:	20000824 	.word	0x20000824
 8002240:	200006cc 	.word	0x200006cc
 8002244:	20000828 	.word	0x20000828
 8002248:	20001c3e 	.word	0x20001c3e
    case 0xB0://SET transparent ESP01
   		ESP01DEBUG  = 1;
 800224c:	4a9e      	ldr	r2, [pc, #632]	; (80024c8 <DecodeCmd+0x7e4>)
 800224e:	7813      	ldrb	r3, [r2, #0]
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	7013      	strb	r3, [r2, #0]
    	ChangeLedStatus(0x0000FFFF, LEDESP01DBG);
 8002256:	f04f 31ea 	mov.w	r1, #3941264106	; 0xeaeaeaea
 800225a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800225e:	f000 f9d3 	bl	8002608 <ChangeLedStatus>
   		countPlus = 0;
 8002262:	4b9a      	ldr	r3, [pc, #616]	; (80024cc <DecodeCmd+0x7e8>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
    	break;
 8002268:	e12a      	b.n	80024c0 <DecodeCmd+0x7dc>
    case 0xB1://SET WIFI SSID and PASSWORD
    	for(w.u8[0] = 0; w.u8[0] < 48; w.u8[0]++){
 800226a:	4b99      	ldr	r3, [pc, #612]	; (80024d0 <DecodeCmd+0x7ec>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	e019      	b.n	80022a6 <DecodeCmd+0x5c2>
    		w.u8[1] = GetByteFromRx(RX, 1, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2101      	movs	r1, #1
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fcfb 	bl	8001c72 <GetByteFromRx>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	4b93      	ldr	r3, [pc, #588]	; (80024d0 <DecodeCmd+0x7ec>)
 8002282:	705a      	strb	r2, [r3, #1]
    		ssid[w.u8[0]] = w.u8[1];
 8002284:	4b92      	ldr	r3, [pc, #584]	; (80024d0 <DecodeCmd+0x7ec>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	4b91      	ldr	r3, [pc, #580]	; (80024d0 <DecodeCmd+0x7ec>)
 800228c:	7859      	ldrb	r1, [r3, #1]
 800228e:	4b91      	ldr	r3, [pc, #580]	; (80024d4 <DecodeCmd+0x7f0>)
 8002290:	5499      	strb	r1, [r3, r2]
    		if(w.u8[1] == '\0')
 8002292:	4b8f      	ldr	r3, [pc, #572]	; (80024d0 <DecodeCmd+0x7ec>)
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <DecodeCmd+0x5cc>
    	for(w.u8[0] = 0; w.u8[0] < 48; w.u8[0]++){
 800229a:	4b8d      	ldr	r3, [pc, #564]	; (80024d0 <DecodeCmd+0x7ec>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	3301      	adds	r3, #1
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b8b      	ldr	r3, [pc, #556]	; (80024d0 <DecodeCmd+0x7ec>)
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	4b8a      	ldr	r3, [pc, #552]	; (80024d0 <DecodeCmd+0x7ec>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b2f      	cmp	r3, #47	; 0x2f
 80022ac:	d9e1      	bls.n	8002272 <DecodeCmd+0x58e>
 80022ae:	e000      	b.n	80022b2 <DecodeCmd+0x5ce>
    			break;
 80022b0:	bf00      	nop
    	}
		ssid[47] = '\0';
 80022b2:	4b88      	ldr	r3, [pc, #544]	; (80024d4 <DecodeCmd+0x7f0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    	for(w.u8[0] = 0; w.u8[0] < 32; w.u8[0]++){
 80022ba:	4b85      	ldr	r3, [pc, #532]	; (80024d0 <DecodeCmd+0x7ec>)
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	e019      	b.n	80022f6 <DecodeCmd+0x612>
    		w.u8[1] = GetByteFromRx(RX, 1, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2101      	movs	r1, #1
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fcd3 	bl	8001c72 <GetByteFromRx>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	4b7f      	ldr	r3, [pc, #508]	; (80024d0 <DecodeCmd+0x7ec>)
 80022d2:	705a      	strb	r2, [r3, #1]
    		password[w.u8[0]] = w.u8[1];
 80022d4:	4b7e      	ldr	r3, [pc, #504]	; (80024d0 <DecodeCmd+0x7ec>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b7d      	ldr	r3, [pc, #500]	; (80024d0 <DecodeCmd+0x7ec>)
 80022dc:	7859      	ldrb	r1, [r3, #1]
 80022de:	4b7e      	ldr	r3, [pc, #504]	; (80024d8 <DecodeCmd+0x7f4>)
 80022e0:	5499      	strb	r1, [r3, r2]
    		if(w.u8[1] == '\0')
 80022e2:	4b7b      	ldr	r3, [pc, #492]	; (80024d0 <DecodeCmd+0x7ec>)
 80022e4:	785b      	ldrb	r3, [r3, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <DecodeCmd+0x61c>
    	for(w.u8[0] = 0; w.u8[0] < 32; w.u8[0]++){
 80022ea:	4b79      	ldr	r3, [pc, #484]	; (80024d0 <DecodeCmd+0x7ec>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	3301      	adds	r3, #1
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b77      	ldr	r3, [pc, #476]	; (80024d0 <DecodeCmd+0x7ec>)
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <DecodeCmd+0x7ec>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b1f      	cmp	r3, #31
 80022fc:	d9e1      	bls.n	80022c2 <DecodeCmd+0x5de>
 80022fe:	e000      	b.n	8002302 <DecodeCmd+0x61e>
    			break;
 8002300:	bf00      	nop
    	}
		password[31] = '\0';
 8002302:	4b75      	ldr	r3, [pc, #468]	; (80024d8 <DecodeCmd+0x7f4>)
 8002304:	2200      	movs	r2, #0
 8002306:	77da      	strb	r2, [r3, #31]
    	ESP01SetWIFI(ssid, password);
 8002308:	4973      	ldr	r1, [pc, #460]	; (80024d8 <DecodeCmd+0x7f4>)
 800230a:	4872      	ldr	r0, [pc, #456]	; (80024d4 <DecodeCmd+0x7f0>)
 800230c:	f7fd ff96 	bl	800023c <ESP01SetWIFI>
    	PutHeaderOnTx(TX, 0xB1, 48+32+1);
 8002310:	2251      	movs	r2, #81	; 0x51
 8002312:	21b1      	movs	r1, #177	; 0xb1
 8002314:	6838      	ldr	r0, [r7, #0]
 8002316:	f7ff fbc7 	bl	8001aa8 <PutHeaderOnTx>
    	PutBufOnTx(TX, (uint8_t *)ssid, 48);
 800231a:	2230      	movs	r2, #48	; 0x30
 800231c:	496d      	ldr	r1, [pc, #436]	; (80024d4 <DecodeCmd+0x7f0>)
 800231e:	6838      	ldr	r0, [r7, #0]
 8002320:	f7ff fb62 	bl	80019e8 <PutBufOnTx>
    	PutBufOnTx(TX, (uint8_t *)password, 32);
 8002324:	2220      	movs	r2, #32
 8002326:	496c      	ldr	r1, [pc, #432]	; (80024d8 <DecodeCmd+0x7f4>)
 8002328:	6838      	ldr	r0, [r7, #0]
 800232a:	f7ff fb5d 	bl	80019e8 <PutBufOnTx>
    	PutByteOnTx(TX, TX->cks);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	7a1b      	ldrb	r3, [r3, #8]
 8002332:	4619      	mov	r1, r3
 8002334:	6838      	ldr	r0, [r7, #0]
 8002336:	f7ff fb8f 	bl	8001a58 <PutByteOnTx>
    	break;
 800233a:	e0c1      	b.n	80024c0 <DecodeCmd+0x7dc>
    case 0xB2://SET RemoteIP, RemotePort and LocalPort
    	if(ESP01GetLastSTATE() == ESP01WIFIDISCONNECTED){
 800233c:	f7fe faa6 	bl	800088c <ESP01GetLastSTATE>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10f      	bne.n	8002366 <DecodeCmd+0x682>
    		PutHeaderOnTx(TX, 0xB2, 2);
 8002346:	2202      	movs	r2, #2
 8002348:	21b2      	movs	r1, #178	; 0xb2
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f7ff fbac 	bl	8001aa8 <PutHeaderOnTx>
    		PutByteOnTx(TX, 0xFF);
 8002350:	21ff      	movs	r1, #255	; 0xff
 8002352:	6838      	ldr	r0, [r7, #0]
 8002354:	f7ff fb80 	bl	8001a58 <PutByteOnTx>
    		PutByteOnTx(TX, TX->cks);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	7a1b      	ldrb	r3, [r3, #8]
 800235c:	4619      	mov	r1, r3
 800235e:	6838      	ldr	r0, [r7, #0]
 8002360:	f7ff fb7a 	bl	8001a58 <PutByteOnTx>
    		break;
 8002364:	e0ac      	b.n	80024c0 <DecodeCmd+0x7dc>
    	}
    	for(w.u8[0] = 0; w.u8[0] < 16; w.u8[0]++){
 8002366:	4b5a      	ldr	r3, [pc, #360]	; (80024d0 <DecodeCmd+0x7ec>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e019      	b.n	80023a2 <DecodeCmd+0x6be>
    		w.u8[1] = GetByteFromRx(RX, 1, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2101      	movs	r1, #1
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff fc7d 	bl	8001c72 <GetByteFromRx>
 8002378:	4603      	mov	r3, r0
 800237a:	461a      	mov	r2, r3
 800237c:	4b54      	ldr	r3, [pc, #336]	; (80024d0 <DecodeCmd+0x7ec>)
 800237e:	705a      	strb	r2, [r3, #1]
    		remoteIP[w.u8[0]] = w.u8[1];
 8002380:	4b53      	ldr	r3, [pc, #332]	; (80024d0 <DecodeCmd+0x7ec>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b52      	ldr	r3, [pc, #328]	; (80024d0 <DecodeCmd+0x7ec>)
 8002388:	7859      	ldrb	r1, [r3, #1]
 800238a:	4b54      	ldr	r3, [pc, #336]	; (80024dc <DecodeCmd+0x7f8>)
 800238c:	5499      	strb	r1, [r3, r2]
    		if(w.u8[1] == '\0')
 800238e:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <DecodeCmd+0x7ec>)
 8002390:	785b      	ldrb	r3, [r3, #1]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <DecodeCmd+0x6c8>
    	for(w.u8[0] = 0; w.u8[0] < 16; w.u8[0]++){
 8002396:	4b4e      	ldr	r3, [pc, #312]	; (80024d0 <DecodeCmd+0x7ec>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b4c      	ldr	r3, [pc, #304]	; (80024d0 <DecodeCmd+0x7ec>)
 80023a0:	701a      	strb	r2, [r3, #0]
 80023a2:	4b4b      	ldr	r3, [pc, #300]	; (80024d0 <DecodeCmd+0x7ec>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b0f      	cmp	r3, #15
 80023a8:	d9e1      	bls.n	800236e <DecodeCmd+0x68a>
 80023aa:	e000      	b.n	80023ae <DecodeCmd+0x6ca>
    			break;
 80023ac:	bf00      	nop
    	}
		remoteIP[15] = '\0';
 80023ae:	4b4b      	ldr	r3, [pc, #300]	; (80024dc <DecodeCmd+0x7f8>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	73da      	strb	r2, [r3, #15]
		w.u8[0] = GetByteFromRx(RX, 1, 0);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2101      	movs	r1, #1
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff fc5a 	bl	8001c72 <GetByteFromRx>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <DecodeCmd+0x7ec>)
 80023c4:	701a      	strb	r2, [r3, #0]
		w.u8[1] = GetByteFromRx(RX, 1, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2101      	movs	r1, #1
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff fc51 	bl	8001c72 <GetByteFromRx>
 80023d0:	4603      	mov	r3, r0
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b3e      	ldr	r3, [pc, #248]	; (80024d0 <DecodeCmd+0x7ec>)
 80023d6:	705a      	strb	r2, [r3, #1]
		w.u8[2] = GetByteFromRx(RX, 1, 0);
 80023d8:	2200      	movs	r2, #0
 80023da:	2101      	movs	r1, #1
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff fc48 	bl	8001c72 <GetByteFromRx>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <DecodeCmd+0x7ec>)
 80023e8:	709a      	strb	r2, [r3, #2]
		w.u8[3] = GetByteFromRx(RX, 1, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2101      	movs	r1, #1
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff fc3f 	bl	8001c72 <GetByteFromRx>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b35      	ldr	r3, [pc, #212]	; (80024d0 <DecodeCmd+0x7ec>)
 80023fa:	70da      	strb	r2, [r3, #3]
		remotePort = w.u16[0];
 80023fc:	4b34      	ldr	r3, [pc, #208]	; (80024d0 <DecodeCmd+0x7ec>)
 80023fe:	881a      	ldrh	r2, [r3, #0]
 8002400:	4b37      	ldr	r3, [pc, #220]	; (80024e0 <DecodeCmd+0x7fc>)
 8002402:	801a      	strh	r2, [r3, #0]
		localPort = w.u16[1];
 8002404:	4b32      	ldr	r3, [pc, #200]	; (80024d0 <DecodeCmd+0x7ec>)
 8002406:	885a      	ldrh	r2, [r3, #2]
 8002408:	4b36      	ldr	r3, [pc, #216]	; (80024e4 <DecodeCmd+0x800>)
 800240a:	801a      	strh	r2, [r3, #0]
		ESP01ConnectUDP(remoteIP, remotePort, localPort);
 800240c:	4b34      	ldr	r3, [pc, #208]	; (80024e0 <DecodeCmd+0x7fc>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	4a34      	ldr	r2, [pc, #208]	; (80024e4 <DecodeCmd+0x800>)
 8002412:	8812      	ldrh	r2, [r2, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	4831      	ldr	r0, [pc, #196]	; (80024dc <DecodeCmd+0x7f8>)
 8002418:	f7fd ff32 	bl	8000280 <ESP01ConnectUDP>
		PutHeaderOnTx(TX, 0xB2, 22);
 800241c:	2216      	movs	r2, #22
 800241e:	21b2      	movs	r1, #178	; 0xb2
 8002420:	6838      	ldr	r0, [r7, #0]
 8002422:	f7ff fb41 	bl	8001aa8 <PutHeaderOnTx>
		PutByteOnTx(TX, 0x0D);
 8002426:	210d      	movs	r1, #13
 8002428:	6838      	ldr	r0, [r7, #0]
 800242a:	f7ff fb15 	bl	8001a58 <PutByteOnTx>
		PutBufOnTx(TX, (uint8_t *)remoteIP, 16);
 800242e:	2210      	movs	r2, #16
 8002430:	492a      	ldr	r1, [pc, #168]	; (80024dc <DecodeCmd+0x7f8>)
 8002432:	6838      	ldr	r0, [r7, #0]
 8002434:	f7ff fad8 	bl	80019e8 <PutBufOnTx>
		PutBufOnTx(TX, (uint8_t *)&remotePort, 2);
 8002438:	2202      	movs	r2, #2
 800243a:	4929      	ldr	r1, [pc, #164]	; (80024e0 <DecodeCmd+0x7fc>)
 800243c:	6838      	ldr	r0, [r7, #0]
 800243e:	f7ff fad3 	bl	80019e8 <PutBufOnTx>
		PutBufOnTx(TX, (uint8_t *)&localPort, 2);
 8002442:	2202      	movs	r2, #2
 8002444:	4927      	ldr	r1, [pc, #156]	; (80024e4 <DecodeCmd+0x800>)
 8002446:	6838      	ldr	r0, [r7, #0]
 8002448:	f7ff face 	bl	80019e8 <PutBufOnTx>
		PutByteOnTx(TX, TX->cks);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	7a1b      	ldrb	r3, [r3, #8]
 8002450:	4619      	mov	r1, r3
 8002452:	6838      	ldr	r0, [r7, #0]
 8002454:	f7ff fb00 	bl	8001a58 <PutByteOnTx>
    	break;
 8002458:	e032      	b.n	80024c0 <DecodeCmd+0x7dc>
    case 0xF0://ALIVE
    	PutHeaderOnTx(TX, 0xF0, 2);
 800245a:	2202      	movs	r2, #2
 800245c:	21f0      	movs	r1, #240	; 0xf0
 800245e:	6838      	ldr	r0, [r7, #0]
 8002460:	f7ff fb22 	bl	8001aa8 <PutHeaderOnTx>
        PutByteOnTx(TX, 0x0D);
 8002464:	210d      	movs	r1, #13
 8002466:	6838      	ldr	r0, [r7, #0]
 8002468:	f7ff faf6 	bl	8001a58 <PutByteOnTx>
        PutByteOnTx(TX, TX->cks);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	7a1b      	ldrb	r3, [r3, #8]
 8002470:	4619      	mov	r1, r3
 8002472:	6838      	ldr	r0, [r7, #0]
 8002474:	f7ff faf0 	bl	8001a58 <PutByteOnTx>
        break;
 8002478:	e022      	b.n	80024c0 <DecodeCmd+0x7dc>
    case 0xF1://FIRMWARE
        PutStrOntx(TX, "+&DBG");
 800247a:	491b      	ldr	r1, [pc, #108]	; (80024e8 <DecodeCmd+0x804>)
 800247c:	6838      	ldr	r0, [r7, #0]
 800247e:	f7ff fbc0 	bl	8001c02 <PutStrOntx>
        PutStrOntx(TX, FIRMWARE);
 8002482:	491a      	ldr	r1, [pc, #104]	; (80024ec <DecodeCmd+0x808>)
 8002484:	6838      	ldr	r0, [r7, #0]
 8002486:	f7ff fbbc 	bl	8001c02 <PutStrOntx>
        PutByteOnTx(TX, '\n');
 800248a:	210a      	movs	r1, #10
 800248c:	6838      	ldr	r0, [r7, #0]
 800248e:	f7ff fae3 	bl	8001a58 <PutByteOnTx>
        break;
 8002492:	e015      	b.n	80024c0 <DecodeCmd+0x7dc>
    default:
        PutHeaderOnTx(TX, RX->buf[RX->iData], 2);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	8952      	ldrh	r2, [r2, #10]
 800249c:	4413      	add	r3, r2
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2202      	movs	r2, #2
 80024a2:	4619      	mov	r1, r3
 80024a4:	6838      	ldr	r0, [r7, #0]
 80024a6:	f7ff faff 	bl	8001aa8 <PutHeaderOnTx>
        PutByteOnTx(TX, 0xFF);
 80024aa:	21ff      	movs	r1, #255	; 0xff
 80024ac:	6838      	ldr	r0, [r7, #0]
 80024ae:	f7ff fad3 	bl	8001a58 <PutByteOnTx>
        PutByteOnTx(TX, TX->cks);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	7a1b      	ldrb	r3, [r3, #8]
 80024b6:	4619      	mov	r1, r3
 80024b8:	6838      	ldr	r0, [r7, #0]
 80024ba:	f7ff facd 	bl	8001a58 <PutByteOnTx>
        break;
 80024be:	bf00      	nop
    }

}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000820 	.word	0x20000820
 80024cc:	20001c40 	.word	0x20001c40
 80024d0:	20000824 	.word	0x20000824
 80024d4:	20000874 	.word	0x20000874
 80024d8:	200008a4 	.word	0x200008a4
 80024dc:	200008c4 	.word	0x200008c4
 80024e0:	200008d4 	.word	0x200008d4
 80024e4:	200008d6 	.word	0x200008d6
 80024e8:	0800a45c 	.word	0x0800a45c
 80024ec:	0800a5a4 	.word	0x0800a5a4

080024f0 <Do100ms>:

void Do100ms(){
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	timeOut100ms = 10;
 80024f4:	4b3c      	ldr	r3, [pc, #240]	; (80025e8 <Do100ms+0xf8>)
 80024f6:	220a      	movs	r2, #10
 80024f8:	701a      	strb	r2, [r3, #0]

	if(maskLedStatus & ledStatus)
 80024fa:	4b3c      	ldr	r3, [pc, #240]	; (80025ec <Do100ms+0xfc>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4b3c      	ldr	r3, [pc, #240]	; (80025f0 <Do100ms+0x100>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d006      	beq.n	8002516 <Do100ms+0x26>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8002508:	2201      	movs	r2, #1
 800250a:	2120      	movs	r1, #32
 800250c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002510:	f003 fd5e 	bl	8005fd0 <HAL_GPIO_WritePin>
 8002514:	e005      	b.n	8002522 <Do100ms+0x32>
	else
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002516:	2200      	movs	r2, #0
 8002518:	2120      	movs	r1, #32
 800251a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800251e:	f003 fd57 	bl	8005fd0 <HAL_GPIO_WritePin>
	maskLedStatus >>= 1;
 8002522:	4b32      	ldr	r3, [pc, #200]	; (80025ec <Do100ms+0xfc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	4a30      	ldr	r2, [pc, #192]	; (80025ec <Do100ms+0xfc>)
 800252a:	6013      	str	r3, [r2, #0]
	if(!maskLedStatus)
 800252c:	4b2f      	ldr	r3, [pc, #188]	; (80025ec <Do100ms+0xfc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d103      	bne.n	800253c <Do100ms+0x4c>
		maskLedStatus = 0x80000000;
 8002534:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <Do100ms+0xfc>)
 8002536:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800253a:	601a      	str	r2, [r3, #0]

	if(timeOutTestMotors){
 800253c:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <Do100ms+0x104>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d019      	beq.n	8002578 <Do100ms+0x88>
		timeOutTestMotors--;
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <Do100ms+0x104>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	4b29      	ldr	r3, [pc, #164]	; (80025f4 <Do100ms+0x104>)
 800254e:	801a      	strh	r2, [r3, #0]
		if(!timeOutTestMotors){
 8002550:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <Do100ms+0x104>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10f      	bne.n	8002578 <Do100ms+0x88>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002558:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <Do100ms+0x108>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2200      	movs	r2, #0
 800255e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <Do100ms+0x108>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2200      	movs	r2, #0
 8002566:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8002568:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <Do100ms+0x108>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2200      	movs	r2, #0
 800256e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8002570:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <Do100ms+0x108>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}

	if(timeOutSendAlive){
 8002578:	4b20      	ldr	r3, [pc, #128]	; (80025fc <Do100ms+0x10c>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d030      	beq.n	80025e2 <Do100ms+0xf2>
		timeOutSendAlive--;
 8002580:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <Do100ms+0x10c>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <Do100ms+0x10c>)
 800258a:	801a      	strh	r2, [r3, #0]
		if(!timeOutSendAlive){
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <Do100ms+0x10c>)
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d126      	bne.n	80025e2 <Do100ms+0xf2>
			timeOutSendAlive = 200;
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <Do100ms+0x10c>)
 8002596:	22c8      	movs	r2, #200	; 0xc8
 8002598:	801a      	strh	r2, [r3, #0]
			TX.cks = 0;
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <Do100ms+0x110>)
 800259c:	2200      	movs	r2, #0
 800259e:	721a      	strb	r2, [r3, #8]
			PutHeaderOnTx(&TX, 0xF0, 2);
 80025a0:	2202      	movs	r2, #2
 80025a2:	21f0      	movs	r1, #240	; 0xf0
 80025a4:	4816      	ldr	r0, [pc, #88]	; (8002600 <Do100ms+0x110>)
 80025a6:	f7ff fa7f 	bl	8001aa8 <PutHeaderOnTx>
			PutByteOnTx(&TX, 0x0E);
 80025aa:	210e      	movs	r1, #14
 80025ac:	4814      	ldr	r0, [pc, #80]	; (8002600 <Do100ms+0x110>)
 80025ae:	f7ff fa53 	bl	8001a58 <PutByteOnTx>
			PutByteOnTx(&TX, TX.cks);
 80025b2:	4b13      	ldr	r3, [pc, #76]	; (8002600 <Do100ms+0x110>)
 80025b4:	7a1b      	ldrb	r3, [r3, #8]
 80025b6:	4619      	mov	r1, r3
 80025b8:	4811      	ldr	r0, [pc, #68]	; (8002600 <Do100ms+0x110>)
 80025ba:	f7ff fa4d 	bl	8001a58 <PutByteOnTx>
			TXESP01.cks = 0;
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <Do100ms+0x114>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	721a      	strb	r2, [r3, #8]
			PutHeaderOnTx(&TXESP01, 0xF0, 2);
 80025c4:	2202      	movs	r2, #2
 80025c6:	21f0      	movs	r1, #240	; 0xf0
 80025c8:	480e      	ldr	r0, [pc, #56]	; (8002604 <Do100ms+0x114>)
 80025ca:	f7ff fa6d 	bl	8001aa8 <PutHeaderOnTx>
			PutByteOnTx(&TXESP01, 0x0F);
 80025ce:	210f      	movs	r1, #15
 80025d0:	480c      	ldr	r0, [pc, #48]	; (8002604 <Do100ms+0x114>)
 80025d2:	f7ff fa41 	bl	8001a58 <PutByteOnTx>
			PutByteOnTx(&TXESP01, TXESP01.cks);
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <Do100ms+0x114>)
 80025d8:	7a1b      	ldrb	r3, [r3, #8]
 80025da:	4619      	mov	r1, r3
 80025dc:	4809      	ldr	r0, [pc, #36]	; (8002604 <Do100ms+0x114>)
 80025de:	f7ff fa3b 	bl	8001a58 <PutByteOnTx>
		}
	}
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20001c3c 	.word	0x20001c3c
 80025ec:	20001c30 	.word	0x20001c30
 80025f0:	20001c34 	.word	0x20001c34
 80025f4:	20001c3e 	.word	0x20001c3e
 80025f8:	200006cc 	.word	0x200006cc
 80025fc:	20000bdc 	.word	0x20000bdc
 8002600:	20000854 	.word	0x20000854
 8002604:	20000864 	.word	0x20000864

08002608 <ChangeLedStatus>:

void ChangeLedStatus(uint32_t aMask, uint32_t aLedStatus){
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
	ledStatus &= aMask;
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <ChangeLedStatus+0x30>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4013      	ands	r3, r2
 800261a:	4a07      	ldr	r2, [pc, #28]	; (8002638 <ChangeLedStatus+0x30>)
 800261c:	6013      	str	r3, [r2, #0]
	ledStatus |= aLedStatus;
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <ChangeLedStatus+0x30>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <ChangeLedStatus+0x30>)
 8002628:	6013      	str	r3, [r2, #0]
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20001c34 	.word	0x20001c34

0800263c <ESP01ChEN>:



void ESP01ChEN(uint32_t value){
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(CH_ENA_GPIO_Port, CH_ENA_Pin, value);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800264e:	4803      	ldr	r0, [pc, #12]	; (800265c <ESP01ChEN+0x20>)
 8002650:	f003 fcbe 	bl	8005fd0 <HAL_GPIO_WritePin>
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	48000800 	.word	0x48000800

08002660 <ESP01DatagramReady>:

void ESP01DatagramReady(uint8_t *buf, uint16_t length){
 8002660:	b490      	push	{r4, r7}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<length; i++)
 800266c:	2300      	movs	r3, #0
 800266e:	81fb      	strh	r3, [r7, #14]
 8002670:	e010      	b.n	8002694 <ESP01DatagramReady+0x34>
		RXESP01.buf[RXESP01.iw++] = buf[i];
 8002672:	89fb      	ldrh	r3, [r7, #14]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	441a      	add	r2, r3
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <ESP01DatagramReady+0x48>)
 800267a:	6819      	ldr	r1, [r3, #0]
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <ESP01DatagramReady+0x48>)
 800267e:	88db      	ldrh	r3, [r3, #6]
 8002680:	1c58      	adds	r0, r3, #1
 8002682:	b284      	uxth	r4, r0
 8002684:	4808      	ldr	r0, [pc, #32]	; (80026a8 <ESP01DatagramReady+0x48>)
 8002686:	80c4      	strh	r4, [r0, #6]
 8002688:	440b      	add	r3, r1
 800268a:	7812      	ldrb	r2, [r2, #0]
 800268c:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<length; i++)
 800268e:	89fb      	ldrh	r3, [r7, #14]
 8002690:	3301      	adds	r3, #1
 8002692:	81fb      	strh	r3, [r7, #14]
 8002694:	89fa      	ldrh	r2, [r7, #14]
 8002696:	887b      	ldrh	r3, [r7, #2]
 8002698:	429a      	cmp	r2, r3
 800269a:	d3ea      	bcc.n	8002672 <ESP01DatagramReady+0x12>
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc90      	pop	{r4, r7}
 80026a6:	4770      	bx	lr
 80026a8:	20000840 	.word	0x20000840

080026ac <ESP01WIFIConnected>:

void ESP01WIFIConnected(){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
	PutStrOntx(&TX, "+&DBGWIFI Connected\n");
 80026b0:	4905      	ldr	r1, [pc, #20]	; (80026c8 <ESP01WIFIConnected+0x1c>)
 80026b2:	4806      	ldr	r0, [pc, #24]	; (80026cc <ESP01WIFIConnected+0x20>)
 80026b4:	f7ff faa5 	bl	8001c02 <PutStrOntx>
	ChangeLedStatus(0xFFFF0000, LEDWIFICONNECTED);
 80026b8:	f64e 61a0 	movw	r1, #61088	; 0xeea0
 80026bc:	4804      	ldr	r0, [pc, #16]	; (80026d0 <ESP01WIFIConnected+0x24>)
 80026be:	f7ff ffa3 	bl	8002608 <ChangeLedStatus>
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	0800a464 	.word	0x0800a464
 80026cc:	20000854 	.word	0x20000854
 80026d0:	ffff0000 	.word	0xffff0000

080026d4 <ESP01WIFIDisconnected>:

void ESP01WIFIDisconnected(){
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
	PutStrOntx(&TX, "+&DBGWIFI Disconnected\n");
 80026d8:	4905      	ldr	r1, [pc, #20]	; (80026f0 <ESP01WIFIDisconnected+0x1c>)
 80026da:	4806      	ldr	r0, [pc, #24]	; (80026f4 <ESP01WIFIDisconnected+0x20>)
 80026dc:	f7ff fa91 	bl	8001c02 <PutStrOntx>
	ChangeLedStatus(0xFFFF0000, LEDWIFIDISCONNECTED);
 80026e0:	f44f 416e 	mov.w	r1, #60928	; 0xee00
 80026e4:	4804      	ldr	r0, [pc, #16]	; (80026f8 <ESP01WIFIDisconnected+0x24>)
 80026e6:	f7ff ff8f 	bl	8002608 <ChangeLedStatus>
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	0800a47c 	.word	0x0800a47c
 80026f4:	20000854 	.word	0x20000854
 80026f8:	ffff0000 	.word	0xffff0000

080026fc <ESP01UDPReady>:

void ESP01UDPReady(){
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
	PutStrOntx(&TX, "+&DBGUDP Connected\n");
 8002700:	4905      	ldr	r1, [pc, #20]	; (8002718 <ESP01UDPReady+0x1c>)
 8002702:	4806      	ldr	r0, [pc, #24]	; (800271c <ESP01UDPReady+0x20>)
 8002704:	f7ff fa7d 	bl	8001c02 <PutStrOntx>
	ChangeLedStatus(0xFFFF0000, LEDUDPREADY);
 8002708:	f64e 61a8 	movw	r1, #61096	; 0xeea8
 800270c:	4804      	ldr	r0, [pc, #16]	; (8002720 <ESP01UDPReady+0x24>)
 800270e:	f7ff ff7b 	bl	8002608 <ChangeLedStatus>
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	0800a494 	.word	0x0800a494
 800271c:	20000854 	.word	0x20000854
 8002720:	ffff0000 	.word	0xffff0000

08002724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	flag1.byte = 0;
 8002728:	4b9f      	ldr	r3, [pc, #636]	; (80029a8 <main+0x284>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
	RX.buf = bufRX;
 800272e:	4b9f      	ldr	r3, [pc, #636]	; (80029ac <main+0x288>)
 8002730:	4a9f      	ldr	r2, [pc, #636]	; (80029b0 <main+0x28c>)
 8002732:	601a      	str	r2, [r3, #0]
	RX.header = 0;
 8002734:	4b9d      	ldr	r3, [pc, #628]	; (80029ac <main+0x288>)
 8002736:	2200      	movs	r2, #0
 8002738:	711a      	strb	r2, [r3, #4]
	RX.ir = 0;
 800273a:	4b9c      	ldr	r3, [pc, #624]	; (80029ac <main+0x288>)
 800273c:	2200      	movs	r2, #0
 800273e:	811a      	strh	r2, [r3, #8]
	RX.iw = 0;
 8002740:	4b9a      	ldr	r3, [pc, #616]	; (80029ac <main+0x288>)
 8002742:	2200      	movs	r2, #0
 8002744:	80da      	strh	r2, [r3, #6]
	RX.maskSize = RXBUFSIZE - 1;
 8002746:	4b99      	ldr	r3, [pc, #612]	; (80029ac <main+0x288>)
 8002748:	22ff      	movs	r2, #255	; 0xff
 800274a:	821a      	strh	r2, [r3, #16]

	TX.buf = bufTX;
 800274c:	4b99      	ldr	r3, [pc, #612]	; (80029b4 <main+0x290>)
 800274e:	4a9a      	ldr	r2, [pc, #616]	; (80029b8 <main+0x294>)
 8002750:	601a      	str	r2, [r3, #0]
	TX.ir = 0;
 8002752:	4b98      	ldr	r3, [pc, #608]	; (80029b4 <main+0x290>)
 8002754:	2200      	movs	r2, #0
 8002756:	80da      	strh	r2, [r3, #6]
	TX.iw = 0;
 8002758:	4b96      	ldr	r3, [pc, #600]	; (80029b4 <main+0x290>)
 800275a:	2200      	movs	r2, #0
 800275c:	809a      	strh	r2, [r3, #4]
	TX.maskSize = TXBUFSIZE - 1;
 800275e:	4b95      	ldr	r3, [pc, #596]	; (80029b4 <main+0x290>)
 8002760:	22ff      	movs	r2, #255	; 0xff
 8002762:	819a      	strh	r2, [r3, #12]

	RXESP01.buf = bufRXESP01;
 8002764:	4b95      	ldr	r3, [pc, #596]	; (80029bc <main+0x298>)
 8002766:	4a96      	ldr	r2, [pc, #600]	; (80029c0 <main+0x29c>)
 8002768:	601a      	str	r2, [r3, #0]
	RXESP01.header = 0;
 800276a:	4b94      	ldr	r3, [pc, #592]	; (80029bc <main+0x298>)
 800276c:	2200      	movs	r2, #0
 800276e:	711a      	strb	r2, [r3, #4]
	RXESP01.ir = 0;
 8002770:	4b92      	ldr	r3, [pc, #584]	; (80029bc <main+0x298>)
 8002772:	2200      	movs	r2, #0
 8002774:	811a      	strh	r2, [r3, #8]
	RXESP01.iw = 0;
 8002776:	4b91      	ldr	r3, [pc, #580]	; (80029bc <main+0x298>)
 8002778:	2200      	movs	r2, #0
 800277a:	80da      	strh	r2, [r3, #6]
	RXESP01.maskSize = RXESP01BUFSIZE - 1;
 800277c:	4b8f      	ldr	r3, [pc, #572]	; (80029bc <main+0x298>)
 800277e:	227f      	movs	r2, #127	; 0x7f
 8002780:	821a      	strh	r2, [r3, #16]

	TXESP01.buf = bufTXESP01;
 8002782:	4b90      	ldr	r3, [pc, #576]	; (80029c4 <main+0x2a0>)
 8002784:	4a90      	ldr	r2, [pc, #576]	; (80029c8 <main+0x2a4>)
 8002786:	601a      	str	r2, [r3, #0]
	TXESP01.ir = 0;
 8002788:	4b8e      	ldr	r3, [pc, #568]	; (80029c4 <main+0x2a0>)
 800278a:	2200      	movs	r2, #0
 800278c:	80da      	strh	r2, [r3, #6]
	TXESP01.iw = 0;
 800278e:	4b8d      	ldr	r3, [pc, #564]	; (80029c4 <main+0x2a0>)
 8002790:	2200      	movs	r2, #0
 8002792:	809a      	strh	r2, [r3, #4]
	TXESP01.maskSize = TXESP01BUFSIZE - 1;
 8002794:	4b8b      	ldr	r3, [pc, #556]	; (80029c4 <main+0x2a0>)
 8002796:	227f      	movs	r2, #127	; 0x7f
 8002798:	819a      	strh	r2, [r3, #12]

	timeOut100ms = 10;
 800279a:	4b8c      	ldr	r3, [pc, #560]	; (80029cc <main+0x2a8>)
 800279c:	220a      	movs	r2, #10
 800279e:	701a      	strb	r2, [r3, #0]
	ledStatus = LEDIDLE;
 80027a0:	4b8b      	ldr	r3, [pc, #556]	; (80029d0 <main+0x2ac>)
 80027a2:	f04f 4268 	mov.w	r2, #3892314112	; 0xe8000000
 80027a6:	601a      	str	r2, [r3, #0]
	timeOutSendAlive = 200;
 80027a8:	4b8a      	ldr	r3, [pc, #552]	; (80029d4 <main+0x2b0>)
 80027aa:	22c8      	movs	r2, #200	; 0xc8
 80027ac:	801a      	strh	r2, [r3, #0]

	indexADCData = 0;
 80027ae:	4b8a      	ldr	r3, [pc, #552]	; (80029d8 <main+0x2b4>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
	indexADCData10ms -= 40;
 80027b4:	4b89      	ldr	r3, [pc, #548]	; (80029dc <main+0x2b8>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	3b28      	subs	r3, #40	; 0x28
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	4b87      	ldr	r3, [pc, #540]	; (80029dc <main+0x2b8>)
 80027be:	701a      	strb	r2, [r3, #0]
	indexADCData10ms &= (ADCDATASIZE - 1);
 80027c0:	4b86      	ldr	r3, [pc, #536]	; (80029dc <main+0x2b8>)
 80027c2:	781a      	ldrb	r2, [r3, #0]
 80027c4:	4b85      	ldr	r3, [pc, #532]	; (80029dc <main+0x2b8>)
 80027c6:	701a      	strb	r2, [r3, #0]

	timeOutTestMotors = 0;
 80027c8:	4b85      	ldr	r3, [pc, #532]	; (80029e0 <main+0x2bc>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027ce:	f001 f941 	bl	8003a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027d2:	f000 fa8f 	bl	8002cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027d6:	f000 fdd7 	bl	8003388 <MX_GPIO_Init>
  MX_DMA_Init();
 80027da:	f000 fdb7 	bl	800334c <MX_DMA_Init>
  MX_ADC1_Init();
 80027de:	f000 faf5 	bl	8002dcc <MX_ADC1_Init>
  MX_ADC2_Init();
 80027e2:	f000 fb91 	bl	8002f08 <MX_ADC2_Init>
  MX_ADC3_Init();
 80027e6:	f000 fc11 	bl	800300c <MX_ADC3_Init>
  MX_TIM3_Init();
 80027ea:	f000 fcd3 	bl	8003194 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80027ee:	f000 fd4d 	bl	800328c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80027f2:	f000 fd7b 	bl	80032ec <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80027f6:	f000 fc79 	bl	80030ec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  indexADCData = 0;
 80027fa:	4b77      	ldr	r3, [pc, #476]	; (80029d8 <main+0x2b4>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim1);
 8002800:	4878      	ldr	r0, [pc, #480]	; (80029e4 <main+0x2c0>)
 8002802:	f005 f965 	bl	8007ad0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &RX.buf[RX.iw], 1);
 8002806:	4b69      	ldr	r3, [pc, #420]	; (80029ac <main+0x288>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a68      	ldr	r2, [pc, #416]	; (80029ac <main+0x288>)
 800280c:	88d2      	ldrh	r2, [r2, #6]
 800280e:	4413      	add	r3, r2
 8002810:	2201      	movs	r2, #1
 8002812:	4619      	mov	r1, r3
 8002814:	4874      	ldr	r0, [pc, #464]	; (80029e8 <main+0x2c4>)
 8002816:	f006 fc4d 	bl	80090b4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &auxDataRXESP01, 1);
 800281a:	2201      	movs	r2, #1
 800281c:	4973      	ldr	r1, [pc, #460]	; (80029ec <main+0x2c8>)
 800281e:	4874      	ldr	r0, [pc, #464]	; (80029f0 <main+0x2cc>)
 8002820:	f006 fc48 	bl	80090b4 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start(&htim3);
 8002824:	4873      	ldr	r0, [pc, #460]	; (80029f4 <main+0x2d0>)
 8002826:	f005 f8eb 	bl	8007a00 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800282a:	2100      	movs	r1, #0
 800282c:	4871      	ldr	r0, [pc, #452]	; (80029f4 <main+0x2d0>)
 800282e:	f005 fa17 	bl	8007c60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002832:	2104      	movs	r1, #4
 8002834:	486f      	ldr	r0, [pc, #444]	; (80029f4 <main+0x2d0>)
 8002836:	f005 fa13 	bl	8007c60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800283a:	2108      	movs	r1, #8
 800283c:	486d      	ldr	r0, [pc, #436]	; (80029f4 <main+0x2d0>)
 800283e:	f005 fa0f 	bl	8007c60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002842:	210c      	movs	r1, #12
 8002844:	486b      	ldr	r0, [pc, #428]	; (80029f4 <main+0x2d0>)
 8002846:	f005 fa0b 	bl	8007c60 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800284a:	4b6a      	ldr	r3, [pc, #424]	; (80029f4 <main+0x2d0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002852:	4b68      	ldr	r3, [pc, #416]	; (80029f4 <main+0x2d0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2200      	movs	r2, #0
 8002858:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 800285a:	4b66      	ldr	r3, [pc, #408]	; (80029f4 <main+0x2d0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2200      	movs	r2, #0
 8002860:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8002862:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <main+0x2d0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2200      	movs	r2, #0
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(CH_ENA_GPIO_Port, CH_ENA_Pin, GPIO_PIN_SET);
 800286a:	2201      	movs	r2, #1
 800286c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002870:	4861      	ldr	r0, [pc, #388]	; (80029f8 <main+0x2d4>)
 8002872:	f003 fbad 	bl	8005fd0 <HAL_GPIO_WritePin>
  ESP01Init((ESP01GpioWriteCH_EN *)&ESP01ChEN, (ESP01OnUDPData *)&ESP01DatagramReady);
 8002876:	4961      	ldr	r1, [pc, #388]	; (80029fc <main+0x2d8>)
 8002878:	4861      	ldr	r0, [pc, #388]	; (8002a00 <main+0x2dc>)
 800287a:	f7fd fcab 	bl	80001d4 <ESP01Init>
  ESP01AttachOnWIFIConnected((ESP01OnWIFIConnected *)&ESP01WIFIConnected);
 800287e:	4861      	ldr	r0, [pc, #388]	; (8002a04 <main+0x2e0>)
 8002880:	f7fd ffd4 	bl	800082c <ESP01AttachOnWIFIConnected>
  ESP01AttachOnWIFIDisconnected((ESP01OnWIFIDisconnected *)&ESP01WIFIDisconnected);
 8002884:	4860      	ldr	r0, [pc, #384]	; (8002a08 <main+0x2e4>)
 8002886:	f7fd ffe1 	bl	800084c <ESP01AttachOnWIFIDisconnected>
  ESP01AttachOnUDPReady((ESP01OnUDPReady *)&ESP01UDPReady);
 800288a:	4860      	ldr	r0, [pc, #384]	; (8002a0c <main+0x2e8>)
 800288c:	f7fd ffee 	bl	800086c <ESP01AttachOnUDPReady>


  lastTickValue = HAL_GetTick();
 8002890:	f001 f93a 	bl	8003b08 <HAL_GetTick>
 8002894:	4603      	mov	r3, r0
 8002896:	4a5e      	ldr	r2, [pc, #376]	; (8002a10 <main+0x2ec>)
 8002898:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!timeOut100ms)
 800289a:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <main+0x2a8>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <main+0x182>
		  Do100ms();
 80028a2:	f7ff fe25 	bl	80024f0 <Do100ms>

	  if((HAL_GetTick()-lastTickValue) >= 10){
 80028a6:	f001 f92f 	bl	8003b08 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	4b58      	ldr	r3, [pc, #352]	; (8002a10 <main+0x2ec>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b09      	cmp	r3, #9
 80028b4:	d932      	bls.n	800291c <main+0x1f8>
		  lastTickValue = HAL_GetTick();
 80028b6:	f001 f927 	bl	8003b08 <HAL_GetTick>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4a54      	ldr	r2, [pc, #336]	; (8002a10 <main+0x2ec>)
 80028be:	6013      	str	r3, [r2, #0]

		  if(RX.header){
 80028c0:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <main+0x288>)
 80028c2:	791b      	ldrb	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00c      	beq.n	80028e2 <main+0x1be>
			  RX.timeout--;
 80028c8:	4b38      	ldr	r3, [pc, #224]	; (80029ac <main+0x288>)
 80028ca:	7b1b      	ldrb	r3, [r3, #12]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	4b36      	ldr	r3, [pc, #216]	; (80029ac <main+0x288>)
 80028d2:	731a      	strb	r2, [r3, #12]
			  if(!RX.timeout)
 80028d4:	4b35      	ldr	r3, [pc, #212]	; (80029ac <main+0x288>)
 80028d6:	7b1b      	ldrb	r3, [r3, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <main+0x1be>
				  RX.header = 0;
 80028dc:	4b33      	ldr	r3, [pc, #204]	; (80029ac <main+0x288>)
 80028de:	2200      	movs	r2, #0
 80028e0:	711a      	strb	r2, [r3, #4]
		  }

		  if(timeOut100ms)
 80028e2:	4b3a      	ldr	r3, [pc, #232]	; (80029cc <main+0x2a8>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <main+0x1d2>
			  timeOut100ms--;
 80028ea:	4b38      	ldr	r3, [pc, #224]	; (80029cc <main+0x2a8>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4b36      	ldr	r3, [pc, #216]	; (80029cc <main+0x2a8>)
 80028f4:	701a      	strb	r2, [r3, #0]

		  if(timeOutPlus){
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <main+0x2f0>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00c      	beq.n	8002918 <main+0x1f4>
			  timeOutPlus--;
 80028fe:	4b45      	ldr	r3, [pc, #276]	; (8002a14 <main+0x2f0>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	3b01      	subs	r3, #1
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <main+0x2f0>)
 8002908:	701a      	strb	r2, [r3, #0]
			  if(!timeOutPlus)
 800290a:	4b42      	ldr	r3, [pc, #264]	; (8002a14 <main+0x2f0>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <main+0x1f4>
				  countPlus = 0;
 8002912:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <main+0x2f4>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
		  }

		  ESP01TimeOut10ms();
 8002918:	f7fd ff1e 	bl	8000758 <ESP01TimeOut10ms>


	  }

	  if(RX.ISCMD)
 800291c:	4b23      	ldr	r3, [pc, #140]	; (80029ac <main+0x288>)
 800291e:	7c9b      	ldrb	r3, [r3, #18]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <main+0x208>
		  DecodeCmd(&RX, &TX);
 8002924:	4923      	ldr	r1, [pc, #140]	; (80029b4 <main+0x290>)
 8002926:	4821      	ldr	r0, [pc, #132]	; (80029ac <main+0x288>)
 8002928:	f7ff f9dc 	bl	8001ce4 <DecodeCmd>

	  if(RX.ir != RX.iw)
 800292c:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <main+0x288>)
 800292e:	891a      	ldrh	r2, [r3, #8]
 8002930:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <main+0x288>)
 8002932:	88db      	ldrh	r3, [r3, #6]
 8002934:	429a      	cmp	r2, r3
 8002936:	d002      	beq.n	800293e <main+0x21a>
		  DecodeHeader(&RX);
 8002938:	481c      	ldr	r0, [pc, #112]	; (80029ac <main+0x288>)
 800293a:	f7fe ff59 	bl	80017f0 <DecodeHeader>

	  if(RXESP01.ISCMD)
 800293e:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <main+0x298>)
 8002940:	7c9b      	ldrb	r3, [r3, #18]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <main+0x22a>
		  DecodeCmd(&RXESP01, &TXESP01);
 8002946:	491f      	ldr	r1, [pc, #124]	; (80029c4 <main+0x2a0>)
 8002948:	481c      	ldr	r0, [pc, #112]	; (80029bc <main+0x298>)
 800294a:	f7ff f9cb 	bl	8001ce4 <DecodeCmd>

	  if(RXESP01.ir != RXESP01.iw)
 800294e:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <main+0x298>)
 8002950:	891a      	ldrh	r2, [r3, #8]
 8002952:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <main+0x298>)
 8002954:	88db      	ldrh	r3, [r3, #6]
 8002956:	429a      	cmp	r2, r3
 8002958:	d002      	beq.n	8002960 <main+0x23c>
		  DecodeHeader(&RXESP01);
 800295a:	4818      	ldr	r0, [pc, #96]	; (80029bc <main+0x298>)
 800295c:	f7fe ff48 	bl	80017f0 <DecodeHeader>

	  if(ANALOGREADY){
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <main+0x284>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 811a 	beq.w	8002ba4 <main+0x480>
		  ANALOGREADY = 0;
 8002970:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <main+0x284>)
 8002972:	7813      	ldrb	r3, [r2, #0]
 8002974:	f36f 0341 	bfc	r3, #1, #1
 8002978:	7013      	strb	r3, [r2, #0]
		  if(CONTAVERAGE){
 800297a:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <main+0x284>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d075      	beq.n	8002a74 <main+0x350>
			  TX.cks = 0;
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <main+0x290>)
 800298a:	2200      	movs	r2, #0
 800298c:	721a      	strb	r2, [r3, #8]
			  PutHeaderOnTx(&TX, 0xA2, 16+2);
 800298e:	2212      	movs	r2, #18
 8002990:	21a2      	movs	r1, #162	; 0xa2
 8002992:	4808      	ldr	r0, [pc, #32]	; (80029b4 <main+0x290>)
 8002994:	f7ff f888 	bl	8001aa8 <PutHeaderOnTx>
			  PutByteOnTx(&TX, 0x0A);
 8002998:	210a      	movs	r1, #10
 800299a:	4806      	ldr	r0, [pc, #24]	; (80029b4 <main+0x290>)
 800299c:	f7ff f85c 	bl	8001a58 <PutByteOnTx>
			  for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 80029a0:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <main+0x2f8>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	709a      	strb	r2, [r3, #2]
 80029a6:	e05a      	b.n	8002a5e <main+0x33a>
 80029a8:	20000820 	.word	0x20000820
 80029ac:	2000082c 	.word	0x2000082c
 80029b0:	200008d8 	.word	0x200008d8
 80029b4:	20000854 	.word	0x20000854
 80029b8:	20000a5c 	.word	0x20000a5c
 80029bc:	20000840 	.word	0x20000840
 80029c0:	200009d8 	.word	0x200009d8
 80029c4:	20000864 	.word	0x20000864
 80029c8:	20000b5c 	.word	0x20000b5c
 80029cc:	20001c3c 	.word	0x20001c3c
 80029d0:	20001c34 	.word	0x20001c34
 80029d4:	20000bdc 	.word	0x20000bdc
 80029d8:	20001be0 	.word	0x20001be0
 80029dc:	20001be1 	.word	0x20001be1
 80029e0:	20001c3e 	.word	0x20001c3e
 80029e4:	20000680 	.word	0x20000680
 80029e8:	20000718 	.word	0x20000718
 80029ec:	20000a58 	.word	0x20000a58
 80029f0:	2000079c 	.word	0x2000079c
 80029f4:	200006cc 	.word	0x200006cc
 80029f8:	48000800 	.word	0x48000800
 80029fc:	08002661 	.word	0x08002661
 8002a00:	0800263d 	.word	0x0800263d
 8002a04:	080026ad 	.word	0x080026ad
 8002a08:	080026d5 	.word	0x080026d5
 8002a0c:	080026fd 	.word	0x080026fd
 8002a10:	20001c38 	.word	0x20001c38
 8002a14:	20001c41 	.word	0x20001c41
 8002a18:	20001c40 	.word	0x20001c40
 8002a1c:	20000824 	.word	0x20000824
				  w.u16[0] = sumADCDataLock[w.u8[2]]/40;
 8002a20:	4b87      	ldr	r3, [pc, #540]	; (8002c40 <main+0x51c>)
 8002a22:	789b      	ldrb	r3, [r3, #2]
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b87      	ldr	r3, [pc, #540]	; (8002c44 <main+0x520>)
 8002a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2c:	4a86      	ldr	r2, [pc, #536]	; (8002c48 <main+0x524>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	4b82      	ldr	r3, [pc, #520]	; (8002c40 <main+0x51c>)
 8002a38:	801a      	strh	r2, [r3, #0]
				  PutByteOnTx(&TX, w.u8[0]);
 8002a3a:	4b81      	ldr	r3, [pc, #516]	; (8002c40 <main+0x51c>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4882      	ldr	r0, [pc, #520]	; (8002c4c <main+0x528>)
 8002a42:	f7ff f809 	bl	8001a58 <PutByteOnTx>
				  PutByteOnTx(&TX, w.u8[1]);
 8002a46:	4b7e      	ldr	r3, [pc, #504]	; (8002c40 <main+0x51c>)
 8002a48:	785b      	ldrb	r3, [r3, #1]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	487f      	ldr	r0, [pc, #508]	; (8002c4c <main+0x528>)
 8002a4e:	f7ff f803 	bl	8001a58 <PutByteOnTx>
			  for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 8002a52:	4b7b      	ldr	r3, [pc, #492]	; (8002c40 <main+0x51c>)
 8002a54:	789b      	ldrb	r3, [r3, #2]
 8002a56:	3301      	adds	r3, #1
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b79      	ldr	r3, [pc, #484]	; (8002c40 <main+0x51c>)
 8002a5c:	709a      	strb	r2, [r3, #2]
 8002a5e:	4b78      	ldr	r3, [pc, #480]	; (8002c40 <main+0x51c>)
 8002a60:	789b      	ldrb	r3, [r3, #2]
 8002a62:	2b07      	cmp	r3, #7
 8002a64:	d9dc      	bls.n	8002a20 <main+0x2fc>
			  }
			  PutByteOnTx(&TX, TX.cks);
 8002a66:	4b79      	ldr	r3, [pc, #484]	; (8002c4c <main+0x528>)
 8002a68:	7a1b      	ldrb	r3, [r3, #8]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4877      	ldr	r0, [pc, #476]	; (8002c4c <main+0x528>)
 8002a6e:	f7fe fff3 	bl	8001a58 <PutByteOnTx>
 8002a72:	e097      	b.n	8002ba4 <main+0x480>
		  }
		  else{
			  TX.cks = 0;
 8002a74:	4b75      	ldr	r3, [pc, #468]	; (8002c4c <main+0x528>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	721a      	strb	r2, [r3, #8]
			  w.u8[3] = iADCDataReady;
 8002a7a:	4b75      	ldr	r3, [pc, #468]	; (8002c50 <main+0x52c>)
 8002a7c:	781a      	ldrb	r2, [r3, #0]
 8002a7e:	4b70      	ldr	r3, [pc, #448]	; (8002c40 <main+0x51c>)
 8002a80:	70da      	strb	r2, [r3, #3]
			  w.u8[3] -= (n10msData*40);
 8002a82:	4b6f      	ldr	r3, [pc, #444]	; (8002c40 <main+0x51c>)
 8002a84:	78da      	ldrb	r2, [r3, #3]
 8002a86:	4b73      	ldr	r3, [pc, #460]	; (8002c54 <main+0x530>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	0049      	lsls	r1, r1, #1
 8002a8e:	440b      	add	r3, r1
 8002a90:	4619      	mov	r1, r3
 8002a92:	00c8      	lsls	r0, r1, #3
 8002a94:	4619      	mov	r1, r3
 8002a96:	4603      	mov	r3, r0
 8002a98:	440b      	add	r3, r1
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	4b67      	ldr	r3, [pc, #412]	; (8002c40 <main+0x51c>)
 8002aa4:	70da      	strb	r2, [r3, #3]
			  w.u8[3] &= (ADCDATASIZE - 1);
 8002aa6:	4b66      	ldr	r3, [pc, #408]	; (8002c40 <main+0x51c>)
 8002aa8:	78da      	ldrb	r2, [r3, #3]
 8002aaa:	4b65      	ldr	r3, [pc, #404]	; (8002c40 <main+0x51c>)
 8002aac:	70da      	strb	r2, [r3, #3]
			  w.u8[2] = n10msData*5 + 1;
 8002aae:	4b69      	ldr	r3, [pc, #420]	; (8002c54 <main+0x530>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	0092      	lsls	r2, r2, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4b60      	ldr	r3, [pc, #384]	; (8002c40 <main+0x51c>)
 8002ac0:	709a      	strb	r2, [r3, #2]
			  w.u8[2] *= 16;
 8002ac2:	4b5f      	ldr	r3, [pc, #380]	; (8002c40 <main+0x51c>)
 8002ac4:	789b      	ldrb	r3, [r3, #2]
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <main+0x51c>)
 8002acc:	709a      	strb	r2, [r3, #2]
			  PutHeaderOnTx(&TX, 0xA1, w.u8[2]+3);
 8002ace:	4b5c      	ldr	r3, [pc, #368]	; (8002c40 <main+0x51c>)
 8002ad0:	789b      	ldrb	r3, [r3, #2]
 8002ad2:	3303      	adds	r3, #3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	21a1      	movs	r1, #161	; 0xa1
 8002ada:	485c      	ldr	r0, [pc, #368]	; (8002c4c <main+0x528>)
 8002adc:	f7fe ffe4 	bl	8001aa8 <PutHeaderOnTx>
			  PutByteOnTx(&TX, 0x0A);
 8002ae0:	210a      	movs	r1, #10
 8002ae2:	485a      	ldr	r0, [pc, #360]	; (8002c4c <main+0x528>)
 8002ae4:	f7fe ffb8 	bl	8001a58 <PutByteOnTx>
			  w.u8[2] /= 16;
 8002ae8:	4b55      	ldr	r3, [pc, #340]	; (8002c40 <main+0x51c>)
 8002aea:	789b      	ldrb	r3, [r3, #2]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <main+0x51c>)
 8002af2:	709a      	strb	r2, [r3, #2]
			  w.u8[2]--;
 8002af4:	4b52      	ldr	r3, [pc, #328]	; (8002c40 <main+0x51c>)
 8002af6:	789b      	ldrb	r3, [r3, #2]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <main+0x51c>)
 8002afe:	709a      	strb	r2, [r3, #2]
			  PutByteOnTx(&TX, w.u8[2]);
 8002b00:	4b4f      	ldr	r3, [pc, #316]	; (8002c40 <main+0x51c>)
 8002b02:	789b      	ldrb	r3, [r3, #2]
 8002b04:	4619      	mov	r1, r3
 8002b06:	4851      	ldr	r0, [pc, #324]	; (8002c4c <main+0x528>)
 8002b08:	f7fe ffa6 	bl	8001a58 <PutByteOnTx>
			  while(w.u8[2]){
 8002b0c:	e019      	b.n	8002b42 <main+0x41e>
				  PutBufOnTx(&TX, (uint8_t *)&ADCData[w.u8[3]], 16);
 8002b0e:	4b4c      	ldr	r3, [pc, #304]	; (8002c40 <main+0x51c>)
 8002b10:	78db      	ldrb	r3, [r3, #3]
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	4a50      	ldr	r2, [pc, #320]	; (8002c58 <main+0x534>)
 8002b16:	4413      	add	r3, r2
 8002b18:	2210      	movs	r2, #16
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	484b      	ldr	r0, [pc, #300]	; (8002c4c <main+0x528>)
 8002b1e:	f7fe ff63 	bl	80019e8 <PutBufOnTx>
				  w.u8[3] += 8;
 8002b22:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <main+0x51c>)
 8002b24:	78db      	ldrb	r3, [r3, #3]
 8002b26:	3308      	adds	r3, #8
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	4b45      	ldr	r3, [pc, #276]	; (8002c40 <main+0x51c>)
 8002b2c:	70da      	strb	r2, [r3, #3]
				  w.u8[3] &= (ADCDATASIZE-1);
 8002b2e:	4b44      	ldr	r3, [pc, #272]	; (8002c40 <main+0x51c>)
 8002b30:	78da      	ldrb	r2, [r3, #3]
 8002b32:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <main+0x51c>)
 8002b34:	70da      	strb	r2, [r3, #3]
				  w.u8[2]--;
 8002b36:	4b42      	ldr	r3, [pc, #264]	; (8002c40 <main+0x51c>)
 8002b38:	789b      	ldrb	r3, [r3, #2]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <main+0x51c>)
 8002b40:	709a      	strb	r2, [r3, #2]
			  while(w.u8[2]){
 8002b42:	4b3f      	ldr	r3, [pc, #252]	; (8002c40 <main+0x51c>)
 8002b44:	789b      	ldrb	r3, [r3, #2]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1e1      	bne.n	8002b0e <main+0x3ea>
			  }
			  for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 8002b4a:	4b3d      	ldr	r3, [pc, #244]	; (8002c40 <main+0x51c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	709a      	strb	r2, [r3, #2]
 8002b50:	e01e      	b.n	8002b90 <main+0x46c>
				  w.u16[0] = sumADCDataLock[w.u8[2]]/40;
 8002b52:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <main+0x51c>)
 8002b54:	789b      	ldrb	r3, [r3, #2]
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b3a      	ldr	r3, [pc, #232]	; (8002c44 <main+0x520>)
 8002b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b5e:	4a3a      	ldr	r2, [pc, #232]	; (8002c48 <main+0x524>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b35      	ldr	r3, [pc, #212]	; (8002c40 <main+0x51c>)
 8002b6a:	801a      	strh	r2, [r3, #0]
				  PutByteOnTx(&TX, w.u8[0]);
 8002b6c:	4b34      	ldr	r3, [pc, #208]	; (8002c40 <main+0x51c>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	4619      	mov	r1, r3
 8002b72:	4836      	ldr	r0, [pc, #216]	; (8002c4c <main+0x528>)
 8002b74:	f7fe ff70 	bl	8001a58 <PutByteOnTx>
				  PutByteOnTx(&TX, w.u8[1]);
 8002b78:	4b31      	ldr	r3, [pc, #196]	; (8002c40 <main+0x51c>)
 8002b7a:	785b      	ldrb	r3, [r3, #1]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4833      	ldr	r0, [pc, #204]	; (8002c4c <main+0x528>)
 8002b80:	f7fe ff6a 	bl	8001a58 <PutByteOnTx>
			  for(w.u8[2] = 0; w.u8[2]<8; w.u8[2]++){
 8002b84:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <main+0x51c>)
 8002b86:	789b      	ldrb	r3, [r3, #2]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	4b2c      	ldr	r3, [pc, #176]	; (8002c40 <main+0x51c>)
 8002b8e:	709a      	strb	r2, [r3, #2]
 8002b90:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <main+0x51c>)
 8002b92:	789b      	ldrb	r3, [r3, #2]
 8002b94:	2b07      	cmp	r3, #7
 8002b96:	d9dc      	bls.n	8002b52 <main+0x42e>
			  }
			  PutByteOnTx(&TX, TX.cks);
 8002b98:	4b2c      	ldr	r3, [pc, #176]	; (8002c4c <main+0x528>)
 8002b9a:	7a1b      	ldrb	r3, [r3, #8]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	482b      	ldr	r0, [pc, #172]	; (8002c4c <main+0x528>)
 8002ba0:	f7fe ff5a 	bl	8001a58 <PutByteOnTx>
		  }
	  }

	  if(TX.ir != TX.iw){
 8002ba4:	4b29      	ldr	r3, [pc, #164]	; (8002c4c <main+0x528>)
 8002ba6:	88da      	ldrh	r2, [r3, #6]
 8002ba8:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <main+0x528>)
 8002baa:	889b      	ldrh	r3, [r3, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d01c      	beq.n	8002bea <main+0x4c6>
		  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE)){
 8002bb0:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <main+0x538>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bba:	2b80      	cmp	r3, #128	; 0x80
 8002bbc:	d115      	bne.n	8002bea <main+0x4c6>
			  huart2.Instance->TDR = TX.buf[TX.ir++];
 8002bbe:	4b23      	ldr	r3, [pc, #140]	; (8002c4c <main+0x528>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <main+0x528>)
 8002bc4:	88db      	ldrh	r3, [r3, #6]
 8002bc6:	1c59      	adds	r1, r3, #1
 8002bc8:	b288      	uxth	r0, r1
 8002bca:	4920      	ldr	r1, [pc, #128]	; (8002c4c <main+0x528>)
 8002bcc:	80c8      	strh	r0, [r1, #6]
 8002bce:	4413      	add	r3, r2
 8002bd0:	781a      	ldrb	r2, [r3, #0]
 8002bd2:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <main+0x538>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	b292      	uxth	r2, r2
 8002bd8:	851a      	strh	r2, [r3, #40]	; 0x28
			  TX.ir &= TX.maskSize;
 8002bda:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <main+0x528>)
 8002bdc:	88da      	ldrh	r2, [r3, #6]
 8002bde:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <main+0x528>)
 8002be0:	899b      	ldrh	r3, [r3, #12]
 8002be2:	4013      	ands	r3, r2
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <main+0x528>)
 8002be8:	80da      	strh	r2, [r3, #6]
		  }
	  }

	  if(ESP01DEBUG){
 8002bea:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <main+0x53c>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d039      	beq.n	8002c6c <main+0x548>
		  if(TXESP01.ir != TXESP01.iw){
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <main+0x540>)
 8002bfa:	88da      	ldrh	r2, [r3, #6]
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <main+0x540>)
 8002bfe:	889b      	ldrh	r3, [r3, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d06d      	beq.n	8002ce0 <main+0x5bc>
			  if(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE)){
 8002c04:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <main+0x544>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0e:	2b80      	cmp	r3, #128	; 0x80
 8002c10:	d166      	bne.n	8002ce0 <main+0x5bc>
				  huart3.Instance->TDR = TXESP01.buf[TXESP01.ir++];
 8002c12:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <main+0x540>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <main+0x540>)
 8002c18:	88db      	ldrh	r3, [r3, #6]
 8002c1a:	1c59      	adds	r1, r3, #1
 8002c1c:	b288      	uxth	r0, r1
 8002c1e:	4911      	ldr	r1, [pc, #68]	; (8002c64 <main+0x540>)
 8002c20:	80c8      	strh	r0, [r1, #6]
 8002c22:	4413      	add	r3, r2
 8002c24:	781a      	ldrb	r2, [r3, #0]
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <main+0x544>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	b292      	uxth	r2, r2
 8002c2c:	851a      	strh	r2, [r3, #40]	; 0x28
				  TXESP01.ir &= TXESP01.maskSize;
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <main+0x540>)
 8002c30:	88da      	ldrh	r2, [r3, #6]
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <main+0x540>)
 8002c34:	899b      	ldrh	r3, [r3, #12]
 8002c36:	4013      	ands	r3, r2
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <main+0x540>)
 8002c3c:	80da      	strh	r2, [r3, #6]
 8002c3e:	e04f      	b.n	8002ce0 <main+0x5bc>
 8002c40:	20000824 	.word	0x20000824
 8002c44:	20001c08 	.word	0x20001c08
 8002c48:	cccccccd 	.word	0xcccccccd
 8002c4c:	20000854 	.word	0x20000854
 8002c50:	20001be2 	.word	0x20001be2
 8002c54:	20001c2c 	.word	0x20001c2c
 8002c58:	20000be0 	.word	0x20000be0
 8002c5c:	20000718 	.word	0x20000718
 8002c60:	20000820 	.word	0x20000820
 8002c64:	20000864 	.word	0x20000864
 8002c68:	2000079c 	.word	0x2000079c
			  }
		  }
	  }
	  else{
		  if(TXESP01.iw != TXESP01.ir){
 8002c6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <main+0x5c4>)
 8002c6e:	889a      	ldrh	r2, [r3, #4]
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <main+0x5c4>)
 8002c72:	88db      	ldrh	r3, [r3, #6]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d020      	beq.n	8002cba <main+0x596>
			  w.u16[0] = TXESP01.iw - TXESP01.ir;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <main+0x5c4>)
 8002c7a:	889a      	ldrh	r2, [r3, #4]
 8002c7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <main+0x5c4>)
 8002c7e:	88db      	ldrh	r3, [r3, #6]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <main+0x5c8>)
 8002c86:	801a      	strh	r2, [r3, #0]
			  w.u16[0] &= (TXESP01BUFSIZE - 1);
 8002c88:	4b18      	ldr	r3, [pc, #96]	; (8002cec <main+0x5c8>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <main+0x5c8>)
 8002c94:	801a      	strh	r2, [r3, #0]
			  if(ESP01SendUDPData(&TXESP01.buf[TXESP01.ir], w.u16[0], TXESP01BUFSIZE))
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <main+0x5c4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a13      	ldr	r2, [pc, #76]	; (8002ce8 <main+0x5c4>)
 8002c9c:	88d2      	ldrh	r2, [r2, #6]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	4a12      	ldr	r2, [pc, #72]	; (8002cec <main+0x5c8>)
 8002ca2:	8811      	ldrh	r1, [r2, #0]
 8002ca4:	2280      	movs	r2, #128	; 0x80
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fc70 	bl	800058c <ESP01SendUDPData>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <main+0x596>
				  TXESP01.iw = TXESP01.ir;
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <main+0x5c4>)
 8002cb4:	88da      	ldrh	r2, [r3, #6]
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <main+0x5c4>)
 8002cb8:	809a      	strh	r2, [r3, #4]
		  }

		  if(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE)){
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <main+0x5cc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc4:	2b80      	cmp	r3, #128	; 0x80
 8002cc6:	d10b      	bne.n	8002ce0 <main+0x5bc>
			  if(ESP01GetTxByte(&w.u8[0]))
 8002cc8:	4808      	ldr	r0, [pc, #32]	; (8002cec <main+0x5c8>)
 8002cca:	f7fd fc1f 	bl	800050c <ESP01GetTxByte>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <main+0x5bc>
				  huart3.Instance->TDR = w.u8[0];
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <main+0x5c8>)
 8002cd6:	781a      	ldrb	r2, [r3, #0]
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <main+0x5cc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	b292      	uxth	r2, r2
 8002cde:	851a      	strh	r2, [r3, #40]	; 0x28
		  }
	  }


	  ESP01Task();
 8002ce0:	f7fd fd18 	bl	8000714 <ESP01Task>
	  if(!timeOut100ms)
 8002ce4:	e5d9      	b.n	800289a <main+0x176>
 8002ce6:	bf00      	nop
 8002ce8:	20000864 	.word	0x20000864
 8002cec:	20000824 	.word	0x20000824
 8002cf0:	2000079c 	.word	0x2000079c

08002cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b0a6      	sub	sp, #152	; 0x98
 8002cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cfa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002cfe:	2228      	movs	r2, #40	; 0x28
 8002d00:	2100      	movs	r1, #0
 8002d02:	4618      	mov	r0, r3
 8002d04:	f007 fb82 	bl	800a40c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	2258      	movs	r2, #88	; 0x58
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f007 fb74 	bl	800a40c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d24:	2301      	movs	r3, #1
 8002d26:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d28:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002d2c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d32:	2302      	movs	r3, #2
 8002d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d40:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d52:	4618      	mov	r0, r3
 8002d54:	f003 f954 	bl	8006000 <HAL_RCC_OscConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002d5e:	f000 fba1 	bl	80034a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d62:	230f      	movs	r3, #15
 8002d64:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d66:	2302      	movs	r3, #2
 8002d68:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d72:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d74:	2300      	movs	r3, #0
 8002d76:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f004 f992 	bl	80070a8 <HAL_RCC_ClockConfig>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002d8a:	f000 fb8b 	bl	80034a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <SystemClock_Config+0xd4>)
 8002d90:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC34|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV6;
 8002d9a:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV6;
 8002da0:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dae:	1d3b      	adds	r3, r7, #4
 8002db0:	4618      	mov	r0, r3
 8002db2:	f004 fbaf 	bl	8007514 <HAL_RCCEx_PeriphCLKConfig>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002dbc:	f000 fb72 	bl	80034a4 <Error_Handler>
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	3798      	adds	r7, #152	; 0x98
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	00201186 	.word	0x00201186

08002dcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	; 0x28
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002dd2:	f107 031c 	add.w	r3, r7, #28
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
 8002dec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002dee:	4b45      	ldr	r3, [pc, #276]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002df0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002df4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002df6:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002dfc:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002e02:	4b40      	ldr	r3, [pc, #256]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e08:	4b3e      	ldr	r3, [pc, #248]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e16:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e1c:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e22:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002e28:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e2e:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002e36:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002e38:	2208      	movs	r2, #8
 8002e3a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e3c:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002e42:	4b30      	ldr	r3, [pc, #192]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e48:	482e      	ldr	r0, [pc, #184]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002e4a:	f000 fe87 	bl	8003b5c <HAL_ADC_Init>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002e54:	f000 fb26 	bl	80034a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8002e58:	2306      	movs	r3, #6
 8002e5a:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8002e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e60:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002e66:	f107 031c 	add.w	r3, r7, #28
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4825      	ldr	r0, [pc, #148]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002e6e:	f002 f9c7 	bl	8005200 <HAL_ADCEx_MultiModeConfigChannel>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002e78:	f000 fb14 	bl	80034a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e80:	2301      	movs	r3, #1
 8002e82:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	4619      	mov	r1, r3
 8002e98:	481a      	ldr	r0, [pc, #104]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002e9a:	f001 fec5 	bl	8004c28 <HAL_ADC_ConfigChannel>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002ea4:	f000 fafe 	bl	80034a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002eac:	2302      	movs	r3, #2
 8002eae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002eb0:	1d3b      	adds	r3, r7, #4
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4813      	ldr	r0, [pc, #76]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002eb6:	f001 feb7 	bl	8004c28 <HAL_ADC_ConfigChannel>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002ec0:	f000 faf0 	bl	80034a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002ec4:	2306      	movs	r3, #6
 8002ec6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	4619      	mov	r1, r3
 8002ed0:	480c      	ldr	r0, [pc, #48]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002ed2:	f001 fea9 	bl	8004c28 <HAL_ADC_ConfigChannel>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8002edc:	f000 fae2 	bl	80034a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002ee0:	2307      	movs	r3, #7
 8002ee2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	4619      	mov	r1, r3
 8002eec:	4805      	ldr	r0, [pc, #20]	; (8002f04 <MX_ADC1_Init+0x138>)
 8002eee:	f001 fe9b 	bl	8004c28 <HAL_ADC_ConfigChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8002ef8:	f000 fad4 	bl	80034a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002efc:	bf00      	nop
 8002efe:	3728      	adds	r7, #40	; 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	2000054c 	.word	0x2000054c

08002f08 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f0e:	463b      	mov	r3, r7
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	611a      	str	r2, [r3, #16]
 8002f1c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002f1e:	4b39      	ldr	r3, [pc, #228]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002f20:	4a39      	ldr	r2, [pc, #228]	; (8003008 <MX_ADC2_Init+0x100>)
 8002f22:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002f24:	4b37      	ldr	r3, [pc, #220]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002f2a:	4b36      	ldr	r3, [pc, #216]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002f30:	4b34      	ldr	r3, [pc, #208]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002f36:	4b33      	ldr	r3, [pc, #204]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002f3c:	4b31      	ldr	r3, [pc, #196]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f44:	4b2f      	ldr	r3, [pc, #188]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8002f4a:	4b2e      	ldr	r3, [pc, #184]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002f50:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002f58:	4b2a      	ldr	r3, [pc, #168]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002f5e:	4b29      	ldr	r3, [pc, #164]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002f64:	4b27      	ldr	r3, [pc, #156]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002f6a:	4826      	ldr	r0, [pc, #152]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002f6c:	f000 fdf6 	bl	8003b5c <HAL_ADC_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8002f76:	f000 fa95 	bl	80034a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002f92:	463b      	mov	r3, r7
 8002f94:	4619      	mov	r1, r3
 8002f96:	481b      	ldr	r0, [pc, #108]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002f98:	f001 fe46 	bl	8004c28 <HAL_ADC_ConfigChannel>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 8002fa2:	f000 fa7f 	bl	80034a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002faa:	2302      	movs	r3, #2
 8002fac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fae:	463b      	mov	r3, r7
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4814      	ldr	r0, [pc, #80]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002fb4:	f001 fe38 	bl	8004c28 <HAL_ADC_ConfigChannel>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8002fbe:	f000 fa71 	bl	80034a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002fc2:	2309      	movs	r3, #9
 8002fc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fca:	463b      	mov	r3, r7
 8002fcc:	4619      	mov	r1, r3
 8002fce:	480d      	ldr	r0, [pc, #52]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002fd0:	f001 fe2a 	bl	8004c28 <HAL_ADC_ConfigChannel>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8002fda:	f000 fa63 	bl	80034a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002fde:	2312      	movs	r3, #18
 8002fe0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fe6:	463b      	mov	r3, r7
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4806      	ldr	r0, [pc, #24]	; (8003004 <MX_ADC2_Init+0xfc>)
 8002fec:	f001 fe1c 	bl	8004c28 <HAL_ADC_ConfigChannel>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 8002ff6:	f000 fa55 	bl	80034a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002ffa:	bf00      	nop
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	2000059c 	.word	0x2000059c
 8003008:	50000100 	.word	0x50000100

0800300c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	; 0x28
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003012:	f107 031c 	add.w	r3, r7, #28
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
 800302c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800302e:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <MX_ADC3_Init+0xd8>)
 8003030:	4a2d      	ldr	r2, [pc, #180]	; (80030e8 <MX_ADC3_Init+0xdc>)
 8003032:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003034:	4b2b      	ldr	r3, [pc, #172]	; (80030e4 <MX_ADC3_Init+0xd8>)
 8003036:	2200      	movs	r2, #0
 8003038:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800303a:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <MX_ADC3_Init+0xd8>)
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003040:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <MX_ADC3_Init+0xd8>)
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003046:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <MX_ADC3_Init+0xd8>)
 8003048:	2200      	movs	r2, #0
 800304a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800304c:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <MX_ADC3_Init+0xd8>)
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003054:	4b23      	ldr	r3, [pc, #140]	; (80030e4 <MX_ADC3_Init+0xd8>)
 8003056:	2200      	movs	r2, #0
 8003058:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <MX_ADC3_Init+0xd8>)
 800305c:	2201      	movs	r2, #1
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003060:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <MX_ADC3_Init+0xd8>)
 8003062:	2200      	movs	r2, #0
 8003064:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003066:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <MX_ADC3_Init+0xd8>)
 8003068:	2201      	movs	r2, #1
 800306a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800306c:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <MX_ADC3_Init+0xd8>)
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003074:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <MX_ADC3_Init+0xd8>)
 8003076:	2204      	movs	r2, #4
 8003078:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <MX_ADC3_Init+0xd8>)
 800307c:	2200      	movs	r2, #0
 800307e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003080:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <MX_ADC3_Init+0xd8>)
 8003082:	2200      	movs	r2, #0
 8003084:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003086:	4817      	ldr	r0, [pc, #92]	; (80030e4 <MX_ADC3_Init+0xd8>)
 8003088:	f000 fd68 	bl	8003b5c <HAL_ADC_Init>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8003092:	f000 fa07 	bl	80034a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800309a:	f107 031c 	add.w	r3, r7, #28
 800309e:	4619      	mov	r1, r3
 80030a0:	4810      	ldr	r0, [pc, #64]	; (80030e4 <MX_ADC3_Init+0xd8>)
 80030a2:	f002 f8ad 	bl	8005200 <HAL_ADCEx_MultiModeConfigChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80030ac:	f000 f9fa 	bl	80034a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80030b0:	230c      	movs	r3, #12
 80030b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030b4:	2301      	movs	r3, #1
 80030b6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80030c8:	1d3b      	adds	r3, r7, #4
 80030ca:	4619      	mov	r1, r3
 80030cc:	4805      	ldr	r0, [pc, #20]	; (80030e4 <MX_ADC3_Init+0xd8>)
 80030ce:	f001 fdab 	bl	8004c28 <HAL_ADC_ConfigChannel>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80030d8:	f000 f9e4 	bl	80034a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80030dc:	bf00      	nop
 80030de:	3728      	adds	r7, #40	; 0x28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	200005ec 	.word	0x200005ec
 80030e8:	50000400 	.word	0x50000400

080030ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030f2:	f107 0310 	add.w	r3, r7, #16
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	605a      	str	r2, [r3, #4]
 80030fc:	609a      	str	r2, [r3, #8]
 80030fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003100:	1d3b      	adds	r3, r7, #4
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800310a:	4b20      	ldr	r3, [pc, #128]	; (800318c <MX_TIM1_Init+0xa0>)
 800310c:	4a20      	ldr	r2, [pc, #128]	; (8003190 <MX_TIM1_Init+0xa4>)
 800310e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003110:	4b1e      	ldr	r3, [pc, #120]	; (800318c <MX_TIM1_Init+0xa0>)
 8003112:	2200      	movs	r2, #0
 8003114:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003116:	4b1d      	ldr	r3, [pc, #116]	; (800318c <MX_TIM1_Init+0xa0>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 18000;
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <MX_TIM1_Init+0xa0>)
 800311e:	f244 6250 	movw	r2, #18000	; 0x4650
 8003122:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <MX_TIM1_Init+0xa0>)
 8003126:	2200      	movs	r2, #0
 8003128:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800312a:	4b18      	ldr	r3, [pc, #96]	; (800318c <MX_TIM1_Init+0xa0>)
 800312c:	2200      	movs	r2, #0
 800312e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003130:	4b16      	ldr	r3, [pc, #88]	; (800318c <MX_TIM1_Init+0xa0>)
 8003132:	2200      	movs	r2, #0
 8003134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003136:	4815      	ldr	r0, [pc, #84]	; (800318c <MX_TIM1_Init+0xa0>)
 8003138:	f004 fc0a 	bl	8007950 <HAL_TIM_Base_Init>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003142:	f000 f9af 	bl	80034a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800314a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800314c:	f107 0310 	add.w	r3, r7, #16
 8003150:	4619      	mov	r1, r3
 8003152:	480e      	ldr	r0, [pc, #56]	; (800318c <MX_TIM1_Init+0xa0>)
 8003154:	f005 f960 	bl	8008418 <HAL_TIM_ConfigClockSource>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800315e:	f000 f9a1 	bl	80034a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	4619      	mov	r1, r3
 8003172:	4806      	ldr	r0, [pc, #24]	; (800318c <MX_TIM1_Init+0xa0>)
 8003174:	f005 fea6 	bl	8008ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800317e:	f000 f991 	bl	80034a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003182:	bf00      	nop
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000680 	.word	0x20000680
 8003190:	40012c00 	.word	0x40012c00

08003194 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08a      	sub	sp, #40	; 0x28
 8003198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800319a:	f107 031c 	add.w	r3, r7, #28
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031a6:	463b      	mov	r3, r7
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
 80031b4:	615a      	str	r2, [r3, #20]
 80031b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031b8:	4b32      	ldr	r3, [pc, #200]	; (8003284 <MX_TIM3_Init+0xf0>)
 80031ba:	4a33      	ldr	r2, [pc, #204]	; (8003288 <MX_TIM3_Init+0xf4>)
 80031bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80031be:	4b31      	ldr	r3, [pc, #196]	; (8003284 <MX_TIM3_Init+0xf0>)
 80031c0:	2263      	movs	r2, #99	; 0x63
 80031c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c4:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <MX_TIM3_Init+0xf0>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9000;
 80031ca:	4b2e      	ldr	r3, [pc, #184]	; (8003284 <MX_TIM3_Init+0xf0>)
 80031cc:	f242 3228 	movw	r2, #9000	; 0x2328
 80031d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031d2:	4b2c      	ldr	r3, [pc, #176]	; (8003284 <MX_TIM3_Init+0xf0>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d8:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <MX_TIM3_Init+0xf0>)
 80031da:	2200      	movs	r2, #0
 80031dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80031de:	4829      	ldr	r0, [pc, #164]	; (8003284 <MX_TIM3_Init+0xf0>)
 80031e0:	f004 fce6 	bl	8007bb0 <HAL_TIM_PWM_Init>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80031ea:	f000 f95b 	bl	80034a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031f6:	f107 031c 	add.w	r3, r7, #28
 80031fa:	4619      	mov	r1, r3
 80031fc:	4821      	ldr	r0, [pc, #132]	; (8003284 <MX_TIM3_Init+0xf0>)
 80031fe:	f005 fe61 	bl	8008ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003208:	f000 f94c 	bl	80034a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800320c:	2360      	movs	r3, #96	; 0x60
 800320e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003214:	2300      	movs	r3, #0
 8003216:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800321c:	463b      	mov	r3, r7
 800321e:	2200      	movs	r2, #0
 8003220:	4619      	mov	r1, r3
 8003222:	4818      	ldr	r0, [pc, #96]	; (8003284 <MX_TIM3_Init+0xf0>)
 8003224:	f004 ffe4 	bl	80081f0 <HAL_TIM_PWM_ConfigChannel>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800322e:	f000 f939 	bl	80034a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003232:	463b      	mov	r3, r7
 8003234:	2204      	movs	r2, #4
 8003236:	4619      	mov	r1, r3
 8003238:	4812      	ldr	r0, [pc, #72]	; (8003284 <MX_TIM3_Init+0xf0>)
 800323a:	f004 ffd9 	bl	80081f0 <HAL_TIM_PWM_ConfigChannel>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003244:	f000 f92e 	bl	80034a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003248:	463b      	mov	r3, r7
 800324a:	2208      	movs	r2, #8
 800324c:	4619      	mov	r1, r3
 800324e:	480d      	ldr	r0, [pc, #52]	; (8003284 <MX_TIM3_Init+0xf0>)
 8003250:	f004 ffce 	bl	80081f0 <HAL_TIM_PWM_ConfigChannel>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800325a:	f000 f923 	bl	80034a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800325e:	463b      	mov	r3, r7
 8003260:	220c      	movs	r2, #12
 8003262:	4619      	mov	r1, r3
 8003264:	4807      	ldr	r0, [pc, #28]	; (8003284 <MX_TIM3_Init+0xf0>)
 8003266:	f004 ffc3 	bl	80081f0 <HAL_TIM_PWM_ConfigChannel>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8003270:	f000 f918 	bl	80034a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003274:	4803      	ldr	r0, [pc, #12]	; (8003284 <MX_TIM3_Init+0xf0>)
 8003276:	f000 fa97 	bl	80037a8 <HAL_TIM_MspPostInit>

}
 800327a:	bf00      	nop
 800327c:	3728      	adds	r7, #40	; 0x28
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	200006cc 	.word	0x200006cc
 8003288:	40000400 	.word	0x40000400

0800328c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <MX_USART2_UART_Init+0x58>)
 8003292:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <MX_USART2_UART_Init+0x5c>)
 8003294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <MX_USART2_UART_Init+0x58>)
 8003298:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800329c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800329e:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <MX_USART2_UART_Init+0x58>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <MX_USART2_UART_Init+0x58>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <MX_USART2_UART_Init+0x58>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <MX_USART2_UART_Init+0x58>)
 80032b2:	220c      	movs	r2, #12
 80032b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <MX_USART2_UART_Init+0x58>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <MX_USART2_UART_Init+0x58>)
 80032be:	2200      	movs	r2, #0
 80032c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <MX_USART2_UART_Init+0x58>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <MX_USART2_UART_Init+0x58>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032ce:	4805      	ldr	r0, [pc, #20]	; (80032e4 <MX_USART2_UART_Init+0x58>)
 80032d0:	f005 fea2 	bl	8009018 <HAL_UART_Init>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80032da:	f000 f8e3 	bl	80034a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000718 	.word	0x20000718
 80032e8:	40004400 	.word	0x40004400

080032ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80032f0:	4b14      	ldr	r3, [pc, #80]	; (8003344 <MX_USART3_UART_Init+0x58>)
 80032f2:	4a15      	ldr	r2, [pc, #84]	; (8003348 <MX_USART3_UART_Init+0x5c>)
 80032f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80032f6:	4b13      	ldr	r3, [pc, #76]	; (8003344 <MX_USART3_UART_Init+0x58>)
 80032f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80032fe:	4b11      	ldr	r3, [pc, #68]	; (8003344 <MX_USART3_UART_Init+0x58>)
 8003300:	2200      	movs	r2, #0
 8003302:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <MX_USART3_UART_Init+0x58>)
 8003306:	2200      	movs	r2, #0
 8003308:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800330a:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <MX_USART3_UART_Init+0x58>)
 800330c:	2200      	movs	r2, #0
 800330e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <MX_USART3_UART_Init+0x58>)
 8003312:	220c      	movs	r2, #12
 8003314:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <MX_USART3_UART_Init+0x58>)
 8003318:	2200      	movs	r2, #0
 800331a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800331c:	4b09      	ldr	r3, [pc, #36]	; (8003344 <MX_USART3_UART_Init+0x58>)
 800331e:	2200      	movs	r2, #0
 8003320:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <MX_USART3_UART_Init+0x58>)
 8003324:	2200      	movs	r2, #0
 8003326:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <MX_USART3_UART_Init+0x58>)
 800332a:	2200      	movs	r2, #0
 800332c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800332e:	4805      	ldr	r0, [pc, #20]	; (8003344 <MX_USART3_UART_Init+0x58>)
 8003330:	f005 fe72 	bl	8009018 <HAL_UART_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800333a:	f000 f8b3 	bl	80034a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	2000079c 	.word	0x2000079c
 8003348:	40004800 	.word	0x40004800

0800334c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <MX_DMA_Init+0x38>)
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <MX_DMA_Init+0x38>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6153      	str	r3, [r2, #20]
 800335e:	4b09      	ldr	r3, [pc, #36]	; (8003384 <MX_DMA_Init+0x38>)
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800336a:	2200      	movs	r2, #0
 800336c:	2100      	movs	r1, #0
 800336e:	200b      	movs	r0, #11
 8003370:	f002 fa43 	bl	80057fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003374:	200b      	movs	r0, #11
 8003376:	f002 fa5c 	bl	8005832 <HAL_NVIC_EnableIRQ>

}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000

08003388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338e:	f107 0314 	add.w	r3, r7, #20
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	609a      	str	r2, [r3, #8]
 800339a:	60da      	str	r2, [r3, #12]
 800339c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800339e:	4b3e      	ldr	r3, [pc, #248]	; (8003498 <MX_GPIO_Init+0x110>)
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	4a3d      	ldr	r2, [pc, #244]	; (8003498 <MX_GPIO_Init+0x110>)
 80033a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80033a8:	6153      	str	r3, [r2, #20]
 80033aa:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <MX_GPIO_Init+0x110>)
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033b6:	4b38      	ldr	r3, [pc, #224]	; (8003498 <MX_GPIO_Init+0x110>)
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	4a37      	ldr	r2, [pc, #220]	; (8003498 <MX_GPIO_Init+0x110>)
 80033bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033c0:	6153      	str	r3, [r2, #20]
 80033c2:	4b35      	ldr	r3, [pc, #212]	; (8003498 <MX_GPIO_Init+0x110>)
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ce:	4b32      	ldr	r3, [pc, #200]	; (8003498 <MX_GPIO_Init+0x110>)
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	4a31      	ldr	r2, [pc, #196]	; (8003498 <MX_GPIO_Init+0x110>)
 80033d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d8:	6153      	str	r3, [r2, #20]
 80033da:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <MX_GPIO_Init+0x110>)
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e6:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <MX_GPIO_Init+0x110>)
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	4a2b      	ldr	r2, [pc, #172]	; (8003498 <MX_GPIO_Init+0x110>)
 80033ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f0:	6153      	str	r3, [r2, #20]
 80033f2:	4b29      	ldr	r3, [pc, #164]	; (8003498 <MX_GPIO_Init+0x110>)
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80033fe:	2200      	movs	r2, #0
 8003400:	2120      	movs	r1, #32
 8003402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003406:	f002 fde3 	bl	8005fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CH_ENA_GPIO_Port, CH_ENA_Pin, GPIO_PIN_RESET);
 800340a:	2200      	movs	r2, #0
 800340c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003410:	4822      	ldr	r0, [pc, #136]	; (800349c <MX_GPIO_Init+0x114>)
 8003412:	f002 fddd 	bl	8005fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800341a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800341c:	2300      	movs	r3, #0
 800341e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003424:	f107 0314 	add.w	r3, r7, #20
 8003428:	4619      	mov	r1, r3
 800342a:	481c      	ldr	r0, [pc, #112]	; (800349c <MX_GPIO_Init+0x114>)
 800342c:	f002 fc46 	bl	8005cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8003430:	2320      	movs	r3, #32
 8003432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003434:	2301      	movs	r3, #1
 8003436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343c:	2300      	movs	r3, #0
 800343e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	4619      	mov	r1, r3
 8003446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800344a:	f002 fc37 	bl	8005cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : CH_ENA_Pin */
  GPIO_InitStruct.Pin = CH_ENA_Pin;
 800344e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003454:	2301      	movs	r3, #1
 8003456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345c:	2300      	movs	r3, #0
 800345e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CH_ENA_GPIO_Port, &GPIO_InitStruct);
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	4619      	mov	r1, r3
 8003466:	480d      	ldr	r0, [pc, #52]	; (800349c <MX_GPIO_Init+0x114>)
 8003468:	f002 fc28 	bl	8005cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800346c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003472:	2312      	movs	r3, #18
 8003474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800347a:	2303      	movs	r3, #3
 800347c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800347e:	2304      	movs	r3, #4
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003482:	f107 0314 	add.w	r3, r7, #20
 8003486:	4619      	mov	r1, r3
 8003488:	4805      	ldr	r0, [pc, #20]	; (80034a0 <MX_GPIO_Init+0x118>)
 800348a:	f002 fc17 	bl	8005cbc <HAL_GPIO_Init>

}
 800348e:	bf00      	nop
 8003490:	3728      	adds	r7, #40	; 0x28
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
 800349c:	48000800 	.word	0x48000800
 80034a0:	48000400 	.word	0x48000400

080034a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034a8:	b672      	cpsid	i
}
 80034aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034ac:	e7fe      	b.n	80034ac <Error_Handler+0x8>
	...

080034b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b6:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <HAL_MspInit+0x44>)
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <HAL_MspInit+0x44>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6193      	str	r3, [r2, #24]
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_MspInit+0x44>)
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <HAL_MspInit+0x44>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	4a08      	ldr	r2, [pc, #32]	; (80034f4 <HAL_MspInit+0x44>)
 80034d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d8:	61d3      	str	r3, [r2, #28]
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_MspInit+0x44>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000

080034f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b090      	sub	sp, #64	; 0x40
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003518:	d16e      	bne.n	80035f8 <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800351a:	4b78      	ldr	r3, [pc, #480]	; (80036fc <HAL_ADC_MspInit+0x204>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	4a76      	ldr	r2, [pc, #472]	; (80036fc <HAL_ADC_MspInit+0x204>)
 8003522:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003524:	4b75      	ldr	r3, [pc, #468]	; (80036fc <HAL_ADC_MspInit+0x204>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d10b      	bne.n	8003544 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800352c:	4b74      	ldr	r3, [pc, #464]	; (8003700 <HAL_ADC_MspInit+0x208>)
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	4a73      	ldr	r2, [pc, #460]	; (8003700 <HAL_ADC_MspInit+0x208>)
 8003532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003536:	6153      	str	r3, [r2, #20]
 8003538:	4b71      	ldr	r3, [pc, #452]	; (8003700 <HAL_ADC_MspInit+0x208>)
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003544:	4b6e      	ldr	r3, [pc, #440]	; (8003700 <HAL_ADC_MspInit+0x208>)
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	4a6d      	ldr	r2, [pc, #436]	; (8003700 <HAL_ADC_MspInit+0x208>)
 800354a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800354e:	6153      	str	r3, [r2, #20]
 8003550:	4b6b      	ldr	r3, [pc, #428]	; (8003700 <HAL_ADC_MspInit+0x208>)
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355c:	4b68      	ldr	r3, [pc, #416]	; (8003700 <HAL_ADC_MspInit+0x208>)
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	4a67      	ldr	r2, [pc, #412]	; (8003700 <HAL_ADC_MspInit+0x208>)
 8003562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003566:	6153      	str	r3, [r2, #20]
 8003568:	4b65      	ldr	r3, [pc, #404]	; (8003700 <HAL_ADC_MspInit+0x208>)
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003570:	623b      	str	r3, [r7, #32]
 8003572:	6a3b      	ldr	r3, [r7, #32]
    PC1     ------> ADC1_IN7
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8003574:	230b      	movs	r3, #11
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003578:	2303      	movs	r3, #3
 800357a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003584:	4619      	mov	r1, r3
 8003586:	485f      	ldr	r0, [pc, #380]	; (8003704 <HAL_ADC_MspInit+0x20c>)
 8003588:	f002 fb98 	bl	8005cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800358c:	2303      	movs	r3, #3
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003590:	2303      	movs	r3, #3
 8003592:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003594:	2300      	movs	r3, #0
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003598:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800359c:	4619      	mov	r1, r3
 800359e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035a2:	f002 fb8b 	bl	8005cbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80035a6:	4b58      	ldr	r3, [pc, #352]	; (8003708 <HAL_ADC_MspInit+0x210>)
 80035a8:	4a58      	ldr	r2, [pc, #352]	; (800370c <HAL_ADC_MspInit+0x214>)
 80035aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035ac:	4b56      	ldr	r3, [pc, #344]	; (8003708 <HAL_ADC_MspInit+0x210>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b2:	4b55      	ldr	r3, [pc, #340]	; (8003708 <HAL_ADC_MspInit+0x210>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80035b8:	4b53      	ldr	r3, [pc, #332]	; (8003708 <HAL_ADC_MspInit+0x210>)
 80035ba:	2280      	movs	r2, #128	; 0x80
 80035bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035be:	4b52      	ldr	r3, [pc, #328]	; (8003708 <HAL_ADC_MspInit+0x210>)
 80035c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035c6:	4b50      	ldr	r3, [pc, #320]	; (8003708 <HAL_ADC_MspInit+0x210>)
 80035c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80035ce:	4b4e      	ldr	r3, [pc, #312]	; (8003708 <HAL_ADC_MspInit+0x210>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80035d4:	4b4c      	ldr	r3, [pc, #304]	; (8003708 <HAL_ADC_MspInit+0x210>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80035da:	484b      	ldr	r0, [pc, #300]	; (8003708 <HAL_ADC_MspInit+0x210>)
 80035dc:	f002 f943 	bl	8005866 <HAL_DMA_Init>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 80035e6:	f7ff ff5d 	bl	80034a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a46      	ldr	r2, [pc, #280]	; (8003708 <HAL_ADC_MspInit+0x210>)
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38
 80035f0:	4a45      	ldr	r2, [pc, #276]	; (8003708 <HAL_ADC_MspInit+0x210>)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80035f6:	e07c      	b.n	80036f2 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a44      	ldr	r2, [pc, #272]	; (8003710 <HAL_ADC_MspInit+0x218>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d146      	bne.n	8003690 <HAL_ADC_MspInit+0x198>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003602:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <HAL_ADC_MspInit+0x204>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3301      	adds	r3, #1
 8003608:	4a3c      	ldr	r2, [pc, #240]	; (80036fc <HAL_ADC_MspInit+0x204>)
 800360a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800360c:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <HAL_ADC_MspInit+0x204>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d10b      	bne.n	800362c <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003614:	4b3a      	ldr	r3, [pc, #232]	; (8003700 <HAL_ADC_MspInit+0x208>)
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	4a39      	ldr	r2, [pc, #228]	; (8003700 <HAL_ADC_MspInit+0x208>)
 800361a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361e:	6153      	str	r3, [r2, #20]
 8003620:	4b37      	ldr	r3, [pc, #220]	; (8003700 <HAL_ADC_MspInit+0x208>)
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800362c:	4b34      	ldr	r3, [pc, #208]	; (8003700 <HAL_ADC_MspInit+0x208>)
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	4a33      	ldr	r2, [pc, #204]	; (8003700 <HAL_ADC_MspInit+0x208>)
 8003632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003636:	6153      	str	r3, [r2, #20]
 8003638:	4b31      	ldr	r3, [pc, #196]	; (8003700 <HAL_ADC_MspInit+0x208>)
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003644:	4b2e      	ldr	r3, [pc, #184]	; (8003700 <HAL_ADC_MspInit+0x208>)
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	4a2d      	ldr	r2, [pc, #180]	; (8003700 <HAL_ADC_MspInit+0x208>)
 800364a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364e:	6153      	str	r3, [r2, #20]
 8003650:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_ADC_MspInit+0x208>)
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800365c:	230e      	movs	r3, #14
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003660:	2303      	movs	r3, #3
 8003662:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	2300      	movs	r3, #0
 8003666:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800366c:	4619      	mov	r1, r3
 800366e:	4825      	ldr	r0, [pc, #148]	; (8003704 <HAL_ADC_MspInit+0x20c>)
 8003670:	f002 fb24 	bl	8005cbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003674:	2310      	movs	r3, #16
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003678:	2303      	movs	r3, #3
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003684:	4619      	mov	r1, r3
 8003686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800368a:	f002 fb17 	bl	8005cbc <HAL_GPIO_Init>
}
 800368e:	e030      	b.n	80036f2 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC3)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1f      	ldr	r2, [pc, #124]	; (8003714 <HAL_ADC_MspInit+0x21c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d12b      	bne.n	80036f2 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800369a:	4b19      	ldr	r3, [pc, #100]	; (8003700 <HAL_ADC_MspInit+0x208>)
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	4a18      	ldr	r2, [pc, #96]	; (8003700 <HAL_ADC_MspInit+0x208>)
 80036a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036a4:	6153      	str	r3, [r2, #20]
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_ADC_MspInit+0x208>)
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b2:	4b13      	ldr	r3, [pc, #76]	; (8003700 <HAL_ADC_MspInit+0x208>)
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	4a12      	ldr	r2, [pc, #72]	; (8003700 <HAL_ADC_MspInit+0x208>)
 80036b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036bc:	6153      	str	r3, [r2, #20]
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_ADC_MspInit+0x208>)
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036ca:	2301      	movs	r3, #1
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036ce:	2303      	movs	r3, #3
 80036d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036da:	4619      	mov	r1, r3
 80036dc:	480e      	ldr	r0, [pc, #56]	; (8003718 <HAL_ADC_MspInit+0x220>)
 80036de:	f002 faed 	bl	8005cbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80036e2:	2200      	movs	r2, #0
 80036e4:	2100      	movs	r1, #0
 80036e6:	202f      	movs	r0, #47	; 0x2f
 80036e8:	f002 f887 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80036ec:	202f      	movs	r0, #47	; 0x2f
 80036ee:	f002 f8a0 	bl	8005832 <HAL_NVIC_EnableIRQ>
}
 80036f2:	bf00      	nop
 80036f4:	3740      	adds	r7, #64	; 0x40
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20001c44 	.word	0x20001c44
 8003700:	40021000 	.word	0x40021000
 8003704:	48000800 	.word	0x48000800
 8003708:	2000063c 	.word	0x2000063c
 800370c:	40020008 	.word	0x40020008
 8003710:	50000100 	.word	0x50000100
 8003714:	50000400 	.word	0x50000400
 8003718:	48000400 	.word	0x48000400

0800371c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a0d      	ldr	r2, [pc, #52]	; (8003760 <HAL_TIM_Base_MspInit+0x44>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d113      	bne.n	8003756 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800372e:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <HAL_TIM_Base_MspInit+0x48>)
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	4a0c      	ldr	r2, [pc, #48]	; (8003764 <HAL_TIM_Base_MspInit+0x48>)
 8003734:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003738:	6193      	str	r3, [r2, #24]
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_TIM_Base_MspInit+0x48>)
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003746:	2200      	movs	r2, #0
 8003748:	2100      	movs	r1, #0
 800374a:	2019      	movs	r0, #25
 800374c:	f002 f855 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003750:	2019      	movs	r0, #25
 8003752:	f002 f86e 	bl	8005832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40012c00 	.word	0x40012c00
 8003764:	40021000 	.word	0x40021000

08003768 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a0a      	ldr	r2, [pc, #40]	; (80037a0 <HAL_TIM_PWM_MspInit+0x38>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d10b      	bne.n	8003792 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003780:	f043 0302 	orr.w	r3, r3, #2
 8003784:	61d3      	str	r3, [r2, #28]
 8003786:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40000400 	.word	0x40000400
 80037a4:	40021000 	.word	0x40021000

080037a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b0:	f107 030c 	add.w	r3, r7, #12
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a11      	ldr	r2, [pc, #68]	; (800380c <HAL_TIM_MspPostInit+0x64>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d11c      	bne.n	8003804 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ca:	4b11      	ldr	r3, [pc, #68]	; (8003810 <HAL_TIM_MspPostInit+0x68>)
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	4a10      	ldr	r2, [pc, #64]	; (8003810 <HAL_TIM_MspPostInit+0x68>)
 80037d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037d4:	6153      	str	r3, [r2, #20]
 80037d6:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <HAL_TIM_MspPostInit+0x68>)
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80037e2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80037e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e8:	2302      	movs	r3, #2
 80037ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037f4:	2302      	movs	r3, #2
 80037f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037f8:	f107 030c 	add.w	r3, r7, #12
 80037fc:	4619      	mov	r1, r3
 80037fe:	4805      	ldr	r0, [pc, #20]	; (8003814 <HAL_TIM_MspPostInit+0x6c>)
 8003800:	f002 fa5c 	bl	8005cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003804:	bf00      	nop
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40000400 	.word	0x40000400
 8003810:	40021000 	.word	0x40021000
 8003814:	48000800 	.word	0x48000800

08003818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08c      	sub	sp, #48	; 0x30
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	f107 031c 	add.w	r3, r7, #28
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a37      	ldr	r2, [pc, #220]	; (8003914 <HAL_UART_MspInit+0xfc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d131      	bne.n	800389e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800383a:	4b37      	ldr	r3, [pc, #220]	; (8003918 <HAL_UART_MspInit+0x100>)
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	4a36      	ldr	r2, [pc, #216]	; (8003918 <HAL_UART_MspInit+0x100>)
 8003840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003844:	61d3      	str	r3, [r2, #28]
 8003846:	4b34      	ldr	r3, [pc, #208]	; (8003918 <HAL_UART_MspInit+0x100>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003852:	4b31      	ldr	r3, [pc, #196]	; (8003918 <HAL_UART_MspInit+0x100>)
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	4a30      	ldr	r2, [pc, #192]	; (8003918 <HAL_UART_MspInit+0x100>)
 8003858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800385c:	6153      	str	r3, [r2, #20]
 800385e:	4b2e      	ldr	r3, [pc, #184]	; (8003918 <HAL_UART_MspInit+0x100>)
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800386a:	230c      	movs	r3, #12
 800386c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386e:	2302      	movs	r3, #2
 8003870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003872:	2300      	movs	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003876:	2303      	movs	r3, #3
 8003878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800387a:	2307      	movs	r3, #7
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387e:	f107 031c 	add.w	r3, r7, #28
 8003882:	4619      	mov	r1, r3
 8003884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003888:	f002 fa18 	bl	8005cbc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800388c:	2200      	movs	r2, #0
 800388e:	2100      	movs	r1, #0
 8003890:	2026      	movs	r0, #38	; 0x26
 8003892:	f001 ffb2 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003896:	2026      	movs	r0, #38	; 0x26
 8003898:	f001 ffcb 	bl	8005832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800389c:	e035      	b.n	800390a <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <HAL_UART_MspInit+0x104>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d130      	bne.n	800390a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80038a8:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <HAL_UART_MspInit+0x100>)
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	4a1a      	ldr	r2, [pc, #104]	; (8003918 <HAL_UART_MspInit+0x100>)
 80038ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b2:	61d3      	str	r3, [r2, #28]
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <HAL_UART_MspInit+0x100>)
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <HAL_UART_MspInit+0x100>)
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	4a14      	ldr	r2, [pc, #80]	; (8003918 <HAL_UART_MspInit+0x100>)
 80038c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038ca:	6153      	str	r3, [r2, #20]
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <HAL_UART_MspInit+0x100>)
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80038d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80038dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038de:	2302      	movs	r3, #2
 80038e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038e6:	2303      	movs	r3, #3
 80038e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038ea:	2307      	movs	r3, #7
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ee:	f107 031c 	add.w	r3, r7, #28
 80038f2:	4619      	mov	r1, r3
 80038f4:	480a      	ldr	r0, [pc, #40]	; (8003920 <HAL_UART_MspInit+0x108>)
 80038f6:	f002 f9e1 	bl	8005cbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80038fa:	2200      	movs	r2, #0
 80038fc:	2100      	movs	r1, #0
 80038fe:	2027      	movs	r0, #39	; 0x27
 8003900:	f001 ff7b 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003904:	2027      	movs	r0, #39	; 0x27
 8003906:	f001 ff94 	bl	8005832 <HAL_NVIC_EnableIRQ>
}
 800390a:	bf00      	nop
 800390c:	3730      	adds	r7, #48	; 0x30
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40004400 	.word	0x40004400
 8003918:	40021000 	.word	0x40021000
 800391c:	40004800 	.word	0x40004800
 8003920:	48000800 	.word	0x48000800

08003924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003928:	e7fe      	b.n	8003928 <NMI_Handler+0x4>

0800392a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800392a:	b480      	push	{r7}
 800392c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800392e:	e7fe      	b.n	800392e <HardFault_Handler+0x4>

08003930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003934:	e7fe      	b.n	8003934 <MemManage_Handler+0x4>

08003936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003936:	b480      	push	{r7}
 8003938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800393a:	e7fe      	b.n	800393a <BusFault_Handler+0x4>

0800393c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003940:	e7fe      	b.n	8003940 <UsageFault_Handler+0x4>

08003942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003942:	b480      	push	{r7}
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003970:	f000 f8b6 	bl	8003ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003974:	bf00      	nop
 8003976:	bd80      	pop	{r7, pc}

08003978 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800397c:	4802      	ldr	r0, [pc, #8]	; (8003988 <DMA1_Channel1_IRQHandler+0x10>)
 800397e:	f002 f88f 	bl	8005aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	2000063c 	.word	0x2000063c

0800398c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003990:	4802      	ldr	r0, [pc, #8]	; (800399c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003992:	f004 fb0d 	bl	8007fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000680 	.word	0x20000680

080039a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039a4:	4802      	ldr	r0, [pc, #8]	; (80039b0 <USART2_IRQHandler+0x10>)
 80039a6:	f005 fbd3 	bl	8009150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000718 	.word	0x20000718

080039b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80039b8:	4802      	ldr	r0, [pc, #8]	; (80039c4 <USART3_IRQHandler+0x10>)
 80039ba:	f005 fbc9 	bl	8009150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	2000079c 	.word	0x2000079c

080039c8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80039cc:	4802      	ldr	r0, [pc, #8]	; (80039d8 <ADC3_IRQHandler+0x10>)
 80039ce:	f000 fd23 	bl	8004418 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	200005ec 	.word	0x200005ec

080039dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <SystemInit+0x20>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	4a05      	ldr	r2, [pc, #20]	; (80039fc <SystemInit+0x20>)
 80039e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039f0:	bf00      	nop
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a04:	480d      	ldr	r0, [pc, #52]	; (8003a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8003a06:	490e      	ldr	r1, [pc, #56]	; (8003a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a08:	4a0e      	ldr	r2, [pc, #56]	; (8003a44 <LoopForever+0xe>)
  movs r3, #0
 8003a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a0c:	e002      	b.n	8003a14 <LoopCopyDataInit>

08003a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a12:	3304      	adds	r3, #4

08003a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a18:	d3f9      	bcc.n	8003a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a1a:	4a0b      	ldr	r2, [pc, #44]	; (8003a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a1c:	4c0b      	ldr	r4, [pc, #44]	; (8003a4c <LoopForever+0x16>)
  movs r3, #0
 8003a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a20:	e001      	b.n	8003a26 <LoopFillZerobss>

08003a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a24:	3204      	adds	r2, #4

08003a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a28:	d3fb      	bcc.n	8003a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a2a:	f7ff ffd7 	bl	80039dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a2e:	f006 fcc9 	bl	800a3c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a32:	f7fe fe77 	bl	8002724 <main>

08003a36 <LoopForever>:

LoopForever:
    b LoopForever
 8003a36:	e7fe      	b.n	8003a36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003a44:	0800a5f4 	.word	0x0800a5f4
  ldr r2, =_sbss
 8003a48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003a4c:	20001c4c 	.word	0x20001c4c

08003a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a50:	e7fe      	b.n	8003a50 <ADC1_2_IRQHandler>
	...

08003a54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a58:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <HAL_Init+0x28>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a07      	ldr	r2, [pc, #28]	; (8003a7c <HAL_Init+0x28>)
 8003a5e:	f043 0310 	orr.w	r3, r3, #16
 8003a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a64:	2003      	movs	r0, #3
 8003a66:	f001 febd 	bl	80057e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a6a:	200f      	movs	r0, #15
 8003a6c:	f000 f808 	bl	8003a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a70:	f7ff fd1e 	bl	80034b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40022000 	.word	0x40022000

08003a80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_InitTick+0x54>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <HAL_InitTick+0x58>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	4619      	mov	r1, r3
 8003a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 fed5 	bl	800584e <HAL_SYSTICK_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e00e      	b.n	8003acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b0f      	cmp	r3, #15
 8003ab2:	d80a      	bhi.n	8003aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	f001 fe9d 	bl	80057fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ac0:	4a06      	ldr	r2, [pc, #24]	; (8003adc <HAL_InitTick+0x5c>)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	e000      	b.n	8003acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	20000008 	.word	0x20000008
 8003adc:	20000004 	.word	0x20000004

08003ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_IncTick+0x20>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_IncTick+0x24>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4413      	add	r3, r2
 8003af0:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <HAL_IncTick+0x24>)
 8003af2:	6013      	str	r3, [r2, #0]
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000008 	.word	0x20000008
 8003b04:	20001c48 	.word	0x20001c48

08003b08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_GetTick+0x14>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20001c48 	.word	0x20001c48

08003b20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b09a      	sub	sp, #104	; 0x68
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e1e3      	b.n	8003f44 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d176      	bne.n	8003c7c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d152      	bne.n	8003c3c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff fca1 	bl	80034f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d13b      	bne.n	8003c3c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f001 fcd7 	bl	8005578 <ADC_Disable>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d12f      	bne.n	8003c3c <HAL_ADC_Init+0xe0>
 8003bdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d12b      	bne.n	8003c3c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bec:	f023 0302 	bic.w	r3, r3, #2
 8003bf0:	f043 0202 	orr.w	r2, r3, #2
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c06:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c16:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c18:	4b92      	ldr	r3, [pc, #584]	; (8003e64 <HAL_ADC_Init+0x308>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a92      	ldr	r2, [pc, #584]	; (8003e68 <HAL_ADC_Init+0x30c>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	0c9a      	lsrs	r2, r3, #18
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c2e:	e002      	b.n	8003c36 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f9      	bne.n	8003c30 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c58:	d110      	bne.n	8003c7c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f023 0312 	bic.w	r3, r3, #18
 8003c62:	f043 0210 	orr.w	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f043 0201 	orr.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f040 8150 	bne.w	8003f2a <HAL_ADC_Init+0x3ce>
 8003c8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f040 814b 	bne.w	8003f2a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f040 8143 	bne.w	8003f2a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003cac:	f043 0202 	orr.w	r2, r3, #2
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cbc:	d004      	beq.n	8003cc8 <HAL_ADC_Init+0x16c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6a      	ldr	r2, [pc, #424]	; (8003e6c <HAL_ADC_Init+0x310>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d101      	bne.n	8003ccc <HAL_ADC_Init+0x170>
 8003cc8:	4b69      	ldr	r3, [pc, #420]	; (8003e70 <HAL_ADC_Init+0x314>)
 8003cca:	e000      	b.n	8003cce <HAL_ADC_Init+0x172>
 8003ccc:	4b69      	ldr	r3, [pc, #420]	; (8003e74 <HAL_ADC_Init+0x318>)
 8003cce:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cd8:	d102      	bne.n	8003ce0 <HAL_ADC_Init+0x184>
 8003cda:	4b64      	ldr	r3, [pc, #400]	; (8003e6c <HAL_ADC_Init+0x310>)
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	e01a      	b.n	8003d16 <HAL_ADC_Init+0x1ba>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a61      	ldr	r2, [pc, #388]	; (8003e6c <HAL_ADC_Init+0x310>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d103      	bne.n	8003cf2 <HAL_ADC_Init+0x196>
 8003cea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e011      	b.n	8003d16 <HAL_ADC_Init+0x1ba>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a60      	ldr	r2, [pc, #384]	; (8003e78 <HAL_ADC_Init+0x31c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d102      	bne.n	8003d02 <HAL_ADC_Init+0x1a6>
 8003cfc:	4b5f      	ldr	r3, [pc, #380]	; (8003e7c <HAL_ADC_Init+0x320>)
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	e009      	b.n	8003d16 <HAL_ADC_Init+0x1ba>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a5d      	ldr	r2, [pc, #372]	; (8003e7c <HAL_ADC_Init+0x320>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d102      	bne.n	8003d12 <HAL_ADC_Init+0x1b6>
 8003d0c:	4b5a      	ldr	r3, [pc, #360]	; (8003e78 <HAL_ADC_Init+0x31c>)
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	e001      	b.n	8003d16 <HAL_ADC_Init+0x1ba>
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d108      	bne.n	8003d36 <HAL_ADC_Init+0x1da>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_ADC_Init+0x1da>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_ADC_Init+0x1dc>
 8003d36:	2300      	movs	r3, #0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d11c      	bne.n	8003d76 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003d3c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d010      	beq.n	8003d64 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d107      	bne.n	8003d5e <HAL_ADC_Init+0x202>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_ADC_Init+0x202>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_ADC_Init+0x204>
 8003d5e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d108      	bne.n	8003d76 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d74:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	7e5b      	ldrb	r3, [r3, #25]
 8003d7a:	035b      	lsls	r3, r3, #13
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d80:	2a01      	cmp	r2, #1
 8003d82:	d002      	beq.n	8003d8a <HAL_ADC_Init+0x22e>
 8003d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d88:	e000      	b.n	8003d8c <HAL_ADC_Init+0x230>
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d11b      	bne.n	8003de2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	7e5b      	ldrb	r3, [r3, #25]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	3b01      	subs	r3, #1
 8003db8:	045a      	lsls	r2, r3, #17
 8003dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8003dc4:	e00d      	b.n	8003de2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003dce:	f043 0220 	orr.w	r2, r3, #32
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f043 0201 	orr.w	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d054      	beq.n	8003e94 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a22      	ldr	r2, [pc, #136]	; (8003e78 <HAL_ADC_Init+0x31c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d004      	beq.n	8003dfe <HAL_ADC_Init+0x2a2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a20      	ldr	r2, [pc, #128]	; (8003e7c <HAL_ADC_Init+0x320>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d140      	bne.n	8003e80 <HAL_ADC_Init+0x324>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e02:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003e06:	d02a      	beq.n	8003e5e <HAL_ADC_Init+0x302>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e10:	d022      	beq.n	8003e58 <HAL_ADC_Init+0x2fc>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003e1a:	d01a      	beq.n	8003e52 <HAL_ADC_Init+0x2f6>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8003e24:	d012      	beq.n	8003e4c <HAL_ADC_Init+0x2f0>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8003e2e:	d00a      	beq.n	8003e46 <HAL_ADC_Init+0x2ea>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8003e38:	d002      	beq.n	8003e40 <HAL_ADC_Init+0x2e4>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	e023      	b.n	8003e88 <HAL_ADC_Init+0x32c>
 8003e40:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003e44:	e020      	b.n	8003e88 <HAL_ADC_Init+0x32c>
 8003e46:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003e4a:	e01d      	b.n	8003e88 <HAL_ADC_Init+0x32c>
 8003e4c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003e50:	e01a      	b.n	8003e88 <HAL_ADC_Init+0x32c>
 8003e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e56:	e017      	b.n	8003e88 <HAL_ADC_Init+0x32c>
 8003e58:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003e5c:	e014      	b.n	8003e88 <HAL_ADC_Init+0x32c>
 8003e5e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003e62:	e011      	b.n	8003e88 <HAL_ADC_Init+0x32c>
 8003e64:	20000000 	.word	0x20000000
 8003e68:	431bde83 	.word	0x431bde83
 8003e6c:	50000100 	.word	0x50000100
 8003e70:	50000300 	.word	0x50000300
 8003e74:	50000700 	.word	0x50000700
 8003e78:	50000400 	.word	0x50000400
 8003e7c:	50000500 	.word	0x50000500
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e90:	4313      	orrs	r3, r2
 8003e92:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d114      	bne.n	8003ecc <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eb0:	f023 0302 	bic.w	r3, r3, #2
 8003eb4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	7e1b      	ldrb	r3, [r3, #24]
 8003eba:	039a      	lsls	r2, r3, #14
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <HAL_ADC_Init+0x3f0>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6812      	ldr	r2, [r2, #0]
 8003eda:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003edc:	430b      	orrs	r3, r1
 8003ede:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d10c      	bne.n	8003f02 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f023 010f 	bic.w	r1, r3, #15
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	1e5a      	subs	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
 8003f00:	e007      	b.n	8003f12 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 020f 	bic.w	r2, r2, #15
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	f023 0303 	bic.w	r3, r3, #3
 8003f20:	f043 0201 	orr.w	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40
 8003f28:	e00a      	b.n	8003f40 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f023 0312 	bic.w	r3, r3, #18
 8003f32:	f043 0210 	orr.w	r2, r3, #16
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003f40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3768      	adds	r7, #104	; 0x68
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	fff0c007 	.word	0xfff0c007

08003f50 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f040 80f9 	bne.w	800415e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_ADC_Start+0x2a>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e0f4      	b.n	8004164 <HAL_ADC_Start+0x214>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f001 fa94 	bl	80054b0 <ADC_Enable>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f040 80e0 	bne.w	8004154 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fb0:	d004      	beq.n	8003fbc <HAL_ADC_Start+0x6c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a6d      	ldr	r2, [pc, #436]	; (800416c <HAL_ADC_Start+0x21c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d106      	bne.n	8003fca <HAL_ADC_Start+0x7a>
 8003fbc:	4b6c      	ldr	r3, [pc, #432]	; (8004170 <HAL_ADC_Start+0x220>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d010      	beq.n	8003fea <HAL_ADC_Start+0x9a>
 8003fc8:	e005      	b.n	8003fd6 <HAL_ADC_Start+0x86>
 8003fca:	4b6a      	ldr	r3, [pc, #424]	; (8004174 <HAL_ADC_Start+0x224>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_ADC_Start+0x9a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fde:	d004      	beq.n	8003fea <HAL_ADC_Start+0x9a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a64      	ldr	r2, [pc, #400]	; (8004178 <HAL_ADC_Start+0x228>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d115      	bne.n	8004016 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d036      	beq.n	8004072 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800400c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004014:	e02d      	b.n	8004072 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800402a:	d004      	beq.n	8004036 <HAL_ADC_Start+0xe6>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a4e      	ldr	r2, [pc, #312]	; (800416c <HAL_ADC_Start+0x21c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d10a      	bne.n	800404c <HAL_ADC_Start+0xfc>
 8004036:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	bf14      	ite	ne
 8004044:	2301      	movne	r3, #1
 8004046:	2300      	moveq	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	e008      	b.n	800405e <HAL_ADC_Start+0x10e>
 800404c:	4b4a      	ldr	r3, [pc, #296]	; (8004178 <HAL_ADC_Start+0x228>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf14      	ite	ne
 8004058:	2301      	movne	r3, #1
 800405a:	2300      	moveq	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800406a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800407a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407e:	d106      	bne.n	800408e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	f023 0206 	bic.w	r2, r3, #6
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	645a      	str	r2, [r3, #68]	; 0x44
 800408c:	e002      	b.n	8004094 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	221c      	movs	r2, #28
 80040a2:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040ac:	d004      	beq.n	80040b8 <HAL_ADC_Start+0x168>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a2e      	ldr	r2, [pc, #184]	; (800416c <HAL_ADC_Start+0x21c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d106      	bne.n	80040c6 <HAL_ADC_Start+0x176>
 80040b8:	4b2d      	ldr	r3, [pc, #180]	; (8004170 <HAL_ADC_Start+0x220>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d03e      	beq.n	8004142 <HAL_ADC_Start+0x1f2>
 80040c4:	e005      	b.n	80040d2 <HAL_ADC_Start+0x182>
 80040c6:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <HAL_ADC_Start+0x224>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d037      	beq.n	8004142 <HAL_ADC_Start+0x1f2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040da:	d004      	beq.n	80040e6 <HAL_ADC_Start+0x196>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a22      	ldr	r2, [pc, #136]	; (800416c <HAL_ADC_Start+0x21c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d106      	bne.n	80040f4 <HAL_ADC_Start+0x1a4>
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <HAL_ADC_Start+0x220>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	d027      	beq.n	8004142 <HAL_ADC_Start+0x1f2>
 80040f2:	e005      	b.n	8004100 <HAL_ADC_Start+0x1b0>
 80040f4:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <HAL_ADC_Start+0x224>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2b05      	cmp	r3, #5
 80040fe:	d020      	beq.n	8004142 <HAL_ADC_Start+0x1f2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004108:	d004      	beq.n	8004114 <HAL_ADC_Start+0x1c4>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a17      	ldr	r2, [pc, #92]	; (800416c <HAL_ADC_Start+0x21c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d106      	bne.n	8004122 <HAL_ADC_Start+0x1d2>
 8004114:	4b16      	ldr	r3, [pc, #88]	; (8004170 <HAL_ADC_Start+0x220>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	2b09      	cmp	r3, #9
 800411e:	d010      	beq.n	8004142 <HAL_ADC_Start+0x1f2>
 8004120:	e005      	b.n	800412e <HAL_ADC_Start+0x1de>
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <HAL_ADC_Start+0x224>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	2b09      	cmp	r3, #9
 800412c:	d009      	beq.n	8004142 <HAL_ADC_Start+0x1f2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004136:	d004      	beq.n	8004142 <HAL_ADC_Start+0x1f2>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0e      	ldr	r2, [pc, #56]	; (8004178 <HAL_ADC_Start+0x228>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d10f      	bne.n	8004162 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0204 	orr.w	r2, r2, #4
 8004150:	609a      	str	r2, [r3, #8]
 8004152:	e006      	b.n	8004162 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800415c:	e001      	b.n	8004162 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800415e:	2302      	movs	r3, #2
 8004160:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004162:	7bfb      	ldrb	r3, [r7, #15]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	50000100 	.word	0x50000100
 8004170:	50000300 	.word	0x50000300
 8004174:	50000700 	.word	0x50000700
 8004178:	50000400 	.word	0x50000400

0800417c <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	f040 8123 	bne.w	80043de <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_ADC_Start_IT+0x2a>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e11e      	b.n	80043e4 <HAL_ADC_Start_IT+0x268>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f001 f97e 	bl	80054b0 <ADC_Enable>
 80041b4:	4603      	mov	r3, r0
 80041b6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f040 810a 	bne.w	80043d4 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041dc:	d004      	beq.n	80041e8 <HAL_ADC_Start_IT+0x6c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a82      	ldr	r2, [pc, #520]	; (80043ec <HAL_ADC_Start_IT+0x270>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d106      	bne.n	80041f6 <HAL_ADC_Start_IT+0x7a>
 80041e8:	4b81      	ldr	r3, [pc, #516]	; (80043f0 <HAL_ADC_Start_IT+0x274>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d010      	beq.n	8004216 <HAL_ADC_Start_IT+0x9a>
 80041f4:	e005      	b.n	8004202 <HAL_ADC_Start_IT+0x86>
 80041f6:	4b7f      	ldr	r3, [pc, #508]	; (80043f4 <HAL_ADC_Start_IT+0x278>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 031f 	and.w	r3, r3, #31
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <HAL_ADC_Start_IT+0x9a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800420a:	d004      	beq.n	8004216 <HAL_ADC_Start_IT+0x9a>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a79      	ldr	r2, [pc, #484]	; (80043f8 <HAL_ADC_Start_IT+0x27c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d115      	bne.n	8004242 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d036      	beq.n	800429e <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004238:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004240:	e02d      	b.n	800429e <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004256:	d004      	beq.n	8004262 <HAL_ADC_Start_IT+0xe6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a63      	ldr	r2, [pc, #396]	; (80043ec <HAL_ADC_Start_IT+0x270>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d10a      	bne.n	8004278 <HAL_ADC_Start_IT+0xfc>
 8004262:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e008      	b.n	800428a <HAL_ADC_Start_IT+0x10e>
 8004278:	4b5f      	ldr	r3, [pc, #380]	; (80043f8 <HAL_ADC_Start_IT+0x27c>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	bf14      	ite	ne
 8004284:	2301      	movne	r3, #1
 8004286:	2300      	moveq	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004296:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042aa:	d106      	bne.n	80042ba <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b0:	f023 0206 	bic.w	r2, r3, #6
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	645a      	str	r2, [r3, #68]	; 0x44
 80042b8:	e002      	b.n	80042c0 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	221c      	movs	r2, #28
 80042ce:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d110      	bne.n	80042fa <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0204 	bic.w	r2, r2, #4
 80042e6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0208 	orr.w	r2, r2, #8
 80042f6:	605a      	str	r2, [r3, #4]
          break;
 80042f8:	e008      	b.n	800430c <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 020c 	orr.w	r2, r2, #12
 8004308:	605a      	str	r2, [r3, #4]
          break;
 800430a:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004310:	2b01      	cmp	r3, #1
 8004312:	d107      	bne.n	8004324 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0210 	bic.w	r2, r2, #16
 8004322:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800432c:	d004      	beq.n	8004338 <HAL_ADC_Start_IT+0x1bc>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2e      	ldr	r2, [pc, #184]	; (80043ec <HAL_ADC_Start_IT+0x270>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d106      	bne.n	8004346 <HAL_ADC_Start_IT+0x1ca>
 8004338:	4b2d      	ldr	r3, [pc, #180]	; (80043f0 <HAL_ADC_Start_IT+0x274>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	2b00      	cmp	r3, #0
 8004342:	d03e      	beq.n	80043c2 <HAL_ADC_Start_IT+0x246>
 8004344:	e005      	b.n	8004352 <HAL_ADC_Start_IT+0x1d6>
 8004346:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_ADC_Start_IT+0x278>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	2b00      	cmp	r3, #0
 8004350:	d037      	beq.n	80043c2 <HAL_ADC_Start_IT+0x246>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800435a:	d004      	beq.n	8004366 <HAL_ADC_Start_IT+0x1ea>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a22      	ldr	r2, [pc, #136]	; (80043ec <HAL_ADC_Start_IT+0x270>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d106      	bne.n	8004374 <HAL_ADC_Start_IT+0x1f8>
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <HAL_ADC_Start_IT+0x274>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	2b05      	cmp	r3, #5
 8004370:	d027      	beq.n	80043c2 <HAL_ADC_Start_IT+0x246>
 8004372:	e005      	b.n	8004380 <HAL_ADC_Start_IT+0x204>
 8004374:	4b1f      	ldr	r3, [pc, #124]	; (80043f4 <HAL_ADC_Start_IT+0x278>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	2b05      	cmp	r3, #5
 800437e:	d020      	beq.n	80043c2 <HAL_ADC_Start_IT+0x246>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004388:	d004      	beq.n	8004394 <HAL_ADC_Start_IT+0x218>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a17      	ldr	r2, [pc, #92]	; (80043ec <HAL_ADC_Start_IT+0x270>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d106      	bne.n	80043a2 <HAL_ADC_Start_IT+0x226>
 8004394:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <HAL_ADC_Start_IT+0x274>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	2b09      	cmp	r3, #9
 800439e:	d010      	beq.n	80043c2 <HAL_ADC_Start_IT+0x246>
 80043a0:	e005      	b.n	80043ae <HAL_ADC_Start_IT+0x232>
 80043a2:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <HAL_ADC_Start_IT+0x278>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	2b09      	cmp	r3, #9
 80043ac:	d009      	beq.n	80043c2 <HAL_ADC_Start_IT+0x246>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043b6:	d004      	beq.n	80043c2 <HAL_ADC_Start_IT+0x246>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a0e      	ldr	r2, [pc, #56]	; (80043f8 <HAL_ADC_Start_IT+0x27c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d10f      	bne.n	80043e2 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0204 	orr.w	r2, r2, #4
 80043d0:	609a      	str	r2, [r3, #8]
 80043d2:	e006      	b.n	80043e2 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043dc:	e001      	b.n	80043e2 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80043de:	2302      	movs	r3, #2
 80043e0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	50000100 	.word	0x50000100
 80043f0:	50000300 	.word	0x50000300
 80043f4:	50000700 	.word	0x50000700
 80043f8:	50000400 	.word	0x50000400

080043fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b04      	cmp	r3, #4
 8004438:	d106      	bne.n	8004448 <HAL_ADC_IRQHandler+0x30>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b04      	cmp	r3, #4
 8004446:	d00f      	beq.n	8004468 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004452:	2b08      	cmp	r3, #8
 8004454:	f040 80c0 	bne.w	80045d8 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b08      	cmp	r3, #8
 8004464:	f040 80b8 	bne.w	80045d8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004488:	d004      	beq.n	8004494 <HAL_ADC_IRQHandler+0x7c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a8e      	ldr	r2, [pc, #568]	; (80046c8 <HAL_ADC_IRQHandler+0x2b0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d106      	bne.n	80044a2 <HAL_ADC_IRQHandler+0x8a>
 8004494:	4b8d      	ldr	r3, [pc, #564]	; (80046cc <HAL_ADC_IRQHandler+0x2b4>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	2b00      	cmp	r3, #0
 800449e:	d03e      	beq.n	800451e <HAL_ADC_IRQHandler+0x106>
 80044a0:	e005      	b.n	80044ae <HAL_ADC_IRQHandler+0x96>
 80044a2:	4b8b      	ldr	r3, [pc, #556]	; (80046d0 <HAL_ADC_IRQHandler+0x2b8>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d037      	beq.n	800451e <HAL_ADC_IRQHandler+0x106>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b6:	d004      	beq.n	80044c2 <HAL_ADC_IRQHandler+0xaa>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a82      	ldr	r2, [pc, #520]	; (80046c8 <HAL_ADC_IRQHandler+0x2b0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d106      	bne.n	80044d0 <HAL_ADC_IRQHandler+0xb8>
 80044c2:	4b82      	ldr	r3, [pc, #520]	; (80046cc <HAL_ADC_IRQHandler+0x2b4>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	2b05      	cmp	r3, #5
 80044cc:	d027      	beq.n	800451e <HAL_ADC_IRQHandler+0x106>
 80044ce:	e005      	b.n	80044dc <HAL_ADC_IRQHandler+0xc4>
 80044d0:	4b7f      	ldr	r3, [pc, #508]	; (80046d0 <HAL_ADC_IRQHandler+0x2b8>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	2b05      	cmp	r3, #5
 80044da:	d020      	beq.n	800451e <HAL_ADC_IRQHandler+0x106>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044e4:	d004      	beq.n	80044f0 <HAL_ADC_IRQHandler+0xd8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a77      	ldr	r2, [pc, #476]	; (80046c8 <HAL_ADC_IRQHandler+0x2b0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d106      	bne.n	80044fe <HAL_ADC_IRQHandler+0xe6>
 80044f0:	4b76      	ldr	r3, [pc, #472]	; (80046cc <HAL_ADC_IRQHandler+0x2b4>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	2b09      	cmp	r3, #9
 80044fa:	d010      	beq.n	800451e <HAL_ADC_IRQHandler+0x106>
 80044fc:	e005      	b.n	800450a <HAL_ADC_IRQHandler+0xf2>
 80044fe:	4b74      	ldr	r3, [pc, #464]	; (80046d0 <HAL_ADC_IRQHandler+0x2b8>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 031f 	and.w	r3, r3, #31
 8004506:	2b09      	cmp	r3, #9
 8004508:	d009      	beq.n	800451e <HAL_ADC_IRQHandler+0x106>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004512:	d004      	beq.n	800451e <HAL_ADC_IRQHandler+0x106>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a6e      	ldr	r2, [pc, #440]	; (80046d4 <HAL_ADC_IRQHandler+0x2bc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d104      	bne.n	8004528 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	e00f      	b.n	8004548 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004530:	d004      	beq.n	800453c <HAL_ADC_IRQHandler+0x124>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a64      	ldr	r2, [pc, #400]	; (80046c8 <HAL_ADC_IRQHandler+0x2b0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d102      	bne.n	8004542 <HAL_ADC_IRQHandler+0x12a>
 800453c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004540:	e000      	b.n	8004544 <HAL_ADC_IRQHandler+0x12c>
 8004542:	4b64      	ldr	r3, [pc, #400]	; (80046d4 <HAL_ADC_IRQHandler+0x2bc>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004552:	2b00      	cmp	r3, #0
 8004554:	d139      	bne.n	80045ca <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800455c:	2b00      	cmp	r3, #0
 800455e:	d134      	bne.n	80045ca <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b08      	cmp	r3, #8
 800456c:	d12d      	bne.n	80045ca <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d11a      	bne.n	80045b2 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 020c 	bic.w	r2, r2, #12
 800458a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d112      	bne.n	80045ca <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	f043 0201 	orr.w	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40
 80045b0:	e00b      	b.n	80045ca <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f043 0210 	orr.w	r2, r3, #16
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c2:	f043 0201 	orr.w	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fc ff22 	bl	8001414 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	220c      	movs	r2, #12
 80045d6:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d106      	bne.n	80045f4 <HAL_ADC_IRQHandler+0x1dc>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d00f      	beq.n	8004614 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80045fe:	2b40      	cmp	r3, #64	; 0x40
 8004600:	f040 8143 	bne.w	800488a <HAL_ADC_IRQHandler+0x472>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460e:	2b40      	cmp	r3, #64	; 0x40
 8004610:	f040 813b 	bne.w	800488a <HAL_ADC_IRQHandler+0x472>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004628:	d004      	beq.n	8004634 <HAL_ADC_IRQHandler+0x21c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a26      	ldr	r2, [pc, #152]	; (80046c8 <HAL_ADC_IRQHandler+0x2b0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d106      	bne.n	8004642 <HAL_ADC_IRQHandler+0x22a>
 8004634:	4b25      	ldr	r3, [pc, #148]	; (80046cc <HAL_ADC_IRQHandler+0x2b4>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	2b00      	cmp	r3, #0
 800463e:	d03e      	beq.n	80046be <HAL_ADC_IRQHandler+0x2a6>
 8004640:	e005      	b.n	800464e <HAL_ADC_IRQHandler+0x236>
 8004642:	4b23      	ldr	r3, [pc, #140]	; (80046d0 <HAL_ADC_IRQHandler+0x2b8>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	2b00      	cmp	r3, #0
 800464c:	d037      	beq.n	80046be <HAL_ADC_IRQHandler+0x2a6>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004656:	d004      	beq.n	8004662 <HAL_ADC_IRQHandler+0x24a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1a      	ldr	r2, [pc, #104]	; (80046c8 <HAL_ADC_IRQHandler+0x2b0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d106      	bne.n	8004670 <HAL_ADC_IRQHandler+0x258>
 8004662:	4b1a      	ldr	r3, [pc, #104]	; (80046cc <HAL_ADC_IRQHandler+0x2b4>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	2b05      	cmp	r3, #5
 800466c:	d027      	beq.n	80046be <HAL_ADC_IRQHandler+0x2a6>
 800466e:	e005      	b.n	800467c <HAL_ADC_IRQHandler+0x264>
 8004670:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <HAL_ADC_IRQHandler+0x2b8>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	2b05      	cmp	r3, #5
 800467a:	d020      	beq.n	80046be <HAL_ADC_IRQHandler+0x2a6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004684:	d004      	beq.n	8004690 <HAL_ADC_IRQHandler+0x278>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a0f      	ldr	r2, [pc, #60]	; (80046c8 <HAL_ADC_IRQHandler+0x2b0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d106      	bne.n	800469e <HAL_ADC_IRQHandler+0x286>
 8004690:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <HAL_ADC_IRQHandler+0x2b4>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	2b09      	cmp	r3, #9
 800469a:	d010      	beq.n	80046be <HAL_ADC_IRQHandler+0x2a6>
 800469c:	e005      	b.n	80046aa <HAL_ADC_IRQHandler+0x292>
 800469e:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <HAL_ADC_IRQHandler+0x2b8>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	2b09      	cmp	r3, #9
 80046a8:	d009      	beq.n	80046be <HAL_ADC_IRQHandler+0x2a6>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046b2:	d004      	beq.n	80046be <HAL_ADC_IRQHandler+0x2a6>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a06      	ldr	r2, [pc, #24]	; (80046d4 <HAL_ADC_IRQHandler+0x2bc>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d10c      	bne.n	80046d8 <HAL_ADC_IRQHandler+0x2c0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	e017      	b.n	80046f8 <HAL_ADC_IRQHandler+0x2e0>
 80046c8:	50000100 	.word	0x50000100
 80046cc:	50000300 	.word	0x50000300
 80046d0:	50000700 	.word	0x50000700
 80046d4:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046e0:	d004      	beq.n	80046ec <HAL_ADC_IRQHandler+0x2d4>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a5b      	ldr	r2, [pc, #364]	; (8004854 <HAL_ADC_IRQHandler+0x43c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d102      	bne.n	80046f2 <HAL_ADC_IRQHandler+0x2da>
 80046ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80046f0:	e000      	b.n	80046f4 <HAL_ADC_IRQHandler+0x2dc>
 80046f2:	4b59      	ldr	r3, [pc, #356]	; (8004858 <HAL_ADC_IRQHandler+0x440>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004702:	2b00      	cmp	r3, #0
 8004704:	f040 80ba 	bne.w	800487c <HAL_ADC_IRQHandler+0x464>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <HAL_ADC_IRQHandler+0x316>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800471c:	2b00      	cmp	r3, #0
 800471e:	f040 80ad 	bne.w	800487c <HAL_ADC_IRQHandler+0x464>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004728:	2b00      	cmp	r3, #0
 800472a:	f040 80a7 	bne.w	800487c <HAL_ADC_IRQHandler+0x464>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	f040 809f 	bne.w	800487c <HAL_ADC_IRQHandler+0x464>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004746:	d004      	beq.n	8004752 <HAL_ADC_IRQHandler+0x33a>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a41      	ldr	r2, [pc, #260]	; (8004854 <HAL_ADC_IRQHandler+0x43c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d106      	bne.n	8004760 <HAL_ADC_IRQHandler+0x348>
 8004752:	4b42      	ldr	r3, [pc, #264]	; (800485c <HAL_ADC_IRQHandler+0x444>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	2b00      	cmp	r3, #0
 800475c:	d03e      	beq.n	80047dc <HAL_ADC_IRQHandler+0x3c4>
 800475e:	e005      	b.n	800476c <HAL_ADC_IRQHandler+0x354>
 8004760:	4b3f      	ldr	r3, [pc, #252]	; (8004860 <HAL_ADC_IRQHandler+0x448>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 031f 	and.w	r3, r3, #31
 8004768:	2b00      	cmp	r3, #0
 800476a:	d037      	beq.n	80047dc <HAL_ADC_IRQHandler+0x3c4>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004774:	d004      	beq.n	8004780 <HAL_ADC_IRQHandler+0x368>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a36      	ldr	r2, [pc, #216]	; (8004854 <HAL_ADC_IRQHandler+0x43c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d106      	bne.n	800478e <HAL_ADC_IRQHandler+0x376>
 8004780:	4b36      	ldr	r3, [pc, #216]	; (800485c <HAL_ADC_IRQHandler+0x444>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	2b06      	cmp	r3, #6
 800478a:	d027      	beq.n	80047dc <HAL_ADC_IRQHandler+0x3c4>
 800478c:	e005      	b.n	800479a <HAL_ADC_IRQHandler+0x382>
 800478e:	4b34      	ldr	r3, [pc, #208]	; (8004860 <HAL_ADC_IRQHandler+0x448>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	2b06      	cmp	r3, #6
 8004798:	d020      	beq.n	80047dc <HAL_ADC_IRQHandler+0x3c4>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047a2:	d004      	beq.n	80047ae <HAL_ADC_IRQHandler+0x396>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a2a      	ldr	r2, [pc, #168]	; (8004854 <HAL_ADC_IRQHandler+0x43c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d106      	bne.n	80047bc <HAL_ADC_IRQHandler+0x3a4>
 80047ae:	4b2b      	ldr	r3, [pc, #172]	; (800485c <HAL_ADC_IRQHandler+0x444>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	2b07      	cmp	r3, #7
 80047b8:	d010      	beq.n	80047dc <HAL_ADC_IRQHandler+0x3c4>
 80047ba:	e005      	b.n	80047c8 <HAL_ADC_IRQHandler+0x3b0>
 80047bc:	4b28      	ldr	r3, [pc, #160]	; (8004860 <HAL_ADC_IRQHandler+0x448>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	2b07      	cmp	r3, #7
 80047c6:	d009      	beq.n	80047dc <HAL_ADC_IRQHandler+0x3c4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047d0:	d004      	beq.n	80047dc <HAL_ADC_IRQHandler+0x3c4>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a20      	ldr	r2, [pc, #128]	; (8004858 <HAL_ADC_IRQHandler+0x440>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d104      	bne.n	80047e6 <HAL_ADC_IRQHandler+0x3ce>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e00f      	b.n	8004806 <HAL_ADC_IRQHandler+0x3ee>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047ee:	d004      	beq.n	80047fa <HAL_ADC_IRQHandler+0x3e2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a17      	ldr	r2, [pc, #92]	; (8004854 <HAL_ADC_IRQHandler+0x43c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d102      	bne.n	8004800 <HAL_ADC_IRQHandler+0x3e8>
 80047fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80047fe:	e000      	b.n	8004802 <HAL_ADC_IRQHandler+0x3ea>
 8004800:	4b15      	ldr	r3, [pc, #84]	; (8004858 <HAL_ADC_IRQHandler+0x440>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d135      	bne.n	800487c <HAL_ADC_IRQHandler+0x464>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d122      	bne.n	8004864 <HAL_ADC_IRQHandler+0x44c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800482c:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d11a      	bne.n	800487c <HAL_ADC_IRQHandler+0x464>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f043 0201 	orr.w	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
 8004852:	e013      	b.n	800487c <HAL_ADC_IRQHandler+0x464>
 8004854:	50000100 	.word	0x50000100
 8004858:	50000400 	.word	0x50000400
 800485c:	50000300 	.word	0x50000300
 8004860:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	f043 0210 	orr.w	r2, r3, #16
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004874:	f043 0201 	orr.w	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f9ab 	bl	8004bd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2260      	movs	r2, #96	; 0x60
 8004888:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d113      	bne.n	80048c0 <HAL_ADC_IRQHandler+0x4a8>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a2:	2b80      	cmp	r3, #128	; 0x80
 80048a4:	d10c      	bne.n	80048c0 <HAL_ADC_IRQHandler+0x4a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff f93e 	bl	8003b34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2280      	movs	r2, #128	; 0x80
 80048be:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ce:	d115      	bne.n	80048fc <HAL_ADC_IRQHandler+0x4e4>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048de:	d10d      	bne.n	80048fc <HAL_ADC_IRQHandler+0x4e4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f987 	bl	8004c00 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048fa:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800490a:	d115      	bne.n	8004938 <HAL_ADC_IRQHandler+0x520>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800491a:	d10d      	bne.n	8004938 <HAL_ADC_IRQHandler+0x520>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f973 	bl	8004c14 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004936:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	2b10      	cmp	r3, #16
 8004944:	d149      	bne.n	80049da <HAL_ADC_IRQHandler+0x5c2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b10      	cmp	r3, #16
 8004952:	d142      	bne.n	80049da <HAL_ADC_IRQHandler+0x5c2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004958:	2b01      	cmp	r3, #1
 800495a:	d102      	bne.n	8004962 <HAL_ADC_IRQHandler+0x54a>
    {
      overrun_error = 1U;
 800495c:	2301      	movs	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	e025      	b.n	80049ae <HAL_ADC_IRQHandler+0x596>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800496a:	d004      	beq.n	8004976 <HAL_ADC_IRQHandler+0x55e>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a2e      	ldr	r2, [pc, #184]	; (8004a2c <HAL_ADC_IRQHandler+0x614>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d101      	bne.n	800497a <HAL_ADC_IRQHandler+0x562>
 8004976:	4b2e      	ldr	r3, [pc, #184]	; (8004a30 <HAL_ADC_IRQHandler+0x618>)
 8004978:	e000      	b.n	800497c <HAL_ADC_IRQHandler+0x564>
 800497a:	4b2e      	ldr	r3, [pc, #184]	; (8004a34 <HAL_ADC_IRQHandler+0x61c>)
 800497c:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <HAL_ADC_IRQHandler+0x586>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b01      	cmp	r3, #1
 8004996:	d10a      	bne.n	80049ae <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 8004998:	2301      	movs	r3, #1
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	e007      	b.n	80049ae <HAL_ADC_IRQHandler+0x596>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 80049aa:	2301      	movs	r3, #1
 80049ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d10e      	bne.n	80049d2 <HAL_ADC_IRQHandler+0x5ba>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c4:	f043 0202 	orr.w	r2, r3, #2
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff f8bb 	bl	8003b48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2210      	movs	r2, #16
 80049d8:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e8:	d11b      	bne.n	8004a22 <HAL_ADC_IRQHandler+0x60a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f8:	d113      	bne.n	8004a22 <HAL_ADC_IRQHandler+0x60a>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0a:	f043 0208 	orr.w	r2, r3, #8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a1a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f8e5 	bl	8004bec <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8004a22:	bf00      	nop
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	50000100 	.word	0x50000100
 8004a30:	50000300 	.word	0x50000300
 8004a34:	50000700 	.word	0x50000700

08004a38 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b09a      	sub	sp, #104	; 0x68
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_HandleTypeDef tmphadcSlave = {0};
 8004a4a:	f107 0310 	add.w	r3, r7, #16
 8004a4e:	2250      	movs	r2, #80	; 0x50
 8004a50:	2100      	movs	r1, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f005 fcda 	bl	800a40c <memset>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e0a2      	b.n	8004bac <HAL_ADCEx_MultiModeStart_DMA+0x174>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Perform ADC enable and conversion start if no conversion is on going */
  /* (check on ADC master only) */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f040 8092 	bne.w	8004ba2 <HAL_ADCEx_MultiModeStart_DMA+0x16a>
  {
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    /* (Depending on STM32F3 product, there may be up to 2 ADC slaves)        */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a86:	d102      	bne.n	8004a8e <HAL_ADCEx_MultiModeStart_DMA+0x56>
 8004a88:	4b4a      	ldr	r3, [pc, #296]	; (8004bb4 <HAL_ADCEx_MultiModeStart_DMA+0x17c>)
 8004a8a:	613b      	str	r3, [r7, #16]
 8004a8c:	e009      	b.n	8004aa2 <HAL_ADCEx_MultiModeStart_DMA+0x6a>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a49      	ldr	r2, [pc, #292]	; (8004bb8 <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d102      	bne.n	8004a9e <HAL_ADCEx_MultiModeStart_DMA+0x66>
 8004a98:	4b48      	ldr	r3, [pc, #288]	; (8004bbc <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8004a9a:	613b      	str	r3, [r7, #16]
 8004a9c:	e001      	b.n	8004aa2 <HAL_ADCEx_MultiModeStart_DMA+0x6a>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	613b      	str	r3, [r7, #16]
    
    if (tmphadcSlave.Instance == NULL)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10b      	bne.n	8004ac0 <HAL_ADCEx_MultiModeStart_DMA+0x88>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	f043 0220 	orr.w	r2, r3, #32
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e075      	b.n	8004bac <HAL_ADCEx_MultiModeStart_DMA+0x174>
    }
    
    
    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fcf5 	bl	80054b0 <ADC_Enable>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (tmp_hal_status == HAL_OK)
 8004acc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d107      	bne.n	8004ae4 <HAL_ADCEx_MultiModeStart_DMA+0xac>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8004ad4:	f107 0310 	add.w	r3, r7, #16
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fce9 	bl	80054b0 <ADC_Enable>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    }
    
    /* Start conversion all ADCs of multimode are effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004ae4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d155      	bne.n	8004b98 <HAL_ADCEx_MultiModeStart_DMA+0x160>
    {
      /* Set ADC state (ADC master)                                           */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004af0:	4b33      	ldr	r3, [pc, #204]	; (8004bc0 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP | HAL_ADC_STATE_MULTIMODE_SLAVE,
                        HAL_ADC_STATE_REG_BUSY);
        
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d007      	beq.n	8004b1a <HAL_ADCEx_MultiModeStart_DMA+0xe2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	645a      	str	r2, [r3, #68]	; 0x44
      
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	4a25      	ldr	r2, [pc, #148]	; (8004bc4 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 8004b2e:	629a      	str	r2, [r3, #40]	; 0x28
         
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	4a24      	ldr	r2, [pc, #144]	; (8004bc8 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 8004b36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	4a23      	ldr	r2, [pc, #140]	; (8004bcc <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b48:	d004      	beq.n	8004b54 <HAL_ADCEx_MultiModeStart_DMA+0x11c>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <HAL_ADCEx_MultiModeStart_DMA+0x17c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d101      	bne.n	8004b58 <HAL_ADCEx_MultiModeStart_DMA+0x120>
 8004b54:	4b1e      	ldr	r3, [pc, #120]	; (8004bd0 <HAL_ADCEx_MultiModeStart_DMA+0x198>)
 8004b56:	e000      	b.n	8004b5a <HAL_ADCEx_MultiModeStart_DMA+0x122>
 8004b58:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <HAL_ADCEx_MultiModeStart_DMA+0x19c>)
 8004b5a:	663b      	str	r3, [r7, #96]	; 0x60
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	221c      	movs	r2, #28
 8004b62:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0210 	orr.w	r2, r2, #16
 8004b72:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b7a:	330c      	adds	r3, #12
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f000 feb7 	bl	80058f4 <HAL_DMA_Start_IT>
          
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0204 	orr.w	r2, r2, #4
 8004b94:	609a      	str	r2, [r3, #8]
 8004b96:	e007      	b.n	8004ba8 <HAL_ADCEx_MultiModeStart_DMA+0x170>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ba0:	e002      	b.n	8004ba8 <HAL_ADCEx_MultiModeStart_DMA+0x170>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004ba8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3768      	adds	r7, #104	; 0x68
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	50000100 	.word	0x50000100
 8004bb8:	50000400 	.word	0x50000400
 8004bbc:	50000500 	.word	0x50000500
 8004bc0:	ffeff0fe 	.word	0xffeff0fe
 8004bc4:	080053e5 	.word	0x080053e5
 8004bc8:	0800545f 	.word	0x0800545f
 8004bcc:	0800547b 	.word	0x0800547b
 8004bd0:	50000300 	.word	0x50000300
 8004bd4:	50000700 	.word	0x50000700

08004bd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b09b      	sub	sp, #108	; 0x6c
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d101      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x22>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e2ca      	b.n	80051e0 <HAL_ADC_ConfigChannel+0x5b8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f040 82ae 	bne.w	80051be <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d81c      	bhi.n	8004ca4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	4613      	mov	r3, r2
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	4413      	add	r3, r2
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	231f      	movs	r3, #31
 8004c80:	4093      	lsls	r3, r2
 8004c82:	43db      	mvns	r3, r3
 8004c84:	4019      	ands	r1, r3
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	4413      	add	r3, r2
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	fa00 f203 	lsl.w	r2, r0, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ca2:	e063      	b.n	8004d6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b09      	cmp	r3, #9
 8004caa:	d81e      	bhi.n	8004cea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	4413      	add	r3, r2
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	3b1e      	subs	r3, #30
 8004cc0:	221f      	movs	r2, #31
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	4019      	ands	r1, r3
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	4413      	add	r3, r2
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	3b1e      	subs	r3, #30
 8004cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	635a      	str	r2, [r3, #52]	; 0x34
 8004ce8:	e040      	b.n	8004d6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b0e      	cmp	r3, #14
 8004cf0:	d81e      	bhi.n	8004d30 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	4413      	add	r3, r2
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	3b3c      	subs	r3, #60	; 0x3c
 8004d06:	221f      	movs	r2, #31
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	4019      	ands	r1, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	4413      	add	r3, r2
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	3b3c      	subs	r3, #60	; 0x3c
 8004d22:	fa00 f203 	lsl.w	r2, r0, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8004d2e:	e01d      	b.n	8004d6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	4413      	add	r3, r2
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	3b5a      	subs	r3, #90	; 0x5a
 8004d44:	221f      	movs	r2, #31
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	4019      	ands	r1, r3
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4413      	add	r3, r2
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	3b5a      	subs	r3, #90	; 0x5a
 8004d60:	fa00 f203 	lsl.w	r2, r0, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 030c 	and.w	r3, r3, #12
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f040 80e5 	bne.w	8004f46 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b09      	cmp	r3, #9
 8004d82:	d91c      	bls.n	8004dbe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6999      	ldr	r1, [r3, #24]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	4413      	add	r3, r2
 8004d94:	3b1e      	subs	r3, #30
 8004d96:	2207      	movs	r2, #7
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	4019      	ands	r1, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	6898      	ldr	r0, [r3, #8]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	4413      	add	r3, r2
 8004dae:	3b1e      	subs	r3, #30
 8004db0:	fa00 f203 	lsl.w	r2, r0, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	619a      	str	r2, [r3, #24]
 8004dbc:	e019      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6959      	ldr	r1, [r3, #20]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	4413      	add	r3, r2
 8004dce:	2207      	movs	r2, #7
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	4019      	ands	r1, r3
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6898      	ldr	r0, [r3, #8]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	4413      	add	r3, r2
 8004de6:	fa00 f203 	lsl.w	r2, r0, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	08db      	lsrs	r3, r3, #3
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d84f      	bhi.n	8004eb4 <HAL_ADC_ConfigChannel+0x28c>
 8004e14:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <HAL_ADC_ConfigChannel+0x1f4>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e2d 	.word	0x08004e2d
 8004e20:	08004e4f 	.word	0x08004e4f
 8004e24:	08004e71 	.word	0x08004e71
 8004e28:	08004e93 	.word	0x08004e93
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e32:	4b9a      	ldr	r3, [pc, #616]	; (800509c <HAL_ADC_ConfigChannel+0x474>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	0691      	lsls	r1, r2, #26
 8004e3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e4a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004e4c:	e07e      	b.n	8004f4c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e54:	4b91      	ldr	r3, [pc, #580]	; (800509c <HAL_ADC_ConfigChannel+0x474>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	0691      	lsls	r1, r2, #26
 8004e5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e60:	430a      	orrs	r2, r1
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e6c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004e6e:	e06d      	b.n	8004f4c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004e76:	4b89      	ldr	r3, [pc, #548]	; (800509c <HAL_ADC_ConfigChannel+0x474>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	0691      	lsls	r1, r2, #26
 8004e80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e82:	430a      	orrs	r2, r1
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e8e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004e90:	e05c      	b.n	8004f4c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004e98:	4b80      	ldr	r3, [pc, #512]	; (800509c <HAL_ADC_ConfigChannel+0x474>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	6812      	ldr	r2, [r2, #0]
 8004ea0:	0691      	lsls	r1, r2, #26
 8004ea2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004eb0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004eb2:	e04b      	b.n	8004f4c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	069b      	lsls	r3, r3, #26
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d107      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ed6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ede:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	069b      	lsls	r3, r3, #26
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d107      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004efa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	069b      	lsls	r3, r3, #26
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d107      	bne.n	8004f20 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f1e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	069b      	lsls	r3, r3, #26
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d10a      	bne.n	8004f4a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f42:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004f44:	e001      	b.n	8004f4a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004f46:	bf00      	nop
 8004f48:	e000      	b.n	8004f4c <HAL_ADC_ConfigChannel+0x324>
      break;
 8004f4a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d108      	bne.n	8004f6c <HAL_ADC_ConfigChannel+0x344>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_ADC_ConfigChannel+0x344>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <HAL_ADC_ConfigChannel+0x346>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f040 8130 	bne.w	80051d4 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d00f      	beq.n	8004f9c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	43da      	mvns	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	400a      	ands	r2, r1
 8004f96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004f9a:	e049      	b.n	8005030 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	409a      	lsls	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b09      	cmp	r3, #9
 8004fbc:	d91c      	bls.n	8004ff8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6999      	ldr	r1, [r3, #24]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	4413      	add	r3, r2
 8004fce:	3b1b      	subs	r3, #27
 8004fd0:	2207      	movs	r2, #7
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	4019      	ands	r1, r3
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	6898      	ldr	r0, [r3, #8]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	4413      	add	r3, r2
 8004fe8:	3b1b      	subs	r3, #27
 8004fea:	fa00 f203 	lsl.w	r2, r0, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	619a      	str	r2, [r3, #24]
 8004ff6:	e01b      	b.n	8005030 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6959      	ldr	r1, [r3, #20]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	4613      	mov	r3, r2
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	4413      	add	r3, r2
 800500a:	2207      	movs	r2, #7
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	43db      	mvns	r3, r3
 8005012:	4019      	ands	r1, r3
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	6898      	ldr	r0, [r3, #8]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	4613      	mov	r3, r2
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	4413      	add	r3, r2
 8005024:	fa00 f203 	lsl.w	r2, r0, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005038:	d004      	beq.n	8005044 <HAL_ADC_ConfigChannel+0x41c>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <HAL_ADC_ConfigChannel+0x478>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d101      	bne.n	8005048 <HAL_ADC_ConfigChannel+0x420>
 8005044:	4b17      	ldr	r3, [pc, #92]	; (80050a4 <HAL_ADC_ConfigChannel+0x47c>)
 8005046:	e000      	b.n	800504a <HAL_ADC_ConfigChannel+0x422>
 8005048:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <HAL_ADC_ConfigChannel+0x480>)
 800504a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b10      	cmp	r3, #16
 8005052:	d105      	bne.n	8005060 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800505c:	2b00      	cmp	r3, #0
 800505e:	d015      	beq.n	800508c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005064:	2b11      	cmp	r3, #17
 8005066:	d105      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00b      	beq.n	800508c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005078:	2b12      	cmp	r3, #18
 800507a:	f040 80ab 	bne.w	80051d4 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800507e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005086:	2b00      	cmp	r3, #0
 8005088:	f040 80a4 	bne.w	80051d4 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005094:	d10a      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x484>
 8005096:	4b02      	ldr	r3, [pc, #8]	; (80050a0 <HAL_ADC_ConfigChannel+0x478>)
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	e022      	b.n	80050e2 <HAL_ADC_ConfigChannel+0x4ba>
 800509c:	83fff000 	.word	0x83fff000
 80050a0:	50000100 	.word	0x50000100
 80050a4:	50000300 	.word	0x50000300
 80050a8:	50000700 	.word	0x50000700
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a4e      	ldr	r2, [pc, #312]	; (80051ec <HAL_ADC_ConfigChannel+0x5c4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d103      	bne.n	80050be <HAL_ADC_ConfigChannel+0x496>
 80050b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	e011      	b.n	80050e2 <HAL_ADC_ConfigChannel+0x4ba>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a4b      	ldr	r2, [pc, #300]	; (80051f0 <HAL_ADC_ConfigChannel+0x5c8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d102      	bne.n	80050ce <HAL_ADC_ConfigChannel+0x4a6>
 80050c8:	4b4a      	ldr	r3, [pc, #296]	; (80051f4 <HAL_ADC_ConfigChannel+0x5cc>)
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e009      	b.n	80050e2 <HAL_ADC_ConfigChannel+0x4ba>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a48      	ldr	r2, [pc, #288]	; (80051f4 <HAL_ADC_ConfigChannel+0x5cc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d102      	bne.n	80050de <HAL_ADC_ConfigChannel+0x4b6>
 80050d8:	4b45      	ldr	r3, [pc, #276]	; (80051f0 <HAL_ADC_ConfigChannel+0x5c8>)
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e001      	b.n	80050e2 <HAL_ADC_ConfigChannel+0x4ba>
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 0303 	and.w	r3, r3, #3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d108      	bne.n	8005102 <HAL_ADC_ConfigChannel+0x4da>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_ADC_ConfigChannel+0x4da>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <HAL_ADC_ConfigChannel+0x4dc>
 8005102:	2300      	movs	r3, #0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d150      	bne.n	80051aa <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005108:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800510a:	2b00      	cmp	r3, #0
 800510c:	d010      	beq.n	8005130 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b01      	cmp	r3, #1
 8005118:	d107      	bne.n	800512a <HAL_ADC_ConfigChannel+0x502>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_ADC_ConfigChannel+0x502>
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <HAL_ADC_ConfigChannel+0x504>
 800512a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800512c:	2b00      	cmp	r3, #0
 800512e:	d13c      	bne.n	80051aa <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b10      	cmp	r3, #16
 8005136:	d11d      	bne.n	8005174 <HAL_ADC_ConfigChannel+0x54c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005140:	d118      	bne.n	8005174 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800514a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800514c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800514e:	4b2a      	ldr	r3, [pc, #168]	; (80051f8 <HAL_ADC_ConfigChannel+0x5d0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a2a      	ldr	r2, [pc, #168]	; (80051fc <HAL_ADC_ConfigChannel+0x5d4>)
 8005154:	fba2 2303 	umull	r2, r3, r2, r3
 8005158:	0c9a      	lsrs	r2, r3, #18
 800515a:	4613      	mov	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005164:	e002      	b.n	800516c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	3b01      	subs	r3, #1
 800516a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f9      	bne.n	8005166 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005172:	e02e      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b11      	cmp	r3, #17
 800517a:	d10b      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x56c>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005184:	d106      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800518e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005190:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005192:	e01e      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b12      	cmp	r3, #18
 800519a:	d11a      	bne.n	80051d2 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800519c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80051a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051a6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80051a8:	e013      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f043 0220 	orr.w	r2, r3, #32
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80051bc:	e00a      	b.n	80051d4 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f043 0220 	orr.w	r2, r3, #32
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80051d0:	e000      	b.n	80051d4 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80051d2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80051dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	376c      	adds	r7, #108	; 0x6c
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	50000100 	.word	0x50000100
 80051f0:	50000400 	.word	0x50000400
 80051f4:	50000500 	.word	0x50000500
 80051f8:	20000000 	.word	0x20000000
 80051fc:	431bde83 	.word	0x431bde83

08005200 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8005200:	b480      	push	{r7}
 8005202:	b099      	sub	sp, #100	; 0x64
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005218:	d102      	bne.n	8005220 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800521a:	4b6d      	ldr	r3, [pc, #436]	; (80053d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	e01a      	b.n	8005256 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a6a      	ldr	r2, [pc, #424]	; (80053d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d103      	bne.n	8005232 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800522a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	e011      	b.n	8005256 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a67      	ldr	r2, [pc, #412]	; (80053d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d102      	bne.n	8005242 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800523c:	4b66      	ldr	r3, [pc, #408]	; (80053d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800523e:	60bb      	str	r3, [r7, #8]
 8005240:	e009      	b.n	8005256 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a64      	ldr	r2, [pc, #400]	; (80053d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d102      	bne.n	8005252 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800524c:	4b61      	ldr	r3, [pc, #388]	; (80053d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	e001      	b.n	8005256 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005252:	2300      	movs	r3, #0
 8005254:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0b0      	b.n	80053c2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800526a:	2302      	movs	r3, #2
 800526c:	e0a9      	b.n	80053c2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	f040 808d 	bne.w	80053a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	f040 8086 	bne.w	80053a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800529c:	d004      	beq.n	80052a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a4b      	ldr	r2, [pc, #300]	; (80053d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d101      	bne.n	80052ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80052a8:	4b4c      	ldr	r3, [pc, #304]	; (80053dc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80052aa:	e000      	b.n	80052ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80052ac:	4b4c      	ldr	r3, [pc, #304]	; (80053e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80052ae:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d040      	beq.n	800533a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80052b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6859      	ldr	r1, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052ca:	035b      	lsls	r3, r3, #13
 80052cc:	430b      	orrs	r3, r1
 80052ce:	431a      	orrs	r2, r3
 80052d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052d2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d108      	bne.n	80052f4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e000      	b.n	80052f6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80052f4:	2300      	movs	r3, #0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d15c      	bne.n	80053b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	2b01      	cmp	r3, #1
 8005304:	d107      	bne.n	8005316 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8005316:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005318:	2b00      	cmp	r3, #0
 800531a:	d14b      	bne.n	80053b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800531c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005324:	f023 030f 	bic.w	r3, r3, #15
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	6811      	ldr	r1, [r2, #0]
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	6892      	ldr	r2, [r2, #8]
 8005330:	430a      	orrs	r2, r1
 8005332:	431a      	orrs	r2, r3
 8005334:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005336:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005338:	e03c      	b.n	80053b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800533a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005344:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	2b01      	cmp	r3, #1
 8005352:	d108      	bne.n	8005366 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005366:	2300      	movs	r3, #0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d123      	bne.n	80053b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	2b01      	cmp	r3, #1
 8005376:	d107      	bne.n	8005388 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005388:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800538a:	2b00      	cmp	r3, #0
 800538c:	d112      	bne.n	80053b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800538e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005396:	f023 030f 	bic.w	r3, r3, #15
 800539a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800539c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800539e:	e009      	b.n	80053b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	f043 0220 	orr.w	r2, r3, #32
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80053b2:	e000      	b.n	80053b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80053b4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80053be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80053c2:	4618      	mov	r0, r3
 80053c4:	3764      	adds	r7, #100	; 0x64
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	50000100 	.word	0x50000100
 80053d4:	50000400 	.word	0x50000400
 80053d8:	50000500 	.word	0x50000500
 80053dc:	50000300 	.word	0x50000300
 80053e0:	50000700 	.word	0x50000700

080053e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d126      	bne.n	800544c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005414:	2b00      	cmp	r3, #0
 8005416:	d115      	bne.n	8005444 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800541c:	2b00      	cmp	r3, #0
 800541e:	d111      	bne.n	8005444 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d105      	bne.n	8005444 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	f043 0201 	orr.w	r2, r3, #1
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f7fb ffe5 	bl	8001414 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800544a:	e004      	b.n	8005456 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	4798      	blx	r3
}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7fe fb57 	bl	8003b20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8005472:	bf00      	nop
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005498:	f043 0204 	orr.w	r2, r3, #4
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f7fe fb51 	bl	8003b48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054a6:	bf00      	nop
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d108      	bne.n	80054dc <ADC_Enable+0x2c>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <ADC_Enable+0x2c>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <ADC_Enable+0x2e>
 80054dc:	2300      	movs	r3, #0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d143      	bne.n	800556a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	4b22      	ldr	r3, [pc, #136]	; (8005574 <ADC_Enable+0xc4>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00d      	beq.n	800550c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	f043 0210 	orr.w	r2, r3, #16
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005500:	f043 0201 	orr.w	r2, r3, #1
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e02f      	b.n	800556c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800551c:	f7fe faf4 	bl	8003b08 <HAL_GetTick>
 8005520:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005522:	e01b      	b.n	800555c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005524:	f7fe faf0 	bl	8003b08 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d914      	bls.n	800555c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b01      	cmp	r3, #1
 800553e:	d00d      	beq.n	800555c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	f043 0210 	orr.w	r2, r3, #16
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005550:	f043 0201 	orr.w	r2, r3, #1
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e007      	b.n	800556c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b01      	cmp	r3, #1
 8005568:	d1dc      	bne.n	8005524 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	8000003f 	.word	0x8000003f

08005578 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b01      	cmp	r3, #1
 8005590:	d108      	bne.n	80055a4 <ADC_Disable+0x2c>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <ADC_Disable+0x2c>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <ADC_Disable+0x2e>
 80055a4:	2300      	movs	r3, #0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d047      	beq.n	800563a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 030d 	and.w	r3, r3, #13
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d10f      	bne.n	80055d8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0202 	orr.w	r2, r2, #2
 80055c6:	609a      	str	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2203      	movs	r2, #3
 80055ce:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80055d0:	f7fe fa9a 	bl	8003b08 <HAL_GetTick>
 80055d4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80055d6:	e029      	b.n	800562c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	f043 0210 	orr.w	r2, r3, #16
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e8:	f043 0201 	orr.w	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e023      	b.n	800563c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80055f4:	f7fe fa88 	bl	8003b08 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d914      	bls.n	800562c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b01      	cmp	r3, #1
 800560e:	d10d      	bne.n	800562c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	f043 0210 	orr.w	r2, r3, #16
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005620:	f043 0201 	orr.w	r2, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e007      	b.n	800563c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b01      	cmp	r3, #1
 8005638:	d0dc      	beq.n	80055f4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005654:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <__NVIC_SetPriorityGrouping+0x44>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005660:	4013      	ands	r3, r2
 8005662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800566c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005676:	4a04      	ldr	r2, [pc, #16]	; (8005688 <__NVIC_SetPriorityGrouping+0x44>)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	60d3      	str	r3, [r2, #12]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	e000ed00 	.word	0xe000ed00

0800568c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005690:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	0a1b      	lsrs	r3, r3, #8
 8005696:	f003 0307 	and.w	r3, r3, #7
}
 800569a:	4618      	mov	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	e000ed00 	.word	0xe000ed00

080056a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	db0b      	blt.n	80056d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	f003 021f 	and.w	r2, r3, #31
 80056c0:	4907      	ldr	r1, [pc, #28]	; (80056e0 <__NVIC_EnableIRQ+0x38>)
 80056c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	2001      	movs	r0, #1
 80056ca:	fa00 f202 	lsl.w	r2, r0, r2
 80056ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	e000e100 	.word	0xe000e100

080056e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	6039      	str	r1, [r7, #0]
 80056ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	db0a      	blt.n	800570e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	490c      	ldr	r1, [pc, #48]	; (8005730 <__NVIC_SetPriority+0x4c>)
 80056fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005702:	0112      	lsls	r2, r2, #4
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	440b      	add	r3, r1
 8005708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800570c:	e00a      	b.n	8005724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	b2da      	uxtb	r2, r3
 8005712:	4908      	ldr	r1, [pc, #32]	; (8005734 <__NVIC_SetPriority+0x50>)
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	3b04      	subs	r3, #4
 800571c:	0112      	lsls	r2, r2, #4
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	440b      	add	r3, r1
 8005722:	761a      	strb	r2, [r3, #24]
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	e000e100 	.word	0xe000e100
 8005734:	e000ed00 	.word	0xe000ed00

08005738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005738:	b480      	push	{r7}
 800573a:	b089      	sub	sp, #36	; 0x24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f1c3 0307 	rsb	r3, r3, #7
 8005752:	2b04      	cmp	r3, #4
 8005754:	bf28      	it	cs
 8005756:	2304      	movcs	r3, #4
 8005758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	3304      	adds	r3, #4
 800575e:	2b06      	cmp	r3, #6
 8005760:	d902      	bls.n	8005768 <NVIC_EncodePriority+0x30>
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	3b03      	subs	r3, #3
 8005766:	e000      	b.n	800576a <NVIC_EncodePriority+0x32>
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800576c:	f04f 32ff 	mov.w	r2, #4294967295
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	43da      	mvns	r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	401a      	ands	r2, r3
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005780:	f04f 31ff 	mov.w	r1, #4294967295
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	fa01 f303 	lsl.w	r3, r1, r3
 800578a:	43d9      	mvns	r1, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005790:	4313      	orrs	r3, r2
         );
}
 8005792:	4618      	mov	r0, r3
 8005794:	3724      	adds	r7, #36	; 0x24
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
	...

080057a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057b0:	d301      	bcc.n	80057b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057b2:	2301      	movs	r3, #1
 80057b4:	e00f      	b.n	80057d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057b6:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <SysTick_Config+0x40>)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057be:	210f      	movs	r1, #15
 80057c0:	f04f 30ff 	mov.w	r0, #4294967295
 80057c4:	f7ff ff8e 	bl	80056e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <SysTick_Config+0x40>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057ce:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <SysTick_Config+0x40>)
 80057d0:	2207      	movs	r2, #7
 80057d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	e000e010 	.word	0xe000e010

080057e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff ff29 	bl	8005644 <__NVIC_SetPriorityGrouping>
}
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b086      	sub	sp, #24
 80057fe:	af00      	add	r7, sp, #0
 8005800:	4603      	mov	r3, r0
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
 8005806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005808:	2300      	movs	r3, #0
 800580a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800580c:	f7ff ff3e 	bl	800568c <__NVIC_GetPriorityGrouping>
 8005810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	68b9      	ldr	r1, [r7, #8]
 8005816:	6978      	ldr	r0, [r7, #20]
 8005818:	f7ff ff8e 	bl	8005738 <NVIC_EncodePriority>
 800581c:	4602      	mov	r2, r0
 800581e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005822:	4611      	mov	r1, r2
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff ff5d 	bl	80056e4 <__NVIC_SetPriority>
}
 800582a:	bf00      	nop
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	4603      	mov	r3, r0
 800583a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800583c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff ff31 	bl	80056a8 <__NVIC_EnableIRQ>
}
 8005846:	bf00      	nop
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff ffa2 	bl	80057a0 <SysTick_Config>
 800585c:	4603      	mov	r3, r0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e037      	b.n	80058ec <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005892:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005896:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80058a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f9b8 	bl	8005c44 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}  
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_DMA_Start_IT+0x20>
 8005910:	2302      	movs	r3, #2
 8005912:	e04a      	b.n	80059aa <HAL_DMA_Start_IT+0xb6>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005922:	2b01      	cmp	r3, #1
 8005924:	d13a      	bne.n	800599c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2202      	movs	r2, #2
 800592a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f94b 	bl	8005be6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 020e 	orr.w	r2, r2, #14
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	e00f      	b.n	800598a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 020a 	orr.w	r2, r2, #10
 8005978:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0204 	bic.w	r2, r2, #4
 8005988:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f042 0201 	orr.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	e005      	b.n	80059a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80059a4:	2302      	movs	r3, #2
 80059a6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80059a8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d008      	beq.n	80059d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2204      	movs	r2, #4
 80059c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e020      	b.n	8005a18 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 020e 	bic.w	r2, r2, #14
 80059e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0201 	bic.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fe:	2101      	movs	r1, #1
 8005a00:	fa01 f202 	lsl.w	r2, r1, r2
 8005a04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d005      	beq.n	8005a46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2204      	movs	r2, #4
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	73fb      	strb	r3, [r7, #15]
 8005a44:	e027      	b.n	8005a96 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 020e 	bic.w	r2, r2, #14
 8005a54:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0201 	bic.w	r2, r2, #1
 8005a64:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6e:	2101      	movs	r1, #1
 8005a70:	fa01 f202 	lsl.w	r2, r1, r2
 8005a74:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	4798      	blx	r3
    } 
  }
  return status;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	2204      	movs	r2, #4
 8005abe:	409a      	lsls	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d024      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x72>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d01f      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0320 	and.w	r3, r3, #32
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d107      	bne.n	8005af0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0204 	bic.w	r2, r2, #4
 8005aee:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af8:	2104      	movs	r1, #4
 8005afa:	fa01 f202 	lsl.w	r2, r1, r2
 8005afe:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d06a      	beq.n	8005bde <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005b10:	e065      	b.n	8005bde <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	2202      	movs	r2, #2
 8005b18:	409a      	lsls	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d02c      	beq.n	8005b7c <HAL_DMA_IRQHandler+0xdc>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d027      	beq.n	8005b7c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10b      	bne.n	8005b52 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 020a 	bic.w	r2, r2, #10
 8005b48:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b60:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d035      	beq.n	8005bde <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005b7a:	e030      	b.n	8005bde <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	2208      	movs	r2, #8
 8005b82:	409a      	lsls	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d028      	beq.n	8005bde <HAL_DMA_IRQHandler+0x13e>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 0308 	and.w	r3, r3, #8
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d023      	beq.n	8005bde <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 020e 	bic.w	r2, r2, #14
 8005ba4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bae:	2101      	movs	r1, #1
 8005bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8005bb4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	4798      	blx	r3
    }
  }
}  
 8005bdc:	e7ff      	b.n	8005bde <HAL_DMA_IRQHandler+0x13e>
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b085      	sub	sp, #20
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	607a      	str	r2, [r7, #4]
 8005bf2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8005c02:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	d108      	bne.n	8005c26 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c24:	e007      	b.n	8005c36 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	60da      	str	r2, [r3, #12]
}
 8005c36:	bf00      	nop
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
	...

08005c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	4b14      	ldr	r3, [pc, #80]	; (8005ca4 <DMA_CalcBaseAndBitshift+0x60>)
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d80f      	bhi.n	8005c78 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4b12      	ldr	r3, [pc, #72]	; (8005ca8 <DMA_CalcBaseAndBitshift+0x64>)
 8005c60:	4413      	add	r3, r2
 8005c62:	4a12      	ldr	r2, [pc, #72]	; (8005cac <DMA_CalcBaseAndBitshift+0x68>)
 8005c64:	fba2 2303 	umull	r2, r3, r2, r3
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	009a      	lsls	r2, r3, #2
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a0f      	ldr	r2, [pc, #60]	; (8005cb0 <DMA_CalcBaseAndBitshift+0x6c>)
 8005c74:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005c76:	e00e      	b.n	8005c96 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <DMA_CalcBaseAndBitshift+0x70>)
 8005c80:	4413      	add	r3, r2
 8005c82:	4a0a      	ldr	r2, [pc, #40]	; (8005cac <DMA_CalcBaseAndBitshift+0x68>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	091b      	lsrs	r3, r3, #4
 8005c8a:	009a      	lsls	r2, r3, #2
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a09      	ldr	r2, [pc, #36]	; (8005cb8 <DMA_CalcBaseAndBitshift+0x74>)
 8005c94:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	40020407 	.word	0x40020407
 8005ca8:	bffdfff8 	.word	0xbffdfff8
 8005cac:	cccccccd 	.word	0xcccccccd
 8005cb0:	40020000 	.word	0x40020000
 8005cb4:	bffdfbf8 	.word	0xbffdfbf8
 8005cb8:	40020400 	.word	0x40020400

08005cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cca:	e160      	b.n	8005f8e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd8:	4013      	ands	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 8152 	beq.w	8005f88 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f003 0303 	and.w	r3, r3, #3
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d005      	beq.n	8005cfc <HAL_GPIO_Init+0x40>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f003 0303 	and.w	r3, r3, #3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d130      	bne.n	8005d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	2203      	movs	r2, #3
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4013      	ands	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d32:	2201      	movs	r2, #1
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	43db      	mvns	r3, r3
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	091b      	lsrs	r3, r3, #4
 8005d48:	f003 0201 	and.w	r2, r3, #1
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d017      	beq.n	8005d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	2203      	movs	r2, #3
 8005d76:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7a:	43db      	mvns	r3, r3
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d123      	bne.n	8005dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	08da      	lsrs	r2, r3, #3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3208      	adds	r2, #8
 8005dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	220f      	movs	r2, #15
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	43db      	mvns	r3, r3
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	691a      	ldr	r2, [r3, #16]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	08da      	lsrs	r2, r3, #3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3208      	adds	r2, #8
 8005de8:	6939      	ldr	r1, [r7, #16]
 8005dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	2203      	movs	r2, #3
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4013      	ands	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f003 0203 	and.w	r2, r3, #3
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 80ac 	beq.w	8005f88 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e30:	4b5e      	ldr	r3, [pc, #376]	; (8005fac <HAL_GPIO_Init+0x2f0>)
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	4a5d      	ldr	r2, [pc, #372]	; (8005fac <HAL_GPIO_Init+0x2f0>)
 8005e36:	f043 0301 	orr.w	r3, r3, #1
 8005e3a:	6193      	str	r3, [r2, #24]
 8005e3c:	4b5b      	ldr	r3, [pc, #364]	; (8005fac <HAL_GPIO_Init+0x2f0>)
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	60bb      	str	r3, [r7, #8]
 8005e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005e48:	4a59      	ldr	r2, [pc, #356]	; (8005fb0 <HAL_GPIO_Init+0x2f4>)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	089b      	lsrs	r3, r3, #2
 8005e4e:	3302      	adds	r3, #2
 8005e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f003 0303 	and.w	r3, r3, #3
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	220f      	movs	r2, #15
 8005e60:	fa02 f303 	lsl.w	r3, r2, r3
 8005e64:	43db      	mvns	r3, r3
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005e72:	d025      	beq.n	8005ec0 <HAL_GPIO_Init+0x204>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a4f      	ldr	r2, [pc, #316]	; (8005fb4 <HAL_GPIO_Init+0x2f8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d01f      	beq.n	8005ebc <HAL_GPIO_Init+0x200>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a4e      	ldr	r2, [pc, #312]	; (8005fb8 <HAL_GPIO_Init+0x2fc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d019      	beq.n	8005eb8 <HAL_GPIO_Init+0x1fc>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a4d      	ldr	r2, [pc, #308]	; (8005fbc <HAL_GPIO_Init+0x300>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d013      	beq.n	8005eb4 <HAL_GPIO_Init+0x1f8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a4c      	ldr	r2, [pc, #304]	; (8005fc0 <HAL_GPIO_Init+0x304>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00d      	beq.n	8005eb0 <HAL_GPIO_Init+0x1f4>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a4b      	ldr	r2, [pc, #300]	; (8005fc4 <HAL_GPIO_Init+0x308>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d007      	beq.n	8005eac <HAL_GPIO_Init+0x1f0>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a4a      	ldr	r2, [pc, #296]	; (8005fc8 <HAL_GPIO_Init+0x30c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d101      	bne.n	8005ea8 <HAL_GPIO_Init+0x1ec>
 8005ea4:	2306      	movs	r3, #6
 8005ea6:	e00c      	b.n	8005ec2 <HAL_GPIO_Init+0x206>
 8005ea8:	2307      	movs	r3, #7
 8005eaa:	e00a      	b.n	8005ec2 <HAL_GPIO_Init+0x206>
 8005eac:	2305      	movs	r3, #5
 8005eae:	e008      	b.n	8005ec2 <HAL_GPIO_Init+0x206>
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	e006      	b.n	8005ec2 <HAL_GPIO_Init+0x206>
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e004      	b.n	8005ec2 <HAL_GPIO_Init+0x206>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e002      	b.n	8005ec2 <HAL_GPIO_Init+0x206>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e000      	b.n	8005ec2 <HAL_GPIO_Init+0x206>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	f002 0203 	and.w	r2, r2, #3
 8005ec8:	0092      	lsls	r2, r2, #2
 8005eca:	4093      	lsls	r3, r2
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005ed2:	4937      	ldr	r1, [pc, #220]	; (8005fb0 <HAL_GPIO_Init+0x2f4>)
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	089b      	lsrs	r3, r3, #2
 8005ed8:	3302      	adds	r3, #2
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ee0:	4b3a      	ldr	r3, [pc, #232]	; (8005fcc <HAL_GPIO_Init+0x310>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4013      	ands	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005f04:	4a31      	ldr	r2, [pc, #196]	; (8005fcc <HAL_GPIO_Init+0x310>)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f0a:	4b30      	ldr	r3, [pc, #192]	; (8005fcc <HAL_GPIO_Init+0x310>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	43db      	mvns	r3, r3
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4013      	ands	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005f2e:	4a27      	ldr	r2, [pc, #156]	; (8005fcc <HAL_GPIO_Init+0x310>)
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f34:	4b25      	ldr	r3, [pc, #148]	; (8005fcc <HAL_GPIO_Init+0x310>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	4013      	ands	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005f58:	4a1c      	ldr	r2, [pc, #112]	; (8005fcc <HAL_GPIO_Init+0x310>)
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f5e:	4b1b      	ldr	r3, [pc, #108]	; (8005fcc <HAL_GPIO_Init+0x310>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	43db      	mvns	r3, r3
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005f82:	4a12      	ldr	r2, [pc, #72]	; (8005fcc <HAL_GPIO_Init+0x310>)
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	fa22 f303 	lsr.w	r3, r2, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f47f ae97 	bne.w	8005ccc <HAL_GPIO_Init+0x10>
  }
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	40010000 	.word	0x40010000
 8005fb4:	48000400 	.word	0x48000400
 8005fb8:	48000800 	.word	0x48000800
 8005fbc:	48000c00 	.word	0x48000c00
 8005fc0:	48001000 	.word	0x48001000
 8005fc4:	48001400 	.word	0x48001400
 8005fc8:	48001800 	.word	0x48001800
 8005fcc:	40010400 	.word	0x40010400

08005fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	807b      	strh	r3, [r7, #2]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fe0:	787b      	ldrb	r3, [r7, #1]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005fe6:	887a      	ldrh	r2, [r7, #2]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005fec:	e002      	b.n	8005ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005fee:	887a      	ldrh	r2, [r7, #2]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006006:	af00      	add	r7, sp, #0
 8006008:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800600c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006010:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006016:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d102      	bne.n	8006026 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	f001 b83a 	b.w	800709a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800602a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 816f 	beq.w	800631a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800603c:	4bb5      	ldr	r3, [pc, #724]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f003 030c 	and.w	r3, r3, #12
 8006044:	2b04      	cmp	r3, #4
 8006046:	d00c      	beq.n	8006062 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006048:	4bb2      	ldr	r3, [pc, #712]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f003 030c 	and.w	r3, r3, #12
 8006050:	2b08      	cmp	r3, #8
 8006052:	d15c      	bne.n	800610e <HAL_RCC_OscConfig+0x10e>
 8006054:	4baf      	ldr	r3, [pc, #700]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800605c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006060:	d155      	bne.n	800610e <HAL_RCC_OscConfig+0x10e>
 8006062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006066:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800606a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800606e:	fa93 f3a3 	rbit	r3, r3
 8006072:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006076:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800607a:	fab3 f383 	clz	r3, r3
 800607e:	b2db      	uxtb	r3, r3
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	b2db      	uxtb	r3, r3
 8006084:	f043 0301 	orr.w	r3, r3, #1
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b01      	cmp	r3, #1
 800608c:	d102      	bne.n	8006094 <HAL_RCC_OscConfig+0x94>
 800608e:	4ba1      	ldr	r3, [pc, #644]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	e015      	b.n	80060c0 <HAL_RCC_OscConfig+0xc0>
 8006094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006098:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80060a0:	fa93 f3a3 	rbit	r3, r3
 80060a4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80060a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80060b0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80060b4:	fa93 f3a3 	rbit	r3, r3
 80060b8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80060bc:	4b95      	ldr	r3, [pc, #596]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060c4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80060c8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80060cc:	fa92 f2a2 	rbit	r2, r2
 80060d0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80060d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80060d8:	fab2 f282 	clz	r2, r2
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	f042 0220 	orr.w	r2, r2, #32
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	f002 021f 	and.w	r2, r2, #31
 80060e8:	2101      	movs	r1, #1
 80060ea:	fa01 f202 	lsl.w	r2, r1, r2
 80060ee:	4013      	ands	r3, r2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8111 	beq.w	8006318 <HAL_RCC_OscConfig+0x318>
 80060f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	f040 8108 	bne.w	8006318 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	f000 bfc6 	b.w	800709a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800610e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006112:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611e:	d106      	bne.n	800612e <HAL_RCC_OscConfig+0x12e>
 8006120:	4b7c      	ldr	r3, [pc, #496]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a7b      	ldr	r2, [pc, #492]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 8006126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	e036      	b.n	800619c <HAL_RCC_OscConfig+0x19c>
 800612e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006132:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10c      	bne.n	8006158 <HAL_RCC_OscConfig+0x158>
 800613e:	4b75      	ldr	r3, [pc, #468]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a74      	ldr	r2, [pc, #464]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 8006144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	4b72      	ldr	r3, [pc, #456]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a71      	ldr	r2, [pc, #452]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 8006150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	e021      	b.n	800619c <HAL_RCC_OscConfig+0x19c>
 8006158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800615c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006168:	d10c      	bne.n	8006184 <HAL_RCC_OscConfig+0x184>
 800616a:	4b6a      	ldr	r3, [pc, #424]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a69      	ldr	r2, [pc, #420]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 8006170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	4b67      	ldr	r3, [pc, #412]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a66      	ldr	r2, [pc, #408]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 800617c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	e00b      	b.n	800619c <HAL_RCC_OscConfig+0x19c>
 8006184:	4b63      	ldr	r3, [pc, #396]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a62      	ldr	r2, [pc, #392]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 800618a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	4b60      	ldr	r3, [pc, #384]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a5f      	ldr	r2, [pc, #380]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 8006196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800619a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800619c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d059      	beq.n	8006260 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ac:	f7fd fcac 	bl	8003b08 <HAL_GetTick>
 80061b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061b4:	e00a      	b.n	80061cc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061b6:	f7fd fca7 	bl	8003b08 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b64      	cmp	r3, #100	; 0x64
 80061c4:	d902      	bls.n	80061cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	f000 bf67 	b.w	800709a <HAL_RCC_OscConfig+0x109a>
 80061cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061d0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80061d8:	fa93 f3a3 	rbit	r3, r3
 80061dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80061e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061e4:	fab3 f383 	clz	r3, r3
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	095b      	lsrs	r3, r3, #5
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d102      	bne.n	80061fe <HAL_RCC_OscConfig+0x1fe>
 80061f8:	4b46      	ldr	r3, [pc, #280]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	e015      	b.n	800622a <HAL_RCC_OscConfig+0x22a>
 80061fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006202:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006206:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800620a:	fa93 f3a3 	rbit	r3, r3
 800620e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006216:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800621a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800621e:	fa93 f3a3 	rbit	r3, r3
 8006222:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006226:	4b3b      	ldr	r3, [pc, #236]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800622e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8006232:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8006236:	fa92 f2a2 	rbit	r2, r2
 800623a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800623e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006242:	fab2 f282 	clz	r2, r2
 8006246:	b2d2      	uxtb	r2, r2
 8006248:	f042 0220 	orr.w	r2, r2, #32
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	f002 021f 	and.w	r2, r2, #31
 8006252:	2101      	movs	r1, #1
 8006254:	fa01 f202 	lsl.w	r2, r1, r2
 8006258:	4013      	ands	r3, r2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0ab      	beq.n	80061b6 <HAL_RCC_OscConfig+0x1b6>
 800625e:	e05c      	b.n	800631a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006260:	f7fd fc52 	bl	8003b08 <HAL_GetTick>
 8006264:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006268:	e00a      	b.n	8006280 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800626a:	f7fd fc4d 	bl	8003b08 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b64      	cmp	r3, #100	; 0x64
 8006278:	d902      	bls.n	8006280 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	f000 bf0d 	b.w	800709a <HAL_RCC_OscConfig+0x109a>
 8006280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006284:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006288:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800628c:	fa93 f3a3 	rbit	r3, r3
 8006290:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8006294:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006298:	fab3 f383 	clz	r3, r3
 800629c:	b2db      	uxtb	r3, r3
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d102      	bne.n	80062b2 <HAL_RCC_OscConfig+0x2b2>
 80062ac:	4b19      	ldr	r3, [pc, #100]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	e015      	b.n	80062de <HAL_RCC_OscConfig+0x2de>
 80062b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80062be:	fa93 f3a3 	rbit	r3, r3
 80062c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80062c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80062ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80062d2:	fa93 f3a3 	rbit	r3, r3
 80062d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80062da:	4b0e      	ldr	r3, [pc, #56]	; (8006314 <HAL_RCC_OscConfig+0x314>)
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062e2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80062e6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80062ea:	fa92 f2a2 	rbit	r2, r2
 80062ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80062f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80062f6:	fab2 f282 	clz	r2, r2
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	f042 0220 	orr.w	r2, r2, #32
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	f002 021f 	and.w	r2, r2, #31
 8006306:	2101      	movs	r1, #1
 8006308:	fa01 f202 	lsl.w	r2, r1, r2
 800630c:	4013      	ands	r3, r2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1ab      	bne.n	800626a <HAL_RCC_OscConfig+0x26a>
 8006312:	e002      	b.n	800631a <HAL_RCC_OscConfig+0x31a>
 8006314:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800631a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800631e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 817f 	beq.w	800662e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006330:	4ba7      	ldr	r3, [pc, #668]	; (80065d0 <HAL_RCC_OscConfig+0x5d0>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f003 030c 	and.w	r3, r3, #12
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00c      	beq.n	8006356 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800633c:	4ba4      	ldr	r3, [pc, #656]	; (80065d0 <HAL_RCC_OscConfig+0x5d0>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f003 030c 	and.w	r3, r3, #12
 8006344:	2b08      	cmp	r3, #8
 8006346:	d173      	bne.n	8006430 <HAL_RCC_OscConfig+0x430>
 8006348:	4ba1      	ldr	r3, [pc, #644]	; (80065d0 <HAL_RCC_OscConfig+0x5d0>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8006350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006354:	d16c      	bne.n	8006430 <HAL_RCC_OscConfig+0x430>
 8006356:	2302      	movs	r3, #2
 8006358:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800635c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8006360:	fa93 f3a3 	rbit	r3, r3
 8006364:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8006368:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800636c:	fab3 f383 	clz	r3, r3
 8006370:	b2db      	uxtb	r3, r3
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	b2db      	uxtb	r3, r3
 8006376:	f043 0301 	orr.w	r3, r3, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	d102      	bne.n	8006386 <HAL_RCC_OscConfig+0x386>
 8006380:	4b93      	ldr	r3, [pc, #588]	; (80065d0 <HAL_RCC_OscConfig+0x5d0>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	e013      	b.n	80063ae <HAL_RCC_OscConfig+0x3ae>
 8006386:	2302      	movs	r3, #2
 8006388:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800638c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8006390:	fa93 f3a3 	rbit	r3, r3
 8006394:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006398:	2302      	movs	r3, #2
 800639a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800639e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80063a2:	fa93 f3a3 	rbit	r3, r3
 80063a6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80063aa:	4b89      	ldr	r3, [pc, #548]	; (80065d0 <HAL_RCC_OscConfig+0x5d0>)
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	2202      	movs	r2, #2
 80063b0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80063b4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80063b8:	fa92 f2a2 	rbit	r2, r2
 80063bc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80063c0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80063c4:	fab2 f282 	clz	r2, r2
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	f042 0220 	orr.w	r2, r2, #32
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	f002 021f 	and.w	r2, r2, #31
 80063d4:	2101      	movs	r1, #1
 80063d6:	fa01 f202 	lsl.w	r2, r1, r2
 80063da:	4013      	ands	r3, r2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <HAL_RCC_OscConfig+0x3f6>
 80063e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d002      	beq.n	80063f6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	f000 be52 	b.w	800709a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f6:	4b76      	ldr	r3, [pc, #472]	; (80065d0 <HAL_RCC_OscConfig+0x5d0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006402:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	21f8      	movs	r1, #248	; 0xf8
 800640c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006410:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006414:	fa91 f1a1 	rbit	r1, r1
 8006418:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800641c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006420:	fab1 f181 	clz	r1, r1
 8006424:	b2c9      	uxtb	r1, r1
 8006426:	408b      	lsls	r3, r1
 8006428:	4969      	ldr	r1, [pc, #420]	; (80065d0 <HAL_RCC_OscConfig+0x5d0>)
 800642a:	4313      	orrs	r3, r2
 800642c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800642e:	e0fe      	b.n	800662e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006434:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 8088 	beq.w	8006552 <HAL_RCC_OscConfig+0x552>
 8006442:	2301      	movs	r3, #1
 8006444:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006448:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800644c:	fa93 f3a3 	rbit	r3, r3
 8006450:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8006454:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006458:	fab3 f383 	clz	r3, r3
 800645c:	b2db      	uxtb	r3, r3
 800645e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006462:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	461a      	mov	r2, r3
 800646a:	2301      	movs	r3, #1
 800646c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800646e:	f7fd fb4b 	bl	8003b08 <HAL_GetTick>
 8006472:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006476:	e00a      	b.n	800648e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006478:	f7fd fb46 	bl	8003b08 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d902      	bls.n	800648e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	f000 be06 	b.w	800709a <HAL_RCC_OscConfig+0x109a>
 800648e:	2302      	movs	r3, #2
 8006490:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006494:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006498:	fa93 f3a3 	rbit	r3, r3
 800649c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80064a0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064a4:	fab3 f383 	clz	r3, r3
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	f043 0301 	orr.w	r3, r3, #1
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d102      	bne.n	80064be <HAL_RCC_OscConfig+0x4be>
 80064b8:	4b45      	ldr	r3, [pc, #276]	; (80065d0 <HAL_RCC_OscConfig+0x5d0>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	e013      	b.n	80064e6 <HAL_RCC_OscConfig+0x4e6>
 80064be:	2302      	movs	r3, #2
 80064c0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80064c8:	fa93 f3a3 	rbit	r3, r3
 80064cc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80064d0:	2302      	movs	r3, #2
 80064d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80064d6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80064da:	fa93 f3a3 	rbit	r3, r3
 80064de:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80064e2:	4b3b      	ldr	r3, [pc, #236]	; (80065d0 <HAL_RCC_OscConfig+0x5d0>)
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	2202      	movs	r2, #2
 80064e8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80064ec:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80064f0:	fa92 f2a2 	rbit	r2, r2
 80064f4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80064f8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80064fc:	fab2 f282 	clz	r2, r2
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	f042 0220 	orr.w	r2, r2, #32
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	f002 021f 	and.w	r2, r2, #31
 800650c:	2101      	movs	r1, #1
 800650e:	fa01 f202 	lsl.w	r2, r1, r2
 8006512:	4013      	ands	r3, r2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0af      	beq.n	8006478 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006518:	4b2d      	ldr	r3, [pc, #180]	; (80065d0 <HAL_RCC_OscConfig+0x5d0>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006524:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	21f8      	movs	r1, #248	; 0xf8
 800652e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006532:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8006536:	fa91 f1a1 	rbit	r1, r1
 800653a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800653e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006542:	fab1 f181 	clz	r1, r1
 8006546:	b2c9      	uxtb	r1, r1
 8006548:	408b      	lsls	r3, r1
 800654a:	4921      	ldr	r1, [pc, #132]	; (80065d0 <HAL_RCC_OscConfig+0x5d0>)
 800654c:	4313      	orrs	r3, r2
 800654e:	600b      	str	r3, [r1, #0]
 8006550:	e06d      	b.n	800662e <HAL_RCC_OscConfig+0x62e>
 8006552:	2301      	movs	r3, #1
 8006554:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006558:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800655c:	fa93 f3a3 	rbit	r3, r3
 8006560:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8006564:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006568:	fab3 f383 	clz	r3, r3
 800656c:	b2db      	uxtb	r3, r3
 800656e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006572:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	461a      	mov	r2, r3
 800657a:	2300      	movs	r3, #0
 800657c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800657e:	f7fd fac3 	bl	8003b08 <HAL_GetTick>
 8006582:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006586:	e00a      	b.n	800659e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006588:	f7fd fabe 	bl	8003b08 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d902      	bls.n	800659e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	f000 bd7e 	b.w	800709a <HAL_RCC_OscConfig+0x109a>
 800659e:	2302      	movs	r3, #2
 80065a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80065a8:	fa93 f3a3 	rbit	r3, r3
 80065ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80065b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065b4:	fab3 f383 	clz	r3, r3
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d105      	bne.n	80065d4 <HAL_RCC_OscConfig+0x5d4>
 80065c8:	4b01      	ldr	r3, [pc, #4]	; (80065d0 <HAL_RCC_OscConfig+0x5d0>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	e016      	b.n	80065fc <HAL_RCC_OscConfig+0x5fc>
 80065ce:	bf00      	nop
 80065d0:	40021000 	.word	0x40021000
 80065d4:	2302      	movs	r3, #2
 80065d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065de:	fa93 f3a3 	rbit	r3, r3
 80065e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80065e6:	2302      	movs	r3, #2
 80065e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80065ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80065f0:	fa93 f3a3 	rbit	r3, r3
 80065f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80065f8:	4bbf      	ldr	r3, [pc, #764]	; (80068f8 <HAL_RCC_OscConfig+0x8f8>)
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	2202      	movs	r2, #2
 80065fe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006602:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006606:	fa92 f2a2 	rbit	r2, r2
 800660a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800660e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006612:	fab2 f282 	clz	r2, r2
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	f042 0220 	orr.w	r2, r2, #32
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	f002 021f 	and.w	r2, r2, #31
 8006622:	2101      	movs	r1, #1
 8006624:	fa01 f202 	lsl.w	r2, r1, r2
 8006628:	4013      	ands	r3, r2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1ac      	bne.n	8006588 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800662e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006632:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0308 	and.w	r3, r3, #8
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 8113 	beq.w	800686a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006644:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006648:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d07c      	beq.n	800674e <HAL_RCC_OscConfig+0x74e>
 8006654:	2301      	movs	r3, #1
 8006656:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800665a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800665e:	fa93 f3a3 	rbit	r3, r3
 8006662:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8006666:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800666a:	fab3 f383 	clz	r3, r3
 800666e:	b2db      	uxtb	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	4ba2      	ldr	r3, [pc, #648]	; (80068fc <HAL_RCC_OscConfig+0x8fc>)
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	461a      	mov	r2, r3
 800667a:	2301      	movs	r3, #1
 800667c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800667e:	f7fd fa43 	bl	8003b08 <HAL_GetTick>
 8006682:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006686:	e00a      	b.n	800669e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006688:	f7fd fa3e 	bl	8003b08 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d902      	bls.n	800669e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	f000 bcfe 	b.w	800709a <HAL_RCC_OscConfig+0x109a>
 800669e:	2302      	movs	r3, #2
 80066a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066a8:	fa93 f2a3 	rbit	r2, r3
 80066ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066be:	2202      	movs	r2, #2
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	fa93 f2a3 	rbit	r2, r3
 80066d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066e2:	2202      	movs	r2, #2
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	fa93 f2a3 	rbit	r2, r3
 80066f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80066fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066fe:	4b7e      	ldr	r3, [pc, #504]	; (80068f8 <HAL_RCC_OscConfig+0x8f8>)
 8006700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006706:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800670a:	2102      	movs	r1, #2
 800670c:	6019      	str	r1, [r3, #0]
 800670e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006712:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	fa93 f1a3 	rbit	r1, r3
 800671c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006720:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006724:	6019      	str	r1, [r3, #0]
  return result;
 8006726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800672a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	fab3 f383 	clz	r3, r3
 8006734:	b2db      	uxtb	r3, r3
 8006736:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800673a:	b2db      	uxtb	r3, r3
 800673c:	f003 031f 	and.w	r3, r3, #31
 8006740:	2101      	movs	r1, #1
 8006742:	fa01 f303 	lsl.w	r3, r1, r3
 8006746:	4013      	ands	r3, r2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d09d      	beq.n	8006688 <HAL_RCC_OscConfig+0x688>
 800674c:	e08d      	b.n	800686a <HAL_RCC_OscConfig+0x86a>
 800674e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006752:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006756:	2201      	movs	r2, #1
 8006758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800675a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800675e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	fa93 f2a3 	rbit	r2, r3
 8006768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800676c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006770:	601a      	str	r2, [r3, #0]
  return result;
 8006772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006776:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800677a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800677c:	fab3 f383 	clz	r3, r3
 8006780:	b2db      	uxtb	r3, r3
 8006782:	461a      	mov	r2, r3
 8006784:	4b5d      	ldr	r3, [pc, #372]	; (80068fc <HAL_RCC_OscConfig+0x8fc>)
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	461a      	mov	r2, r3
 800678c:	2300      	movs	r3, #0
 800678e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006790:	f7fd f9ba 	bl	8003b08 <HAL_GetTick>
 8006794:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006798:	e00a      	b.n	80067b0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800679a:	f7fd f9b5 	bl	8003b08 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d902      	bls.n	80067b0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	f000 bc75 	b.w	800709a <HAL_RCC_OscConfig+0x109a>
 80067b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80067b8:	2202      	movs	r2, #2
 80067ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	fa93 f2a3 	rbit	r2, r3
 80067ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067dc:	2202      	movs	r2, #2
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	fa93 f2a3 	rbit	r2, r3
 80067ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006800:	2202      	movs	r2, #2
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006808:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	fa93 f2a3 	rbit	r2, r3
 8006812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006816:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800681a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800681c:	4b36      	ldr	r3, [pc, #216]	; (80068f8 <HAL_RCC_OscConfig+0x8f8>)
 800681e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006824:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006828:	2102      	movs	r1, #2
 800682a:	6019      	str	r1, [r3, #0]
 800682c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006830:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	fa93 f1a3 	rbit	r1, r3
 800683a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800683e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006842:	6019      	str	r1, [r3, #0]
  return result;
 8006844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006848:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	fab3 f383 	clz	r3, r3
 8006852:	b2db      	uxtb	r3, r3
 8006854:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006858:	b2db      	uxtb	r3, r3
 800685a:	f003 031f 	and.w	r3, r3, #31
 800685e:	2101      	movs	r1, #1
 8006860:	fa01 f303 	lsl.w	r3, r1, r3
 8006864:	4013      	ands	r3, r2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d197      	bne.n	800679a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800686a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800686e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 81a5 	beq.w	8006bca <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006880:	2300      	movs	r3, #0
 8006882:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006886:	4b1c      	ldr	r3, [pc, #112]	; (80068f8 <HAL_RCC_OscConfig+0x8f8>)
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d116      	bne.n	80068c0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006892:	4b19      	ldr	r3, [pc, #100]	; (80068f8 <HAL_RCC_OscConfig+0x8f8>)
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	4a18      	ldr	r2, [pc, #96]	; (80068f8 <HAL_RCC_OscConfig+0x8f8>)
 8006898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800689c:	61d3      	str	r3, [r2, #28]
 800689e:	4b16      	ldr	r3, [pc, #88]	; (80068f8 <HAL_RCC_OscConfig+0x8f8>)
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80068a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80068ba:	2301      	movs	r3, #1
 80068bc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068c0:	4b0f      	ldr	r3, [pc, #60]	; (8006900 <HAL_RCC_OscConfig+0x900>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d121      	bne.n	8006910 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068cc:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <HAL_RCC_OscConfig+0x900>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a0b      	ldr	r2, [pc, #44]	; (8006900 <HAL_RCC_OscConfig+0x900>)
 80068d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068d8:	f7fd f916 	bl	8003b08 <HAL_GetTick>
 80068dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068e0:	e010      	b.n	8006904 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e2:	f7fd f911 	bl	8003b08 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b64      	cmp	r3, #100	; 0x64
 80068f0:	d908      	bls.n	8006904 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e3d1      	b.n	800709a <HAL_RCC_OscConfig+0x109a>
 80068f6:	bf00      	nop
 80068f8:	40021000 	.word	0x40021000
 80068fc:	10908120 	.word	0x10908120
 8006900:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006904:	4b8d      	ldr	r3, [pc, #564]	; (8006b3c <HAL_RCC_OscConfig+0xb3c>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0e8      	beq.n	80068e2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006914:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d106      	bne.n	800692e <HAL_RCC_OscConfig+0x92e>
 8006920:	4b87      	ldr	r3, [pc, #540]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	4a86      	ldr	r2, [pc, #536]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 8006926:	f043 0301 	orr.w	r3, r3, #1
 800692a:	6213      	str	r3, [r2, #32]
 800692c:	e035      	b.n	800699a <HAL_RCC_OscConfig+0x99a>
 800692e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006932:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10c      	bne.n	8006958 <HAL_RCC_OscConfig+0x958>
 800693e:	4b80      	ldr	r3, [pc, #512]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	4a7f      	ldr	r2, [pc, #508]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 8006944:	f023 0301 	bic.w	r3, r3, #1
 8006948:	6213      	str	r3, [r2, #32]
 800694a:	4b7d      	ldr	r3, [pc, #500]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	4a7c      	ldr	r2, [pc, #496]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 8006950:	f023 0304 	bic.w	r3, r3, #4
 8006954:	6213      	str	r3, [r2, #32]
 8006956:	e020      	b.n	800699a <HAL_RCC_OscConfig+0x99a>
 8006958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800695c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	2b05      	cmp	r3, #5
 8006966:	d10c      	bne.n	8006982 <HAL_RCC_OscConfig+0x982>
 8006968:	4b75      	ldr	r3, [pc, #468]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	4a74      	ldr	r2, [pc, #464]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 800696e:	f043 0304 	orr.w	r3, r3, #4
 8006972:	6213      	str	r3, [r2, #32]
 8006974:	4b72      	ldr	r3, [pc, #456]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	4a71      	ldr	r2, [pc, #452]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	6213      	str	r3, [r2, #32]
 8006980:	e00b      	b.n	800699a <HAL_RCC_OscConfig+0x99a>
 8006982:	4b6f      	ldr	r3, [pc, #444]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	4a6e      	ldr	r2, [pc, #440]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	6213      	str	r3, [r2, #32]
 800698e:	4b6c      	ldr	r3, [pc, #432]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	4a6b      	ldr	r2, [pc, #428]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 8006994:	f023 0304 	bic.w	r3, r3, #4
 8006998:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800699a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800699e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 8081 	beq.w	8006aae <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069ac:	f7fd f8ac 	bl	8003b08 <HAL_GetTick>
 80069b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b4:	e00b      	b.n	80069ce <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069b6:	f7fd f8a7 	bl	8003b08 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e365      	b.n	800709a <HAL_RCC_OscConfig+0x109a>
 80069ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80069d6:	2202      	movs	r2, #2
 80069d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	fa93 f2a3 	rbit	r2, r3
 80069e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80069fa:	2202      	movs	r2, #2
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a02:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	fa93 f2a3 	rbit	r2, r3
 8006a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a10:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006a14:	601a      	str	r2, [r3, #0]
  return result;
 8006a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a1a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006a1e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a20:	fab3 f383 	clz	r3, r3
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	f043 0302 	orr.w	r3, r3, #2
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d102      	bne.n	8006a3a <HAL_RCC_OscConfig+0xa3a>
 8006a34:	4b42      	ldr	r3, [pc, #264]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	e013      	b.n	8006a62 <HAL_RCC_OscConfig+0xa62>
 8006a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a3e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006a42:	2202      	movs	r2, #2
 8006a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a4a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	fa93 f2a3 	rbit	r2, r3
 8006a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a58:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	4b38      	ldr	r3, [pc, #224]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006a66:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006a6a:	2102      	movs	r1, #2
 8006a6c:	6011      	str	r1, [r2, #0]
 8006a6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006a72:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006a76:	6812      	ldr	r2, [r2, #0]
 8006a78:	fa92 f1a2 	rbit	r1, r2
 8006a7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006a80:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8006a84:	6011      	str	r1, [r2, #0]
  return result;
 8006a86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006a8a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8006a8e:	6812      	ldr	r2, [r2, #0]
 8006a90:	fab2 f282 	clz	r2, r2
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	f002 021f 	and.w	r2, r2, #31
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d084      	beq.n	80069b6 <HAL_RCC_OscConfig+0x9b6>
 8006aac:	e083      	b.n	8006bb6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aae:	f7fd f82b 	bl	8003b08 <HAL_GetTick>
 8006ab2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ab6:	e00b      	b.n	8006ad0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ab8:	f7fd f826 	bl	8003b08 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e2e4      	b.n	800709a <HAL_RCC_OscConfig+0x109a>
 8006ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ad4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006ad8:	2202      	movs	r2, #2
 8006ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ae0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	fa93 f2a3 	rbit	r2, r3
 8006aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006aee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006af8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006afc:	2202      	movs	r2, #2
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	fa93 f2a3 	rbit	r2, r3
 8006b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006b16:	601a      	str	r2, [r3, #0]
  return result;
 8006b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b1c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006b20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b22:	fab3 f383 	clz	r3, r3
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	095b      	lsrs	r3, r3, #5
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	f043 0302 	orr.w	r3, r3, #2
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d106      	bne.n	8006b44 <HAL_RCC_OscConfig+0xb44>
 8006b36:	4b02      	ldr	r3, [pc, #8]	; (8006b40 <HAL_RCC_OscConfig+0xb40>)
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	e017      	b.n	8006b6c <HAL_RCC_OscConfig+0xb6c>
 8006b3c:	40007000 	.word	0x40007000
 8006b40:	40021000 	.word	0x40021000
 8006b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b48:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b54:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	fa93 f2a3 	rbit	r2, r3
 8006b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b62:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	4bb3      	ldr	r3, [pc, #716]	; (8006e38 <HAL_RCC_OscConfig+0xe38>)
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b70:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006b74:	2102      	movs	r1, #2
 8006b76:	6011      	str	r1, [r2, #0]
 8006b78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b7c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	fa92 f1a2 	rbit	r1, r2
 8006b86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b8a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8006b8e:	6011      	str	r1, [r2, #0]
  return result;
 8006b90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b94:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8006b98:	6812      	ldr	r2, [r2, #0]
 8006b9a:	fab2 f282 	clz	r2, r2
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	f002 021f 	and.w	r2, r2, #31
 8006baa:	2101      	movs	r1, #1
 8006bac:	fa01 f202 	lsl.w	r2, r1, r2
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d180      	bne.n	8006ab8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006bb6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d105      	bne.n	8006bca <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bbe:	4b9e      	ldr	r3, [pc, #632]	; (8006e38 <HAL_RCC_OscConfig+0xe38>)
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	4a9d      	ldr	r2, [pc, #628]	; (8006e38 <HAL_RCC_OscConfig+0xe38>)
 8006bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bc8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 825e 	beq.w	8007098 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bdc:	4b96      	ldr	r3, [pc, #600]	; (8006e38 <HAL_RCC_OscConfig+0xe38>)
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f003 030c 	and.w	r3, r3, #12
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	f000 821f 	beq.w	8007028 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	f040 8170 	bne.w	8006edc <HAL_RCC_OscConfig+0xedc>
 8006bfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c00:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006c04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c0e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	fa93 f2a3 	rbit	r2, r3
 8006c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c1c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006c20:	601a      	str	r2, [r3, #0]
  return result;
 8006c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c26:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006c2a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c2c:	fab3 f383 	clz	r3, r3
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	2300      	movs	r3, #0
 8006c40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c42:	f7fc ff61 	bl	8003b08 <HAL_GetTick>
 8006c46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c4a:	e009      	b.n	8006c60 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c4c:	f7fc ff5c 	bl	8003b08 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e21c      	b.n	800709a <HAL_RCC_OscConfig+0x109a>
 8006c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c64:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c72:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	fa93 f2a3 	rbit	r2, r3
 8006c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c80:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006c84:	601a      	str	r2, [r3, #0]
  return result;
 8006c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c8a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006c8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c90:	fab3 f383 	clz	r3, r3
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	095b      	lsrs	r3, r3, #5
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	f043 0301 	orr.w	r3, r3, #1
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d102      	bne.n	8006caa <HAL_RCC_OscConfig+0xcaa>
 8006ca4:	4b64      	ldr	r3, [pc, #400]	; (8006e38 <HAL_RCC_OscConfig+0xe38>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	e027      	b.n	8006cfa <HAL_RCC_OscConfig+0xcfa>
 8006caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006cb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cbc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	fa93 f2a3 	rbit	r2, r3
 8006cc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cd4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006cd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ce2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	fa93 f2a3 	rbit	r2, r3
 8006cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cf0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	4b50      	ldr	r3, [pc, #320]	; (8006e38 <HAL_RCC_OscConfig+0xe38>)
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006cfe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006d02:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006d06:	6011      	str	r1, [r2, #0]
 8006d08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006d0c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006d10:	6812      	ldr	r2, [r2, #0]
 8006d12:	fa92 f1a2 	rbit	r1, r2
 8006d16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006d1a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006d1e:	6011      	str	r1, [r2, #0]
  return result;
 8006d20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006d24:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006d28:	6812      	ldr	r2, [r2, #0]
 8006d2a:	fab2 f282 	clz	r2, r2
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	f042 0220 	orr.w	r2, r2, #32
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	f002 021f 	and.w	r2, r2, #31
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d182      	bne.n	8006c4c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d46:	4b3c      	ldr	r3, [pc, #240]	; (8006e38 <HAL_RCC_OscConfig+0xe38>)
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	f023 020f 	bic.w	r2, r3, #15
 8006d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	4937      	ldr	r1, [pc, #220]	; (8006e38 <HAL_RCC_OscConfig+0xe38>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006d60:	4b35      	ldr	r3, [pc, #212]	; (8006e38 <HAL_RCC_OscConfig+0xe38>)
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8006d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6a19      	ldr	r1, [r3, #32]
 8006d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	430b      	orrs	r3, r1
 8006d82:	492d      	ldr	r1, [pc, #180]	; (8006e38 <HAL_RCC_OscConfig+0xe38>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	604b      	str	r3, [r1, #4]
 8006d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d8c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006d90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d9a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	fa93 f2a3 	rbit	r2, r3
 8006da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006da8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006dac:	601a      	str	r2, [r3, #0]
  return result;
 8006dae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006db2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006db6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006db8:	fab3 f383 	clz	r3, r3
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006dc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	461a      	mov	r2, r3
 8006dca:	2301      	movs	r3, #1
 8006dcc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dce:	f7fc fe9b 	bl	8003b08 <HAL_GetTick>
 8006dd2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dd6:	e009      	b.n	8006dec <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dd8:	f7fc fe96 	bl	8003b08 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d901      	bls.n	8006dec <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e156      	b.n	800709a <HAL_RCC_OscConfig+0x109a>
 8006dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006df0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006df4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dfe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	fa93 f2a3 	rbit	r2, r3
 8006e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e0c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006e10:	601a      	str	r2, [r3, #0]
  return result;
 8006e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e16:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006e1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e1c:	fab3 f383 	clz	r3, r3
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	f043 0301 	orr.w	r3, r3, #1
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d105      	bne.n	8006e3c <HAL_RCC_OscConfig+0xe3c>
 8006e30:	4b01      	ldr	r3, [pc, #4]	; (8006e38 <HAL_RCC_OscConfig+0xe38>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	e02a      	b.n	8006e8c <HAL_RCC_OscConfig+0xe8c>
 8006e36:	bf00      	nop
 8006e38:	40021000 	.word	0x40021000
 8006e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e40:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006e44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e4e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	fa93 f2a3 	rbit	r2, r3
 8006e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e5c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e66:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e74:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	fa93 f2a3 	rbit	r2, r3
 8006e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e82:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	4b86      	ldr	r3, [pc, #536]	; (80070a4 <HAL_RCC_OscConfig+0x10a4>)
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006e90:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006e94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006e98:	6011      	str	r1, [r2, #0]
 8006e9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006e9e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006ea2:	6812      	ldr	r2, [r2, #0]
 8006ea4:	fa92 f1a2 	rbit	r1, r2
 8006ea8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006eac:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8006eb0:	6011      	str	r1, [r2, #0]
  return result;
 8006eb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006eb6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8006eba:	6812      	ldr	r2, [r2, #0]
 8006ebc:	fab2 f282 	clz	r2, r2
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	f042 0220 	orr.w	r2, r2, #32
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	f002 021f 	and.w	r2, r2, #31
 8006ecc:	2101      	movs	r1, #1
 8006ece:	fa01 f202 	lsl.w	r2, r1, r2
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f43f af7f 	beq.w	8006dd8 <HAL_RCC_OscConfig+0xdd8>
 8006eda:	e0dd      	b.n	8007098 <HAL_RCC_OscConfig+0x1098>
 8006edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ee0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006ee4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006eee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	fa93 f2a3 	rbit	r2, r3
 8006ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006efc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006f00:	601a      	str	r2, [r3, #0]
  return result;
 8006f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f06:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006f0a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f0c:	fab3 f383 	clz	r3, r3
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006f16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	2300      	movs	r3, #0
 8006f20:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f22:	f7fc fdf1 	bl	8003b08 <HAL_GetTick>
 8006f26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f2a:	e009      	b.n	8006f40 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f2c:	f7fc fdec 	bl	8003b08 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e0ac      	b.n	800709a <HAL_RCC_OscConfig+0x109a>
 8006f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f44:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f52:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	fa93 f2a3 	rbit	r2, r3
 8006f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f60:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006f64:	601a      	str	r2, [r3, #0]
  return result;
 8006f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f6a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006f6e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f70:	fab3 f383 	clz	r3, r3
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	095b      	lsrs	r3, r3, #5
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	f043 0301 	orr.w	r3, r3, #1
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d102      	bne.n	8006f8a <HAL_RCC_OscConfig+0xf8a>
 8006f84:	4b47      	ldr	r3, [pc, #284]	; (80070a4 <HAL_RCC_OscConfig+0x10a4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	e027      	b.n	8006fda <HAL_RCC_OscConfig+0xfda>
 8006f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f8e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	fa93 f2a3 	rbit	r2, r3
 8006fa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006faa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fb4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006fb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fc2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	fa93 f2a3 	rbit	r2, r3
 8006fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fd0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	4b33      	ldr	r3, [pc, #204]	; (80070a4 <HAL_RCC_OscConfig+0x10a4>)
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006fde:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006fe2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006fe6:	6011      	str	r1, [r2, #0]
 8006fe8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006fec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006ff0:	6812      	ldr	r2, [r2, #0]
 8006ff2:	fa92 f1a2 	rbit	r1, r2
 8006ff6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006ffa:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006ffe:	6011      	str	r1, [r2, #0]
  return result;
 8007000:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007004:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8007008:	6812      	ldr	r2, [r2, #0]
 800700a:	fab2 f282 	clz	r2, r2
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	f042 0220 	orr.w	r2, r2, #32
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	f002 021f 	and.w	r2, r2, #31
 800701a:	2101      	movs	r1, #1
 800701c:	fa01 f202 	lsl.w	r2, r1, r2
 8007020:	4013      	ands	r3, r2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d182      	bne.n	8006f2c <HAL_RCC_OscConfig+0xf2c>
 8007026:	e037      	b.n	8007098 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800702c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e02e      	b.n	800709a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800703c:	4b19      	ldr	r3, [pc, #100]	; (80070a4 <HAL_RCC_OscConfig+0x10a4>)
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8007044:	4b17      	ldr	r3, [pc, #92]	; (80070a4 <HAL_RCC_OscConfig+0x10a4>)
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800704c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007050:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8007054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007058:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	429a      	cmp	r2, r3
 8007062:	d117      	bne.n	8007094 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8007064:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007068:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800706c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007070:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007078:	429a      	cmp	r2, r3
 800707a:	d10b      	bne.n	8007094 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800707c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007080:	f003 020f 	and.w	r2, r3, #15
 8007084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007088:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8007090:	429a      	cmp	r2, r3
 8007092:	d001      	beq.n	8007098 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e000      	b.n	800709a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	40021000 	.word	0x40021000

080070a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b09e      	sub	sp, #120	; 0x78
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80070b2:	2300      	movs	r3, #0
 80070b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e162      	b.n	8007386 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070c0:	4b90      	ldr	r3, [pc, #576]	; (8007304 <HAL_RCC_ClockConfig+0x25c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0307 	and.w	r3, r3, #7
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d910      	bls.n	80070f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ce:	4b8d      	ldr	r3, [pc, #564]	; (8007304 <HAL_RCC_ClockConfig+0x25c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f023 0207 	bic.w	r2, r3, #7
 80070d6:	498b      	ldr	r1, [pc, #556]	; (8007304 <HAL_RCC_ClockConfig+0x25c>)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	4313      	orrs	r3, r2
 80070dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070de:	4b89      	ldr	r3, [pc, #548]	; (8007304 <HAL_RCC_ClockConfig+0x25c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d001      	beq.n	80070f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e14a      	b.n	8007386 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d008      	beq.n	800710e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070fc:	4b82      	ldr	r3, [pc, #520]	; (8007308 <HAL_RCC_ClockConfig+0x260>)
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	497f      	ldr	r1, [pc, #508]	; (8007308 <HAL_RCC_ClockConfig+0x260>)
 800710a:	4313      	orrs	r3, r2
 800710c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 80dc 	beq.w	80072d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d13c      	bne.n	800719e <HAL_RCC_ClockConfig+0xf6>
 8007124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007128:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800712a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800712c:	fa93 f3a3 	rbit	r3, r3
 8007130:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007134:	fab3 f383 	clz	r3, r3
 8007138:	b2db      	uxtb	r3, r3
 800713a:	095b      	lsrs	r3, r3, #5
 800713c:	b2db      	uxtb	r3, r3
 800713e:	f043 0301 	orr.w	r3, r3, #1
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b01      	cmp	r3, #1
 8007146:	d102      	bne.n	800714e <HAL_RCC_ClockConfig+0xa6>
 8007148:	4b6f      	ldr	r3, [pc, #444]	; (8007308 <HAL_RCC_ClockConfig+0x260>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	e00f      	b.n	800716e <HAL_RCC_ClockConfig+0xc6>
 800714e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007152:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007156:	fa93 f3a3 	rbit	r3, r3
 800715a:	667b      	str	r3, [r7, #100]	; 0x64
 800715c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007160:	663b      	str	r3, [r7, #96]	; 0x60
 8007162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007164:	fa93 f3a3 	rbit	r3, r3
 8007168:	65fb      	str	r3, [r7, #92]	; 0x5c
 800716a:	4b67      	ldr	r3, [pc, #412]	; (8007308 <HAL_RCC_ClockConfig+0x260>)
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007172:	65ba      	str	r2, [r7, #88]	; 0x58
 8007174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007176:	fa92 f2a2 	rbit	r2, r2
 800717a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800717c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800717e:	fab2 f282 	clz	r2, r2
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	f042 0220 	orr.w	r2, r2, #32
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	f002 021f 	and.w	r2, r2, #31
 800718e:	2101      	movs	r1, #1
 8007190:	fa01 f202 	lsl.w	r2, r1, r2
 8007194:	4013      	ands	r3, r2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d17b      	bne.n	8007292 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e0f3      	b.n	8007386 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d13c      	bne.n	8007220 <HAL_RCC_ClockConfig+0x178>
 80071a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ae:	fa93 f3a3 	rbit	r3, r3
 80071b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80071b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071b6:	fab3 f383 	clz	r3, r3
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	095b      	lsrs	r3, r3, #5
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	f043 0301 	orr.w	r3, r3, #1
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d102      	bne.n	80071d0 <HAL_RCC_ClockConfig+0x128>
 80071ca:	4b4f      	ldr	r3, [pc, #316]	; (8007308 <HAL_RCC_ClockConfig+0x260>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	e00f      	b.n	80071f0 <HAL_RCC_ClockConfig+0x148>
 80071d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d8:	fa93 f3a3 	rbit	r3, r3
 80071dc:	647b      	str	r3, [r7, #68]	; 0x44
 80071de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071e2:	643b      	str	r3, [r7, #64]	; 0x40
 80071e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071e6:	fa93 f3a3 	rbit	r3, r3
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ec:	4b46      	ldr	r3, [pc, #280]	; (8007308 <HAL_RCC_ClockConfig+0x260>)
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80071f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80071f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071f8:	fa92 f2a2 	rbit	r2, r2
 80071fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80071fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007200:	fab2 f282 	clz	r2, r2
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	f042 0220 	orr.w	r2, r2, #32
 800720a:	b2d2      	uxtb	r2, r2
 800720c:	f002 021f 	and.w	r2, r2, #31
 8007210:	2101      	movs	r1, #1
 8007212:	fa01 f202 	lsl.w	r2, r1, r2
 8007216:	4013      	ands	r3, r2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d13a      	bne.n	8007292 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e0b2      	b.n	8007386 <HAL_RCC_ClockConfig+0x2de>
 8007220:	2302      	movs	r3, #2
 8007222:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	fa93 f3a3 	rbit	r3, r3
 800722a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800722e:	fab3 f383 	clz	r3, r3
 8007232:	b2db      	uxtb	r3, r3
 8007234:	095b      	lsrs	r3, r3, #5
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f043 0301 	orr.w	r3, r3, #1
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b01      	cmp	r3, #1
 8007240:	d102      	bne.n	8007248 <HAL_RCC_ClockConfig+0x1a0>
 8007242:	4b31      	ldr	r3, [pc, #196]	; (8007308 <HAL_RCC_ClockConfig+0x260>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	e00d      	b.n	8007264 <HAL_RCC_ClockConfig+0x1bc>
 8007248:	2302      	movs	r3, #2
 800724a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800724c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724e:	fa93 f3a3 	rbit	r3, r3
 8007252:	627b      	str	r3, [r7, #36]	; 0x24
 8007254:	2302      	movs	r3, #2
 8007256:	623b      	str	r3, [r7, #32]
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	fa93 f3a3 	rbit	r3, r3
 800725e:	61fb      	str	r3, [r7, #28]
 8007260:	4b29      	ldr	r3, [pc, #164]	; (8007308 <HAL_RCC_ClockConfig+0x260>)
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	2202      	movs	r2, #2
 8007266:	61ba      	str	r2, [r7, #24]
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	fa92 f2a2 	rbit	r2, r2
 800726e:	617a      	str	r2, [r7, #20]
  return result;
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	fab2 f282 	clz	r2, r2
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	f042 0220 	orr.w	r2, r2, #32
 800727c:	b2d2      	uxtb	r2, r2
 800727e:	f002 021f 	and.w	r2, r2, #31
 8007282:	2101      	movs	r1, #1
 8007284:	fa01 f202 	lsl.w	r2, r1, r2
 8007288:	4013      	ands	r3, r2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e079      	b.n	8007386 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007292:	4b1d      	ldr	r3, [pc, #116]	; (8007308 <HAL_RCC_ClockConfig+0x260>)
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f023 0203 	bic.w	r2, r3, #3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	491a      	ldr	r1, [pc, #104]	; (8007308 <HAL_RCC_ClockConfig+0x260>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072a4:	f7fc fc30 	bl	8003b08 <HAL_GetTick>
 80072a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072aa:	e00a      	b.n	80072c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072ac:	f7fc fc2c 	bl	8003b08 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d901      	bls.n	80072c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e061      	b.n	8007386 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072c2:	4b11      	ldr	r3, [pc, #68]	; (8007308 <HAL_RCC_ClockConfig+0x260>)
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f003 020c 	and.w	r2, r3, #12
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d1eb      	bne.n	80072ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072d4:	4b0b      	ldr	r3, [pc, #44]	; (8007304 <HAL_RCC_ClockConfig+0x25c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0307 	and.w	r3, r3, #7
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d214      	bcs.n	800730c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072e2:	4b08      	ldr	r3, [pc, #32]	; (8007304 <HAL_RCC_ClockConfig+0x25c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f023 0207 	bic.w	r2, r3, #7
 80072ea:	4906      	ldr	r1, [pc, #24]	; (8007304 <HAL_RCC_ClockConfig+0x25c>)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072f2:	4b04      	ldr	r3, [pc, #16]	; (8007304 <HAL_RCC_ClockConfig+0x25c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d005      	beq.n	800730c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e040      	b.n	8007386 <HAL_RCC_ClockConfig+0x2de>
 8007304:	40022000 	.word	0x40022000
 8007308:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d008      	beq.n	800732a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007318:	4b1d      	ldr	r3, [pc, #116]	; (8007390 <HAL_RCC_ClockConfig+0x2e8>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	491a      	ldr	r1, [pc, #104]	; (8007390 <HAL_RCC_ClockConfig+0x2e8>)
 8007326:	4313      	orrs	r3, r2
 8007328:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d009      	beq.n	800734a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007336:	4b16      	ldr	r3, [pc, #88]	; (8007390 <HAL_RCC_ClockConfig+0x2e8>)
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	4912      	ldr	r1, [pc, #72]	; (8007390 <HAL_RCC_ClockConfig+0x2e8>)
 8007346:	4313      	orrs	r3, r2
 8007348:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800734a:	f000 f829 	bl	80073a0 <HAL_RCC_GetSysClockFreq>
 800734e:	4601      	mov	r1, r0
 8007350:	4b0f      	ldr	r3, [pc, #60]	; (8007390 <HAL_RCC_ClockConfig+0x2e8>)
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007358:	22f0      	movs	r2, #240	; 0xf0
 800735a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	fa92 f2a2 	rbit	r2, r2
 8007362:	60fa      	str	r2, [r7, #12]
  return result;
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	fab2 f282 	clz	r2, r2
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	40d3      	lsrs	r3, r2
 800736e:	4a09      	ldr	r2, [pc, #36]	; (8007394 <HAL_RCC_ClockConfig+0x2ec>)
 8007370:	5cd3      	ldrb	r3, [r2, r3]
 8007372:	fa21 f303 	lsr.w	r3, r1, r3
 8007376:	4a08      	ldr	r2, [pc, #32]	; (8007398 <HAL_RCC_ClockConfig+0x2f0>)
 8007378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800737a:	4b08      	ldr	r3, [pc, #32]	; (800739c <HAL_RCC_ClockConfig+0x2f4>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4618      	mov	r0, r3
 8007380:	f7fc fb7e 	bl	8003a80 <HAL_InitTick>
  
  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3778      	adds	r7, #120	; 0x78
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	40021000 	.word	0x40021000
 8007394:	0800a5b4 	.word	0x0800a5b4
 8007398:	20000000 	.word	0x20000000
 800739c:	20000004 	.word	0x20000004

080073a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b08b      	sub	sp, #44	; 0x2c
 80073a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	61fb      	str	r3, [r7, #28]
 80073aa:	2300      	movs	r3, #0
 80073ac:	61bb      	str	r3, [r7, #24]
 80073ae:	2300      	movs	r3, #0
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80073ba:	4b2a      	ldr	r3, [pc, #168]	; (8007464 <HAL_RCC_GetSysClockFreq+0xc4>)
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	f003 030c 	and.w	r3, r3, #12
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d002      	beq.n	80073d0 <HAL_RCC_GetSysClockFreq+0x30>
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	d003      	beq.n	80073d6 <HAL_RCC_GetSysClockFreq+0x36>
 80073ce:	e03f      	b.n	8007450 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80073d0:	4b25      	ldr	r3, [pc, #148]	; (8007468 <HAL_RCC_GetSysClockFreq+0xc8>)
 80073d2:	623b      	str	r3, [r7, #32]
      break;
 80073d4:	e03f      	b.n	8007456 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80073dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80073e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	fa92 f2a2 	rbit	r2, r2
 80073e8:	607a      	str	r2, [r7, #4]
  return result;
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	fab2 f282 	clz	r2, r2
 80073f0:	b2d2      	uxtb	r2, r2
 80073f2:	40d3      	lsrs	r3, r2
 80073f4:	4a1d      	ldr	r2, [pc, #116]	; (800746c <HAL_RCC_GetSysClockFreq+0xcc>)
 80073f6:	5cd3      	ldrb	r3, [r2, r3]
 80073f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80073fa:	4b1a      	ldr	r3, [pc, #104]	; (8007464 <HAL_RCC_GetSysClockFreq+0xc4>)
 80073fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	220f      	movs	r2, #15
 8007404:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	fa92 f2a2 	rbit	r2, r2
 800740c:	60fa      	str	r2, [r7, #12]
  return result;
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	fab2 f282 	clz	r2, r2
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	40d3      	lsrs	r3, r2
 8007418:	4a15      	ldr	r2, [pc, #84]	; (8007470 <HAL_RCC_GetSysClockFreq+0xd0>)
 800741a:	5cd3      	ldrb	r3, [r2, r3]
 800741c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d008      	beq.n	800743a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007428:	4a0f      	ldr	r2, [pc, #60]	; (8007468 <HAL_RCC_GetSysClockFreq+0xc8>)
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	fb02 f303 	mul.w	r3, r2, r3
 8007436:	627b      	str	r3, [r7, #36]	; 0x24
 8007438:	e007      	b.n	800744a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800743a:	4a0b      	ldr	r2, [pc, #44]	; (8007468 <HAL_RCC_GetSysClockFreq+0xc8>)
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	fb02 f303 	mul.w	r3, r2, r3
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	623b      	str	r3, [r7, #32]
      break;
 800744e:	e002      	b.n	8007456 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007450:	4b05      	ldr	r3, [pc, #20]	; (8007468 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007452:	623b      	str	r3, [r7, #32]
      break;
 8007454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007456:	6a3b      	ldr	r3, [r7, #32]
}
 8007458:	4618      	mov	r0, r3
 800745a:	372c      	adds	r7, #44	; 0x2c
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	40021000 	.word	0x40021000
 8007468:	007a1200 	.word	0x007a1200
 800746c:	0800a5cc 	.word	0x0800a5cc
 8007470:	0800a5dc 	.word	0x0800a5dc

08007474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007474:	b480      	push	{r7}
 8007476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007478:	4b03      	ldr	r3, [pc, #12]	; (8007488 <HAL_RCC_GetHCLKFreq+0x14>)
 800747a:	681b      	ldr	r3, [r3, #0]
}
 800747c:	4618      	mov	r0, r3
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	20000000 	.word	0x20000000

0800748c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007492:	f7ff ffef 	bl	8007474 <HAL_RCC_GetHCLKFreq>
 8007496:	4601      	mov	r1, r0
 8007498:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80074a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	fa92 f2a2 	rbit	r2, r2
 80074ac:	603a      	str	r2, [r7, #0]
  return result;
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	fab2 f282 	clz	r2, r2
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	40d3      	lsrs	r3, r2
 80074b8:	4a04      	ldr	r2, [pc, #16]	; (80074cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80074ba:	5cd3      	ldrb	r3, [r2, r3]
 80074bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	40021000 	.word	0x40021000
 80074cc:	0800a5c4 	.word	0x0800a5c4

080074d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80074d6:	f7ff ffcd 	bl	8007474 <HAL_RCC_GetHCLKFreq>
 80074da:	4601      	mov	r1, r0
 80074dc:	4b0b      	ldr	r3, [pc, #44]	; (800750c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80074e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80074e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	fa92 f2a2 	rbit	r2, r2
 80074f0:	603a      	str	r2, [r7, #0]
  return result;
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	fab2 f282 	clz	r2, r2
 80074f8:	b2d2      	uxtb	r2, r2
 80074fa:	40d3      	lsrs	r3, r2
 80074fc:	4a04      	ldr	r2, [pc, #16]	; (8007510 <HAL_RCC_GetPCLK2Freq+0x40>)
 80074fe:	5cd3      	ldrb	r3, [r2, r3]
 8007500:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	40021000 	.word	0x40021000
 8007510:	0800a5c4 	.word	0x0800a5c4

08007514 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b092      	sub	sp, #72	; 0x48
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007524:	2300      	movs	r3, #0
 8007526:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 80d4 	beq.w	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007538:	4b4e      	ldr	r3, [pc, #312]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10e      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007544:	4b4b      	ldr	r3, [pc, #300]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	4a4a      	ldr	r2, [pc, #296]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800754a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800754e:	61d3      	str	r3, [r2, #28]
 8007550:	4b48      	ldr	r3, [pc, #288]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007558:	60bb      	str	r3, [r7, #8]
 800755a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800755c:	2301      	movs	r3, #1
 800755e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007562:	4b45      	ldr	r3, [pc, #276]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756a:	2b00      	cmp	r3, #0
 800756c:	d118      	bne.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800756e:	4b42      	ldr	r3, [pc, #264]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a41      	ldr	r2, [pc, #260]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007578:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800757a:	f7fc fac5 	bl	8003b08 <HAL_GetTick>
 800757e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007580:	e008      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007582:	f7fc fac1 	bl	8003b08 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	2b64      	cmp	r3, #100	; 0x64
 800758e:	d901      	bls.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e1d6      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007594:	4b38      	ldr	r3, [pc, #224]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759c:	2b00      	cmp	r3, #0
 800759e:	d0f0      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80075a0:	4b34      	ldr	r3, [pc, #208]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80075aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 8084 	beq.w	80076ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075bc:	429a      	cmp	r2, r3
 80075be:	d07c      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075c0:	4b2c      	ldr	r3, [pc, #176]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	fa93 f3a3 	rbit	r3, r3
 80075d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075da:	fab3 f383 	clz	r3, r3
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	461a      	mov	r2, r3
 80075e2:	4b26      	ldr	r3, [pc, #152]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	461a      	mov	r2, r3
 80075ea:	2301      	movs	r3, #1
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f6:	fa93 f3a3 	rbit	r3, r3
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80075fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075fe:	fab3 f383 	clz	r3, r3
 8007602:	b2db      	uxtb	r3, r3
 8007604:	461a      	mov	r2, r3
 8007606:	4b1d      	ldr	r3, [pc, #116]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	461a      	mov	r2, r3
 800760e:	2300      	movs	r3, #0
 8007610:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007612:	4a18      	ldr	r2, [pc, #96]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007616:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d04b      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007622:	f7fc fa71 	bl	8003b08 <HAL_GetTick>
 8007626:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007628:	e00a      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800762a:	f7fc fa6d 	bl	8003b08 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	f241 3288 	movw	r2, #5000	; 0x1388
 8007638:	4293      	cmp	r3, r2
 800763a:	d901      	bls.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e180      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007640:	2302      	movs	r3, #2
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	fa93 f3a3 	rbit	r3, r3
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
 800764c:	2302      	movs	r3, #2
 800764e:	623b      	str	r3, [r7, #32]
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	fa93 f3a3 	rbit	r3, r3
 8007656:	61fb      	str	r3, [r7, #28]
  return result;
 8007658:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800765a:	fab3 f383 	clz	r3, r3
 800765e:	b2db      	uxtb	r3, r3
 8007660:	095b      	lsrs	r3, r3, #5
 8007662:	b2db      	uxtb	r3, r3
 8007664:	f043 0302 	orr.w	r3, r3, #2
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b02      	cmp	r3, #2
 800766c:	d108      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800766e:	4b01      	ldr	r3, [pc, #4]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	e00d      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007674:	40021000 	.word	0x40021000
 8007678:	40007000 	.word	0x40007000
 800767c:	10908100 	.word	0x10908100
 8007680:	2302      	movs	r3, #2
 8007682:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	fa93 f3a3 	rbit	r3, r3
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	4b9a      	ldr	r3, [pc, #616]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	2202      	movs	r2, #2
 8007692:	613a      	str	r2, [r7, #16]
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	fa92 f2a2 	rbit	r2, r2
 800769a:	60fa      	str	r2, [r7, #12]
  return result;
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	fab2 f282 	clz	r2, r2
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076a8:	b2d2      	uxtb	r2, r2
 80076aa:	f002 021f 	and.w	r2, r2, #31
 80076ae:	2101      	movs	r1, #1
 80076b0:	fa01 f202 	lsl.w	r2, r1, r2
 80076b4:	4013      	ands	r3, r2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0b7      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80076ba:	4b8f      	ldr	r3, [pc, #572]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	498c      	ldr	r1, [pc, #560]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80076cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d105      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076d4:	4b88      	ldr	r3, [pc, #544]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	4a87      	ldr	r2, [pc, #540]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d008      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076ec:	4b82      	ldr	r3, [pc, #520]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f0:	f023 0203 	bic.w	r2, r3, #3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	497f      	ldr	r1, [pc, #508]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d008      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800770a:	4b7b      	ldr	r3, [pc, #492]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800770c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	4978      	ldr	r1, [pc, #480]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007718:	4313      	orrs	r3, r2
 800771a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	2b00      	cmp	r3, #0
 8007726:	d008      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007728:	4b73      	ldr	r3, [pc, #460]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	4970      	ldr	r1, [pc, #448]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007736:	4313      	orrs	r3, r2
 8007738:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0320 	and.w	r3, r3, #32
 8007742:	2b00      	cmp	r3, #0
 8007744:	d008      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007746:	4b6c      	ldr	r3, [pc, #432]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	f023 0210 	bic.w	r2, r3, #16
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	4969      	ldr	r1, [pc, #420]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007754:	4313      	orrs	r3, r2
 8007756:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d008      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007764:	4b64      	ldr	r3, [pc, #400]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007770:	4961      	ldr	r1, [pc, #388]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007772:	4313      	orrs	r3, r2
 8007774:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	d008      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007782:	4b5d      	ldr	r3, [pc, #372]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	f023 0220 	bic.w	r2, r3, #32
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	495a      	ldr	r1, [pc, #360]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007790:	4313      	orrs	r3, r2
 8007792:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d008      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077a0:	4b55      	ldr	r3, [pc, #340]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	4952      	ldr	r1, [pc, #328]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0308 	and.w	r3, r3, #8
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d008      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80077be:	4b4e      	ldr	r3, [pc, #312]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	494b      	ldr	r1, [pc, #300]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0310 	and.w	r3, r3, #16
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d008      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80077dc:	4b46      	ldr	r3, [pc, #280]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	4943      	ldr	r1, [pc, #268]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d008      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80077fa:	4b3f      	ldr	r3, [pc, #252]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007806:	493c      	ldr	r1, [pc, #240]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007808:	4313      	orrs	r3, r2
 800780a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007814:	2b00      	cmp	r3, #0
 8007816:	d008      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007818:	4b37      	ldr	r3, [pc, #220]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800781a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007824:	4934      	ldr	r1, [pc, #208]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007826:	4313      	orrs	r3, r2
 8007828:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007832:	2b00      	cmp	r3, #0
 8007834:	d008      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007836:	4b30      	ldr	r3, [pc, #192]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	492d      	ldr	r1, [pc, #180]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007844:	4313      	orrs	r3, r2
 8007846:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d008      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007854:	4b28      	ldr	r3, [pc, #160]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007858:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007860:	4925      	ldr	r1, [pc, #148]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007862:	4313      	orrs	r3, r2
 8007864:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d008      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007872:	4b21      	ldr	r3, [pc, #132]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007876:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	491e      	ldr	r1, [pc, #120]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007880:	4313      	orrs	r3, r2
 8007882:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d008      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8007890:	4b19      	ldr	r3, [pc, #100]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007894:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	4916      	ldr	r1, [pc, #88]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d008      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80078ae:	4b12      	ldr	r3, [pc, #72]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ba:	490f      	ldr	r1, [pc, #60]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d008      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80078cc:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d8:	4907      	ldr	r1, [pc, #28]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00c      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80078ea:	4b03      	ldr	r3, [pc, #12]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	e002      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80078f6:	bf00      	nop
 80078f8:	40021000 	.word	0x40021000
 80078fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078fe:	4913      	ldr	r1, [pc, #76]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007900:	4313      	orrs	r3, r2
 8007902:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d008      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007910:	4b0e      	ldr	r3, [pc, #56]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007914:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800791c:	490b      	ldr	r1, [pc, #44]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800791e:	4313      	orrs	r3, r2
 8007920:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d008      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800792e:	4b07      	ldr	r3, [pc, #28]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800793a:	4904      	ldr	r1, [pc, #16]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800793c:	4313      	orrs	r3, r2
 800793e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3748      	adds	r7, #72	; 0x48
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	40021000 	.word	0x40021000

08007950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e049      	b.n	80079f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d106      	bne.n	800797c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7fb fed0 	bl	800371c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	3304      	adds	r3, #4
 800798c:	4619      	mov	r1, r3
 800798e:	4610      	mov	r0, r2
 8007990:	f000 fe34 	bl	80085fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d001      	beq.n	8007a18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e047      	b.n	8007aa8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a23      	ldr	r2, [pc, #140]	; (8007ab4 <HAL_TIM_Base_Start+0xb4>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d01d      	beq.n	8007a66 <HAL_TIM_Base_Start+0x66>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a32:	d018      	beq.n	8007a66 <HAL_TIM_Base_Start+0x66>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a1f      	ldr	r2, [pc, #124]	; (8007ab8 <HAL_TIM_Base_Start+0xb8>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d013      	beq.n	8007a66 <HAL_TIM_Base_Start+0x66>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a1e      	ldr	r2, [pc, #120]	; (8007abc <HAL_TIM_Base_Start+0xbc>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d00e      	beq.n	8007a66 <HAL_TIM_Base_Start+0x66>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a1c      	ldr	r2, [pc, #112]	; (8007ac0 <HAL_TIM_Base_Start+0xc0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d009      	beq.n	8007a66 <HAL_TIM_Base_Start+0x66>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a1b      	ldr	r2, [pc, #108]	; (8007ac4 <HAL_TIM_Base_Start+0xc4>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d004      	beq.n	8007a66 <HAL_TIM_Base_Start+0x66>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a19      	ldr	r2, [pc, #100]	; (8007ac8 <HAL_TIM_Base_Start+0xc8>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d115      	bne.n	8007a92 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	4b17      	ldr	r3, [pc, #92]	; (8007acc <HAL_TIM_Base_Start+0xcc>)
 8007a6e:	4013      	ands	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b06      	cmp	r3, #6
 8007a76:	d015      	beq.n	8007aa4 <HAL_TIM_Base_Start+0xa4>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a7e:	d011      	beq.n	8007aa4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f042 0201 	orr.w	r2, r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a90:	e008      	b.n	8007aa4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0201 	orr.w	r2, r2, #1
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	e000      	b.n	8007aa6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	40012c00 	.word	0x40012c00
 8007ab8:	40000400 	.word	0x40000400
 8007abc:	40000800 	.word	0x40000800
 8007ac0:	40013400 	.word	0x40013400
 8007ac4:	40014000 	.word	0x40014000
 8007ac8:	40015000 	.word	0x40015000
 8007acc:	00010007 	.word	0x00010007

08007ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d001      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e04f      	b.n	8007b88 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0201 	orr.w	r2, r2, #1
 8007afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a23      	ldr	r2, [pc, #140]	; (8007b94 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d01d      	beq.n	8007b46 <HAL_TIM_Base_Start_IT+0x76>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b12:	d018      	beq.n	8007b46 <HAL_TIM_Base_Start_IT+0x76>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a1f      	ldr	r2, [pc, #124]	; (8007b98 <HAL_TIM_Base_Start_IT+0xc8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d013      	beq.n	8007b46 <HAL_TIM_Base_Start_IT+0x76>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1e      	ldr	r2, [pc, #120]	; (8007b9c <HAL_TIM_Base_Start_IT+0xcc>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d00e      	beq.n	8007b46 <HAL_TIM_Base_Start_IT+0x76>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a1c      	ldr	r2, [pc, #112]	; (8007ba0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d009      	beq.n	8007b46 <HAL_TIM_Base_Start_IT+0x76>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a1b      	ldr	r2, [pc, #108]	; (8007ba4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d004      	beq.n	8007b46 <HAL_TIM_Base_Start_IT+0x76>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a19      	ldr	r2, [pc, #100]	; (8007ba8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d115      	bne.n	8007b72 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689a      	ldr	r2, [r3, #8]
 8007b4c:	4b17      	ldr	r3, [pc, #92]	; (8007bac <HAL_TIM_Base_Start_IT+0xdc>)
 8007b4e:	4013      	ands	r3, r2
 8007b50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b06      	cmp	r3, #6
 8007b56:	d015      	beq.n	8007b84 <HAL_TIM_Base_Start_IT+0xb4>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b5e:	d011      	beq.n	8007b84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0201 	orr.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b70:	e008      	b.n	8007b84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f042 0201 	orr.w	r2, r2, #1
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	e000      	b.n	8007b86 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	40012c00 	.word	0x40012c00
 8007b98:	40000400 	.word	0x40000400
 8007b9c:	40000800 	.word	0x40000800
 8007ba0:	40013400 	.word	0x40013400
 8007ba4:	40014000 	.word	0x40014000
 8007ba8:	40015000 	.word	0x40015000
 8007bac:	00010007 	.word	0x00010007

08007bb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e049      	b.n	8007c56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d106      	bne.n	8007bdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7fb fdc6 	bl	8003768 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2202      	movs	r2, #2
 8007be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3304      	adds	r3, #4
 8007bec:	4619      	mov	r1, r3
 8007bee:	4610      	mov	r0, r2
 8007bf0:	f000 fd04 	bl	80085fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d109      	bne.n	8007c84 <HAL_TIM_PWM_Start+0x24>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	bf14      	ite	ne
 8007c7c:	2301      	movne	r3, #1
 8007c7e:	2300      	moveq	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	e03c      	b.n	8007cfe <HAL_TIM_PWM_Start+0x9e>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	d109      	bne.n	8007c9e <HAL_TIM_PWM_Start+0x3e>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	bf14      	ite	ne
 8007c96:	2301      	movne	r3, #1
 8007c98:	2300      	moveq	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	e02f      	b.n	8007cfe <HAL_TIM_PWM_Start+0x9e>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d109      	bne.n	8007cb8 <HAL_TIM_PWM_Start+0x58>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	bf14      	ite	ne
 8007cb0:	2301      	movne	r3, #1
 8007cb2:	2300      	moveq	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	e022      	b.n	8007cfe <HAL_TIM_PWM_Start+0x9e>
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2b0c      	cmp	r3, #12
 8007cbc:	d109      	bne.n	8007cd2 <HAL_TIM_PWM_Start+0x72>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	bf14      	ite	ne
 8007cca:	2301      	movne	r3, #1
 8007ccc:	2300      	moveq	r3, #0
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	e015      	b.n	8007cfe <HAL_TIM_PWM_Start+0x9e>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b10      	cmp	r3, #16
 8007cd6:	d109      	bne.n	8007cec <HAL_TIM_PWM_Start+0x8c>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	bf14      	ite	ne
 8007ce4:	2301      	movne	r3, #1
 8007ce6:	2300      	moveq	r3, #0
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	e008      	b.n	8007cfe <HAL_TIM_PWM_Start+0x9e>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	bf14      	ite	ne
 8007cf8:	2301      	movne	r3, #1
 8007cfa:	2300      	moveq	r3, #0
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e0a1      	b.n	8007e4a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d104      	bne.n	8007d16 <HAL_TIM_PWM_Start+0xb6>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d14:	e023      	b.n	8007d5e <HAL_TIM_PWM_Start+0xfe>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d104      	bne.n	8007d26 <HAL_TIM_PWM_Start+0xc6>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d24:	e01b      	b.n	8007d5e <HAL_TIM_PWM_Start+0xfe>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	d104      	bne.n	8007d36 <HAL_TIM_PWM_Start+0xd6>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d34:	e013      	b.n	8007d5e <HAL_TIM_PWM_Start+0xfe>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b0c      	cmp	r3, #12
 8007d3a:	d104      	bne.n	8007d46 <HAL_TIM_PWM_Start+0xe6>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d44:	e00b      	b.n	8007d5e <HAL_TIM_PWM_Start+0xfe>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b10      	cmp	r3, #16
 8007d4a:	d104      	bne.n	8007d56 <HAL_TIM_PWM_Start+0xf6>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d54:	e003      	b.n	8007d5e <HAL_TIM_PWM_Start+0xfe>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2201      	movs	r2, #1
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f001 f886 	bl	8008e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a38      	ldr	r2, [pc, #224]	; (8007e54 <HAL_TIM_PWM_Start+0x1f4>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d018      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x148>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a37      	ldr	r2, [pc, #220]	; (8007e58 <HAL_TIM_PWM_Start+0x1f8>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d013      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x148>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a35      	ldr	r2, [pc, #212]	; (8007e5c <HAL_TIM_PWM_Start+0x1fc>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d00e      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x148>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a34      	ldr	r2, [pc, #208]	; (8007e60 <HAL_TIM_PWM_Start+0x200>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d009      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x148>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a32      	ldr	r2, [pc, #200]	; (8007e64 <HAL_TIM_PWM_Start+0x204>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d004      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x148>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a31      	ldr	r2, [pc, #196]	; (8007e68 <HAL_TIM_PWM_Start+0x208>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d101      	bne.n	8007dac <HAL_TIM_PWM_Start+0x14c>
 8007da8:	2301      	movs	r3, #1
 8007daa:	e000      	b.n	8007dae <HAL_TIM_PWM_Start+0x14e>
 8007dac:	2300      	movs	r3, #0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d007      	beq.n	8007dc2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a23      	ldr	r2, [pc, #140]	; (8007e54 <HAL_TIM_PWM_Start+0x1f4>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d01d      	beq.n	8007e08 <HAL_TIM_PWM_Start+0x1a8>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd4:	d018      	beq.n	8007e08 <HAL_TIM_PWM_Start+0x1a8>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a24      	ldr	r2, [pc, #144]	; (8007e6c <HAL_TIM_PWM_Start+0x20c>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d013      	beq.n	8007e08 <HAL_TIM_PWM_Start+0x1a8>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a22      	ldr	r2, [pc, #136]	; (8007e70 <HAL_TIM_PWM_Start+0x210>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d00e      	beq.n	8007e08 <HAL_TIM_PWM_Start+0x1a8>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a1a      	ldr	r2, [pc, #104]	; (8007e58 <HAL_TIM_PWM_Start+0x1f8>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d009      	beq.n	8007e08 <HAL_TIM_PWM_Start+0x1a8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a18      	ldr	r2, [pc, #96]	; (8007e5c <HAL_TIM_PWM_Start+0x1fc>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d004      	beq.n	8007e08 <HAL_TIM_PWM_Start+0x1a8>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a19      	ldr	r2, [pc, #100]	; (8007e68 <HAL_TIM_PWM_Start+0x208>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d115      	bne.n	8007e34 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689a      	ldr	r2, [r3, #8]
 8007e0e:	4b19      	ldr	r3, [pc, #100]	; (8007e74 <HAL_TIM_PWM_Start+0x214>)
 8007e10:	4013      	ands	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2b06      	cmp	r3, #6
 8007e18:	d015      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x1e6>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e20:	d011      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f042 0201 	orr.w	r2, r2, #1
 8007e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e32:	e008      	b.n	8007e46 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0201 	orr.w	r2, r2, #1
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	e000      	b.n	8007e48 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	40012c00 	.word	0x40012c00
 8007e58:	40013400 	.word	0x40013400
 8007e5c:	40014000 	.word	0x40014000
 8007e60:	40014400 	.word	0x40014400
 8007e64:	40014800 	.word	0x40014800
 8007e68:	40015000 	.word	0x40015000
 8007e6c:	40000400 	.word	0x40000400
 8007e70:	40000800 	.word	0x40000800
 8007e74:	00010007 	.word	0x00010007

08007e78 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2200      	movs	r2, #0
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 fff4 	bl	8008e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a40      	ldr	r2, [pc, #256]	; (8007f98 <HAL_TIM_PWM_Stop+0x120>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d018      	beq.n	8007ecc <HAL_TIM_PWM_Stop+0x54>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a3f      	ldr	r2, [pc, #252]	; (8007f9c <HAL_TIM_PWM_Stop+0x124>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d013      	beq.n	8007ecc <HAL_TIM_PWM_Stop+0x54>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a3d      	ldr	r2, [pc, #244]	; (8007fa0 <HAL_TIM_PWM_Stop+0x128>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d00e      	beq.n	8007ecc <HAL_TIM_PWM_Stop+0x54>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a3c      	ldr	r2, [pc, #240]	; (8007fa4 <HAL_TIM_PWM_Stop+0x12c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d009      	beq.n	8007ecc <HAL_TIM_PWM_Stop+0x54>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a3a      	ldr	r2, [pc, #232]	; (8007fa8 <HAL_TIM_PWM_Stop+0x130>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d004      	beq.n	8007ecc <HAL_TIM_PWM_Stop+0x54>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a39      	ldr	r2, [pc, #228]	; (8007fac <HAL_TIM_PWM_Stop+0x134>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d101      	bne.n	8007ed0 <HAL_TIM_PWM_Stop+0x58>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e000      	b.n	8007ed2 <HAL_TIM_PWM_Stop+0x5a>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d017      	beq.n	8007f06 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6a1a      	ldr	r2, [r3, #32]
 8007edc:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10f      	bne.n	8007f06 <HAL_TIM_PWM_Stop+0x8e>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6a1a      	ldr	r2, [r3, #32]
 8007eec:	f240 4344 	movw	r3, #1092	; 0x444
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d107      	bne.n	8007f06 <HAL_TIM_PWM_Stop+0x8e>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6a1a      	ldr	r2, [r3, #32]
 8007f0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f10:	4013      	ands	r3, r2
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10f      	bne.n	8007f36 <HAL_TIM_PWM_Stop+0xbe>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6a1a      	ldr	r2, [r3, #32]
 8007f1c:	f240 4344 	movw	r3, #1092	; 0x444
 8007f20:	4013      	ands	r3, r2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d107      	bne.n	8007f36 <HAL_TIM_PWM_Stop+0xbe>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0201 	bic.w	r2, r2, #1
 8007f34:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d104      	bne.n	8007f46 <HAL_TIM_PWM_Stop+0xce>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f44:	e023      	b.n	8007f8e <HAL_TIM_PWM_Stop+0x116>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b04      	cmp	r3, #4
 8007f4a:	d104      	bne.n	8007f56 <HAL_TIM_PWM_Stop+0xde>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f54:	e01b      	b.n	8007f8e <HAL_TIM_PWM_Stop+0x116>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d104      	bne.n	8007f66 <HAL_TIM_PWM_Stop+0xee>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f64:	e013      	b.n	8007f8e <HAL_TIM_PWM_Stop+0x116>
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b0c      	cmp	r3, #12
 8007f6a:	d104      	bne.n	8007f76 <HAL_TIM_PWM_Stop+0xfe>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f74:	e00b      	b.n	8007f8e <HAL_TIM_PWM_Stop+0x116>
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b10      	cmp	r3, #16
 8007f7a:	d104      	bne.n	8007f86 <HAL_TIM_PWM_Stop+0x10e>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f84:	e003      	b.n	8007f8e <HAL_TIM_PWM_Stop+0x116>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	40012c00 	.word	0x40012c00
 8007f9c:	40013400 	.word	0x40013400
 8007fa0:	40014000 	.word	0x40014000
 8007fa4:	40014400 	.word	0x40014400
 8007fa8:	40014800 	.word	0x40014800
 8007fac:	40015000 	.word	0x40015000

08007fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f003 0302 	and.w	r3, r3, #2
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d122      	bne.n	800800c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d11b      	bne.n	800800c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f06f 0202 	mvn.w	r2, #2
 8007fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fae3 	bl	80085be <HAL_TIM_IC_CaptureCallback>
 8007ff8:	e005      	b.n	8008006 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fad5 	bl	80085aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fae6 	bl	80085d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	f003 0304 	and.w	r3, r3, #4
 8008016:	2b04      	cmp	r3, #4
 8008018:	d122      	bne.n	8008060 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f003 0304 	and.w	r3, r3, #4
 8008024:	2b04      	cmp	r3, #4
 8008026:	d11b      	bne.n	8008060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f06f 0204 	mvn.w	r2, #4
 8008030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2202      	movs	r2, #2
 8008036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fab9 	bl	80085be <HAL_TIM_IC_CaptureCallback>
 800804c:	e005      	b.n	800805a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 faab 	bl	80085aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fabc 	bl	80085d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	f003 0308 	and.w	r3, r3, #8
 800806a:	2b08      	cmp	r3, #8
 800806c:	d122      	bne.n	80080b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f003 0308 	and.w	r3, r3, #8
 8008078:	2b08      	cmp	r3, #8
 800807a:	d11b      	bne.n	80080b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f06f 0208 	mvn.w	r2, #8
 8008084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2204      	movs	r2, #4
 800808a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fa8f 	bl	80085be <HAL_TIM_IC_CaptureCallback>
 80080a0:	e005      	b.n	80080ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fa81 	bl	80085aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fa92 	bl	80085d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f003 0310 	and.w	r3, r3, #16
 80080be:	2b10      	cmp	r3, #16
 80080c0:	d122      	bne.n	8008108 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f003 0310 	and.w	r3, r3, #16
 80080cc:	2b10      	cmp	r3, #16
 80080ce:	d11b      	bne.n	8008108 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f06f 0210 	mvn.w	r2, #16
 80080d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2208      	movs	r2, #8
 80080de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fa65 	bl	80085be <HAL_TIM_IC_CaptureCallback>
 80080f4:	e005      	b.n	8008102 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fa57 	bl	80085aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fa68 	bl	80085d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b01      	cmp	r3, #1
 8008114:	d10e      	bne.n	8008134 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b01      	cmp	r3, #1
 8008122:	d107      	bne.n	8008134 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f06f 0201 	mvn.w	r2, #1
 800812c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7f9 fa3a 	bl	80015a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800813e:	2b80      	cmp	r3, #128	; 0x80
 8008140:	d10e      	bne.n	8008160 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814c:	2b80      	cmp	r3, #128	; 0x80
 800814e:	d107      	bne.n	8008160 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 ff48 	bl	8008ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800816a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800816e:	d10e      	bne.n	800818e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800817a:	2b80      	cmp	r3, #128	; 0x80
 800817c:	d107      	bne.n	800818e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 ff3b 	bl	8009004 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008198:	2b40      	cmp	r3, #64	; 0x40
 800819a:	d10e      	bne.n	80081ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a6:	2b40      	cmp	r3, #64	; 0x40
 80081a8:	d107      	bne.n	80081ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fa16 	bl	80085e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	f003 0320 	and.w	r3, r3, #32
 80081c4:	2b20      	cmp	r3, #32
 80081c6:	d10e      	bne.n	80081e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	f003 0320 	and.w	r3, r3, #32
 80081d2:	2b20      	cmp	r3, #32
 80081d4:	d107      	bne.n	80081e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f06f 0220 	mvn.w	r2, #32
 80081de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fefb 	bl	8008fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081e6:	bf00      	nop
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008206:	2b01      	cmp	r3, #1
 8008208:	d101      	bne.n	800820e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800820a:	2302      	movs	r3, #2
 800820c:	e0ff      	b.n	800840e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b14      	cmp	r3, #20
 800821a:	f200 80f0 	bhi.w	80083fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800821e:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008224:	08008279 	.word	0x08008279
 8008228:	080083ff 	.word	0x080083ff
 800822c:	080083ff 	.word	0x080083ff
 8008230:	080083ff 	.word	0x080083ff
 8008234:	080082b9 	.word	0x080082b9
 8008238:	080083ff 	.word	0x080083ff
 800823c:	080083ff 	.word	0x080083ff
 8008240:	080083ff 	.word	0x080083ff
 8008244:	080082fb 	.word	0x080082fb
 8008248:	080083ff 	.word	0x080083ff
 800824c:	080083ff 	.word	0x080083ff
 8008250:	080083ff 	.word	0x080083ff
 8008254:	0800833b 	.word	0x0800833b
 8008258:	080083ff 	.word	0x080083ff
 800825c:	080083ff 	.word	0x080083ff
 8008260:	080083ff 	.word	0x080083ff
 8008264:	0800837d 	.word	0x0800837d
 8008268:	080083ff 	.word	0x080083ff
 800826c:	080083ff 	.word	0x080083ff
 8008270:	080083ff 	.word	0x080083ff
 8008274:	080083bd 	.word	0x080083bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68b9      	ldr	r1, [r7, #8]
 800827e:	4618      	mov	r0, r3
 8008280:	f000 fa5a 	bl	8008738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	699a      	ldr	r2, [r3, #24]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0208 	orr.w	r2, r2, #8
 8008292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	699a      	ldr	r2, [r3, #24]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 0204 	bic.w	r2, r2, #4
 80082a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6999      	ldr	r1, [r3, #24]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	691a      	ldr	r2, [r3, #16]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	430a      	orrs	r2, r1
 80082b4:	619a      	str	r2, [r3, #24]
      break;
 80082b6:	e0a5      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68b9      	ldr	r1, [r7, #8]
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fad4 	bl	800886c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	699a      	ldr	r2, [r3, #24]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6999      	ldr	r1, [r3, #24]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	021a      	lsls	r2, r3, #8
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	619a      	str	r2, [r3, #24]
      break;
 80082f8:	e084      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68b9      	ldr	r1, [r7, #8]
 8008300:	4618      	mov	r0, r3
 8008302:	f000 fb47 	bl	8008994 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69da      	ldr	r2, [r3, #28]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f042 0208 	orr.w	r2, r2, #8
 8008314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	69da      	ldr	r2, [r3, #28]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 0204 	bic.w	r2, r2, #4
 8008324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	69d9      	ldr	r1, [r3, #28]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	691a      	ldr	r2, [r3, #16]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	61da      	str	r2, [r3, #28]
      break;
 8008338:	e064      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68b9      	ldr	r1, [r7, #8]
 8008340:	4618      	mov	r0, r3
 8008342:	f000 fbb9 	bl	8008ab8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69da      	ldr	r2, [r3, #28]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	69da      	ldr	r2, [r3, #28]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	69d9      	ldr	r1, [r3, #28]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	021a      	lsls	r2, r3, #8
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	61da      	str	r2, [r3, #28]
      break;
 800837a:	e043      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68b9      	ldr	r1, [r7, #8]
 8008382:	4618      	mov	r0, r3
 8008384:	f000 fc08 	bl	8008b98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f042 0208 	orr.w	r2, r2, #8
 8008396:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 0204 	bic.w	r2, r2, #4
 80083a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	691a      	ldr	r2, [r3, #16]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083ba:	e023      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68b9      	ldr	r1, [r7, #8]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fc52 	bl	8008c6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	021a      	lsls	r2, r3, #8
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	430a      	orrs	r2, r1
 80083fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083fc:	e002      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	75fb      	strb	r3, [r7, #23]
      break;
 8008402:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800840c:	7dfb      	ldrb	r3, [r7, #23]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop

08008418 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800842c:	2b01      	cmp	r3, #1
 800842e:	d101      	bne.n	8008434 <HAL_TIM_ConfigClockSource+0x1c>
 8008430:	2302      	movs	r3, #2
 8008432:	e0b6      	b.n	80085a2 <HAL_TIM_ConfigClockSource+0x18a>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2202      	movs	r2, #2
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008452:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800845e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008470:	d03e      	beq.n	80084f0 <HAL_TIM_ConfigClockSource+0xd8>
 8008472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008476:	f200 8087 	bhi.w	8008588 <HAL_TIM_ConfigClockSource+0x170>
 800847a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800847e:	f000 8086 	beq.w	800858e <HAL_TIM_ConfigClockSource+0x176>
 8008482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008486:	d87f      	bhi.n	8008588 <HAL_TIM_ConfigClockSource+0x170>
 8008488:	2b70      	cmp	r3, #112	; 0x70
 800848a:	d01a      	beq.n	80084c2 <HAL_TIM_ConfigClockSource+0xaa>
 800848c:	2b70      	cmp	r3, #112	; 0x70
 800848e:	d87b      	bhi.n	8008588 <HAL_TIM_ConfigClockSource+0x170>
 8008490:	2b60      	cmp	r3, #96	; 0x60
 8008492:	d050      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x11e>
 8008494:	2b60      	cmp	r3, #96	; 0x60
 8008496:	d877      	bhi.n	8008588 <HAL_TIM_ConfigClockSource+0x170>
 8008498:	2b50      	cmp	r3, #80	; 0x50
 800849a:	d03c      	beq.n	8008516 <HAL_TIM_ConfigClockSource+0xfe>
 800849c:	2b50      	cmp	r3, #80	; 0x50
 800849e:	d873      	bhi.n	8008588 <HAL_TIM_ConfigClockSource+0x170>
 80084a0:	2b40      	cmp	r3, #64	; 0x40
 80084a2:	d058      	beq.n	8008556 <HAL_TIM_ConfigClockSource+0x13e>
 80084a4:	2b40      	cmp	r3, #64	; 0x40
 80084a6:	d86f      	bhi.n	8008588 <HAL_TIM_ConfigClockSource+0x170>
 80084a8:	2b30      	cmp	r3, #48	; 0x30
 80084aa:	d064      	beq.n	8008576 <HAL_TIM_ConfigClockSource+0x15e>
 80084ac:	2b30      	cmp	r3, #48	; 0x30
 80084ae:	d86b      	bhi.n	8008588 <HAL_TIM_ConfigClockSource+0x170>
 80084b0:	2b20      	cmp	r3, #32
 80084b2:	d060      	beq.n	8008576 <HAL_TIM_ConfigClockSource+0x15e>
 80084b4:	2b20      	cmp	r3, #32
 80084b6:	d867      	bhi.n	8008588 <HAL_TIM_ConfigClockSource+0x170>
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d05c      	beq.n	8008576 <HAL_TIM_ConfigClockSource+0x15e>
 80084bc:	2b10      	cmp	r3, #16
 80084be:	d05a      	beq.n	8008576 <HAL_TIM_ConfigClockSource+0x15e>
 80084c0:	e062      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	6899      	ldr	r1, [r3, #8]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	f000 fcb1 	bl	8008e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	609a      	str	r2, [r3, #8]
      break;
 80084ee:	e04f      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6818      	ldr	r0, [r3, #0]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	6899      	ldr	r1, [r3, #8]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f000 fc9a 	bl	8008e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	689a      	ldr	r2, [r3, #8]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008512:	609a      	str	r2, [r3, #8]
      break;
 8008514:	e03c      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	6859      	ldr	r1, [r3, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	461a      	mov	r2, r3
 8008524:	f000 fc0e 	bl	8008d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2150      	movs	r1, #80	; 0x50
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fc67 	bl	8008e02 <TIM_ITRx_SetConfig>
      break;
 8008534:	e02c      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	6859      	ldr	r1, [r3, #4]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	461a      	mov	r2, r3
 8008544:	f000 fc2d 	bl	8008da2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2160      	movs	r1, #96	; 0x60
 800854e:	4618      	mov	r0, r3
 8008550:	f000 fc57 	bl	8008e02 <TIM_ITRx_SetConfig>
      break;
 8008554:	e01c      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6818      	ldr	r0, [r3, #0]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	6859      	ldr	r1, [r3, #4]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	461a      	mov	r2, r3
 8008564:	f000 fbee 	bl	8008d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2140      	movs	r1, #64	; 0x40
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fc47 	bl	8008e02 <TIM_ITRx_SetConfig>
      break;
 8008574:	e00c      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4619      	mov	r1, r3
 8008580:	4610      	mov	r0, r2
 8008582:	f000 fc3e 	bl	8008e02 <TIM_ITRx_SetConfig>
      break;
 8008586:	e003      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	73fb      	strb	r3, [r7, #15]
      break;
 800858c:	e000      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800858e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b083      	sub	sp, #12
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085b2:	bf00      	nop
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085c6:	bf00      	nop
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085da:	bf00      	nop
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085ee:	bf00      	nop
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
	...

080085fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a42      	ldr	r2, [pc, #264]	; (8008718 <TIM_Base_SetConfig+0x11c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d013      	beq.n	800863c <TIM_Base_SetConfig+0x40>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800861a:	d00f      	beq.n	800863c <TIM_Base_SetConfig+0x40>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a3f      	ldr	r2, [pc, #252]	; (800871c <TIM_Base_SetConfig+0x120>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d00b      	beq.n	800863c <TIM_Base_SetConfig+0x40>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a3e      	ldr	r2, [pc, #248]	; (8008720 <TIM_Base_SetConfig+0x124>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d007      	beq.n	800863c <TIM_Base_SetConfig+0x40>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a3d      	ldr	r2, [pc, #244]	; (8008724 <TIM_Base_SetConfig+0x128>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d003      	beq.n	800863c <TIM_Base_SetConfig+0x40>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a3c      	ldr	r2, [pc, #240]	; (8008728 <TIM_Base_SetConfig+0x12c>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d108      	bne.n	800864e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	4313      	orrs	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a31      	ldr	r2, [pc, #196]	; (8008718 <TIM_Base_SetConfig+0x11c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d01f      	beq.n	8008696 <TIM_Base_SetConfig+0x9a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800865c:	d01b      	beq.n	8008696 <TIM_Base_SetConfig+0x9a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a2e      	ldr	r2, [pc, #184]	; (800871c <TIM_Base_SetConfig+0x120>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d017      	beq.n	8008696 <TIM_Base_SetConfig+0x9a>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a2d      	ldr	r2, [pc, #180]	; (8008720 <TIM_Base_SetConfig+0x124>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d013      	beq.n	8008696 <TIM_Base_SetConfig+0x9a>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a2c      	ldr	r2, [pc, #176]	; (8008724 <TIM_Base_SetConfig+0x128>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d00f      	beq.n	8008696 <TIM_Base_SetConfig+0x9a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a2c      	ldr	r2, [pc, #176]	; (800872c <TIM_Base_SetConfig+0x130>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d00b      	beq.n	8008696 <TIM_Base_SetConfig+0x9a>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a2b      	ldr	r2, [pc, #172]	; (8008730 <TIM_Base_SetConfig+0x134>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d007      	beq.n	8008696 <TIM_Base_SetConfig+0x9a>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a2a      	ldr	r2, [pc, #168]	; (8008734 <TIM_Base_SetConfig+0x138>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d003      	beq.n	8008696 <TIM_Base_SetConfig+0x9a>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a25      	ldr	r2, [pc, #148]	; (8008728 <TIM_Base_SetConfig+0x12c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d108      	bne.n	80086a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800869c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a12      	ldr	r2, [pc, #72]	; (8008718 <TIM_Base_SetConfig+0x11c>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d013      	beq.n	80086fc <TIM_Base_SetConfig+0x100>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a13      	ldr	r2, [pc, #76]	; (8008724 <TIM_Base_SetConfig+0x128>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d00f      	beq.n	80086fc <TIM_Base_SetConfig+0x100>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a13      	ldr	r2, [pc, #76]	; (800872c <TIM_Base_SetConfig+0x130>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d00b      	beq.n	80086fc <TIM_Base_SetConfig+0x100>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a12      	ldr	r2, [pc, #72]	; (8008730 <TIM_Base_SetConfig+0x134>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d007      	beq.n	80086fc <TIM_Base_SetConfig+0x100>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a11      	ldr	r2, [pc, #68]	; (8008734 <TIM_Base_SetConfig+0x138>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d003      	beq.n	80086fc <TIM_Base_SetConfig+0x100>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a0c      	ldr	r2, [pc, #48]	; (8008728 <TIM_Base_SetConfig+0x12c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d103      	bne.n	8008704 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	691a      	ldr	r2, [r3, #16]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	615a      	str	r2, [r3, #20]
}
 800870a:	bf00      	nop
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	40012c00 	.word	0x40012c00
 800871c:	40000400 	.word	0x40000400
 8008720:	40000800 	.word	0x40000800
 8008724:	40013400 	.word	0x40013400
 8008728:	40015000 	.word	0x40015000
 800872c:	40014000 	.word	0x40014000
 8008730:	40014400 	.word	0x40014400
 8008734:	40014800 	.word	0x40014800

08008738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	f023 0201 	bic.w	r2, r3, #1
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 0303 	bic.w	r3, r3, #3
 8008772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f023 0302 	bic.w	r3, r3, #2
 8008784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	4313      	orrs	r3, r2
 800878e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a30      	ldr	r2, [pc, #192]	; (8008854 <TIM_OC1_SetConfig+0x11c>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d013      	beq.n	80087c0 <TIM_OC1_SetConfig+0x88>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a2f      	ldr	r2, [pc, #188]	; (8008858 <TIM_OC1_SetConfig+0x120>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d00f      	beq.n	80087c0 <TIM_OC1_SetConfig+0x88>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a2e      	ldr	r2, [pc, #184]	; (800885c <TIM_OC1_SetConfig+0x124>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d00b      	beq.n	80087c0 <TIM_OC1_SetConfig+0x88>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a2d      	ldr	r2, [pc, #180]	; (8008860 <TIM_OC1_SetConfig+0x128>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d007      	beq.n	80087c0 <TIM_OC1_SetConfig+0x88>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a2c      	ldr	r2, [pc, #176]	; (8008864 <TIM_OC1_SetConfig+0x12c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d003      	beq.n	80087c0 <TIM_OC1_SetConfig+0x88>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a2b      	ldr	r2, [pc, #172]	; (8008868 <TIM_OC1_SetConfig+0x130>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d10c      	bne.n	80087da <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f023 0308 	bic.w	r3, r3, #8
 80087c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f023 0304 	bic.w	r3, r3, #4
 80087d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a1d      	ldr	r2, [pc, #116]	; (8008854 <TIM_OC1_SetConfig+0x11c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d013      	beq.n	800880a <TIM_OC1_SetConfig+0xd2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a1c      	ldr	r2, [pc, #112]	; (8008858 <TIM_OC1_SetConfig+0x120>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d00f      	beq.n	800880a <TIM_OC1_SetConfig+0xd2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a1b      	ldr	r2, [pc, #108]	; (800885c <TIM_OC1_SetConfig+0x124>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d00b      	beq.n	800880a <TIM_OC1_SetConfig+0xd2>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a1a      	ldr	r2, [pc, #104]	; (8008860 <TIM_OC1_SetConfig+0x128>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d007      	beq.n	800880a <TIM_OC1_SetConfig+0xd2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a19      	ldr	r2, [pc, #100]	; (8008864 <TIM_OC1_SetConfig+0x12c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d003      	beq.n	800880a <TIM_OC1_SetConfig+0xd2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a18      	ldr	r2, [pc, #96]	; (8008868 <TIM_OC1_SetConfig+0x130>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d111      	bne.n	800882e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	4313      	orrs	r3, r2
 8008822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	4313      	orrs	r3, r2
 800882c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	621a      	str	r2, [r3, #32]
}
 8008848:	bf00      	nop
 800884a:	371c      	adds	r7, #28
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	40012c00 	.word	0x40012c00
 8008858:	40013400 	.word	0x40013400
 800885c:	40014000 	.word	0x40014000
 8008860:	40014400 	.word	0x40014400
 8008864:	40014800 	.word	0x40014800
 8008868:	40015000 	.word	0x40015000

0800886c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	f023 0210 	bic.w	r2, r3, #16
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800889a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800889e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	021b      	lsls	r3, r3, #8
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	f023 0320 	bic.w	r3, r3, #32
 80088ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	011b      	lsls	r3, r3, #4
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a2c      	ldr	r2, [pc, #176]	; (800897c <TIM_OC2_SetConfig+0x110>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d007      	beq.n	80088e0 <TIM_OC2_SetConfig+0x74>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a2b      	ldr	r2, [pc, #172]	; (8008980 <TIM_OC2_SetConfig+0x114>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d003      	beq.n	80088e0 <TIM_OC2_SetConfig+0x74>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a2a      	ldr	r2, [pc, #168]	; (8008984 <TIM_OC2_SetConfig+0x118>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d10d      	bne.n	80088fc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	011b      	lsls	r3, r3, #4
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a1f      	ldr	r2, [pc, #124]	; (800897c <TIM_OC2_SetConfig+0x110>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d013      	beq.n	800892c <TIM_OC2_SetConfig+0xc0>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a1e      	ldr	r2, [pc, #120]	; (8008980 <TIM_OC2_SetConfig+0x114>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d00f      	beq.n	800892c <TIM_OC2_SetConfig+0xc0>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a1e      	ldr	r2, [pc, #120]	; (8008988 <TIM_OC2_SetConfig+0x11c>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d00b      	beq.n	800892c <TIM_OC2_SetConfig+0xc0>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a1d      	ldr	r2, [pc, #116]	; (800898c <TIM_OC2_SetConfig+0x120>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d007      	beq.n	800892c <TIM_OC2_SetConfig+0xc0>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a1c      	ldr	r2, [pc, #112]	; (8008990 <TIM_OC2_SetConfig+0x124>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d003      	beq.n	800892c <TIM_OC2_SetConfig+0xc0>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a17      	ldr	r2, [pc, #92]	; (8008984 <TIM_OC2_SetConfig+0x118>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d113      	bne.n	8008954 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008932:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800893a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	4313      	orrs	r3, r2
 8008946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	4313      	orrs	r3, r2
 8008952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	621a      	str	r2, [r3, #32]
}
 800896e:	bf00      	nop
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	40012c00 	.word	0x40012c00
 8008980:	40013400 	.word	0x40013400
 8008984:	40015000 	.word	0x40015000
 8008988:	40014000 	.word	0x40014000
 800898c:	40014400 	.word	0x40014400
 8008990:	40014800 	.word	0x40014800

08008994 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008994:	b480      	push	{r7}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f023 0303 	bic.w	r3, r3, #3
 80089ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	021b      	lsls	r3, r3, #8
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a2b      	ldr	r2, [pc, #172]	; (8008aa0 <TIM_OC3_SetConfig+0x10c>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d007      	beq.n	8008a06 <TIM_OC3_SetConfig+0x72>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a2a      	ldr	r2, [pc, #168]	; (8008aa4 <TIM_OC3_SetConfig+0x110>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d003      	beq.n	8008a06 <TIM_OC3_SetConfig+0x72>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a29      	ldr	r2, [pc, #164]	; (8008aa8 <TIM_OC3_SetConfig+0x114>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d10d      	bne.n	8008a22 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	021b      	lsls	r3, r3, #8
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a20:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a1e      	ldr	r2, [pc, #120]	; (8008aa0 <TIM_OC3_SetConfig+0x10c>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d013      	beq.n	8008a52 <TIM_OC3_SetConfig+0xbe>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a1d      	ldr	r2, [pc, #116]	; (8008aa4 <TIM_OC3_SetConfig+0x110>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d00f      	beq.n	8008a52 <TIM_OC3_SetConfig+0xbe>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a1d      	ldr	r2, [pc, #116]	; (8008aac <TIM_OC3_SetConfig+0x118>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d00b      	beq.n	8008a52 <TIM_OC3_SetConfig+0xbe>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a1c      	ldr	r2, [pc, #112]	; (8008ab0 <TIM_OC3_SetConfig+0x11c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d007      	beq.n	8008a52 <TIM_OC3_SetConfig+0xbe>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a1b      	ldr	r2, [pc, #108]	; (8008ab4 <TIM_OC3_SetConfig+0x120>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d003      	beq.n	8008a52 <TIM_OC3_SetConfig+0xbe>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a16      	ldr	r2, [pc, #88]	; (8008aa8 <TIM_OC3_SetConfig+0x114>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d113      	bne.n	8008a7a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	011b      	lsls	r3, r3, #4
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	011b      	lsls	r3, r3, #4
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	621a      	str	r2, [r3, #32]
}
 8008a94:	bf00      	nop
 8008a96:	371c      	adds	r7, #28
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	40012c00 	.word	0x40012c00
 8008aa4:	40013400 	.word	0x40013400
 8008aa8:	40015000 	.word	0x40015000
 8008aac:	40014000 	.word	0x40014000
 8008ab0:	40014400 	.word	0x40014400
 8008ab4:	40014800 	.word	0x40014800

08008ab8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	69db      	ldr	r3, [r3, #28]
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	021b      	lsls	r3, r3, #8
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	031b      	lsls	r3, r3, #12
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a1a      	ldr	r2, [pc, #104]	; (8008b80 <TIM_OC4_SetConfig+0xc8>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d013      	beq.n	8008b44 <TIM_OC4_SetConfig+0x8c>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a19      	ldr	r2, [pc, #100]	; (8008b84 <TIM_OC4_SetConfig+0xcc>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d00f      	beq.n	8008b44 <TIM_OC4_SetConfig+0x8c>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a18      	ldr	r2, [pc, #96]	; (8008b88 <TIM_OC4_SetConfig+0xd0>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d00b      	beq.n	8008b44 <TIM_OC4_SetConfig+0x8c>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a17      	ldr	r2, [pc, #92]	; (8008b8c <TIM_OC4_SetConfig+0xd4>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d007      	beq.n	8008b44 <TIM_OC4_SetConfig+0x8c>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a16      	ldr	r2, [pc, #88]	; (8008b90 <TIM_OC4_SetConfig+0xd8>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d003      	beq.n	8008b44 <TIM_OC4_SetConfig+0x8c>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a15      	ldr	r2, [pc, #84]	; (8008b94 <TIM_OC4_SetConfig+0xdc>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d109      	bne.n	8008b58 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	019b      	lsls	r3, r3, #6
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	621a      	str	r2, [r3, #32]
}
 8008b72:	bf00      	nop
 8008b74:	371c      	adds	r7, #28
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	40012c00 	.word	0x40012c00
 8008b84:	40013400 	.word	0x40013400
 8008b88:	40014000 	.word	0x40014000
 8008b8c:	40014400 	.word	0x40014400
 8008b90:	40014800 	.word	0x40014800
 8008b94:	40015000 	.word	0x40015000

08008b98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008bdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	041b      	lsls	r3, r3, #16
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a19      	ldr	r2, [pc, #100]	; (8008c54 <TIM_OC5_SetConfig+0xbc>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d013      	beq.n	8008c1a <TIM_OC5_SetConfig+0x82>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a18      	ldr	r2, [pc, #96]	; (8008c58 <TIM_OC5_SetConfig+0xc0>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d00f      	beq.n	8008c1a <TIM_OC5_SetConfig+0x82>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a17      	ldr	r2, [pc, #92]	; (8008c5c <TIM_OC5_SetConfig+0xc4>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d00b      	beq.n	8008c1a <TIM_OC5_SetConfig+0x82>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a16      	ldr	r2, [pc, #88]	; (8008c60 <TIM_OC5_SetConfig+0xc8>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d007      	beq.n	8008c1a <TIM_OC5_SetConfig+0x82>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a15      	ldr	r2, [pc, #84]	; (8008c64 <TIM_OC5_SetConfig+0xcc>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d003      	beq.n	8008c1a <TIM_OC5_SetConfig+0x82>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a14      	ldr	r2, [pc, #80]	; (8008c68 <TIM_OC5_SetConfig+0xd0>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d109      	bne.n	8008c2e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	021b      	lsls	r3, r3, #8
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	697a      	ldr	r2, [r7, #20]
 8008c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	621a      	str	r2, [r3, #32]
}
 8008c48:	bf00      	nop
 8008c4a:	371c      	adds	r7, #28
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	40012c00 	.word	0x40012c00
 8008c58:	40013400 	.word	0x40013400
 8008c5c:	40014000 	.word	0x40014000
 8008c60:	40014400 	.word	0x40014400
 8008c64:	40014800 	.word	0x40014800
 8008c68:	40015000 	.word	0x40015000

08008c6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b087      	sub	sp, #28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	021b      	lsls	r3, r3, #8
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	051b      	lsls	r3, r3, #20
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a1a      	ldr	r2, [pc, #104]	; (8008d2c <TIM_OC6_SetConfig+0xc0>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d013      	beq.n	8008cf0 <TIM_OC6_SetConfig+0x84>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a19      	ldr	r2, [pc, #100]	; (8008d30 <TIM_OC6_SetConfig+0xc4>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d00f      	beq.n	8008cf0 <TIM_OC6_SetConfig+0x84>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a18      	ldr	r2, [pc, #96]	; (8008d34 <TIM_OC6_SetConfig+0xc8>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d00b      	beq.n	8008cf0 <TIM_OC6_SetConfig+0x84>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a17      	ldr	r2, [pc, #92]	; (8008d38 <TIM_OC6_SetConfig+0xcc>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d007      	beq.n	8008cf0 <TIM_OC6_SetConfig+0x84>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a16      	ldr	r2, [pc, #88]	; (8008d3c <TIM_OC6_SetConfig+0xd0>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d003      	beq.n	8008cf0 <TIM_OC6_SetConfig+0x84>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a15      	ldr	r2, [pc, #84]	; (8008d40 <TIM_OC6_SetConfig+0xd4>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d109      	bne.n	8008d04 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	029b      	lsls	r3, r3, #10
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	621a      	str	r2, [r3, #32]
}
 8008d1e:	bf00      	nop
 8008d20:	371c      	adds	r7, #28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	40012c00 	.word	0x40012c00
 8008d30:	40013400 	.word	0x40013400
 8008d34:	40014000 	.word	0x40014000
 8008d38:	40014400 	.word	0x40014400
 8008d3c:	40014800 	.word	0x40014800
 8008d40:	40015000 	.word	0x40015000

08008d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	f023 0201 	bic.w	r2, r3, #1
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	011b      	lsls	r3, r3, #4
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f023 030a 	bic.w	r3, r3, #10
 8008d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	621a      	str	r2, [r3, #32]
}
 8008d96:	bf00      	nop
 8008d98:	371c      	adds	r7, #28
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b087      	sub	sp, #28
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	60f8      	str	r0, [r7, #12]
 8008daa:	60b9      	str	r1, [r7, #8]
 8008dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	f023 0210 	bic.w	r2, r3, #16
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	031b      	lsls	r3, r3, #12
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008dde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	011b      	lsls	r3, r3, #4
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	621a      	str	r2, [r3, #32]
}
 8008df6:	bf00      	nop
 8008df8:	371c      	adds	r7, #28
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b085      	sub	sp, #20
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	f043 0307 	orr.w	r3, r3, #7
 8008e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	609a      	str	r2, [r3, #8]
}
 8008e2c:	bf00      	nop
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
 8008e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	021a      	lsls	r2, r3, #8
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	609a      	str	r2, [r3, #8]
}
 8008e6c:	bf00      	nop
 8008e6e:	371c      	adds	r7, #28
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	f003 031f 	and.w	r3, r3, #31
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6a1a      	ldr	r2, [r3, #32]
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	43db      	mvns	r3, r3
 8008e9a:	401a      	ands	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6a1a      	ldr	r2, [r3, #32]
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	f003 031f 	and.w	r3, r3, #31
 8008eaa:	6879      	ldr	r1, [r7, #4]
 8008eac:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb0:	431a      	orrs	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	621a      	str	r2, [r3, #32]
}
 8008eb6:	bf00      	nop
 8008eb8:	371c      	adds	r7, #28
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
	...

08008ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d101      	bne.n	8008edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ed8:	2302      	movs	r3, #2
 8008eda:	e06d      	b.n	8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a30      	ldr	r2, [pc, #192]	; (8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d009      	beq.n	8008f1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a2f      	ldr	r2, [pc, #188]	; (8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d004      	beq.n	8008f1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a2d      	ldr	r2, [pc, #180]	; (8008fcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d108      	bne.n	8008f2c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a1e      	ldr	r2, [pc, #120]	; (8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d01d      	beq.n	8008f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f58:	d018      	beq.n	8008f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a1c      	ldr	r2, [pc, #112]	; (8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d013      	beq.n	8008f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a1a      	ldr	r2, [pc, #104]	; (8008fd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d00e      	beq.n	8008f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a15      	ldr	r2, [pc, #84]	; (8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d009      	beq.n	8008f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a16      	ldr	r2, [pc, #88]	; (8008fd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d004      	beq.n	8008f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a11      	ldr	r2, [pc, #68]	; (8008fcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d10c      	bne.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	40012c00 	.word	0x40012c00
 8008fc8:	40013400 	.word	0x40013400
 8008fcc:	40015000 	.word	0x40015000
 8008fd0:	40000400 	.word	0x40000400
 8008fd4:	40000800 	.word	0x40000800
 8008fd8:	40014000 	.word	0x40014000

08008fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e040      	b.n	80090ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800902e:	2b00      	cmp	r3, #0
 8009030:	d106      	bne.n	8009040 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7fa fbec 	bl	8003818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2224      	movs	r2, #36	; 0x24
 8009044:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f022 0201 	bic.w	r2, r2, #1
 8009054:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fb78 	bl	800974c <UART_SetConfig>
 800905c:	4603      	mov	r3, r0
 800905e:	2b01      	cmp	r3, #1
 8009060:	d101      	bne.n	8009066 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e022      	b.n	80090ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	2b00      	cmp	r3, #0
 800906c:	d002      	beq.n	8009074 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fd42 	bl	8009af8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685a      	ldr	r2, [r3, #4]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689a      	ldr	r2, [r3, #8]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f042 0201 	orr.w	r2, r2, #1
 80090a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 fdc9 	bl	8009c3c <UART_CheckIdleState>
 80090aa:	4603      	mov	r3, r0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b08a      	sub	sp, #40	; 0x28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	4613      	mov	r3, r2
 80090c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090c6:	2b20      	cmp	r3, #32
 80090c8:	d13d      	bne.n	8009146 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <HAL_UART_Receive_IT+0x22>
 80090d0:	88fb      	ldrh	r3, [r7, #6]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d101      	bne.n	80090da <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e036      	b.n	8009148 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d101      	bne.n	80090e8 <HAL_UART_Receive_IT+0x34>
 80090e4:	2302      	movs	r3, #2
 80090e6:	e02f      	b.n	8009148 <HAL_UART_Receive_IT+0x94>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d018      	beq.n	8009136 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	e853 3f00 	ldrex	r3, [r3]
 8009110:	613b      	str	r3, [r7, #16]
   return(result);
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009118:	627b      	str	r3, [r7, #36]	; 0x24
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	623b      	str	r3, [r7, #32]
 8009124:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009126:	69f9      	ldr	r1, [r7, #28]
 8009128:	6a3a      	ldr	r2, [r7, #32]
 800912a:	e841 2300 	strex	r3, r2, [r1]
 800912e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1e6      	bne.n	8009104 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009136:	88fb      	ldrh	r3, [r7, #6]
 8009138:	461a      	mov	r2, r3
 800913a:	68b9      	ldr	r1, [r7, #8]
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 fe8b 	bl	8009e58 <UART_Start_Receive_IT>
 8009142:	4603      	mov	r3, r0
 8009144:	e000      	b.n	8009148 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009146:	2302      	movs	r3, #2
  }
}
 8009148:	4618      	mov	r0, r3
 800914a:	3728      	adds	r7, #40	; 0x28
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b0ba      	sub	sp, #232	; 0xe8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009176:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800917a:	f640 030f 	movw	r3, #2063	; 0x80f
 800917e:	4013      	ands	r3, r2
 8009180:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009188:	2b00      	cmp	r3, #0
 800918a:	d115      	bne.n	80091b8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800918c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009190:	f003 0320 	and.w	r3, r3, #32
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00f      	beq.n	80091b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800919c:	f003 0320 	and.w	r3, r3, #32
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d009      	beq.n	80091b8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 82a3 	beq.w	80096f4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	4798      	blx	r3
      }
      return;
 80091b6:	e29d      	b.n	80096f4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80091b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f000 8117 	beq.w	80093f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80091c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d106      	bne.n	80091dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80091ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80091d2:	4b85      	ldr	r3, [pc, #532]	; (80093e8 <HAL_UART_IRQHandler+0x298>)
 80091d4:	4013      	ands	r3, r2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f000 810a 	beq.w	80093f0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d011      	beq.n	800920c <HAL_UART_IRQHandler+0xbc>
 80091e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00b      	beq.n	800920c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2201      	movs	r2, #1
 80091fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009202:	f043 0201 	orr.w	r2, r3, #1
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800920c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009210:	f003 0302 	and.w	r3, r3, #2
 8009214:	2b00      	cmp	r3, #0
 8009216:	d011      	beq.n	800923c <HAL_UART_IRQHandler+0xec>
 8009218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00b      	beq.n	800923c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2202      	movs	r2, #2
 800922a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009232:	f043 0204 	orr.w	r2, r3, #4
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800923c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009240:	f003 0304 	and.w	r3, r3, #4
 8009244:	2b00      	cmp	r3, #0
 8009246:	d011      	beq.n	800926c <HAL_UART_IRQHandler+0x11c>
 8009248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00b      	beq.n	800926c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2204      	movs	r2, #4
 800925a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009262:	f043 0202 	orr.w	r2, r3, #2
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800926c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009270:	f003 0308 	and.w	r3, r3, #8
 8009274:	2b00      	cmp	r3, #0
 8009276:	d017      	beq.n	80092a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800927c:	f003 0320 	and.w	r3, r3, #32
 8009280:	2b00      	cmp	r3, #0
 8009282:	d105      	bne.n	8009290 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009288:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00b      	beq.n	80092a8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2208      	movs	r2, #8
 8009296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800929e:	f043 0208 	orr.w	r2, r3, #8
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80092a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d012      	beq.n	80092da <HAL_UART_IRQHandler+0x18a>
 80092b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00c      	beq.n	80092da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092d0:	f043 0220 	orr.w	r2, r3, #32
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 8209 	beq.w	80096f8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80092e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ea:	f003 0320 	and.w	r3, r3, #32
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00d      	beq.n	800930e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80092f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092f6:	f003 0320 	and.w	r3, r3, #32
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d007      	beq.n	800930e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009302:	2b00      	cmp	r3, #0
 8009304:	d003      	beq.n	800930e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009314:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009322:	2b40      	cmp	r3, #64	; 0x40
 8009324:	d005      	beq.n	8009332 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800932a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800932e:	2b00      	cmp	r3, #0
 8009330:	d04f      	beq.n	80093d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fe3c 	bl	8009fb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009342:	2b40      	cmp	r3, #64	; 0x40
 8009344:	d141      	bne.n	80093ca <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	3308      	adds	r3, #8
 800934c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800935c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3308      	adds	r3, #8
 800936e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009372:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800937e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009382:	e841 2300 	strex	r3, r2, [r1]
 8009386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800938a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1d9      	bne.n	8009346 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009396:	2b00      	cmp	r3, #0
 8009398:	d013      	beq.n	80093c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800939e:	4a13      	ldr	r2, [pc, #76]	; (80093ec <HAL_UART_IRQHandler+0x29c>)
 80093a0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fc fb3c 	bl	8005a24 <HAL_DMA_Abort_IT>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d017      	beq.n	80093e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80093bc:	4610      	mov	r0, r2
 80093be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c0:	e00f      	b.n	80093e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f9ac 	bl	8009720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c8:	e00b      	b.n	80093e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f9a8 	bl	8009720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d0:	e007      	b.n	80093e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f9a4 	bl	8009720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80093e0:	e18a      	b.n	80096f8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e2:	bf00      	nop
    return;
 80093e4:	e188      	b.n	80096f8 <HAL_UART_IRQHandler+0x5a8>
 80093e6:	bf00      	nop
 80093e8:	04000120 	.word	0x04000120
 80093ec:	0800a077 	.word	0x0800a077

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	f040 8143 	bne.w	8009680 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093fe:	f003 0310 	and.w	r3, r3, #16
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 813c 	beq.w	8009680 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800940c:	f003 0310 	and.w	r3, r3, #16
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 8135 	beq.w	8009680 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2210      	movs	r2, #16
 800941c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009428:	2b40      	cmp	r3, #64	; 0x40
 800942a:	f040 80b1 	bne.w	8009590 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800943a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800943e:	2b00      	cmp	r3, #0
 8009440:	f000 815c 	beq.w	80096fc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800944a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800944e:	429a      	cmp	r2, r3
 8009450:	f080 8154 	bcs.w	80096fc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800945a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	2b20      	cmp	r3, #32
 8009466:	f000 8085 	beq.w	8009574 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009476:	e853 3f00 	ldrex	r3, [r3]
 800947a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800947e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009482:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009486:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009494:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009498:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80094a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80094a4:	e841 2300 	strex	r3, r2, [r1]
 80094a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80094ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1da      	bne.n	800946a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3308      	adds	r3, #8
 80094ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094be:	e853 3f00 	ldrex	r3, [r3]
 80094c2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80094c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094c6:	f023 0301 	bic.w	r3, r3, #1
 80094ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3308      	adds	r3, #8
 80094d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80094d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80094dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80094e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80094e4:	e841 2300 	strex	r3, r2, [r1]
 80094e8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80094ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1e1      	bne.n	80094b4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3308      	adds	r3, #8
 80094f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094fa:	e853 3f00 	ldrex	r3, [r3]
 80094fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3308      	adds	r3, #8
 8009510:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009514:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009516:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009518:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800951a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800951c:	e841 2300 	strex	r3, r2, [r1]
 8009520:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1e3      	bne.n	80094f0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2220      	movs	r2, #32
 800952c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800953c:	e853 3f00 	ldrex	r3, [r3]
 8009540:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009544:	f023 0310 	bic.w	r3, r3, #16
 8009548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	461a      	mov	r2, r3
 8009552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009556:	65bb      	str	r3, [r7, #88]	; 0x58
 8009558:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800955c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e4      	bne.n	8009534 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800956e:	4618      	mov	r0, r3
 8009570:	f7fc fa1f 	bl	80059b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009580:	b29b      	uxth	r3, r3
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	b29b      	uxth	r3, r3
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f8d3 	bl	8009734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800958e:	e0b5      	b.n	80096fc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800959c:	b29b      	uxth	r3, r3
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 80a7 	beq.w	8009700 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80095b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f000 80a2 	beq.w	8009700 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c4:	e853 3f00 	ldrex	r3, [r3]
 80095c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	461a      	mov	r2, r3
 80095da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095de:	647b      	str	r3, [r7, #68]	; 0x44
 80095e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e4      	bne.n	80095bc <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3308      	adds	r3, #8
 80095f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	623b      	str	r3, [r7, #32]
   return(result);
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	f023 0301 	bic.w	r3, r3, #1
 8009608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3308      	adds	r3, #8
 8009612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009616:	633a      	str	r2, [r7, #48]	; 0x30
 8009618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800961c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1e3      	bne.n	80095f2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2220      	movs	r2, #32
 800962e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	60fb      	str	r3, [r7, #12]
   return(result);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f023 0310 	bic.w	r3, r3, #16
 8009650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	461a      	mov	r2, r3
 800965a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800965e:	61fb      	str	r3, [r7, #28]
 8009660:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009662:	69b9      	ldr	r1, [r7, #24]
 8009664:	69fa      	ldr	r2, [r7, #28]
 8009666:	e841 2300 	strex	r3, r2, [r1]
 800966a:	617b      	str	r3, [r7, #20]
   return(result);
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1e4      	bne.n	800963c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009672:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f85b 	bl	8009734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800967e:	e03f      	b.n	8009700 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00e      	beq.n	80096aa <HAL_UART_IRQHandler+0x55a>
 800968c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d008      	beq.n	80096aa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80096a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fe83 	bl	800a3ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096a8:	e02d      	b.n	8009706 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80096aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00e      	beq.n	80096d4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80096b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d008      	beq.n	80096d4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d01c      	beq.n	8009704 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	4798      	blx	r3
    }
    return;
 80096d2:	e017      	b.n	8009704 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80096d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d012      	beq.n	8009706 <HAL_UART_IRQHandler+0x5b6>
 80096e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00c      	beq.n	8009706 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fcd8 	bl	800a0a2 <UART_EndTransmit_IT>
    return;
 80096f2:	e008      	b.n	8009706 <HAL_UART_IRQHandler+0x5b6>
      return;
 80096f4:	bf00      	nop
 80096f6:	e006      	b.n	8009706 <HAL_UART_IRQHandler+0x5b6>
    return;
 80096f8:	bf00      	nop
 80096fa:	e004      	b.n	8009706 <HAL_UART_IRQHandler+0x5b6>
      return;
 80096fc:	bf00      	nop
 80096fe:	e002      	b.n	8009706 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009700:	bf00      	nop
 8009702:	e000      	b.n	8009706 <HAL_UART_IRQHandler+0x5b6>
    return;
 8009704:	bf00      	nop
  }

}
 8009706:	37e8      	adds	r7, #232	; 0xe8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	460b      	mov	r3, r1
 800973e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b088      	sub	sp, #32
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	431a      	orrs	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	431a      	orrs	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	69db      	ldr	r3, [r3, #28]
 800976c:	4313      	orrs	r3, r2
 800976e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	4b92      	ldr	r3, [pc, #584]	; (80099c0 <UART_SetConfig+0x274>)
 8009778:	4013      	ands	r3, r2
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	6812      	ldr	r2, [r2, #0]
 800977e:	6979      	ldr	r1, [r7, #20]
 8009780:	430b      	orrs	r3, r1
 8009782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68da      	ldr	r2, [r3, #12]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a80      	ldr	r2, [pc, #512]	; (80099c4 <UART_SetConfig+0x278>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d120      	bne.n	800980a <UART_SetConfig+0xbe>
 80097c8:	4b7f      	ldr	r3, [pc, #508]	; (80099c8 <UART_SetConfig+0x27c>)
 80097ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097cc:	f003 0303 	and.w	r3, r3, #3
 80097d0:	2b03      	cmp	r3, #3
 80097d2:	d817      	bhi.n	8009804 <UART_SetConfig+0xb8>
 80097d4:	a201      	add	r2, pc, #4	; (adr r2, 80097dc <UART_SetConfig+0x90>)
 80097d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097da:	bf00      	nop
 80097dc:	080097ed 	.word	0x080097ed
 80097e0:	080097f9 	.word	0x080097f9
 80097e4:	080097ff 	.word	0x080097ff
 80097e8:	080097f3 	.word	0x080097f3
 80097ec:	2301      	movs	r3, #1
 80097ee:	77fb      	strb	r3, [r7, #31]
 80097f0:	e0b5      	b.n	800995e <UART_SetConfig+0x212>
 80097f2:	2302      	movs	r3, #2
 80097f4:	77fb      	strb	r3, [r7, #31]
 80097f6:	e0b2      	b.n	800995e <UART_SetConfig+0x212>
 80097f8:	2304      	movs	r3, #4
 80097fa:	77fb      	strb	r3, [r7, #31]
 80097fc:	e0af      	b.n	800995e <UART_SetConfig+0x212>
 80097fe:	2308      	movs	r3, #8
 8009800:	77fb      	strb	r3, [r7, #31]
 8009802:	e0ac      	b.n	800995e <UART_SetConfig+0x212>
 8009804:	2310      	movs	r3, #16
 8009806:	77fb      	strb	r3, [r7, #31]
 8009808:	e0a9      	b.n	800995e <UART_SetConfig+0x212>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a6f      	ldr	r2, [pc, #444]	; (80099cc <UART_SetConfig+0x280>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d124      	bne.n	800985e <UART_SetConfig+0x112>
 8009814:	4b6c      	ldr	r3, [pc, #432]	; (80099c8 <UART_SetConfig+0x27c>)
 8009816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800981c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009820:	d011      	beq.n	8009846 <UART_SetConfig+0xfa>
 8009822:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009826:	d817      	bhi.n	8009858 <UART_SetConfig+0x10c>
 8009828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800982c:	d011      	beq.n	8009852 <UART_SetConfig+0x106>
 800982e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009832:	d811      	bhi.n	8009858 <UART_SetConfig+0x10c>
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <UART_SetConfig+0xf4>
 8009838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800983c:	d006      	beq.n	800984c <UART_SetConfig+0x100>
 800983e:	e00b      	b.n	8009858 <UART_SetConfig+0x10c>
 8009840:	2300      	movs	r3, #0
 8009842:	77fb      	strb	r3, [r7, #31]
 8009844:	e08b      	b.n	800995e <UART_SetConfig+0x212>
 8009846:	2302      	movs	r3, #2
 8009848:	77fb      	strb	r3, [r7, #31]
 800984a:	e088      	b.n	800995e <UART_SetConfig+0x212>
 800984c:	2304      	movs	r3, #4
 800984e:	77fb      	strb	r3, [r7, #31]
 8009850:	e085      	b.n	800995e <UART_SetConfig+0x212>
 8009852:	2308      	movs	r3, #8
 8009854:	77fb      	strb	r3, [r7, #31]
 8009856:	e082      	b.n	800995e <UART_SetConfig+0x212>
 8009858:	2310      	movs	r3, #16
 800985a:	77fb      	strb	r3, [r7, #31]
 800985c:	e07f      	b.n	800995e <UART_SetConfig+0x212>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a5b      	ldr	r2, [pc, #364]	; (80099d0 <UART_SetConfig+0x284>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d124      	bne.n	80098b2 <UART_SetConfig+0x166>
 8009868:	4b57      	ldr	r3, [pc, #348]	; (80099c8 <UART_SetConfig+0x27c>)
 800986a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009870:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009874:	d011      	beq.n	800989a <UART_SetConfig+0x14e>
 8009876:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800987a:	d817      	bhi.n	80098ac <UART_SetConfig+0x160>
 800987c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009880:	d011      	beq.n	80098a6 <UART_SetConfig+0x15a>
 8009882:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009886:	d811      	bhi.n	80098ac <UART_SetConfig+0x160>
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <UART_SetConfig+0x148>
 800988c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009890:	d006      	beq.n	80098a0 <UART_SetConfig+0x154>
 8009892:	e00b      	b.n	80098ac <UART_SetConfig+0x160>
 8009894:	2300      	movs	r3, #0
 8009896:	77fb      	strb	r3, [r7, #31]
 8009898:	e061      	b.n	800995e <UART_SetConfig+0x212>
 800989a:	2302      	movs	r3, #2
 800989c:	77fb      	strb	r3, [r7, #31]
 800989e:	e05e      	b.n	800995e <UART_SetConfig+0x212>
 80098a0:	2304      	movs	r3, #4
 80098a2:	77fb      	strb	r3, [r7, #31]
 80098a4:	e05b      	b.n	800995e <UART_SetConfig+0x212>
 80098a6:	2308      	movs	r3, #8
 80098a8:	77fb      	strb	r3, [r7, #31]
 80098aa:	e058      	b.n	800995e <UART_SetConfig+0x212>
 80098ac:	2310      	movs	r3, #16
 80098ae:	77fb      	strb	r3, [r7, #31]
 80098b0:	e055      	b.n	800995e <UART_SetConfig+0x212>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a47      	ldr	r2, [pc, #284]	; (80099d4 <UART_SetConfig+0x288>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d124      	bne.n	8009906 <UART_SetConfig+0x1ba>
 80098bc:	4b42      	ldr	r3, [pc, #264]	; (80099c8 <UART_SetConfig+0x27c>)
 80098be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80098c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098c8:	d011      	beq.n	80098ee <UART_SetConfig+0x1a2>
 80098ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098ce:	d817      	bhi.n	8009900 <UART_SetConfig+0x1b4>
 80098d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098d4:	d011      	beq.n	80098fa <UART_SetConfig+0x1ae>
 80098d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098da:	d811      	bhi.n	8009900 <UART_SetConfig+0x1b4>
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <UART_SetConfig+0x19c>
 80098e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098e4:	d006      	beq.n	80098f4 <UART_SetConfig+0x1a8>
 80098e6:	e00b      	b.n	8009900 <UART_SetConfig+0x1b4>
 80098e8:	2300      	movs	r3, #0
 80098ea:	77fb      	strb	r3, [r7, #31]
 80098ec:	e037      	b.n	800995e <UART_SetConfig+0x212>
 80098ee:	2302      	movs	r3, #2
 80098f0:	77fb      	strb	r3, [r7, #31]
 80098f2:	e034      	b.n	800995e <UART_SetConfig+0x212>
 80098f4:	2304      	movs	r3, #4
 80098f6:	77fb      	strb	r3, [r7, #31]
 80098f8:	e031      	b.n	800995e <UART_SetConfig+0x212>
 80098fa:	2308      	movs	r3, #8
 80098fc:	77fb      	strb	r3, [r7, #31]
 80098fe:	e02e      	b.n	800995e <UART_SetConfig+0x212>
 8009900:	2310      	movs	r3, #16
 8009902:	77fb      	strb	r3, [r7, #31]
 8009904:	e02b      	b.n	800995e <UART_SetConfig+0x212>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a33      	ldr	r2, [pc, #204]	; (80099d8 <UART_SetConfig+0x28c>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d124      	bne.n	800995a <UART_SetConfig+0x20e>
 8009910:	4b2d      	ldr	r3, [pc, #180]	; (80099c8 <UART_SetConfig+0x27c>)
 8009912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009914:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009918:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800991c:	d011      	beq.n	8009942 <UART_SetConfig+0x1f6>
 800991e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009922:	d817      	bhi.n	8009954 <UART_SetConfig+0x208>
 8009924:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009928:	d011      	beq.n	800994e <UART_SetConfig+0x202>
 800992a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800992e:	d811      	bhi.n	8009954 <UART_SetConfig+0x208>
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <UART_SetConfig+0x1f0>
 8009934:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009938:	d006      	beq.n	8009948 <UART_SetConfig+0x1fc>
 800993a:	e00b      	b.n	8009954 <UART_SetConfig+0x208>
 800993c:	2300      	movs	r3, #0
 800993e:	77fb      	strb	r3, [r7, #31]
 8009940:	e00d      	b.n	800995e <UART_SetConfig+0x212>
 8009942:	2302      	movs	r3, #2
 8009944:	77fb      	strb	r3, [r7, #31]
 8009946:	e00a      	b.n	800995e <UART_SetConfig+0x212>
 8009948:	2304      	movs	r3, #4
 800994a:	77fb      	strb	r3, [r7, #31]
 800994c:	e007      	b.n	800995e <UART_SetConfig+0x212>
 800994e:	2308      	movs	r3, #8
 8009950:	77fb      	strb	r3, [r7, #31]
 8009952:	e004      	b.n	800995e <UART_SetConfig+0x212>
 8009954:	2310      	movs	r3, #16
 8009956:	77fb      	strb	r3, [r7, #31]
 8009958:	e001      	b.n	800995e <UART_SetConfig+0x212>
 800995a:	2310      	movs	r3, #16
 800995c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009966:	d16c      	bne.n	8009a42 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8009968:	7ffb      	ldrb	r3, [r7, #31]
 800996a:	2b08      	cmp	r3, #8
 800996c:	d838      	bhi.n	80099e0 <UART_SetConfig+0x294>
 800996e:	a201      	add	r2, pc, #4	; (adr r2, 8009974 <UART_SetConfig+0x228>)
 8009970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009974:	08009999 	.word	0x08009999
 8009978:	080099a1 	.word	0x080099a1
 800997c:	080099a9 	.word	0x080099a9
 8009980:	080099e1 	.word	0x080099e1
 8009984:	080099af 	.word	0x080099af
 8009988:	080099e1 	.word	0x080099e1
 800998c:	080099e1 	.word	0x080099e1
 8009990:	080099e1 	.word	0x080099e1
 8009994:	080099b7 	.word	0x080099b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009998:	f7fd fd78 	bl	800748c <HAL_RCC_GetPCLK1Freq>
 800999c:	61b8      	str	r0, [r7, #24]
        break;
 800999e:	e024      	b.n	80099ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099a0:	f7fd fd96 	bl	80074d0 <HAL_RCC_GetPCLK2Freq>
 80099a4:	61b8      	str	r0, [r7, #24]
        break;
 80099a6:	e020      	b.n	80099ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099a8:	4b0c      	ldr	r3, [pc, #48]	; (80099dc <UART_SetConfig+0x290>)
 80099aa:	61bb      	str	r3, [r7, #24]
        break;
 80099ac:	e01d      	b.n	80099ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099ae:	f7fd fcf7 	bl	80073a0 <HAL_RCC_GetSysClockFreq>
 80099b2:	61b8      	str	r0, [r7, #24]
        break;
 80099b4:	e019      	b.n	80099ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099ba:	61bb      	str	r3, [r7, #24]
        break;
 80099bc:	e015      	b.n	80099ea <UART_SetConfig+0x29e>
 80099be:	bf00      	nop
 80099c0:	efff69f3 	.word	0xefff69f3
 80099c4:	40013800 	.word	0x40013800
 80099c8:	40021000 	.word	0x40021000
 80099cc:	40004400 	.word	0x40004400
 80099d0:	40004800 	.word	0x40004800
 80099d4:	40004c00 	.word	0x40004c00
 80099d8:	40005000 	.word	0x40005000
 80099dc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	77bb      	strb	r3, [r7, #30]
        break;
 80099e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d075      	beq.n	8009adc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	005a      	lsls	r2, r3, #1
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	085b      	lsrs	r3, r3, #1
 80099fa:	441a      	add	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	2b0f      	cmp	r3, #15
 8009a0c:	d916      	bls.n	8009a3c <UART_SetConfig+0x2f0>
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a14:	d212      	bcs.n	8009a3c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	f023 030f 	bic.w	r3, r3, #15
 8009a1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	085b      	lsrs	r3, r3, #1
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	89fb      	ldrh	r3, [r7, #14]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	89fa      	ldrh	r2, [r7, #14]
 8009a38:	60da      	str	r2, [r3, #12]
 8009a3a:	e04f      	b.n	8009adc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	77bb      	strb	r3, [r7, #30]
 8009a40:	e04c      	b.n	8009adc <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a42:	7ffb      	ldrb	r3, [r7, #31]
 8009a44:	2b08      	cmp	r3, #8
 8009a46:	d828      	bhi.n	8009a9a <UART_SetConfig+0x34e>
 8009a48:	a201      	add	r2, pc, #4	; (adr r2, 8009a50 <UART_SetConfig+0x304>)
 8009a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4e:	bf00      	nop
 8009a50:	08009a75 	.word	0x08009a75
 8009a54:	08009a7d 	.word	0x08009a7d
 8009a58:	08009a85 	.word	0x08009a85
 8009a5c:	08009a9b 	.word	0x08009a9b
 8009a60:	08009a8b 	.word	0x08009a8b
 8009a64:	08009a9b 	.word	0x08009a9b
 8009a68:	08009a9b 	.word	0x08009a9b
 8009a6c:	08009a9b 	.word	0x08009a9b
 8009a70:	08009a93 	.word	0x08009a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a74:	f7fd fd0a 	bl	800748c <HAL_RCC_GetPCLK1Freq>
 8009a78:	61b8      	str	r0, [r7, #24]
        break;
 8009a7a:	e013      	b.n	8009aa4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a7c:	f7fd fd28 	bl	80074d0 <HAL_RCC_GetPCLK2Freq>
 8009a80:	61b8      	str	r0, [r7, #24]
        break;
 8009a82:	e00f      	b.n	8009aa4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a84:	4b1b      	ldr	r3, [pc, #108]	; (8009af4 <UART_SetConfig+0x3a8>)
 8009a86:	61bb      	str	r3, [r7, #24]
        break;
 8009a88:	e00c      	b.n	8009aa4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a8a:	f7fd fc89 	bl	80073a0 <HAL_RCC_GetSysClockFreq>
 8009a8e:	61b8      	str	r0, [r7, #24]
        break;
 8009a90:	e008      	b.n	8009aa4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a96:	61bb      	str	r3, [r7, #24]
        break;
 8009a98:	e004      	b.n	8009aa4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	77bb      	strb	r3, [r7, #30]
        break;
 8009aa2:	bf00      	nop
    }

    if (pclk != 0U)
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d018      	beq.n	8009adc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	085a      	lsrs	r2, r3, #1
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	441a      	add	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	2b0f      	cmp	r3, #15
 8009ac4:	d908      	bls.n	8009ad8 <UART_SetConfig+0x38c>
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009acc:	d204      	bcs.n	8009ad8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	693a      	ldr	r2, [r7, #16]
 8009ad4:	60da      	str	r2, [r3, #12]
 8009ad6:	e001      	b.n	8009adc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009ae8:	7fbb      	ldrb	r3, [r7, #30]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3720      	adds	r7, #32
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	007a1200 	.word	0x007a1200

08009af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00a      	beq.n	8009b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	f003 0302 	and.w	r3, r3, #2
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	430a      	orrs	r2, r1
 8009b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b48:	f003 0304 	and.w	r3, r3, #4
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00a      	beq.n	8009b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6a:	f003 0308 	and.w	r3, r3, #8
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00a      	beq.n	8009b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	430a      	orrs	r2, r1
 8009b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	f003 0310 	and.w	r3, r3, #16
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00a      	beq.n	8009baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	f003 0320 	and.w	r3, r3, #32
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	430a      	orrs	r2, r1
 8009bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d01a      	beq.n	8009c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	430a      	orrs	r2, r1
 8009bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bf6:	d10a      	bne.n	8009c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00a      	beq.n	8009c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	605a      	str	r2, [r3, #4]
  }
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af02      	add	r7, sp, #8
 8009c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c4c:	f7f9 ff5c 	bl	8003b08 <HAL_GetTick>
 8009c50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 0308 	and.w	r3, r3, #8
 8009c5c:	2b08      	cmp	r3, #8
 8009c5e:	d10e      	bne.n	8009c7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f82d 	bl	8009cce <UART_WaitOnFlagUntilTimeout>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e023      	b.n	8009cc6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0304 	and.w	r3, r3, #4
 8009c88:	2b04      	cmp	r3, #4
 8009c8a:	d10e      	bne.n	8009caa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f817 	bl	8009cce <UART_WaitOnFlagUntilTimeout>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d001      	beq.n	8009caa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e00d      	b.n	8009cc6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2220      	movs	r2, #32
 8009cae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b09c      	sub	sp, #112	; 0x70
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	603b      	str	r3, [r7, #0]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cde:	e0a5      	b.n	8009e2c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce6:	f000 80a1 	beq.w	8009e2c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cea:	f7f9 ff0d 	bl	8003b08 <HAL_GetTick>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d302      	bcc.n	8009d00 <UART_WaitOnFlagUntilTimeout+0x32>
 8009cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d13e      	bne.n	8009d7e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d08:	e853 3f00 	ldrex	r3, [r3]
 8009d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d14:	667b      	str	r3, [r7, #100]	; 0x64
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d20:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1e6      	bne.n	8009d00 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3308      	adds	r3, #8
 8009d38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d3c:	e853 3f00 	ldrex	r3, [r3]
 8009d40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d44:	f023 0301 	bic.w	r3, r3, #1
 8009d48:	663b      	str	r3, [r7, #96]	; 0x60
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3308      	adds	r3, #8
 8009d50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d52:	64ba      	str	r2, [r7, #72]	; 0x48
 8009d54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d5a:	e841 2300 	strex	r3, r2, [r1]
 8009d5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1e5      	bne.n	8009d32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2220      	movs	r2, #32
 8009d6a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2220      	movs	r2, #32
 8009d70:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e067      	b.n	8009e4e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 0304 	and.w	r3, r3, #4
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d04f      	beq.n	8009e2c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d9a:	d147      	bne.n	8009e2c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009da4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dae:	e853 3f00 	ldrex	r3, [r3]
 8009db2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009dba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8009dc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dcc:	e841 2300 	strex	r3, r2, [r1]
 8009dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1e6      	bne.n	8009da6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3308      	adds	r3, #8
 8009dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	e853 3f00 	ldrex	r3, [r3]
 8009de6:	613b      	str	r3, [r7, #16]
   return(result);
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	f023 0301 	bic.w	r3, r3, #1
 8009dee:	66bb      	str	r3, [r7, #104]	; 0x68
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3308      	adds	r3, #8
 8009df6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009df8:	623a      	str	r2, [r7, #32]
 8009dfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfc:	69f9      	ldr	r1, [r7, #28]
 8009dfe:	6a3a      	ldr	r2, [r7, #32]
 8009e00:	e841 2300 	strex	r3, r2, [r1]
 8009e04:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1e5      	bne.n	8009dd8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2220      	movs	r2, #32
 8009e10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2220      	movs	r2, #32
 8009e16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	e010      	b.n	8009e4e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	69da      	ldr	r2, [r3, #28]
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	4013      	ands	r3, r2
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	bf0c      	ite	eq
 8009e3c:	2301      	moveq	r3, #1
 8009e3e:	2300      	movne	r3, #0
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	461a      	mov	r2, r3
 8009e44:	79fb      	ldrb	r3, [r7, #7]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	f43f af4a 	beq.w	8009ce0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3770      	adds	r7, #112	; 0x70
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
	...

08009e58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b091      	sub	sp, #68	; 0x44
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	4613      	mov	r3, r2
 8009e64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	88fa      	ldrh	r2, [r7, #6]
 8009e70:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	88fa      	ldrh	r2, [r7, #6]
 8009e78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e8a:	d10e      	bne.n	8009eaa <UART_Start_Receive_IT+0x52>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d105      	bne.n	8009ea0 <UART_Start_Receive_IT+0x48>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009e9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e9e:	e02d      	b.n	8009efc <UART_Start_Receive_IT+0xa4>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	22ff      	movs	r2, #255	; 0xff
 8009ea4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ea8:	e028      	b.n	8009efc <UART_Start_Receive_IT+0xa4>
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10d      	bne.n	8009ece <UART_Start_Receive_IT+0x76>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d104      	bne.n	8009ec4 <UART_Start_Receive_IT+0x6c>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	22ff      	movs	r2, #255	; 0xff
 8009ebe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ec2:	e01b      	b.n	8009efc <UART_Start_Receive_IT+0xa4>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	227f      	movs	r2, #127	; 0x7f
 8009ec8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ecc:	e016      	b.n	8009efc <UART_Start_Receive_IT+0xa4>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ed6:	d10d      	bne.n	8009ef4 <UART_Start_Receive_IT+0x9c>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d104      	bne.n	8009eea <UART_Start_Receive_IT+0x92>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	227f      	movs	r2, #127	; 0x7f
 8009ee4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ee8:	e008      	b.n	8009efc <UART_Start_Receive_IT+0xa4>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	223f      	movs	r2, #63	; 0x3f
 8009eee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ef2:	e003      	b.n	8009efc <UART_Start_Receive_IT+0xa4>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2222      	movs	r2, #34	; 0x22
 8009f08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	3308      	adds	r3, #8
 8009f10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	e853 3f00 	ldrex	r3, [r3]
 8009f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1c:	f043 0301 	orr.w	r3, r3, #1
 8009f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	3308      	adds	r3, #8
 8009f28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f2a:	637a      	str	r2, [r7, #52]	; 0x34
 8009f2c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f32:	e841 2300 	strex	r3, r2, [r1]
 8009f36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1e5      	bne.n	8009f0a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f46:	d107      	bne.n	8009f58 <UART_Start_Receive_IT+0x100>
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d103      	bne.n	8009f58 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	4a15      	ldr	r2, [pc, #84]	; (8009fa8 <UART_Start_Receive_IT+0x150>)
 8009f54:	665a      	str	r2, [r3, #100]	; 0x64
 8009f56:	e002      	b.n	8009f5e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4a14      	ldr	r2, [pc, #80]	; (8009fac <UART_Start_Receive_IT+0x154>)
 8009f5c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	e853 3f00 	ldrex	r3, [r3]
 8009f72:	613b      	str	r3, [r7, #16]
   return(result);
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	461a      	mov	r2, r3
 8009f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f84:	623b      	str	r3, [r7, #32]
 8009f86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f88:	69f9      	ldr	r1, [r7, #28]
 8009f8a:	6a3a      	ldr	r2, [r7, #32]
 8009f8c:	e841 2300 	strex	r3, r2, [r1]
 8009f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1e6      	bne.n	8009f66 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3744      	adds	r7, #68	; 0x44
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	0800a253 	.word	0x0800a253
 8009fac:	0800a0f7 	.word	0x0800a0f7

08009fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b095      	sub	sp, #84	; 0x54
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc0:	e853 3f00 	ldrex	r3, [r3]
 8009fc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8009fd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fde:	e841 2300 	strex	r3, r2, [r1]
 8009fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1e6      	bne.n	8009fb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3308      	adds	r3, #8
 8009ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	e853 3f00 	ldrex	r3, [r3]
 8009ff8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	f023 0301 	bic.w	r3, r3, #1
 800a000:	64bb      	str	r3, [r7, #72]	; 0x48
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3308      	adds	r3, #8
 800a008:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a00a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a00c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a012:	e841 2300 	strex	r3, r2, [r1]
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1e5      	bne.n	8009fea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a022:	2b01      	cmp	r3, #1
 800a024:	d118      	bne.n	800a058 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	e853 3f00 	ldrex	r3, [r3]
 800a032:	60bb      	str	r3, [r7, #8]
   return(result);
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	f023 0310 	bic.w	r3, r3, #16
 800a03a:	647b      	str	r3, [r7, #68]	; 0x44
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	461a      	mov	r2, r3
 800a042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a044:	61bb      	str	r3, [r7, #24]
 800a046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a048:	6979      	ldr	r1, [r7, #20]
 800a04a:	69ba      	ldr	r2, [r7, #24]
 800a04c:	e841 2300 	strex	r3, r2, [r1]
 800a050:	613b      	str	r3, [r7, #16]
   return(result);
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1e6      	bne.n	800a026 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2220      	movs	r2, #32
 800a05c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a06a:	bf00      	nop
 800a06c:	3754      	adds	r7, #84	; 0x54
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a082:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f7ff fb43 	bl	8009720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a09a:	bf00      	nop
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b088      	sub	sp, #32
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	e853 3f00 	ldrex	r3, [r3]
 800a0b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0be:	61fb      	str	r3, [r7, #28]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	61bb      	str	r3, [r7, #24]
 800a0ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0cc:	6979      	ldr	r1, [r7, #20]
 800a0ce:	69ba      	ldr	r2, [r7, #24]
 800a0d0:	e841 2300 	strex	r3, r2, [r1]
 800a0d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1e6      	bne.n	800a0aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2220      	movs	r2, #32
 800a0e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7ff fb0f 	bl	800970c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0ee:	bf00      	nop
 800a0f0:	3720      	adds	r7, #32
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b096      	sub	sp, #88	; 0x58
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a104:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a10c:	2b22      	cmp	r3, #34	; 0x22
 800a10e:	f040 8094 	bne.w	800a23a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a118:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a11c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a120:	b2d9      	uxtb	r1, r3
 800a122:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a126:	b2da      	uxtb	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12c:	400a      	ands	r2, r1
 800a12e:	b2d2      	uxtb	r2, r2
 800a130:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a142:	b29b      	uxth	r3, r3
 800a144:	3b01      	subs	r3, #1
 800a146:	b29a      	uxth	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a154:	b29b      	uxth	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	d177      	bne.n	800a24a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a162:	e853 3f00 	ldrex	r3, [r3]
 800a166:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a16a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a16e:	653b      	str	r3, [r7, #80]	; 0x50
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	461a      	mov	r2, r3
 800a176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a178:	647b      	str	r3, [r7, #68]	; 0x44
 800a17a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a17e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e6      	bne.n	800a15a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3308      	adds	r3, #8
 800a192:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	e853 3f00 	ldrex	r3, [r3]
 800a19a:	623b      	str	r3, [r7, #32]
   return(result);
 800a19c:	6a3b      	ldr	r3, [r7, #32]
 800a19e:	f023 0301 	bic.w	r3, r3, #1
 800a1a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1ac:	633a      	str	r2, [r7, #48]	; 0x30
 800a1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e5      	bne.n	800a18c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2220      	movs	r2, #32
 800a1c4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d12e      	bne.n	800a232 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	e853 3f00 	ldrex	r3, [r3]
 800a1e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f023 0310 	bic.w	r3, r3, #16
 800a1ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1f8:	61fb      	str	r3, [r7, #28]
 800a1fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fc:	69b9      	ldr	r1, [r7, #24]
 800a1fe:	69fa      	ldr	r2, [r7, #28]
 800a200:	e841 2300 	strex	r3, r2, [r1]
 800a204:	617b      	str	r3, [r7, #20]
   return(result);
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1e6      	bne.n	800a1da <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	69db      	ldr	r3, [r3, #28]
 800a212:	f003 0310 	and.w	r3, r3, #16
 800a216:	2b10      	cmp	r3, #16
 800a218:	d103      	bne.n	800a222 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2210      	movs	r2, #16
 800a220:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a228:	4619      	mov	r1, r3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7ff fa82 	bl	8009734 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a230:	e00b      	b.n	800a24a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7f7 fa48 	bl	80016c8 <HAL_UART_RxCpltCallback>
}
 800a238:	e007      	b.n	800a24a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	699a      	ldr	r2, [r3, #24]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f042 0208 	orr.w	r2, r2, #8
 800a248:	619a      	str	r2, [r3, #24]
}
 800a24a:	bf00      	nop
 800a24c:	3758      	adds	r7, #88	; 0x58
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b096      	sub	sp, #88	; 0x58
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a260:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a268:	2b22      	cmp	r3, #34	; 0x22
 800a26a:	f040 8094 	bne.w	800a396 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a274:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a27c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a27e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a282:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a286:	4013      	ands	r3, r2
 800a288:	b29a      	uxth	r2, r3
 800a28a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a28c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a292:	1c9a      	adds	r2, r3, #2
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d177      	bne.n	800a3a6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2be:	e853 3f00 	ldrex	r3, [r3]
 800a2c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2d4:	643b      	str	r3, [r7, #64]	; 0x40
 800a2d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2dc:	e841 2300 	strex	r3, r2, [r1]
 800a2e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1e6      	bne.n	800a2b6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3308      	adds	r3, #8
 800a2ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	e853 3f00 	ldrex	r3, [r3]
 800a2f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	f023 0301 	bic.w	r3, r3, #1
 800a2fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3308      	adds	r3, #8
 800a306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a308:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a30a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a30e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a310:	e841 2300 	strex	r3, r2, [r1]
 800a314:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e5      	bne.n	800a2e8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2220      	movs	r2, #32
 800a320:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d12e      	bne.n	800a38e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	e853 3f00 	ldrex	r3, [r3]
 800a342:	60bb      	str	r3, [r7, #8]
   return(result);
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	f023 0310 	bic.w	r3, r3, #16
 800a34a:	647b      	str	r3, [r7, #68]	; 0x44
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	461a      	mov	r2, r3
 800a352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a354:	61bb      	str	r3, [r7, #24]
 800a356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a358:	6979      	ldr	r1, [r7, #20]
 800a35a:	69ba      	ldr	r2, [r7, #24]
 800a35c:	e841 2300 	strex	r3, r2, [r1]
 800a360:	613b      	str	r3, [r7, #16]
   return(result);
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1e6      	bne.n	800a336 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	69db      	ldr	r3, [r3, #28]
 800a36e:	f003 0310 	and.w	r3, r3, #16
 800a372:	2b10      	cmp	r3, #16
 800a374:	d103      	bne.n	800a37e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2210      	movs	r2, #16
 800a37c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a384:	4619      	mov	r1, r3
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7ff f9d4 	bl	8009734 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a38c:	e00b      	b.n	800a3a6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7f7 f99a 	bl	80016c8 <HAL_UART_RxCpltCallback>
}
 800a394:	e007      	b.n	800a3a6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	699a      	ldr	r2, [r3, #24]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f042 0208 	orr.w	r2, r2, #8
 800a3a4:	619a      	str	r2, [r3, #24]
}
 800a3a6:	bf00      	nop
 800a3a8:	3758      	adds	r7, #88	; 0x58
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3ae:	b480      	push	{r7}
 800a3b0:	b083      	sub	sp, #12
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3b6:	bf00      	nop
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
	...

0800a3c4 <__libc_init_array>:
 800a3c4:	b570      	push	{r4, r5, r6, lr}
 800a3c6:	4d0d      	ldr	r5, [pc, #52]	; (800a3fc <__libc_init_array+0x38>)
 800a3c8:	4c0d      	ldr	r4, [pc, #52]	; (800a400 <__libc_init_array+0x3c>)
 800a3ca:	1b64      	subs	r4, r4, r5
 800a3cc:	10a4      	asrs	r4, r4, #2
 800a3ce:	2600      	movs	r6, #0
 800a3d0:	42a6      	cmp	r6, r4
 800a3d2:	d109      	bne.n	800a3e8 <__libc_init_array+0x24>
 800a3d4:	4d0b      	ldr	r5, [pc, #44]	; (800a404 <__libc_init_array+0x40>)
 800a3d6:	4c0c      	ldr	r4, [pc, #48]	; (800a408 <__libc_init_array+0x44>)
 800a3d8:	f000 f834 	bl	800a444 <_init>
 800a3dc:	1b64      	subs	r4, r4, r5
 800a3de:	10a4      	asrs	r4, r4, #2
 800a3e0:	2600      	movs	r6, #0
 800a3e2:	42a6      	cmp	r6, r4
 800a3e4:	d105      	bne.n	800a3f2 <__libc_init_array+0x2e>
 800a3e6:	bd70      	pop	{r4, r5, r6, pc}
 800a3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ec:	4798      	blx	r3
 800a3ee:	3601      	adds	r6, #1
 800a3f0:	e7ee      	b.n	800a3d0 <__libc_init_array+0xc>
 800a3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3f6:	4798      	blx	r3
 800a3f8:	3601      	adds	r6, #1
 800a3fa:	e7f2      	b.n	800a3e2 <__libc_init_array+0x1e>
 800a3fc:	0800a5ec 	.word	0x0800a5ec
 800a400:	0800a5ec 	.word	0x0800a5ec
 800a404:	0800a5ec 	.word	0x0800a5ec
 800a408:	0800a5f0 	.word	0x0800a5f0

0800a40c <memset>:
 800a40c:	4402      	add	r2, r0
 800a40e:	4603      	mov	r3, r0
 800a410:	4293      	cmp	r3, r2
 800a412:	d100      	bne.n	800a416 <memset+0xa>
 800a414:	4770      	bx	lr
 800a416:	f803 1b01 	strb.w	r1, [r3], #1
 800a41a:	e7f9      	b.n	800a410 <memset+0x4>

0800a41c <strncpy>:
 800a41c:	b510      	push	{r4, lr}
 800a41e:	3901      	subs	r1, #1
 800a420:	4603      	mov	r3, r0
 800a422:	b132      	cbz	r2, 800a432 <strncpy+0x16>
 800a424:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a428:	f803 4b01 	strb.w	r4, [r3], #1
 800a42c:	3a01      	subs	r2, #1
 800a42e:	2c00      	cmp	r4, #0
 800a430:	d1f7      	bne.n	800a422 <strncpy+0x6>
 800a432:	441a      	add	r2, r3
 800a434:	2100      	movs	r1, #0
 800a436:	4293      	cmp	r3, r2
 800a438:	d100      	bne.n	800a43c <strncpy+0x20>
 800a43a:	bd10      	pop	{r4, pc}
 800a43c:	f803 1b01 	strb.w	r1, [r3], #1
 800a440:	e7f9      	b.n	800a436 <strncpy+0x1a>
	...

0800a444 <_init>:
 800a444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a446:	bf00      	nop
 800a448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44a:	bc08      	pop	{r3}
 800a44c:	469e      	mov	lr, r3
 800a44e:	4770      	bx	lr

0800a450 <_fini>:
 800a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a452:	bf00      	nop
 800a454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a456:	bc08      	pop	{r3}
 800a458:	469e      	mov	lr, r3
 800a45a:	4770      	bx	lr
